# Generated from MySQLParser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

/*
 * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

if __name__ is not None and "." in __name__:
    from .MySQLBaseRecognizer import MySQLBaseRecognizer
else:
    from MySQLBaseRecognizer import MySQLBaseRecognizer


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0328")
        buf.write("\u20e3\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175")
        buf.write("\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179")
        buf.write("\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c")
        buf.write("\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180")
        buf.write("\t\u0180\4\u0181\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183")
        buf.write("\4\u0184\t\u0184\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187")
        buf.write("\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a")
        buf.write("\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e")
        buf.write("\t\u018e\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191")
        buf.write("\4\u0192\t\u0192\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195")
        buf.write("\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197\4\u0198\t\u0198")
        buf.write("\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c")
        buf.write("\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f")
        buf.write("\4\u01a0\t\u01a0\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3")
        buf.write("\t\u01a3\4\u01a4\t\u01a4\4\u01a5\t\u01a5\4\u01a6\t\u01a6")
        buf.write("\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9\4\u01aa")
        buf.write("\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad")
        buf.write("\4\u01ae\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1")
        buf.write("\t\u01b1\4\u01b2\t\u01b2\4\u01b3\t\u01b3\4\u01b4\t\u01b4")
        buf.write("\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7\t\u01b7\4\u01b8")
        buf.write("\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb")
        buf.write("\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf")
        buf.write("\t\u01bf\4\u01c0\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2")
        buf.write("\4\u01c3\t\u01c3\4\u01c4\t\u01c4\4\u01c5\t\u01c5\4\u01c6")
        buf.write("\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9\t\u01c9")
        buf.write("\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd")
        buf.write("\t\u01cd\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0")
        buf.write("\4\u01d1\t\u01d1\4\u01d2\t\u01d2\4\u01d3\t\u01d3\4\u01d4")
        buf.write("\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6\4\u01d7\t\u01d7")
        buf.write("\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db")
        buf.write("\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de")
        buf.write("\4\u01df\t\u01df\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2")
        buf.write("\t\u01e2\4\u01e3\t\u01e3\4\u01e4\t\u01e4\4\u01e5\t\u01e5")
        buf.write("\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8\4\u01e9")
        buf.write("\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec")
        buf.write("\4\u01ed\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0")
        buf.write("\t\u01f0\4\u01f1\t\u01f1\4\u01f2\t\u01f2\4\u01f3\t\u01f3")
        buf.write("\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6\t\u01f6\4\u01f7")
        buf.write("\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa")
        buf.write("\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe")
        buf.write("\t\u01fe\4\u01ff\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201")
        buf.write("\4\u0202\t\u0202\4\u0203\t\u0203\4\u0204\t\u0204\4\u0205")
        buf.write("\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208\t\u0208")
        buf.write("\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c")
        buf.write("\t\u020c\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f")
        buf.write("\4\u0210\t\u0210\4\u0211\t\u0211\4\u0212\t\u0212\4\u0213")
        buf.write("\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215\4\u0216\t\u0216")
        buf.write("\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a")
        buf.write("\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d")
        buf.write("\4\u021e\t\u021e\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221")
        buf.write("\t\u0221\4\u0222\t\u0222\4\u0223\t\u0223\4\u0224\t\u0224")
        buf.write("\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227\4\u0228")
        buf.write("\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b")
        buf.write("\4\u022c\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f")
        buf.write("\t\u022f\4\u0230\t\u0230\4\u0231\t\u0231\4\u0232\t\u0232")
        buf.write("\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235\t\u0235\4\u0236")
        buf.write("\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239")
        buf.write("\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d")
        buf.write("\t\u023d\4\u023e\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240")
        buf.write("\4\u0241\t\u0241\4\u0242\t\u0242\4\u0243\t\u0243\4\u0244")
        buf.write("\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247\t\u0247")
        buf.write("\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b")
        buf.write("\t\u024b\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e")
        buf.write("\4\u024f\t\u024f\4\u0250\t\u0250\4\u0251\t\u0251\4\u0252")
        buf.write("\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254\4\u0255\t\u0255")
        buf.write("\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259")
        buf.write("\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c")
        buf.write("\4\u025d\t\u025d\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260")
        buf.write("\t\u0260\4\u0261\t\u0261\4\u0262\t\u0262\4\u0263\t\u0263")
        buf.write("\3\2\3\2\3\2\5\2\u04ca\n\2\3\2\3\2\5\2\u04ce\n\2\3\2\5")
        buf.write("\2\u04d1\n\2\5\2\u04d3\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\5\3\u04f7\n\3\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u04ff\n\4\3")
        buf.write("\4\3\4\3\4\5\4\u0504\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0514\n\4\3\5\3\5\3\5\6")
        buf.write("\5\u0519\n\5\r\5\16\5\u051a\3\5\3\5\3\5\3\5\3\5\5\5\u0522")
        buf.write("\n\5\3\6\5\6\u0525\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u052c\n")
        buf.write("\6\3\6\3\6\3\6\5\6\u0531\n\6\3\6\5\6\u0534\n\6\3\6\3\6")
        buf.write("\3\6\5\6\u0539\n\6\3\6\3\6\3\6\3\6\5\6\u053f\n\6\5\6\u0541")
        buf.write("\n\6\3\6\3\6\5\6\u0545\n\6\3\6\3\6\5\6\u0549\n\6\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\5\7\u0552\n\7\3\b\3\b\5\b\u0556")
        buf.write("\n\b\3\b\7\b\u0559\n\b\f\b\16\b\u055c\13\b\3\t\3\t\3\t")
        buf.write("\5\t\u0561\n\t\3\n\3\n\3\n\3\n\3\13\5\13\u0568\n\13\3")
        buf.write("\13\3\13\5\13\u056c\n\13\3\13\3\13\3\13\5\13\u0571\n\13")
        buf.write("\3\f\3\f\3\f\5\f\u0576\n\f\3\f\3\f\3\f\3\f\3\f\5\f\u057d")
        buf.write("\n\f\3\f\5\f\u0580\n\f\3\r\3\r\3\r\3\r\5\r\u0586\n\r\3")
        buf.write("\r\5\r\u0589\n\r\3\16\3\16\3\16\7\16\u058e\n\16\f\16\16")
        buf.write("\16\u0591\13\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u059a\n\17\3\20\3\20\3\20\5\20\u059f\n\20\3\20\3\20\3")
        buf.write("\20\5\20\u05a4\n\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20")
        buf.write("\u05ac\n\20\3\20\3\20\3\20\3\20\5\20\u05b2\n\20\3\20\3")
        buf.write("\20\5\20\u05b6\n\20\3\20\3\20\3\20\5\20\u05bb\n\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\7\20\u05c2\n\20\f\20\16\20\u05c5")
        buf.write("\13\20\3\20\3\20\3\20\5\20\u05ca\n\20\3\20\3\20\7\20\u05ce")
        buf.write("\n\20\f\20\16\20\u05d1\13\20\3\20\3\20\3\20\5\20\u05d6")
        buf.write("\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u05df\n")
        buf.write("\20\3\20\3\20\3\20\3\20\5\20\u05e5\n\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\5\20\u05ee\n\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u05fc")
        buf.write("\n\20\3\21\3\21\5\21\u0600\n\21\3\21\3\21\3\21\3\21\5")
        buf.write("\21\u0606\n\21\7\21\u0608\n\21\f\21\16\21\u060b\13\21")
        buf.write("\3\22\3\22\3\22\5\22\u0610\n\22\3\23\3\23\5\23\u0614\n")
        buf.write("\23\3\23\3\23\3\23\5\23\u0619\n\23\3\23\5\23\u061c\n\23")
        buf.write("\3\23\3\23\3\23\3\23\5\23\u0622\n\23\3\23\3\23\3\23\3")
        buf.write("\23\5\23\u0628\n\23\3\23\3\23\3\23\3\23\5\23\u062e\n\23")
        buf.write("\3\23\3\23\5\23\u0632\n\23\3\23\3\23\3\23\5\23\u0637\n")
        buf.write("\23\3\23\3\23\5\23\u063b\n\23\3\23\3\23\5\23\u063f\n\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0647\n\23\5\23\u0649")
        buf.write("\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\5\23\u0656\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5")
        buf.write("\23\u065e\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0666")
        buf.write("\n\23\3\23\3\23\5\23\u066a\n\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\5\23\u0687\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0697\n\23")
        buf.write("\3\23\5\23\u069a\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\5\23\u06a3\n\23\3\24\3\24\3\24\5\24\u06a8\n\24\3\25")
        buf.write("\3\25\3\26\3\26\5\26\u06ae\n\26\3\26\3\26\3\26\5\26\u06b3")
        buf.write("\n\26\7\26\u06b5\n\26\f\26\16\26\u06b8\13\26\3\27\3\27")
        buf.write("\5\27\u06bc\n\27\3\27\3\27\5\27\u06c0\n\27\3\30\3\30\5")
        buf.write("\30\u06c4\n\30\3\30\3\30\5\30\u06c8\n\30\3\31\3\31\5\31")
        buf.write("\u06cc\n\31\3\31\3\31\5\31\u06d0\n\31\5\31\u06d2\n\31")
        buf.write("\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\5\34\u06dd")
        buf.write("\n\34\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u06e5\n\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u06ee\n\35\3\35")
        buf.write("\7\35\u06f1\n\35\f\35\16\35\u06f4\13\35\5\35\u06f6\n\35")
        buf.write("\3\35\3\35\3\35\5\35\u06fb\n\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\5\35\u0702\n\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u070a\n\36\3\37\3\37\5\37\u070e\n\37\3\37\7\37\u0711")
        buf.write("\n\37\f\37\16\37\u0714\13\37\3 \3 \3!\3!\5!\u071a\n!\3")
        buf.write("!\7!\u071d\n!\f!\16!\u0720\13!\3\"\3\"\5\"\u0724\n\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\5\"\u072c\n\"\3#\3#\5#\u0730\n")
        buf.write("#\3#\3#\3#\5#\u0735\n#\3$\5$\u0738\n$\3$\5$\u073b\n$\3")
        buf.write("$\5$\u073e\n$\3$\3$\3$\3$\3%\5%\u0745\n%\3%\3%\3%\3&\3")
        buf.write("&\5&\u074c\n&\3\'\3\'\5\'\u0750\n\'\3\'\3\'\3\'\3(\3(")
        buf.write("\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5")
        buf.write("(\u0768\n(\3)\3)\5)\u076c\n)\3)\3)\7)\u0770\n)\f)\16)")
        buf.write("\u0773\13)\3*\3*\3*\3*\5*\u0779\n*\3+\5+\u077c\n+\3+\3")
        buf.write("+\5+\u0780\n+\3+\3+\3+\3+\3+\5+\u0787\n+\3+\5+\u078a\n")
        buf.write("+\3+\5+\u078d\n+\3+\5+\u0790\n+\3+\3+\3+\3+\3+\3+\3+\5")
        buf.write("+\u0799\n+\3,\3,\3,\7,\u079e\n,\f,\16,\u07a1\13,\3-\3")
        buf.write("-\5-\u07a5\n-\3.\5.\u07a8\n.\3.\5.\u07ab\n.\3.\3.\3/\3")
        buf.write("/\5/\u07b1\n/\3\60\3\60\3\60\3\60\5\60\u07b7\n\60\3\60")
        buf.write("\5\60\u07ba\n\60\3\60\3\60\3\61\5\61\u07bf\n\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\7\61\u07c7\n\61\f\61\16\61\u07ca")
        buf.write("\13\61\5\61\u07cc\n\61\3\61\3\61\7\61\u07d0\n\61\f\61")
        buf.write("\16\61\u07d3\13\61\3\61\3\61\3\62\5\62\u07d8\n\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\7\62\u07e0\n\62\f\62\16\62\u07e3")
        buf.write("\13\62\5\62\u07e5\n\62\3\62\3\62\3\62\3\62\7\62\u07eb")
        buf.write("\n\62\f\62\16\62\u07ee\13\62\3\62\3\62\3\63\5\63\u07f3")
        buf.write("\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\64\3\64\5\64")
        buf.write("\u07fe\n\64\3\64\5\64\u0801\n\64\3\65\6\65\u0804\n\65")
        buf.write("\r\65\16\65\u0805\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66")
        buf.write("\u0819\n\66\3\67\5\67\u081c\n\67\3\67\5\67\u081f\n\67")
        buf.write("\3\67\3\67\3\67\3\67\5\67\u0825\n\67\3\67\5\67\u0828\n")
        buf.write("\67\5\67\u082a\n\67\3\67\3\67\7\67\u082e\n\67\f\67\16")
        buf.write("\67\u0831\13\67\3\67\3\67\3\67\3\67\3\67\7\67\u0838\n")
        buf.write("\67\f\67\16\67\u083b\13\67\3\67\3\67\3\67\3\67\3\67\7")
        buf.write("\67\u0842\n\67\f\67\16\67\u0845\13\67\5\67\u0847\n\67")
        buf.write("\3\67\5\67\u084a\n\67\38\38\38\58\u084f\n8\38\38\38\3")
        buf.write("8\58\u0855\n8\39\39\39\39\3:\3:\3:\3:\3:\3:\3:\5:\u0862")
        buf.write("\n:\3;\3;\5;\u0866\n;\3;\7;\u0869\n;\f;\16;\u086c\13;")
        buf.write("\3<\3<\3<\3<\3<\3<\5<\u0874\n<\3=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\3>\3>\3>\3>\3>\7>\u0883\n>\f>\16>\u0886\13>\3>\3>\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0898\n?\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\5@\u08a1\n@\3@\5@\u08a4\n@\3A\3A\3")
        buf.write("A\3A\3A\3A\5A\u08ac\nA\3B\3B\3B\5B\u08b1\nB\3B\3B\5B\u08b5")
        buf.write("\nB\3C\3C\3C\3D\3D\5D\u08bc\nD\3D\7D\u08bf\nD\fD\16D\u08c2")
        buf.write("\13D\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u08d0\nE\3")
        buf.write("F\3F\5F\u08d4\nF\3F\3F\3G\3G\5G\u08da\nG\3G\3G\3H\3H\5")
        buf.write("H\u08e0\nH\3H\3H\3I\3I\5I\u08e6\nI\3I\3I\3J\3J\5J\u08ec")
        buf.write("\nJ\3J\3J\3K\3K\5K\u08f2\nK\3K\3K\3L\5L\u08f7\nL\3L\3")
        buf.write("L\5L\u08fb\nL\3L\3L\3M\3M\3N\3N\5N\u0903\nN\3N\3N\3O\3")
        buf.write("O\5O\u0909\nO\3O\3O\3P\3P\5P\u090f\nP\3P\3P\3Q\5Q\u0914")
        buf.write("\nQ\3Q\5Q\u0917\nQ\3Q\5Q\u091a\nQ\3Q\3Q\3Q\3Q\3R\3R\3")
        buf.write("R\5R\u0923\nR\3R\5R\u0926\nR\3S\3S\3S\3S\3T\3T\3T\3T\3")
        buf.write("U\5U\u0931\nU\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u093d\n")
        buf.write("U\3U\3U\3V\3V\3V\3V\3W\5W\u0946\nW\3W\3W\5W\u094a\nW\3")
        buf.write("W\3W\3W\3W\3W\3W\3W\5W\u0953\nW\3W\5W\u0956\nW\3W\3W\3")
        buf.write("W\3W\5W\u095c\nW\5W\u095e\nW\3W\3W\5W\u0962\nW\3W\3W\3")
        buf.write("W\3X\3X\5X\u0969\nX\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\7Y\u0974")
        buf.write("\nY\fY\16Y\u0977\13Y\3Y\3Y\3Y\3Y\5Y\u097d\nY\3Y\3Y\7Y")
        buf.write("\u0981\nY\fY\16Y\u0984\13Y\5Y\u0986\nY\3Z\3Z\3Z\3Z\3Z")
        buf.write("\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0997\nZ\3[\3[\3[\3")
        buf.write("[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\5[\u09ab\n")
        buf.write("[\3\\\3\\\5\\\u09af\n\\\3\\\3\\\3]\3]\5]\u09b5\n]\3]\3")
        buf.write("]\3^\3^\5^\u09bb\n^\3^\3^\3_\3_\5_\u09c1\n_\3_\3_\3`\5")
        buf.write("`\u09c6\n`\3`\3`\3`\3`\3`\5`\u09cd\n`\3a\3a\3a\3a\3a\5")
        buf.write("a\u09d4\na\3a\7a\u09d7\na\fa\16a\u09da\13a\5a\u09dc\n")
        buf.write("a\3b\3b\5b\u09e0\nb\3c\3c\5c\u09e4\nc\3c\3c\3d\5d\u09e9")
        buf.write("\nd\3d\3d\5d\u09ed\nd\3d\3d\5d\u09f1\nd\3e\3e\3e\3e\5")
        buf.write("e\u09f7\ne\3e\7e\u09fa\ne\fe\16e\u09fd\13e\5e\u09ff\n")
        buf.write("e\3f\3f\5f\u0a03\nf\3f\3f\3g\3g\5g\u0a09\ng\3g\3g\5g\u0a0d")
        buf.write("\ng\3h\3h\5h\u0a11\nh\3h\3h\3i\3i\3i\3i\5i\u0a19\ni\3")
        buf.write("i\3i\3j\3j\3j\3j\5j\u0a21\nj\3k\3k\3k\3k\3k\7k\u0a28\n")
        buf.write("k\fk\16k\u0a2b\13k\3l\3l\3l\3l\3m\3m\5m\u0a33\nm\3m\3")
        buf.write("m\3n\3n\3n\3n\3n\3o\3o\3o\3o\5o\u0a40\no\3o\5o\u0a43\n")
        buf.write("o\3p\3p\5p\u0a47\np\3p\3p\7p\u0a4b\np\fp\16p\u0a4e\13")
        buf.write("p\3p\3p\3p\3p\3p\5p\u0a55\np\3p\3p\3p\5p\u0a5a\np\3p\5")
        buf.write("p\u0a5d\np\3p\5p\u0a60\np\3p\5p\u0a63\np\3p\5p\u0a66\n")
        buf.write("p\5p\u0a68\np\3p\3p\3p\3p\5p\u0a6e\np\5p\u0a70\np\3q\3")
        buf.write("q\3q\3q\3q\3q\3r\3r\3s\3s\3s\3s\3s\5s\u0a7f\ns\3t\3t\3")
        buf.write("t\3t\5t\u0a85\nt\3t\3t\3t\3t\3t\5t\u0a8c\nt\3t\5t\u0a8f")
        buf.write("\nt\5t\u0a91\nt\5t\u0a93\nt\3u\3u\3u\3u\3u\3u\3u\3u\5")
        buf.write("u\u0a9d\nu\5u\u0a9f\nu\3v\3v\5v\u0aa3\nv\3v\5v\u0aa6\n")
        buf.write("v\3v\5v\u0aa9\nv\3v\3v\5v\u0aad\nv\3v\3v\3v\5v\u0ab2\n")
        buf.write("v\3v\3v\3v\3v\5v\u0ab8\nv\3v\5v\u0abb\nv\3v\5v\u0abe\n")
        buf.write("v\3w\3w\3x\3x\5x\u0ac4\nx\3x\5x\u0ac7\nx\3x\3x\3y\3y\3")
        buf.write("y\7y\u0ace\ny\fy\16y\u0ad1\13y\3z\3z\3z\3{\3{\3{\5{\u0ad9")
        buf.write("\n{\3{\3{\5{\u0add\n{\3|\3|\5|\u0ae1\n|\3|\3|\3|\3|\5")
        buf.write("|\u0ae7\n|\3|\7|\u0aea\n|\f|\16|\u0aed\13|\3}\3}\5}\u0af1")
        buf.write("\n}\3}\3}\3}\5}\u0af6\n}\7}\u0af8\n}\f}\16}\u0afb\13}")
        buf.write("\3~\3~\3~\5~\u0b00\n~\3\177\3\177\3\177\3\177\3\177\3")
        buf.write("\177\3\u0080\3\u0080\3\u0080\5\u0080\u0b0b\n\u0080\3\u0080")
        buf.write("\5\u0080\u0b0e\n\u0080\3\u0080\3\u0080\3\u0080\5\u0080")
        buf.write("\u0b13\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080")
        buf.write("\u0b19\n\u0080\3\u0080\5\u0080\u0b1c\n\u0080\3\u0080\5")
        buf.write("\u0080\u0b1f\n\u0080\3\u0080\5\u0080\u0b22\n\u0080\3\u0080")
        buf.write("\5\u0080\u0b25\n\u0080\3\u0080\3\u0080\3\u0081\3\u0081")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0083\3\u0083")
        buf.write("\3\u0083\5\u0083\u0b33\n\u0083\3\u0083\5\u0083\u0b36\n")
        buf.write("\u0083\3\u0083\3\u0083\5\u0083\u0b3a\n\u0083\3\u0084\3")
        buf.write("\u0084\5\u0084\u0b3e\n\u0084\3\u0084\3\u0084\3\u0085\3")
        buf.write("\u0085\5\u0085\u0b44\n\u0085\3\u0085\3\u0085\3\u0085\5")
        buf.write("\u0085\u0b49\n\u0085\7\u0085\u0b4b\n\u0085\f\u0085\16")
        buf.write("\u0085\u0b4e\13\u0085\3\u0086\3\u0086\5\u0086\u0b52\n")
        buf.write("\u0086\3\u0086\5\u0086\u0b55\n\u0086\3\u0086\3\u0086\5")
        buf.write("\u0086\u0b59\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5")
        buf.write("\u0086\u0b5f\n\u0086\3\u0087\3\u0087\5\u0087\u0b63\n\u0087")
        buf.write("\3\u0087\3\u0087\5\u0087\u0b67\n\u0087\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0b70")
        buf.write("\n\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0b75\n\u0088")
        buf.write("\3\u0089\3\u0089\5\u0089\u0b79\n\u0089\3\u0089\3\u0089")
        buf.write("\5\u0089\u0b7d\n\u0089\3\u0089\5\u0089\u0b80\n\u0089\3")
        buf.write("\u0089\3\u0089\5\u0089\u0b84\n\u0089\3\u0089\5\u0089\u0b87")
        buf.write("\n\u0089\5\u0089\u0b89\n\u0089\3\u0089\3\u0089\5\u0089")
        buf.write("\u0b8d\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a")
        buf.write("\u0b93\n\u008a\3\u008a\3\u008a\5\u008a\u0b97\n\u008a\5")
        buf.write("\u008a\u0b99\n\u008a\3\u008a\3\u008a\5\u008a\u0b9d\n\u008a")
        buf.write("\3\u008a\3\u008a\5\u008a\u0ba1\n\u008a\7\u008a\u0ba3\n")
        buf.write("\u008a\f\u008a\16\u008a\u0ba6\13\u008a\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\5\u008b\u0bac\n\u008b\5\u008b\u0bae\n")
        buf.write("\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\5\u008c\u0bb7\n\u008c\3\u008d\3\u008d\7\u008d")
        buf.write("\u0bbb\n\u008d\f\u008d\16\u008d\u0bbe\13\u008d\3\u008d")
        buf.write("\3\u008d\5\u008d\u0bc2\n\u008d\3\u008d\5\u008d\u0bc5\n")
        buf.write("\u008d\3\u008d\5\u008d\u0bc8\n\u008d\3\u008d\5\u008d\u0bcb")
        buf.write("\n\u008d\3\u008d\5\u008d\u0bce\n\u008d\3\u008d\3\u008d")
        buf.write("\5\u008d\u0bd2\n\u008d\3\u008e\3\u008e\3\u008f\3\u008f")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0092")
        buf.write("\3\u0092\3\u0092\5\u0092\u0be1\n\u0092\3\u0093\3\u0093")
        buf.write("\5\u0093\u0be5\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\5\u0094\u0beb\n\u0094\3\u0094\5\u0094\u0bee\n\u0094\3")
        buf.write("\u0094\5\u0094\u0bf1\n\u0094\3\u0094\3\u0094\3\u0094\3")
        buf.write("\u0094\5\u0094\u0bf7\n\u0094\3\u0094\3\u0094\3\u0094\5")
        buf.write("\u0094\u0bfc\n\u0094\7\u0094\u0bfe\n\u0094\f\u0094\16")
        buf.write("\u0094\u0c01\13\u0094\5\u0094\u0c03\n\u0094\3\u0095\3")
        buf.write("\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0c0b\n")
        buf.write("\u0095\5\u0095\u0c0d\n\u0095\3\u0095\3\u0095\3\u0096\3")
        buf.write("\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097")
        buf.write("\u0c18\n\u0097\f\u0097\16\u0097\u0c1b\13\u0097\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u009a\5\u009a\u0c26\n\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\5\u009a\u0c2b\n\u009a\3\u009a\5\u009a\u0c2e\n\u009a\3")
        buf.write("\u009a\5\u009a\u0c31\n\u009a\3\u009b\3\u009b\3\u009b\5")
        buf.write("\u009b\u0c36\n\u009b\3\u009c\3\u009c\3\u009d\3\u009d\5")
        buf.write("\u009d\u0c3c\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3")
        buf.write("\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\5\u009e\u0c4c\n\u009e\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0c60\n\u00a0\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1")
        buf.write("\u0c69\n\u00a1\3\u00a2\3\u00a2\5\u00a2\u0c6d\n\u00a2\3")
        buf.write("\u00a2\3\u00a2\3\u00a2\7\u00a2\u0c72\n\u00a2\f\u00a2\16")
        buf.write("\u00a2\u0c75\13\u00a2\3\u00a3\3\u00a3\5\u00a3\u0c79\n")
        buf.write("\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\5\u00a4\u0c82\n\u00a4\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\5\u00a5\u0c89\n\u00a5\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\5\u00a8\u0c94\n\u00a8\3\u00a9\3\u00a9\3\u00a9\7\u00a9")
        buf.write("\u0c99\n\u00a9\f\u00a9\16\u00a9\u0c9c\13\u00a9\3\u00aa")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u0ca2\n\u00aa\f\u00aa")
        buf.write("\16\u00aa\u0ca5\13\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\5\u00ac\u0cad\n\u00ac\3\u00ac\3\u00ac")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\5\u00ad\u0cb9\n\u00ad\3\u00ae\6\u00ae\u0cbc\n")
        buf.write("\u00ae\r\u00ae\16\u00ae\u0cbd\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\5\u00af\u0cc5\n\u00af\3\u00af\3\u00af")
        buf.write("\5\u00af\u0cc9\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\5\u00af\u0ccf\n\u00af\3\u00b0\3\u00b0\3\u00b0\5\u00b0")
        buf.write("\u0cd4\n\u00b0\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0cd9\n")
        buf.write("\u00b1\3\u00b2\3\u00b2\5\u00b2\u0cdd\n\u00b2\3\u00b2\3")
        buf.write("\u00b2\7\u00b2\u0ce1\n\u00b2\f\u00b2\16\u00b2\u0ce4\13")
        buf.write("\u00b2\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0ce9\n\u00b3\5")
        buf.write("\u00b3\u0ceb\n\u00b3\3\u00b4\5\u00b4\u0cee\n\u00b4\3\u00b4")
        buf.write("\3\u00b4\5\u00b4\u0cf2\n\u00b4\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0cfc")
        buf.write("\n\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0d01\n\u00b6")
        buf.write("\3\u00b6\7\u00b6\u0d04\n\u00b6\f\u00b6\16\u00b6\u0d07")
        buf.write("\13\u00b6\3\u00b7\3\u00b7\7\u00b7\u0d0b\n\u00b7\f\u00b7")
        buf.write("\16\u00b7\u0d0e\13\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\5\u00b8\u0d16\n\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0d1e\n\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0d23\n\u00b8\3\u00b9")
        buf.write("\3\u00b9\5\u00b9\u0d27\n\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\3\u00b9\5\u00b9\u0d2d\n\u00b9\3\u00b9\5\u00b9\u0d30\n")
        buf.write("\u00b9\3\u00ba\5\u00ba\u0d33\n\u00ba\3\u00ba\3\u00ba\5")
        buf.write("\u00ba\u0d37\n\u00ba\3\u00bb\3\u00bb\5\u00bb\u0d3b\n\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\5\u00bc\u0d45\n\u00bc\3\u00bd\3\u00bd\5\u00bd")
        buf.write("\u0d49\n\u00bd\3\u00bd\5\u00bd\u0d4c\n\u00bd\3\u00bd\5")
        buf.write("\u00bd\u0d4f\n\u00bd\3\u00be\3\u00be\3\u00be\5\u00be\u0d54")
        buf.write("\n\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\5\u00bf\u0d5a")
        buf.write("\n\u00bf\3\u00bf\3\u00bf\5\u00bf\u0d5e\n\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0d64\n\u00bf\3\u00bf")
        buf.write("\5\u00bf\u0d67\n\u00bf\5\u00bf\u0d69\n\u00bf\3\u00c0\3")
        buf.write("\u00c0\3\u00c0\5\u00c0\u0d6e\n\u00c0\3\u00c0\3\u00c0\3")
        buf.write("\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1")
        buf.write("\3\u00c1\5\u00c1\u0d7a\n\u00c1\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\7\u00c2\u0d81\n\u00c2\f\u00c2\16\u00c2")
        buf.write("\u0d84\13\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0d90")
        buf.write("\n\u00c3\3\u00c3\5\u00c3\u0d93\n\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\5\u00c3\u0d98\n\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\5\u00c3\u0d9f\n\u00c3\3\u00c4\3\u00c4")
        buf.write("\5\u00c4\u0da3\n\u00c4\3\u00c4\3\u00c4\5\u00c4\u0da7\n")
        buf.write("\u00c4\5\u00c4\u0da9\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3")
        buf.write("\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\5\u00c7\u0db7\n\u00c7\3\u00c8\3\u00c8")
        buf.write("\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u0dbe\n\u00c9\3\u00c9")
        buf.write("\3\u00c9\3\u00ca\3\u00ca\3\u00ca\7\u00ca\u0dc5\n\u00ca")
        buf.write("\f\u00ca\16\u00ca\u0dc8\13\u00ca\3\u00cb\3\u00cb\3\u00cb")
        buf.write("\5\u00cb\u0dcd\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0dd6\n\u00cb\3\u00cb")
        buf.write("\3\u00cb\5\u00cb\u0dda\n\u00cb\3\u00cb\3\u00cb\5\u00cb")
        buf.write("\u0dde\n\u00cb\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0de8\n\u00ce\5\u00ce")
        buf.write("\u0dea\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\5\u00cf\u0df2\n\u00cf\3\u00d0\3\u00d0\3\u00d0")
        buf.write("\7\u00d0\u0df7\n\u00d0\f\u00d0\16\u00d0\u0dfa\13\u00d0")
        buf.write("\3\u00d1\3\u00d1\5\u00d1\u0dfe\n\u00d1\3\u00d2\3\u00d2")
        buf.write("\5\u00d2\u0e02\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u0e06\n")
        buf.write("\u00d2\3\u00d2\5\u00d2\u0e09\n\u00d2\3\u00d2\3\u00d2\3")
        buf.write("\u00d2\3\u00d2\5\u00d2\u0e0f\n\u00d2\3\u00d2\5\u00d2\u0e12")
        buf.write("\n\u00d2\3\u00d2\5\u00d2\u0e15\n\u00d2\3\u00d3\3\u00d3")
        buf.write("\3\u00d3\3\u00d3\5\u00d3\u0e1b\n\u00d3\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\7\u00d4\u0e20\n\u00d4\f\u00d4\16\u00d4\u0e23")
        buf.write("\13\u00d4\3\u00d4\3\u00d4\5\u00d4\u0e27\n\u00d4\3\u00d4")
        buf.write("\3\u00d4\5\u00d4\u0e2b\n\u00d4\3\u00d4\5\u00d4\u0e2e\n")
        buf.write("\u00d4\3\u00d4\5\u00d4\u0e31\n\u00d4\3\u00d4\5\u00d4\u0e34")
        buf.write("\n\u00d4\5\u00d4\u0e36\n\u00d4\3\u00d5\3\u00d5\5\u00d5")
        buf.write("\u0e3a\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\5\u00d6\u0e42\n\u00d6\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d7\5\u00d7\u0e48\n\u00d7\3\u00d7\3\u00d7\5\u00d7")
        buf.write("\u0e4c\n\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u0e51\n")
        buf.write("\u00d7\3\u00d7\5\u00d7\u0e54\n\u00d7\3\u00d7\5\u00d7\u0e57")
        buf.write("\n\u00d7\3\u00d7\5\u00d7\u0e5a\n\u00d7\5\u00d7\u0e5c\n")
        buf.write("\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u0e61\n\u00d7\3")
        buf.write("\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u0e68\n")
        buf.write("\u00d8\f\u00d8\16\u00d8\u0e6b\13\u00d8\3\u00d8\3\u00d8")
        buf.write("\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8")
        buf.write("\3\u00d8\5\u00d8\u0e77\n\u00d8\5\u00d8\u0e79\n\u00d8\3")
        buf.write("\u00d9\3\u00d9\5\u00d9\u0e7d\n\u00d9\3\u00d9\3\u00d9\3")
        buf.write("\u00da\3\u00da\5\u00da\u0e83\n\u00da\3\u00da\5\u00da\u0e86")
        buf.write("\n\u00da\3\u00da\5\u00da\u0e89\n\u00da\3\u00db\3\u00db")
        buf.write("\3\u00db\3\u00db\5\u00db\u0e8f\n\u00db\3\u00db\3\u00db")
        buf.write("\3\u00db\3\u00db\3\u00db\5\u00db\u0e96\n\u00db\5\u00db")
        buf.write("\u0e98\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db")
        buf.write("\3\u00db\5\u00db\u0ea0\n\u00db\3\u00db\3\u00db\3\u00db")
        buf.write("\3\u00db\5\u00db\u0ea6\n\u00db\3\u00dc\3\u00dc\3\u00dc")
        buf.write("\5\u00dc\u0eab\n\u00dc\3\u00dc\5\u00dc\u0eae\n\u00dc\3")
        buf.write("\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u0eb5\n")
        buf.write("\u00dd\5\u00dd\u0eb7\n\u00dd\3\u00de\3\u00de\3\u00de\3")
        buf.write("\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u0ec0\n\u00de\3")
        buf.write("\u00de\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de\u0ec7\n")
        buf.write("\u00de\f\u00de\16\u00de\u0eca\13\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u0ed2\n\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de")
        buf.write("\u0eda\n\u00de\3\u00df\3\u00df\5\u00df\u0ede\n\u00df\3")
        buf.write("\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0ee5\n")
        buf.write("\u00df\3\u00df\5\u00df\u0ee8\n\u00df\5\u00df\u0eea\n\u00df")
        buf.write("\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0")
        buf.write("\u0ef2\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1")
        buf.write("\u0ef8\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2")
        buf.write("\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0f02\n\u00e2\3\u00e3")
        buf.write("\3\u00e3\3\u00e3\7\u00e3\u0f07\n\u00e3\f\u00e3\16\u00e3")
        buf.write("\u0f0a\13\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\5\u00e4\u0f67\n\u00e4\3\u00e5\3\u00e5")
        buf.write("\5\u00e5\u0f6b\n\u00e5\3\u00e6\3\u00e6\3\u00e7\3\u00e7")
        buf.write("\5\u00e7\u0f71\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8")
        buf.write("\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8")
        buf.write("\3\u00e8\5\u00e8\u0f7f\n\u00e8\3\u00e9\3\u00e9\3\u00e9")
        buf.write("\3\u00e9\7\u00e9\u0f85\n\u00e9\f\u00e9\16\u00e9\u0f88")
        buf.write("\13\u00e9\5\u00e9\u0f8a\n\u00e9\3\u00e9\3\u00e9\3\u00ea")
        buf.write("\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\7\u00ea\u0f94")
        buf.write("\n\u00ea\f\u00ea\16\u00ea\u0f97\13\u00ea\3\u00ea\3\u00ea")
        buf.write("\5\u00ea\u0f9b\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\5\u00eb\u0fa1\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\5\u00eb\u0fa8\n\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\5\u00eb\u0faf\n\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0fb6\n\u00eb\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0fbd\n\u00eb")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0fc4")
        buf.write("\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb")
        buf.write("\u0fcb\n\u00eb\3\u00eb\5\u00eb\u0fce\n\u00eb\3\u00ec\3")
        buf.write("\u00ec\3\u00ec\7\u00ec\u0fd3\n\u00ec\f\u00ec\16\u00ec")
        buf.write("\u0fd6\13\u00ec\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u0fdb")
        buf.write("\n\u00ed\f\u00ed\16\u00ed\u0fde\13\u00ed\3\u00ee\3\u00ee")
        buf.write("\3\u00ee\7\u00ee\u0fe3\n\u00ee\f\u00ee\16\u00ee\u0fe6")
        buf.write("\13\u00ee\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0\7\u00f0")
        buf.write("\u0fed\n\u00f0\f\u00f0\16\u00f0\u0ff0\13\u00f0\3\u00f1")
        buf.write("\3\u00f1\3\u00f1\5\u00f1\u0ff5\n\u00f1\3\u00f1\3\u00f1")
        buf.write("\5\u00f1\u0ff9\n\u00f1\3\u00f1\3\u00f1\5\u00f1\u0ffd\n")
        buf.write("\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u1002\n\u00f1\3")
        buf.write("\u00f1\5\u00f1\u1005\n\u00f1\5\u00f1\u1007\n\u00f1\3\u00f2")
        buf.write("\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2")
        buf.write("\u1010\n\u00f2\3\u00f2\3\u00f2\7\u00f2\u1014\n\u00f2\f")
        buf.write("\u00f2\16\u00f2\u1017\13\u00f2\3\u00f3\3\u00f3\3\u00f3")
        buf.write("\3\u00f3\5\u00f3\u101d\n\u00f3\3\u00f3\3\u00f3\3\u00f3")
        buf.write("\5\u00f3\u1022\n\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3")
        buf.write("\u1027\n\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u102c\n")
        buf.write("\u00f3\3\u00f3\5\u00f3\u102f\n\u00f3\3\u00f4\3\u00f4\3")
        buf.write("\u00f4\7\u00f4\u1034\n\u00f4\f\u00f4\16\u00f4\u1037\13")
        buf.write("\u00f4\3\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f7")
        buf.write("\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1043\n\u00f7")
        buf.write("\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1049\n\u00f7")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u104f\n\u00f8")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\7\u00f9\u1054\n\u00f9\f\u00f9")
        buf.write("\16\u00f9\u1057\13\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\5\u00fa\u105e\n\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\5\u00fa\u1064\n\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\5\u00fa\u1070\n\u00fa\5\u00fa\u1072\n\u00fa\3\u00fb\3")
        buf.write("\u00fb\3\u00fb\3\u00fb\5\u00fb\u1078\n\u00fb\3\u00fb\3")
        buf.write("\u00fb\5\u00fb\u107c\n\u00fb\5\u00fb\u107e\n\u00fb\3\u00fc")
        buf.write("\3\u00fc\5\u00fc\u1082\n\u00fc\3\u00fc\3\u00fc\3\u00fd")
        buf.write("\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd")
        buf.write("\3\u00fd\5\u00fd\u108f\n\u00fd\3\u00fe\3\u00fe\3\u00fe")
        buf.write("\3\u00fe\5\u00fe\u1095\n\u00fe\3\u00fe\3\u00fe\3\u00ff")
        buf.write("\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u109d\n\u00ff\3\u00ff")
        buf.write("\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff")
        buf.write("\3\u00ff\5\u00ff\u10a8\n\u00ff\3\u00ff\3\u00ff\5\u00ff")
        buf.write("\u10ac\n\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff")
        buf.write("\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff")
        buf.write("\u10b9\n\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff")
        buf.write("\5\u00ff\u10c0\n\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff")
        buf.write("\5\u00ff\u10c6\n\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff")
        buf.write("\3\u00ff\5\u00ff\u10cd\n\u00ff\5\u00ff\u10cf\n\u00ff\3")
        buf.write("\u0100\3\u0100\3\u0100\3\u0101\3\u0101\3\u0101\3\u0101")
        buf.write("\3\u0101\5\u0101\u10d9\n\u0101\3\u0101\3\u0101\3\u0101")
        buf.write("\3\u0101\3\u0102\3\u0102\5\u0102\u10e1\n\u0102\3\u0102")
        buf.write("\5\u0102\u10e4\n\u0102\3\u0102\7\u0102\u10e7\n\u0102\f")
        buf.write("\u0102\16\u0102\u10ea\13\u0102\3\u0102\5\u0102\u10ed\n")
        buf.write("\u0102\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u10f3\n")
        buf.write("\u0103\3\u0103\5\u0103\u10f6\n\u0103\3\u0104\3\u0104\3")
        buf.write("\u0104\5\u0104\u10fb\n\u0104\3\u0105\3\u0105\3\u0105\3")
        buf.write("\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\6\u0105")
        buf.write("\u1106\n\u0105\r\u0105\16\u0105\u1107\3\u0106\3\u0106")
        buf.write("\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106")
        buf.write("\3\u0106\5\u0106\u1114\n\u0106\3\u0106\3\u0106\3\u0106")
        buf.write("\5\u0106\u1119\n\u0106\3\u0106\3\u0106\3\u0106\3\u0106")
        buf.write("\3\u0106\3\u0106\5\u0106\u1121\n\u0106\3\u0106\3\u0106")
        buf.write("\3\u0106\3\u0106\5\u0106\u1127\n\u0106\5\u0106\u1129\n")
        buf.write("\u0106\5\u0106\u112b\n\u0106\3\u0107\3\u0107\3\u0107\3")
        buf.write("\u0107\5\u0107\u1131\n\u0107\3\u0107\3\u0107\3\u0108\3")
        buf.write("\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108")
        buf.write("\5\u0108\u113d\n\u0108\3\u0108\3\u0108\3\u0108\5\u0108")
        buf.write("\u1142\n\u0108\5\u0108\u1144\n\u0108\3\u0108\3\u0108\5")
        buf.write("\u0108\u1148\n\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5")
        buf.write("\u0108\u114e\n\u0108\3\u0108\5\u0108\u1151\n\u0108\3\u0108")
        buf.write("\5\u0108\u1154\n\u0108\3\u0108\3\u0108\3\u0108\3\u0108")
        buf.write("\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u115e\n\u0108")
        buf.write("\5\u0108\u1160\n\u0108\3\u0109\3\u0109\3\u0109\3\u0109")
        buf.write("\5\u0109\u1166\n\u0109\3\u010a\3\u010a\3\u010a\6\u010a")
        buf.write("\u116b\n\u010a\r\u010a\16\u010a\u116c\3\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\5\u010a\u1173\n\u010a\3\u010b\3\u010b")
        buf.write("\3\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c")
        buf.write("\u117d\n\u010c\3\u010c\3\u010c\5\u010c\u1181\n\u010c\3")
        buf.write("\u010d\3\u010d\3\u010d\5\u010d\u1186\n\u010d\3\u010e\3")
        buf.write("\u010e\3\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f")
        buf.write("\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\7\u010f\u1195")
        buf.write("\n\u010f\f\u010f\16\u010f\u1198\13\u010f\3\u0110\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u11a7\n\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\5\u0110\u11ac\n\u0110\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u11b4")
        buf.write("\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\5\u0110\u11bc\n\u0110\3\u0111\3\u0111\3\u0111\5\u0111")
        buf.write("\u11c1\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111")
        buf.write("\u11c7\n\u0111\3\u0111\5\u0111\u11ca\n\u0111\5\u0111\u11cc")
        buf.write("\n\u0111\3\u0112\3\u0112\3\u0113\3\u0113\3\u0113\7\u0113")
        buf.write("\u11d3\n\u0113\f\u0113\16\u0113\u11d6\13\u0113\3\u0114")
        buf.write("\3\u0114\3\u0114\5\u0114\u11db\n\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\5\u0114\u11e1\n\u0114\5\u0114\u11e3\n")
        buf.write("\u0114\3\u0114\3\u0114\5\u0114\u11e7\n\u0114\3\u0114\3")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u11f2\n\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u11fc")
        buf.write("\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1201\n\u0114")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u1206\n\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u120b\n\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1213\n\u0115")
        buf.write("\3\u0116\3\u0116\5\u0116\u1217\n\u0116\3\u0116\7\u0116")
        buf.write("\u121a\n\u0116\f\u0116\16\u0116\u121d\13\u0116\3\u0117")
        buf.write("\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u1225")
        buf.write("\n\u0117\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118")
        buf.write("\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u1231\n\u0118")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u123f")
        buf.write("\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\5\u0119\u1248\n\u0119\5\u0119\u124a\n\u0119\3")
        buf.write("\u011a\3\u011a\3\u011a\7\u011a\u124f\n\u011a\f\u011a\16")
        buf.write("\u011a\u1252\13\u011a\3\u011b\3\u011b\3\u011b\3\u011b")
        buf.write("\5\u011b\u1258\n\u011b\3\u011c\3\u011c\5\u011c\u125c\n")
        buf.write("\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1262\n")
        buf.write("\u011c\3\u011c\3\u011c\3\u011c\3\u011c\7\u011c\u1268\n")
        buf.write("\u011c\f\u011c\16\u011c\u126b\13\u011c\3\u011c\3\u011c")
        buf.write("\3\u011c\3\u011c\5\u011c\u1271\n\u011c\3\u011c\3\u011c")
        buf.write("\5\u011c\u1275\n\u011c\3\u011c\3\u011c\3\u011c\3\u011c")
        buf.write("\5\u011c\u127b\n\u011c\3\u011c\3\u011c\3\u011c\7\u011c")
        buf.write("\u1280\n\u011c\f\u011c\16\u011c\u1283\13\u011c\5\u011c")
        buf.write("\u1285\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\3\u011d\3\u011d\5\u011d\u128e\n\u011d\3\u011d\3\u011d")
        buf.write("\3\u011d\3\u011d\5\u011d\u1294\n\u011d\3\u011e\3\u011e")
        buf.write("\3\u011e\5\u011e\u1299\n\u011e\3\u011f\3\u011f\3\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0120\7\u0120\u12ae\n\u0120\f\u0120\16\u0120")
        buf.write("\u12b1\13\u0120\5\u0120\u12b3\n\u0120\3\u0121\3\u0121")
        buf.write("\3\u0121\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122")
        buf.write("\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u12c3")
        buf.write("\n\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u12c8\n\u0122")
        buf.write("\3\u0122\5\u0122\u12cb\n\u0122\3\u0122\3\u0122\5\u0122")
        buf.write("\u12cf\n\u0122\3\u0122\5\u0122\u12d2\n\u0122\3\u0122\3")
        buf.write("\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122")
        buf.write("\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u12e0\n\u0122")
        buf.write("\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u12e6\n\u0122")
        buf.write("\3\u0122\3\u0122\3\u0122\5\u0122\u12eb\n\u0122\3\u0122")
        buf.write("\5\u0122\u12ee\n\u0122\5\u0122\u12f0\n\u0122\3\u0123\3")
        buf.write("\u0123\5\u0123\u12f4\n\u0123\3\u0123\3\u0123\3\u0123\5")
        buf.write("\u0123\u12f9\n\u0123\5\u0123\u12fb\n\u0123\3\u0124\3\u0124")
        buf.write("\3\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125")
        buf.write("\3\u0125\5\u0125\u1307\n\u0125\3\u0126\3\u0126\7\u0126")
        buf.write("\u130b\n\u0126\f\u0126\16\u0126\u130e\13\u0126\3\u0127")
        buf.write("\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127")
        buf.write("\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127")
        buf.write("\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u1323\n\u0127")
        buf.write("\3\u0127\3\u0127\5\u0127\u1327\n\u0127\5\u0127\u1329\n")
        buf.write("\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\5\u0128\u1331\n\u0128\3\u0129\3\u0129\5\u0129\u1335\n")
        buf.write("\u0129\3\u0129\3\u0129\3\u012a\3\u012a\3\u012a\3\u012a")
        buf.write("\3\u012a\5\u012a\u133e\n\u012a\3\u012b\3\u012b\3\u012b")
        buf.write("\3\u012b\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1348")
        buf.write("\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d")
        buf.write("\u134f\n\u012d\3\u012d\5\u012d\u1352\n\u012d\3\u012d\3")
        buf.write("\u012d\5\u012d\u1356\n\u012d\3\u012d\5\u012d\u1359\n\u012d")
        buf.write("\3\u012d\5\u012d\u135c\n\u012d\3\u012d\3\u012d\5\u012d")
        buf.write("\u1360\n\u012d\3\u012d\5\u012d\u1363\n\u012d\3\u012d\3")
        buf.write("\u012d\5\u012d\u1367\n\u012d\3\u012d\5\u012d\u136a\n\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\5\u012d\u136f\n\u012d\3\u012d")
        buf.write("\5\u012d\u1372\n\u012d\3\u012d\3\u012d\3\u012d\5\u012d")
        buf.write("\u1377\n\u012d\3\u012d\5\u012d\u137a\n\u012d\3\u012d\3")
        buf.write("\u012d\3\u012d\3\u012d\5\u012d\u1380\n\u012d\3\u012d\3")
        buf.write("\u012d\5\u012d\u1384\n\u012d\3\u012d\3\u012d\3\u012d\3")
        buf.write("\u012d\5\u012d\u138a\n\u012d\3\u012d\5\u012d\u138d\n\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\5\u012d\u1396\n\u012d\5\u012d\u1398\n\u012d\3\u012d\3")
        buf.write("\u012d\3\u012d\3\u012d\5\u012d\u139e\n\u012d\3\u012d\3")
        buf.write("\u012d\5\u012d\u13a2\n\u012d\3\u012d\5\u012d\u13a5\n\u012d")
        buf.write("\3\u012d\5\u012d\u13a8\n\u012d\3\u012d\3\u012d\5\u012d")
        buf.write("\u13ac\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d")
        buf.write("\u13b2\n\u012d\3\u012d\5\u012d\u13b5\n\u012d\3\u012d\5")
        buf.write("\u012d\u13b8\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3")
        buf.write("\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u13c2\n\u012d\3")
        buf.write("\u012d\3\u012d\5\u012d\u13c6\n\u012d\3\u012d\3\u012d\3")
        buf.write("\u012d\3\u012d\3\u012d\7\u012d\u13cd\n\u012d\f\u012d\16")
        buf.write("\u012d\u13d0\13\u012d\5\u012d\u13d2\n\u012d\3\u012d\3")
        buf.write("\u012d\3\u012d\5\u012d\u13d7\n\u012d\3\u012d\5\u012d\u13da")
        buf.write("\n\u012d\3\u012d\5\u012d\u13dd\n\u012d\3\u012d\3\u012d")
        buf.write("\5\u012d\u13e1\n\u012d\3\u012d\5\u012d\u13e4\n\u012d\3")
        buf.write("\u012d\3\u012d\3\u012d\5\u012d\u13e9\n\u012d\3\u012d\3")
        buf.write("\u012d\5\u012d\u13ed\n\u012d\3\u012d\3\u012d\3\u012d\3")
        buf.write("\u012d\3\u012d\3\u012d\5\u012d\u13f5\n\u012d\3\u012d\3")
        buf.write("\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\5\u012d\u1402\n\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\5\u012d\u1414\n\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\5\u012d\u1419\n\u012d\3\u012d\3\u012d\3\u012d\5\u012d")
        buf.write("\u141e\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\5\u012d\u1426\n\u012d\3\u012e\3\u012e\3\u012e")
        buf.write("\3\u012e\5\u012e\u142c\n\u012e\5\u012e\u142e\n\u012e\3")
        buf.write("\u012f\3\u012f\5\u012f\u1432\n\u012f\3\u012f\5\u012f\u1435")
        buf.write("\n\u012f\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0132")
        buf.write("\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132")
        buf.write("\u1443\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133")
        buf.write("\3\u0133\3\u0133\3\u0133\5\u0133\u144d\n\u0133\3\u0133")
        buf.write("\3\u0133\5\u0133\u1451\n\u0133\3\u0133\3\u0133\3\u0133")
        buf.write("\3\u0133\7\u0133\u1457\n\u0133\f\u0133\16\u0133\u145a")
        buf.write("\13\u0133\5\u0133\u145c\n\u0133\3\u0133\3\u0133\5\u0133")
        buf.write("\u1460\n\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133")
        buf.write("\3\u0133\3\u0133\3\u0133\5\u0133\u146a\n\u0133\3\u0134")
        buf.write("\3\u0134\5\u0134\u146e\n\u0134\3\u0135\3\u0135\3\u0135")
        buf.write("\7\u0135\u1473\n\u0135\f\u0135\16\u0135\u1476\13\u0135")
        buf.write("\3\u0136\3\u0136\5\u0136\u147a\n\u0136\3\u0137\3\u0137")
        buf.write("\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u1482\n\u0137")
        buf.write("\3\u0138\3\u0138\3\u0138\5\u0138\u1487\n\u0138\3\u0138")
        buf.write("\3\u0138\3\u0139\3\u0139\5\u0139\u148d\n\u0139\3\u013a")
        buf.write("\3\u013a\3\u013a\7\u013a\u1492\n\u013a\f\u013a\16\u013a")
        buf.write("\u1495\13\u013a\3\u013b\3\u013b\5\u013b\u1499\n\u013b")
        buf.write("\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u149f\n\u013b")
        buf.write("\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u14a6")
        buf.write("\n\u013b\3\u013c\3\u013c\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write("\3\u013d\3\u013d\5\u013d\u14b0\n\u013d\5\u013d\u14b2\n")
        buf.write("\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e")
        buf.write("\5\u013e\u14ba\n\u013e\3\u013f\3\u013f\3\u013f\5\u013f")
        buf.write("\u14bf\n\u013f\3\u013f\3\u013f\5\u013f\u14c3\n\u013f\3")
        buf.write("\u013f\5\u013f\u14c6\n\u013f\3\u0140\3\u0140\3\u0140\7")
        buf.write("\u0140\u14cb\n\u0140\f\u0140\16\u0140\u14ce\13\u0140\3")
        buf.write("\u0141\3\u0141\5\u0141\u14d2\n\u0141\3\u0141\3\u0141\5")
        buf.write("\u0141\u14d6\n\u0141\3\u0142\3\u0142\3\u0142\3\u0142\3")
        buf.write("\u0142\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u14e1\n")
        buf.write("\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144")
        buf.write("\5\u0144\u14e9\n\u0144\3\u0144\3\u0144\5\u0144\u14ed\n")
        buf.write("\u0144\3\u0144\5\u0144\u14f0\n\u0144\3\u0144\5\u0144\u14f3")
        buf.write("\n\u0144\3\u0145\3\u0145\5\u0145\u14f7\n\u0145\3\u0145")
        buf.write("\3\u0145\5\u0145\u14fb\n\u0145\3\u0145\7\u0145\u14fe\n")
        buf.write("\u0145\f\u0145\16\u0145\u1501\13\u0145\3\u0146\3\u0146")
        buf.write("\3\u0146\5\u0146\u1506\n\u0146\3\u0147\3\u0147\5\u0147")
        buf.write("\u150a\n\u0147\3\u0147\3\u0147\3\u0148\3\u0148\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u1515\n\u0149")
        buf.write("\3\u0149\5\u0149\u1518\n\u0149\3\u0149\5\u0149\u151b\n")
        buf.write("\u0149\3\u0149\5\u0149\u151e\n\u0149\3\u014a\3\u014a\3")
        buf.write("\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1526\n\u014a\3")
        buf.write("\u014b\3\u014b\5\u014b\u152a\n\u014b\3\u014b\7\u014b\u152d")
        buf.write("\n\u014b\f\u014b\16\u014b\u1530\13\u014b\3\u014c\3\u014c")
        buf.write("\3\u014c\3\u014c\3\u014c\5\u014c\u1537\n\u014c\3\u014d")
        buf.write("\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\5\u014d\u153f")
        buf.write("\n\u014d\3\u014e\3\u014e\3\u014e\3\u014e\5\u014e\u1545")
        buf.write("\n\u014e\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f")
        buf.write("\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f")
        buf.write("\3\u014f\3\u014f\3\u014f\5\u014f\u1557\n\u014f\3\u014f")
        buf.write("\3\u014f\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150")
        buf.write("\5\u0150\u1561\n\u0150\3\u0150\3\u0150\3\u0150\3\u0150")
        buf.write("\5\u0150\u1567\n\u0150\3\u0151\3\u0151\3\u0151\3\u0152")
        buf.write("\3\u0152\3\u0152\3\u0153\3\u0153\3\u0154\3\u0154\3\u0154")
        buf.write("\3\u0154\5\u0154\u1575\n\u0154\3\u0154\5\u0154\u1578\n")
        buf.write("\u0154\3\u0154\3\u0154\5\u0154\u157c\n\u0154\3\u0154\3")
        buf.write("\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154")
        buf.write("\3\u0154\7\u0154\u1587\n\u0154\f\u0154\16\u0154\u158a")
        buf.write("\13\u0154\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155")
        buf.write("\5\u0155\u1592\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155")
        buf.write("\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\7\u0155")
        buf.write("\u159e\n\u0155\f\u0155\16\u0155\u15a1\13\u0155\3\u0156")
        buf.write("\3\u0156\3\u0157\3\u0157\5\u0157\u15a7\n\u0157\3\u0157")
        buf.write("\3\u0157\3\u0157\3\u0157\5\u0157\u15ad\n\u0157\3\u0157")
        buf.write("\3\u0157\3\u0157\3\u0157\5\u0157\u15b3\n\u0157\3\u0158")
        buf.write("\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u15bb")
        buf.write("\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158")
        buf.write("\3\u0158\3\u0158\3\u0158\5\u0158\u15c6\n\u0158\3\u0158")
        buf.write("\3\u0158\5\u0158\u15ca\n\u0158\3\u0159\3\u0159\3\u0159")
        buf.write("\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159")
        buf.write("\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159")
        buf.write("\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159")
        buf.write("\3\u0159\3\u0159\3\u0159\7\u0159\u15e7\n\u0159\f\u0159")
        buf.write("\16\u0159\u15ea\13\u0159\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\5\u015a\u15f1\n\u015a\3\u015a\3\u015a\5\u015a")
        buf.write("\u15f5\n\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\5\u015a\u1606\n\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u160d\n\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u161b")
        buf.write("\n\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u1627\n\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u162d\n\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\6\u015a\u1632\n\u015a\r\u015a")
        buf.write("\16\u015a\u1633\3\u015a\5\u015a\u1637\n\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\5\u015a\u1659\n\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\7\u015a\u1661")
        buf.write("\n\u015a\f\u015a\16\u015a\u1664\13\u015a\3\u015b\3\u015b")
        buf.write("\3\u015b\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c")
        buf.write("\5\u015c\u166f\n\u015c\3\u015d\3\u015d\3\u015d\5\u015d")
        buf.write("\u1674\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d")
        buf.write("\u167a\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\5\u015d\u1682\n\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\3\u015d\5\u015d\u1689\n\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\3\u015d\5\u015d\u168f\n\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\5\u015d\u1694\n\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\5\u015d\u169a\n\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\5\u015d\u169f\n\u015d\3\u015d\3\u015d\3\u015d\5\u015d")
        buf.write("\u16a4\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d")
        buf.write("\u16aa\n\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16af\n")
        buf.write("\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16b5\n")
        buf.write("\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\5\u015d\u16bd\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\3\u015d\5\u015d\u16c5\n\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16cd\n\u015d")
        buf.write("\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d")
        buf.write("\u16d5\n\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16da\n")
        buf.write("\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16e0\n")
        buf.write("\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16e5\n\u015d\3")
        buf.write("\u015d\3\u015d\5\u015d\u16e9\n\u015d\3\u015d\3\u015d\5")
        buf.write("\u015d\u16ed\n\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16f2")
        buf.write("\n\u015d\5\u015d\u16f4\n\u015d\3\u015e\3\u015e\3\u015e")
        buf.write("\3\u015e\3\u015e\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f")
        buf.write("\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f")
        buf.write("\5\u015f\u1707\n\u015f\3\u015f\3\u015f\5\u015f\u170b\n")
        buf.write("\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f")
        buf.write("\u1712\n\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f")
        buf.write("\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u171e")
        buf.write("\n\u015f\3\u015f\5\u015f\u1721\n\u015f\3\u015f\3\u015f")
        buf.write("\5\u015f\u1725\n\u015f\3\u0160\3\u0160\3\u0160\5\u0160")
        buf.write("\u172a\n\u0160\3\u0161\3\u0161\3\u0161\5\u0161\u172f\n")
        buf.write("\u0161\3\u0161\3\u0161\5\u0161\u1733\n\u0161\3\u0162\3")
        buf.write("\u0162\3\u0162\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163")
        buf.write("\5\u0163\u173d\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163")
        buf.write("\3\u0163\3\u0163\3\u0163\5\u0163\u1746\n\u0163\5\u0163")
        buf.write("\u1748\n\u0163\3\u0164\5\u0164\u174b\n\u0164\3\u0164\3")
        buf.write("\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165")
        buf.write("\u1754\n\u0165\3\u0166\3\u0166\3\u0166\7\u0166\u1759\n")
        buf.write("\u0166\f\u0166\16\u0166\u175c\13\u0166\3\u0167\3\u0167")
        buf.write("\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167")
        buf.write("\3\u0167\5\u0167\u1768\n\u0167\3\u0167\3\u0167\3\u0167")
        buf.write("\5\u0167\u176d\n\u0167\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\5\u0168\u1774\n\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\5\u0168\u177a\n\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\6\u0168\u1792")
        buf.write("\n\u0168\r\u0168\16\u0168\u1793\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u17b3")
        buf.write("\n\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u17c7")
        buf.write("\n\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u17cd")
        buf.write("\n\u0168\3\u0168\3\u0168\5\u0168\u17d1\n\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\5\u0168\u17ec\n\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\5\u0168\u17f8\n\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\5\u0168\u1805\n\u0168\3\u0168\3\u0168")
        buf.write("\5\u0168\u1809\n\u0168\3\u0168\3\u0168\5\u0168\u180d\n")
        buf.write("\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168")
        buf.write("\u1829\n\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\5\u0168\u1861\n\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u186b\n\u0168")
        buf.write("\3\u0168\3\u0168\5\u0168\u186f\n\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\5\u0168\u187b\n\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\5\u0168\u1880\n\u0168\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\5\u0169\u188d\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\5\u0169\u18a1\n\u0169\3\u016a\3\u016a\5\u016a\u18a5\n")
        buf.write("\u016a\3\u016a\3\u016a\3\u016b\3\u016b\3\u016b\3\u016c")
        buf.write("\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c")
        buf.write("\7\u016c\u18b4\n\u016c\f\u016c\16\u016c\u18b7\13\u016c")
        buf.write("\5\u016c\u18b9\n\u016c\3\u016d\3\u016d\3\u016d\5\u016d")
        buf.write("\u18be\n\u016d\3\u016d\5\u016d\u18c1\n\u016d\3\u016e\3")
        buf.write("\u016e\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f")
        buf.write("\u18ca\n\u016f\3\u016f\3\u016f\5\u016f\u18ce\n\u016f\3")
        buf.write("\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u18d4\n\u016f\3")
        buf.write("\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u18da\n\u016f\3")
        buf.write("\u016f\3\u016f\5\u016f\u18de\n\u016f\3\u016f\3\u016f\3")
        buf.write("\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170")
        buf.write("\5\u0170\u18e9\n\u0170\3\u0170\3\u0170\3\u0170\3\u0170")
        buf.write("\5\u0170\u18ef\n\u0170\5\u0170\u18f1\n\u0170\3\u0170\3")
        buf.write("\u0170\3\u0171\3\u0171\3\u0171\5\u0171\u18f8\n\u0171\3")
        buf.write("\u0171\3\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u18ff\n")
        buf.write("\u0171\3\u0171\3\u0171\5\u0171\u1903\n\u0171\3\u0172\3")
        buf.write("\u0172\3\u0172\7\u0172\u1908\n\u0172\f\u0172\16\u0172")
        buf.write("\u190b\13\u0172\3\u0173\3\u0173\5\u0173\u190f\n\u0173")
        buf.write("\3\u0174\3\u0174\5\u0174\u1913\n\u0174\3\u0175\3\u0175")
        buf.write("\3\u0175\5\u0175\u1918\n\u0175\3\u0176\3\u0176\5\u0176")
        buf.write("\u191c\n\u0176\3\u0176\3\u0176\5\u0176\u1920\n\u0176\3")
        buf.write("\u0177\3\u0177\3\u0177\5\u0177\u1925\n\u0177\3\u0177\3")
        buf.write("\u0177\3\u0177\5\u0177\u192a\n\u0177\5\u0177\u192c\n\u0177")
        buf.write("\3\u0177\3\u0177\5\u0177\u1930\n\u0177\3\u0178\3\u0178")
        buf.write("\3\u0178\3\u0179\3\u0179\3\u0179\3\u017a\3\u017a\3\u017a")
        buf.write("\3\u017b\3\u017b\5\u017b\u193d\n\u017b\3\u017b\3\u017b")
        buf.write("\5\u017b\u1941\n\u017b\3\u017b\5\u017b\u1944\n\u017b\3")
        buf.write("\u017b\3\u017b\5\u017b\u1948\n\u017b\3\u017b\3\u017b\5")
        buf.write("\u017b\u194c\n\u017b\3\u017b\3\u017b\5\u017b\u1950\n\u017b")
        buf.write("\3\u017b\3\u017b\3\u017b\5\u017b\u1955\n\u017b\3\u017b")
        buf.write("\3\u017b\5\u017b\u1959\n\u017b\3\u017b\3\u017b\5\u017b")
        buf.write("\u195d\n\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b")
        buf.write("\3\u017b\3\u017b\5\u017b\u1966\n\u017b\5\u017b\u1968\n")
        buf.write("\u017b\3\u017c\3\u017c\3\u017c\7\u017c\u196d\n\u017c\f")
        buf.write("\u017c\16\u017c\u1970\13\u017c\3\u017d\3\u017d\3\u017d")
        buf.write("\5\u017d\u1975\n\u017d\3\u017e\3\u017e\3\u017f\3\u017f")
        buf.write("\3\u0180\3\u0180\5\u0180\u197d\n\u0180\3\u0181\3\u0181")
        buf.write("\3\u0182\3\u0182\3\u0182\3\u0182\3\u0183\3\u0183\3\u0183")
        buf.write("\3\u0183\3\u0184\3\u0184\3\u0184\3\u0184\3\u0185\3\u0185")
        buf.write("\3\u0185\7\u0185\u1990\n\u0185\f\u0185\16\u0185\u1993")
        buf.write("\13\u0185\3\u0186\3\u0186\5\u0186\u1997\n\u0186\3\u0187")
        buf.write("\3\u0187\3\u0187\7\u0187\u199c\n\u0187\f\u0187\16\u0187")
        buf.write("\u199f\13\u0187\3\u0188\3\u0188\3\u0189\3\u0189\3\u0189")
        buf.write("\3\u0189\3\u0189\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a")
        buf.write("\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a")
        buf.write("\3\u018a\5\u018a\u19b5\n\u018a\3\u018b\3\u018b\3\u018b")
        buf.write("\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018d\3\u018d")
        buf.write("\3\u018d\3\u018d\3\u018d\3\u018d\5\u018d\u19c5\n\u018d")
        buf.write("\3\u018e\3\u018e\3\u018e\3\u018f\3\u018f\3\u018f\6\u018f")
        buf.write("\u19cd\n\u018f\r\u018f\16\u018f\u19ce\3\u0190\3\u0190")
        buf.write("\5\u0190\u19d3\n\u0190\3\u0190\3\u0190\3\u0190\6\u0190")
        buf.write("\u19d8\n\u0190\r\u0190\16\u0190\u19d9\3\u0190\5\u0190")
        buf.write("\u19dd\n\u0190\3\u0190\3\u0190\3\u0190\3\u0191\3\u0191")
        buf.write("\3\u0191\3\u0192\3\u0192\3\u0192\5\u0192\u19e8\n\u0192")
        buf.write("\3\u0193\3\u0193\3\u0194\3\u0194\3\u0194\3\u0195\3\u0195")
        buf.write("\5\u0195\u19f1\n\u0195\3\u0195\5\u0195\u19f4\n\u0195\3")
        buf.write("\u0195\3\u0195\3\u0196\3\u0196\3\u0196\5\u0196\u19fb\n")
        buf.write("\u0196\3\u0197\3\u0197\3\u0197\5\u0197\u1a00\n\u0197\3")
        buf.write("\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0199\3\u0199")
        buf.write("\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u019a\3\u019a")
        buf.write("\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019b\3\u019b")
        buf.write("\3\u019b\6\u019b\u1a18\n\u019b\r\u019b\16\u019b\u1a19")
        buf.write("\3\u019c\3\u019c\3\u019c\3\u019c\5\u019c\u1a20\n\u019c")
        buf.write("\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u1a26\n\u019d")
        buf.write("\3\u019d\3\u019d\5\u019d\u1a2a\n\u019d\3\u019e\3\u019e")
        buf.write("\3\u019e\3\u019e\3\u019e\3\u019e\3\u019f\3\u019f\5\u019f")
        buf.write("\u1a34\n\u019f\3\u01a0\3\u01a0\5\u01a0\u1a38\n\u01a0\3")
        buf.write("\u01a0\3\u01a0\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1")
        buf.write("\3\u01a1\3\u01a1\7\u01a1\u1a43\n\u01a1\f\u01a1\16\u01a1")
        buf.write("\u1a46\13\u01a1\3\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a2")
        buf.write("\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u1a51\n\u01a2")
        buf.write("\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a4")
        buf.write("\3\u01a4\3\u01a4\3\u01a5\3\u01a5\3\u01a5\3\u01a6\3\u01a6")
        buf.write("\3\u01a6\3\u01a6\5\u01a6\u1a63\n\u01a6\3\u01a6\3\u01a6")
        buf.write("\3\u01a6\3\u01a6\7\u01a6\u1a69\n\u01a6\f\u01a6\16\u01a6")
        buf.write("\u1a6c\13\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6")
        buf.write("\7\u01a6\u1a73\n\u01a6\f\u01a6\16\u01a6\u1a76\13\u01a6")
        buf.write("\5\u01a6\u1a78\n\u01a6\3\u01a7\3\u01a7\3\u01a7\5\u01a7")
        buf.write("\u1a7d\n\u01a7\3\u01a8\3\u01a8\5\u01a8\u1a81\n\u01a8\3")
        buf.write("\u01a8\3\u01a8\3\u01a8\3\u01a9\3\u01a9\5\u01a9\u1a88\n")
        buf.write("\u01a9\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u1a8d\n\u01a9\3")
        buf.write("\u01aa\3\u01aa\3\u01ab\3\u01ab\3\u01ab\5\u01ab\u1a94\n")
        buf.write("\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\7\u01ab\u1a9a\n")
        buf.write("\u01ab\f\u01ab\16\u01ab\u1a9d\13\u01ab\5\u01ab\u1a9f\n")
        buf.write("\u01ab\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1aa4\n\u01ac\3")
        buf.write("\u01ac\3\u01ac\3\u01ac\3\u01ac\7\u01ac\u1aaa\n\u01ac\f")
        buf.write("\u01ac\16\u01ac\u1aad\13\u01ac\5\u01ac\u1aaf\n\u01ac\3")
        buf.write("\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ae\3\u01ae\3\u01ae")
        buf.write("\3\u01af\3\u01af\3\u01af\3\u01b0\3\u01b0\5\u01b0\u1abd")
        buf.write("\n\u01b0\3\u01b0\5\u01b0\u1ac0\n\u01b0\3\u01b0\3\u01b0")
        buf.write("\3\u01b0\3\u01b0\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1")
        buf.write("\3\u01b1\3\u01b1\5\u01b1\u1acd\n\u01b1\3\u01b1\3\u01b1")
        buf.write("\5\u01b1\u1ad1\n\u01b1\5\u01b1\u1ad3\n\u01b1\3\u01b2\3")
        buf.write("\u01b2\3\u01b2\5\u01b2\u1ad8\n\u01b2\3\u01b3\3\u01b3\3")
        buf.write("\u01b3\5\u01b3\u1add\n\u01b3\3\u01b4\3\u01b4\3\u01b4\3")
        buf.write("\u01b5\5\u01b5\u1ae3\n\u01b5\3\u01b5\3\u01b5\3\u01b6\3")
        buf.write("\u01b6\5\u01b6\u1ae9\n\u01b6\3\u01b6\3\u01b6\7\u01b6\u1aed")
        buf.write("\n\u01b6\f\u01b6\16\u01b6\u1af0\13\u01b6\3\u01b6\3\u01b6")
        buf.write("\5\u01b6\u1af4\n\u01b6\3\u01b6\5\u01b6\u1af7\n\u01b6\3")
        buf.write("\u01b6\3\u01b6\7\u01b6\u1afb\n\u01b6\f\u01b6\16\u01b6")
        buf.write("\u1afe\13\u01b6\3\u01b6\3\u01b6\5\u01b6\u1b02\n\u01b6")
        buf.write("\3\u01b6\5\u01b6\u1b05\n\u01b6\3\u01b6\3\u01b6\7\u01b6")
        buf.write("\u1b09\n\u01b6\f\u01b6\16\u01b6\u1b0c\13\u01b6\3\u01b6")
        buf.write("\5\u01b6\u1b0f\n\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6")
        buf.write("\5\u01b6\u1b15\n\u01b6\5\u01b6\u1b17\n\u01b6\3\u01b6\5")
        buf.write("\u01b6\u1b1a\n\u01b6\3\u01b6\3\u01b6\7\u01b6\u1b1e\n\u01b6")
        buf.write("\f\u01b6\16\u01b6\u1b21\13\u01b6\3\u01b6\3\u01b6\3\u01b6")
        buf.write("\5\u01b6\u1b26\n\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6")
        buf.write("\3\u01b6\3\u01b6\5\u01b6\u1b2e\n\u01b6\5\u01b6\u1b30\n")
        buf.write("\u01b6\5\u01b6\u1b32\n\u01b6\3\u01b7\3\u01b7\5\u01b7\u1b36")
        buf.write("\n\u01b7\3\u01b8\3\u01b8\7\u01b8\u1b3a\n\u01b8\f\u01b8")
        buf.write("\16\u01b8\u1b3d\13\u01b8\3\u01b8\3\u01b8\5\u01b8\u1b41")
        buf.write("\n\u01b8\3\u01b8\3\u01b8\5\u01b8\u1b45\n\u01b8\3\u01b8")
        buf.write("\3\u01b8\3\u01b8\5\u01b8\u1b4a\n\u01b8\3\u01b8\3\u01b8")
        buf.write("\7\u01b8\u1b4e\n\u01b8\f\u01b8\16\u01b8\u1b51\13\u01b8")
        buf.write("\3\u01b8\3\u01b8\7\u01b8\u1b55\n\u01b8\f\u01b8\16\u01b8")
        buf.write("\u1b58\13\u01b8\5\u01b8\u1b5a\n\u01b8\5\u01b8\u1b5c\n")
        buf.write("\u01b8\3\u01b9\5\u01b9\u1b5f\n\u01b9\3\u01b9\3\u01b9\3")
        buf.write("\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9")
        buf.write("\u1b69\n\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b6d\n\u01b9\3")
        buf.write("\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b73\n\u01b9\3")
        buf.write("\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b7a\n")
        buf.write("\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b7f\n\u01b9\3")
        buf.write("\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9")
        buf.write("\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b8d")
        buf.write("\n\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b92\n\u01b9")
        buf.write("\3\u01ba\3\u01ba\3\u01bb\3\u01bb\3\u01bc\3\u01bc\5\u01bc")
        buf.write("\u1b9a\n\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1b9f\n")
        buf.write("\u01bc\3\u01bc\3\u01bc\5\u01bc\u1ba3\n\u01bc\3\u01bc\5")
        buf.write("\u01bc\u1ba6\n\u01bc\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u1bab")
        buf.write("\n\u01bd\3\u01bd\3\u01bd\5\u01bd\u1baf\n\u01bd\3\u01bd")
        buf.write("\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u1bb7")
        buf.write("\n\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd")
        buf.write("\5\u01bd\u1bbf\n\u01bd\5\u01bd\u1bc1\n\u01bd\3\u01be\3")
        buf.write("\u01be\3\u01be\3\u01be\3\u01be\5\u01be\u1bc8\n\u01be\3")
        buf.write("\u01bf\3\u01bf\3\u01bf\3\u01bf\7\u01bf\u1bce\n\u01bf\f")
        buf.write("\u01bf\16\u01bf\u1bd1\13\u01bf\3\u01bf\3\u01bf\3\u01c0")
        buf.write("\3\u01c0\5\u01c0\u1bd7\n\u01c0\3\u01c0\5\u01c0\u1bda\n")
        buf.write("\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1\7\u01c1\u1be0\n")
        buf.write("\u01c1\f\u01c1\16\u01c1\u1be3\13\u01c1\3\u01c1\3\u01c1")
        buf.write("\3\u01c2\3\u01c2\3\u01c2\5\u01c2\u1bea\n\u01c2\5\u01c2")
        buf.write("\u1bec\n\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c3\5\u01c3")
        buf.write("\u1bf2\n\u01c3\3\u01c4\3\u01c4\3\u01c5\3\u01c5\5\u01c5")
        buf.write("\u1bf8\n\u01c5\3\u01c6\3\u01c6\5\u01c6\u1bfc\n\u01c6\3")
        buf.write("\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u1c03\n")
        buf.write("\u01c6\3\u01c7\3\u01c7\3\u01c8\3\u01c8\3\u01c8\3\u01c9")
        buf.write("\3\u01c9\3\u01c9\3\u01c9\5\u01c9\u1c0e\n\u01c9\3\u01ca")
        buf.write("\3\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cc\3\u01cc\5\u01cc")
        buf.write("\u1c17\n\u01cc\3\u01cc\5\u01cc\u1c1a\n\u01cc\3\u01cc\3")
        buf.write("\u01cc\3\u01cc\5\u01cc\u1c1f\n\u01cc\5\u01cc\u1c21\n\u01cc")
        buf.write("\3\u01cc\5\u01cc\u1c24\n\u01cc\3\u01cc\5\u01cc\u1c27\n")
        buf.write("\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c2b\n\u01cc\3\u01cc\5")
        buf.write("\u01cc\u1c2e\n\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c32\n\u01cc")
        buf.write("\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c37\n\u01cc\3\u01cc")
        buf.write("\5\u01cc\u1c3a\n\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c3e\n")
        buf.write("\u01cc\3\u01cc\5\u01cc\u1c41\n\u01cc\3\u01cc\3\u01cc\5")
        buf.write("\u01cc\u1c45\n\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c4a")
        buf.write("\n\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c4e\n\u01cc\3\u01cc")
        buf.write("\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc")
        buf.write("\3\u01cc\3\u01cc\5\u01cc\u1c5a\n\u01cc\3\u01cc\3\u01cc")
        buf.write("\5\u01cc\u1c5e\n\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc")
        buf.write("\5\u01cc\u1c64\n\u01cc\3\u01cc\5\u01cc\u1c67\n\u01cc\3")
        buf.write("\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c6c\n\u01cc\3\u01cc\3")
        buf.write("\u01cc\5\u01cc\u1c70\n\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c74")
        buf.write("\n\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c79\n\u01cc")
        buf.write("\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc")
        buf.write("\5\u01cc\u1c82\n\u01cc\3\u01cc\5\u01cc\u1c85\n\u01cc\3")
        buf.write("\u01cc\3\u01cc\5\u01cc\u1c89\n\u01cc\3\u01cc\3\u01cc\5")
        buf.write("\u01cc\u1c8d\n\u01cc\3\u01cc\5\u01cc\u1c90\n\u01cc\3\u01cc")
        buf.write("\3\u01cc\5\u01cc\u1c94\n\u01cc\3\u01cc\3\u01cc\5\u01cc")
        buf.write("\u1c98\n\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c9d\n")
        buf.write("\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1ca2\n\u01cc\3")
        buf.write("\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1ca8\n\u01cc\3")
        buf.write("\u01cd\3\u01cd\3\u01cd\5\u01cd\u1cad\n\u01cd\3\u01ce\3")
        buf.write("\u01ce\3\u01ce\5\u01ce\u1cb2\n\u01ce\5\u01ce\u1cb4\n\u01ce")
        buf.write("\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u1cb9\n\u01cf\3\u01cf")
        buf.write("\3\u01cf\3\u01d0\6\u01d0\u1cbe\n\u01d0\r\u01d0\16\u01d0")
        buf.write("\u1cbf\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write("\5\u01d1\u1cc8\n\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1")
        buf.write("\5\u01d1\u1cce\n\u01d1\5\u01d1\u1cd0\n\u01d1\3\u01d2\3")
        buf.write("\u01d2\5\u01d2\u1cd4\n\u01d2\3\u01d2\3\u01d2\5\u01d2\u1cd8")
        buf.write("\n\u01d2\3\u01d3\3\u01d3\5\u01d3\u1cdc\n\u01d3\3\u01d3")
        buf.write("\3\u01d3\5\u01d3\u1ce0\n\u01d3\3\u01d4\3\u01d4\3\u01d4")
        buf.write("\3\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d6\3\u01d6")
        buf.write("\3\u01d6\3\u01d6\5\u01d6\u1cee\n\u01d6\3\u01d7\3\u01d7")
        buf.write("\3\u01d7\3\u01d7\3\u01d7\5\u01d7\u1cf5\n\u01d7\3\u01d8")
        buf.write("\3\u01d8\5\u01d8\u1cf9\n\u01d8\3\u01d8\7\u01d8\u1cfc\n")
        buf.write("\u01d8\f\u01d8\16\u01d8\u1cff\13\u01d8\3\u01d9\6\u01d9")
        buf.write("\u1d02\n\u01d9\r\u01d9\16\u01d9\u1d03\3\u01da\3\u01da")
        buf.write("\5\u01da\u1d08\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da")
        buf.write("\5\u01da\u1d0e\n\u01da\3\u01da\3\u01da\5\u01da\u1d12\n")
        buf.write("\u01da\3\u01da\3\u01da\5\u01da\u1d16\n\u01da\3\u01da\3")
        buf.write("\u01da\3\u01da\5\u01da\u1d1b\n\u01da\3\u01da\3\u01da\3")
        buf.write("\u01da\5\u01da\u1d20\n\u01da\3\u01da\3\u01da\3\u01da\5")
        buf.write("\u01da\u1d25\n\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d2a")
        buf.write("\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d30")
        buf.write("\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d36")
        buf.write("\n\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d3b\n\u01da")
        buf.write("\3\u01da\3\u01da\3\u01da\5\u01da\u1d40\n\u01da\3\u01da")
        buf.write("\3\u01da\3\u01da\5\u01da\u1d45\n\u01da\3\u01da\3\u01da")
        buf.write("\3\u01da\5\u01da\u1d4a\n\u01da\3\u01da\3\u01da\3\u01da")
        buf.write("\5\u01da\u1d4f\n\u01da\3\u01da\3\u01da\3\u01da\5\u01da")
        buf.write("\u1d54\n\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d59\n")
        buf.write("\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da")
        buf.write("\3\u01da\3\u01da\5\u01da\u1d63\n\u01da\3\u01da\3\u01da")
        buf.write("\3\u01da\3\u01da\5\u01da\u1d69\n\u01da\3\u01da\3\u01da")
        buf.write("\3\u01da\3\u01da\5\u01da\u1d6f\n\u01da\3\u01da\3\u01da")
        buf.write("\3\u01da\3\u01da\5\u01da\u1d75\n\u01da\3\u01da\5\u01da")
        buf.write("\u1d78\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da")
        buf.write("\5\u01da\u1d7f\n\u01da\3\u01da\3\u01da\3\u01da\5\u01da")
        buf.write("\u1d84\n\u01da\3\u01da\5\u01da\u1d87\n\u01da\3\u01db\3")
        buf.write("\u01db\5\u01db\u1d8b\n\u01db\3\u01dc\5\u01dc\u1d8e\n\u01dc")
        buf.write("\3\u01dc\3\u01dc\5\u01dc\u1d92\n\u01dc\3\u01dc\3\u01dc")
        buf.write("\3\u01dd\5\u01dd\u1d97\n\u01dd\3\u01dd\3\u01dd\5\u01dd")
        buf.write("\u1d9b\n\u01dd\3\u01dd\3\u01dd\3\u01de\5\u01de\u1da0\n")
        buf.write("\u01de\3\u01de\3\u01de\5\u01de\u1da4\n\u01de\3\u01de\3")
        buf.write("\u01de\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\5\u01df")
        buf.write("\u1dad\n\u01df\3\u01df\5\u01df\u1db0\n\u01df\3\u01df\5")
        buf.write("\u01df\u1db3\n\u01df\3\u01e0\5\u01e0\u1db6\n\u01e0\3\u01e0")
        buf.write("\3\u01e0\5\u01e0\u1dba\n\u01e0\3\u01e0\3\u01e0\5\u01e0")
        buf.write("\u1dbe\n\u01e0\3\u01e0\3\u01e0\5\u01e0\u1dc2\n\u01e0\3")
        buf.write("\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0")
        buf.write("\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0")
        buf.write("\u1dd1\n\u01e0\3\u01e0\5\u01e0\u1dd4\n\u01e0\5\u01e0\u1dd6")
        buf.write("\n\u01e0\3\u01e1\3\u01e1\3\u01e1\5\u01e1\u1ddb\n\u01e1")
        buf.write("\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1")
        buf.write("\5\u01e1\u1de4\n\u01e1\3\u01e1\5\u01e1\u1de7\n\u01e1\3")
        buf.write("\u01e1\3\u01e1\5\u01e1\u1deb\n\u01e1\3\u01e2\3\u01e2\3")
        buf.write("\u01e2\3\u01e2\3\u01e2\3\u01e3\3\u01e3\3\u01e3\3\u01e3")
        buf.write("\7\u01e3\u1df6\n\u01e3\f\u01e3\16\u01e3\u1df9\13\u01e3")
        buf.write("\3\u01e3\3\u01e3\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4")
        buf.write("\3\u01e4\3\u01e4\5\u01e4\u1e04\n\u01e4\3\u01e4\3\u01e4")
        buf.write("\3\u01e4\5\u01e4\u1e09\n\u01e4\3\u01e4\7\u01e4\u1e0c\n")
        buf.write("\u01e4\f\u01e4\16\u01e4\u1e0f\13\u01e4\3\u01e4\3\u01e4")
        buf.write("\3\u01e4\3\u01e4\7\u01e4\u1e15\n\u01e4\f\u01e4\16\u01e4")
        buf.write("\u1e18\13\u01e4\3\u01e4\3\u01e4\5\u01e4\u1e1c\n\u01e4")
        buf.write("\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\7\u01e5\u1e23")
        buf.write("\n\u01e5\f\u01e5\16\u01e5\u1e26\13\u01e5\3\u01e5\3\u01e5")
        buf.write("\5\u01e5\u1e2a\n\u01e5\3\u01e6\3\u01e6\5\u01e6\u1e2e\n")
        buf.write("\u01e6\3\u01e6\3\u01e6\5\u01e6\u1e32\n\u01e6\3\u01e6\3")
        buf.write("\u01e6\5\u01e6\u1e36\n\u01e6\3\u01e6\3\u01e6\3\u01e6\5")
        buf.write("\u01e6\u1e3b\n\u01e6\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u1e40")
        buf.write("\n\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u1e46")
        buf.write("\n\u01e6\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u1e4b\n\u01e6")
        buf.write("\3\u01e6\5\u01e6\u1e4e\n\u01e6\3\u01e7\3\u01e7\3\u01e7")
        buf.write("\7\u01e7\u1e53\n\u01e7\f\u01e7\16\u01e7\u1e56\13\u01e7")
        buf.write("\3\u01e8\3\u01e8\3\u01e8\3\u01e8\7\u01e8\u1e5c\n\u01e8")
        buf.write("\f\u01e8\16\u01e8\u1e5f\13\u01e8\3\u01e8\3\u01e8\3\u01e9")
        buf.write("\3\u01e9\5\u01e9\u1e65\n\u01e9\3\u01ea\3\u01ea\3\u01ea")
        buf.write("\3\u01ea\3\u01eb\3\u01eb\3\u01eb\3\u01ec\3\u01ec\3\u01ec")
        buf.write("\3\u01ec\3\u01ed\5\u01ed\u1e73\n\u01ed\3\u01ed\3\u01ed")
        buf.write("\3\u01ee\3\u01ee\3\u01ee\3\u01ef\3\u01ef\3\u01ef\3\u01f0")
        buf.write("\3\u01f0\5\u01f0\u1e7f\n\u01f0\3\u01f1\3\u01f1\3\u01f1")
        buf.write("\3\u01f1\3\u01f1\3\u01f1\3\u01f2\3\u01f2\3\u01f2\7\u01f2")
        buf.write("\u1e8a\n\u01f2\f\u01f2\16\u01f2\u1e8d\13\u01f2\3\u01f3")
        buf.write("\3\u01f3\3\u01f3\7\u01f3\u1e92\n\u01f3\f\u01f3\16\u01f3")
        buf.write("\u1e95\13\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f4\5\u01f4")
        buf.write("\u1e9b\n\u01f4\3\u01f5\3\u01f5\3\u01f5\3\u01f6\3\u01f6")
        buf.write("\6\u01f6\u1ea2\n\u01f6\r\u01f6\16\u01f6\u1ea3\3\u01f7")
        buf.write("\3\u01f7\3\u01f7\3\u01f7\5\u01f7\u1eaa\n\u01f7\3\u01f7")
        buf.write("\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\5\u01f7\u1eb2")
        buf.write("\n\u01f7\3\u01f8\3\u01f8\6\u01f8\u1eb6\n\u01f8\r\u01f8")
        buf.write("\16\u01f8\u1eb7\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01fa")
        buf.write("\3\u01fa\3\u01fa\7\u01fa\u1ec1\n\u01fa\f\u01fa\16\u01fa")
        buf.write("\u1ec4\13\u01fa\3\u01fb\3\u01fb\3\u01fb\7\u01fb\u1ec9")
        buf.write("\n\u01fb\f\u01fb\16\u01fb\u1ecc\13\u01fb\3\u01fc\3\u01fc")
        buf.write("\3\u01fc\7\u01fc\u1ed1\n\u01fc\f\u01fc\16\u01fc\u1ed4")
        buf.write("\13\u01fc\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\5\u01fd")
        buf.write("\u1edb\n\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd")
        buf.write("\3\u01fd\3\u01fd\3\u01fd\5\u01fd\u1ee5\n\u01fd\3\u01fd")
        buf.write("\3\u01fd\3\u01fd\5\u01fd\u1eea\n\u01fd\3\u01fd\3\u01fd")
        buf.write("\3\u01fd\5\u01fd\u1eef\n\u01fd\5\u01fd\u1ef1\n\u01fd\3")
        buf.write("\u01fe\3\u01fe\3\u01fe\3\u01fe\5\u01fe\u1ef7\n\u01fe\3")
        buf.write("\u01fe\3\u01fe\3\u01fe\3\u01fe\5\u01fe\u1efd\n\u01fe\3")
        buf.write("\u01fe\5\u01fe\u1f00\n\u01fe\3\u01fe\3\u01fe\3\u01fe\3")
        buf.write("\u01fe\3\u01fe\5\u01fe\u1f07\n\u01fe\5\u01fe\u1f09\n\u01fe")
        buf.write("\5\u01fe\u1f0b\n\u01fe\3\u01fe\5\u01fe\u1f0e\n\u01fe\5")
        buf.write("\u01fe\u1f10\n\u01fe\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3")
        buf.write("\u0200\3\u0200\3\u0200\3\u0200\3\u0201\3\u0201\3\u0201")
        buf.write("\3\u0202\3\u0202\3\u0202\3\u0202\5\u0202\u1f21\n\u0202")
        buf.write("\3\u0203\3\u0203\3\u0203\5\u0203\u1f26\n\u0203\5\u0203")
        buf.write("\u1f28\n\u0203\3\u0204\3\u0204\3\u0204\3\u0205\3\u0205")
        buf.write("\5\u0205\u1f2f\n\u0205\3\u0206\3\u0206\3\u0207\3\u0207")
        buf.write("\3\u0208\3\u0208\3\u0208\3\u0208\3\u0209\3\u0209\3\u0209")
        buf.write("\5\u0209\u1f3c\n\u0209\5\u0209\u1f3e\n\u0209\3\u020a\3")
        buf.write("\u020a\3\u020a\3\u020a\5\u020a\u1f44\n\u020a\3\u020b\3")
        buf.write("\u020b\3\u020c\3\u020c\3\u020c\3\u020c\7\u020c\u1f4c\n")
        buf.write("\u020c\f\u020c\16\u020c\u1f4f\13\u020c\3\u020c\3\u020c")
        buf.write("\3\u020d\3\u020d\3\u020e\3\u020e\5\u020e\u1f57\n\u020e")
        buf.write("\3\u020f\3\u020f\3\u0210\3\u0210\3\u0211\3\u0211\3\u0211")
        buf.write("\3\u0211\3\u0211\5\u0211\u1f62\n\u0211\3\u0211\3\u0211")
        buf.write("\3\u0212\3\u0212\3\u0213\3\u0213\3\u0214\3\u0214\3\u0215")
        buf.write("\3\u0215\3\u0216\3\u0216\3\u0217\3\u0217\3\u0218\3\u0218")
        buf.write("\3\u0219\3\u0219\3\u021a\3\u021a\5\u021a\u1f78\n\u021a")
        buf.write("\3\u021b\3\u021b\5\u021b\u1f7c\n\u021b\3\u021c\3\u021c")
        buf.write("\3\u021d\3\u021d\3\u021e\3\u021e\3\u021f\3\u021f\3\u0220")
        buf.write("\3\u0220\3\u0221\3\u0221\3\u0222\3\u0222\3\u0223\3\u0223")
        buf.write("\3\u0224\3\u0224\3\u0225\3\u0225\3\u0226\3\u0226\5\u0226")
        buf.write("\u1f94\n\u0226\3\u0227\3\u0227\3\u0227\3\u0228\3\u0228")
        buf.write("\3\u0228\3\u0228\3\u0228\3\u0228\5\u0228\u1f9f\n\u0228")
        buf.write("\5\u0228\u1fa1\n\u0228\3\u0229\3\u0229\5\u0229\u1fa5\n")
        buf.write("\u0229\3\u022a\3\u022a\3\u022a\7\u022a\u1faa\n\u022a\f")
        buf.write("\u022a\16\u022a\u1fad\13\u022a\3\u022b\3\u022b\3\u022b")
        buf.write("\7\u022b\u1fb2\n\u022b\f\u022b\16\u022b\u1fb5\13\u022b")
        buf.write("\3\u022c\3\u022c\3\u022d\3\u022d\5\u022d\u1fbb\n\u022d")
        buf.write("\3\u022e\3\u022e\3\u022f\3\u022f\5\u022f\u1fc1\n\u022f")
        buf.write("\3\u0230\3\u0230\3\u0231\3\u0231\3\u0232\3\u0232\3\u0233")
        buf.write("\3\u0233\3\u0234\3\u0234\3\u0235\3\u0235\3\u0235\5\u0235")
        buf.write("\u1fd0\n\u0235\3\u0236\3\u0236\5\u0236\u1fd4\n\u0236\3")
        buf.write("\u0237\3\u0237\3\u0237\7\u0237\u1fd9\n\u0237\f\u0237\16")
        buf.write("\u0237\u1fdc\13\u0237\3\u0238\3\u0238\3\u0238\3\u0238")
        buf.write("\3\u0239\3\u0239\5\u0239\u1fe4\n\u0239\3\u023a\3\u023a")
        buf.write("\3\u023a\5\u023a\u1fe9\n\u023a\5\u023a\u1feb\n\u023a\3")
        buf.write("\u023a\3\u023a\3\u023a\3\u023a\5\u023a\u1ff1\n\u023a\3")
        buf.write("\u023b\3\u023b\3\u023b\3\u023c\3\u023c\3\u023d\3\u023d")
        buf.write("\3\u023e\3\u023e\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f")
        buf.write("\5\u023f\u2001\n\u023f\3\u0240\3\u0240\3\u0240\3\u0240")
        buf.write("\3\u0240\3\u0240\5\u0240\u2009\n\u0240\3\u0240\5\u0240")
        buf.write("\u200c\n\u0240\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241")
        buf.write("\5\u0241\u2013\n\u0241\3\u0242\3\u0242\3\u0242\3\u0242")
        buf.write("\7\u0242\u2019\n\u0242\f\u0242\16\u0242\u201c\13\u0242")
        buf.write("\3\u0242\3\u0242\3\u0243\3\u0243\3\u0243\5\u0243\u2023")
        buf.write("\n\u0243\3\u0244\3\u0244\3\u0244\5\u0244\u2028\n\u0244")
        buf.write("\3\u0245\3\u0245\3\u0245\5\u0245\u202d\n\u0245\3\u0246")
        buf.write("\5\u0246\u2030\n\u0246\3\u0246\3\u0246\5\u0246\u2034\n")
        buf.write("\u0246\3\u0246\7\u0246\u2037\n\u0246\f\u0246\16\u0246")
        buf.write("\u203a\13\u0246\3\u0247\3\u0247\3\u0248\3\u0248\3\u0248")
        buf.write("\7\u0248\u2041\n\u0248\f\u0248\16\u0248\u2044\13\u0248")
        buf.write("\3\u0249\3\u0249\3\u024a\3\u024a\3\u024b\3\u024b\3\u024c")
        buf.write("\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\5\u024c\u2052")
        buf.write("\n\u024c\3\u024d\3\u024d\5\u024d\u2056\n\u024d\3\u024e")
        buf.write("\3\u024e\3\u024f\3\u024f\3\u024f\3\u024f\3\u024f\3\u024f")
        buf.write("\3\u0250\3\u0250\5\u0250\u2062\n\u0250\3\u0251\3\u0251")
        buf.write("\5\u0251\u2066\n\u0251\3\u0252\3\u0252\5\u0252\u206a\n")
        buf.write("\u0252\3\u0253\3\u0253\5\u0253\u206e\n\u0253\3\u0254\3")
        buf.write("\u0254\3\u0254\3\u0255\3\u0255\3\u0256\3\u0256\3\u0257")
        buf.write("\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257\5\u0257\u207d")
        buf.write("\n\u0257\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258")
        buf.write("\3\u0258\3\u0258\3\u0258\3\u0258\5\u0258\u2089\n\u0258")
        buf.write("\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259")
        buf.write("\3\u0259\5\u0259\u2093\n\u0259\3\u0259\3\u0259\3\u0259")
        buf.write("\3\u0259\3\u0259\5\u0259\u209a\n\u0259\5\u0259\u209c\n")
        buf.write("\u0259\3\u025a\3\u025a\3\u025b\3\u025b\3\u025c\3\u025c")
        buf.write("\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c")
        buf.write("\3\u025c\3\u025c\5\u025c\u20ad\n\u025c\3\u025c\3\u025c")
        buf.write("\3\u025c\5\u025c\u20b2\n\u025c\5\u025c\u20b4\n\u025c\3")
        buf.write("\u025d\3\u025d\3\u025e\3\u025e\3\u025e\5\u025e\u20bb\n")
        buf.write("\u025e\3\u025f\3\u025f\3\u025f\5\u025f\u20c0\n\u025f\3")
        buf.write("\u025f\3\u025f\3\u025f\5\u025f\u20c5\n\u025f\5\u025f\u20c7")
        buf.write("\n\u025f\3\u0260\3\u0260\3\u0260\3\u0260\5\u0260\u20cd")
        buf.write("\n\u0260\3\u0261\3\u0261\3\u0262\3\u0262\3\u0262\3\u0262")
        buf.write("\3\u0262\5\u0262\u20d6\n\u0262\3\u0263\3\u0263\3\u0263")
        buf.write("\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\5\u0263")
        buf.write("\u20e1\n\u0263\3\u0263\2\6\u02a6\u02a8\u02b0\u02b2\u0264")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write("\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write("\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a")
        buf.write("\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c")
        buf.write("\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e")
        buf.write("\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190")
        buf.write("\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2")
        buf.write("\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4")
        buf.write("\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6")
        buf.write("\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8")
        buf.write("\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea")
        buf.write("\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc")
        buf.write("\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e")
        buf.write("\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220")
        buf.write("\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232")
        buf.write("\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244")
        buf.write("\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256")
        buf.write("\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268")
        buf.write("\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a")
        buf.write("\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c")
        buf.write("\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e")
        buf.write("\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0")
        buf.write("\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2")
        buf.write("\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4")
        buf.write("\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6")
        buf.write("\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8")
        buf.write("\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a")
        buf.write("\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c")
        buf.write("\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e")
        buf.write("\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340")
        buf.write("\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352")
        buf.write("\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364")
        buf.write("\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376")
        buf.write("\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388")
        buf.write("\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a")
        buf.write("\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac")
        buf.write("\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be")
        buf.write("\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0")
        buf.write("\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2")
        buf.write("\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4")
        buf.write("\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406")
        buf.write("\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418")
        buf.write("\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a")
        buf.write("\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c")
        buf.write("\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e")
        buf.write("\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460")
        buf.write("\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472")
        buf.write("\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484")
        buf.write("\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496")
        buf.write("\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8")
        buf.write("\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba")
        buf.write("\u04bc\u04be\u04c0\u04c2\u04c4\2\u0094\3\2\u02d4\u02d5")
        buf.write("\4\2\23\23\u0250\u0250\4\2\63\63\u01d9\u01d9\3\2\u0287")
        buf.write("\u0288\4\2\6\6\u0096\u0096\4\2\u01b4\u01b4\u01b6\u01b6")
        buf.write("\3\2\u02d6\u02d7\4\2\64\64\u011e\u011e\4\2\u00ea\u00ea")
        buf.write("\u01cc\u01cc\6\2\u0080\u0080\u00fb\u00fb\u01b7\u01b7\u022e")
        buf.write("\u022e\4\2\u0084\u0084\u00fc\u00fc\4\2\u01ba\u01ba\u025d")
        buf.write("\u025d\4\2\u01bb\u01bb\u025e\u025e\4\2\u0178\u0178\u0280")
        buf.write("\u0280\5\2\u0151\u0151\u0244\u0244\u025c\u025c\4\2\b\b")
        buf.write("\36\36\5\2\u0087\u0087\u00f4\u00f4\u0268\u0268\4\2\u00c7")
        buf.write("\u00c7\u01a1\u01a1\4\2\u023d\u023d\u0240\u0240\5\2\u00ea")
        buf.write("\u00ea\u0129\u0129\u01b1\u01b1\4\2\u00c1\u00c1\u0171\u0171")
        buf.write("\6\2\u00c1\u00c1\u010e\u010e\u0171\u0171\u01a5\u01a5\4")
        buf.write("\2\u02f0\u02f0\u02f3\u02f6\5\2\u0085\u0085\u00e1\u00e1")
        buf.write("\u0129\u0129\3\2\u0274\u0275\4\2TT\u0129\u0129\4\2rr\u028f")
        buf.write("\u028f\4\2\u0118\u0118\u01e6\u01e6\4\2\u0085\u0085\u0129")
        buf.write("\u0129\t\2\f\f\u0091\u0091\u00e1\u00e1\u0215\u0216\u0218")
        buf.write("\u0218\u021a\u021a\u022d\u022d\4\2\u017f\u017f\u0307\u0307")
        buf.write("\4\2\u02ed\u02ef\u0315\u0315\5\2\u01b2\u01b2\u01e6\u01e6")
        buf.write("\u02ad\u02ad\4\2\24\24\u0088\u0088\4\2\u0112\u0112\u01e0")
        buf.write("\u01e0\4\2dd\u00f1\u00f1\4\2\f\f\u0091\u0091\4\2\u00c8")
        buf.write("\u00c8\u00ea\u00ea\4\2\u00ee\u00ee\u010b\u010b\4\2\u0184")
        buf.write("\u0184\u028b\u028b\4\2\37\37\u0221\u0221\4\2\u0107\u0107")
        buf.write("\u01da\u01da\4\2\"\"\u013e\u013e\4\2\u0181\u0181\u02e9")
        buf.write("\u02ea\4\2\u0212\u0212\u0214\u0214\4\2\u01c3\u01c3\u021c")
        buf.write("\u021c\4\2\u0221\u0221\u022a\u022a\4\2}}\u0096\u0096\5")
        buf.write("\2\u0173\u0173\u021d\u021d\u028c\u028c\4\2\u0121\u0121")
        buf.write("\u0265\u0265\4\2\u0082\u0082\u02d1\u02d1\5\2\u00d0\u00d0")
        buf.write("\u01a8\u01a8\u0240\u0240\6\2\u00f4\u00f4\u01bd\u01bd\u01f3")
        buf.write("\u01f3\u0268\u0268\17\2\u0087\u0087\u0096\u0096\u00ac")
        buf.write("\u00ac\u00af\u00af\u00be\u00be\u00ee\u00ee\u01a9\u01a9")
        buf.write("\u01ad\u01ad\u01c5\u01c5\u0200\u0200\u0237\u0237\u0254")
        buf.write("\u0254\u026a\u026a\6\2\u01e5\u01e5\u023e\u023e\u026c\u026c")
        buf.write("\u027e\u027e\4\2CC\u0204\u0204\4\2cc\u0096\u0096\4\2\u0082")
        buf.write("\u0082\u0173\u0173\4\2\u00b6\u00b6\u01b1\u01b1\7\2::\u00b6")
        buf.write("\u00b6\u00ba\u00ba\u014f\u014f\u01b1\u01b1\5\2\u00b6\u00b6")
        buf.write("\u01b1\u01b1\u026d\u026d\4\2NN\u025b\u025b\6\2\f\f\"\"")
        buf.write("\u0082\u0082\u0181\u0181\4\2\u01e9\u01e9\u02c8\u02c8\5")
        buf.write("\2\u0123\u0123\u0164\u0164\u0225\u0225\4\2\u00cd\u00cd")
        buf.write("\u00fd\u00fd\4\2##\u01c0\u01c0\4\2\u00ed\u00ee\u0109\u0109")
        buf.write("\4\2\u00a8\u00a8\u0281\u0281\4\2\u0225\u0225\u0279\u0279")
        buf.write("\b\2\f\fbb\u0102\u0102\u0150\u0150\u020c\u020c\u0239\u0239")
        buf.write("\4\2VV\u01b0\u01b0\7\2\u008a\u008a\u00e3\u00e3\u01a7\u01a7")
        buf.write("\u0225\u0225\u026b\u026b\7\2\"\"\u00a5\u00a5\u00a7\u00a7")
        buf.write("\u00d2\u00d2\u0205\u0205\4\2\u026c\u026c\u02c8\u02c8\4")
        buf.write("\2\u008e\u008e\u009e\u009e\4\2\u0088\u0089\u00b4\u00b4")
        buf.write("\5\2\u00b9\u00b9\u0256\u0256\u0264\u0264\4\2\21\21\u0301")
        buf.write("\u0301\4\2\u018c\u018c\u0304\u0304\4\2\f\f\22\22\4\2\u02f0")
        buf.write("\u02f0\u02f2\u02f7\5\2\u0093\u0093\u015f\u015f\u02fa\u02fc")
        buf.write("\3\2\u02f8\u02f9\3\2\u02ff\u0300\4\2\u02f8\u02f9\u02fe")
        buf.write("\u02fe\4\2%&((\6\2\u02a8\u02a9\u02b6\u02b6\u02b8\u02b8")
        buf.write("\u02ba\u02ba\4\2\u02ae\u02ae\u02b0\u02b0\4\2\u02ab\u02ab")
        buf.write("\u02af\u02af\4\2\u00c1\u00c1\u010e\u010e\4\2\u00ea\u00ea")
        buf.write("\u02b9\u02b9\4\2\7\7\u0230\u0230\3\2tu\3\2\u024a\u024b")
        buf.write("\6\2ssvv\u0249\u0249\u024c\u024c\4\2\u0175\u0175\u02eb")
        buf.write("\u02eb\4\2\u02eb\u02eb\u02fd\u02fd\7\2x{\u00e4\u00e6\u0157")
        buf.write("\u0158\u01f0\u01f0\u0291\u0291\13\2||\u00e7\u00e7\u0153")
        buf.write("\u0153\u0159\u0159\u0160\u0160\u01af\u01af\u01f1\u01f1")
        buf.write("\u0282\u0282\u0292\u0292\5\2^^\u00b1\u00b1\u025f\u025f")
        buf.write("\4\2\u017b\u017b\u01e7\u01e7\f\2\67\67BBKKY[mm\u0152\u0152")
        buf.write("\u0165\u0165\u01ee\u01ee\u022f\u022f\u0242\u0242\4\2\u022c")
        buf.write("\u022c\u027f\u027f\5\2\u0082\u0082\u009a\u009a\u00c2\u00c2")
        buf.write("\5\2\u0082\u0082\u0090\u0090\u0150\u0150\5\2\u00ce\u00ce")
        buf.write("\u0194\u0194\u0203\u0203\5\2..\u00de\u00de\u01ea\u01ea")
        buf.write("\3\2\u0297\u0298\4\2\u0259\u0259\u026f\u026f\7\2!!\u00fb")
        buf.write("\u00fb\u014d\u014d\u0206\u0206\u024e\u024e\6\2\u0080\u0080")
        buf.write("\u00c2\u00c2\u00c5\u00c5\u017c\u017c\3\2+,\4\2\u0124\u0124")
        buf.write("\u014c\u014c\6\2\u00d5\u00d6\u0119\u0119\u0161\u0163\u019d")
        buf.write("\u019e\5\2\u0202\u0202\u0266\u0266\u0293\u0293\3\2\u0222")
        buf.write("\u0224\4\2??\u0241\u0241\b\2PPRR\u0082\u0082\u009a\u009a")
        buf.write("\u00c2\u00c2\u01bc\u01bc\5\2\u00c1\u00c1\u010e\u010e\u0177")
        buf.write("\u0177\4\2\u0090\u0090\u0150\u0150\4\2\u011a\u011a\u01b2")
        buf.write("\u01b2\4\2\u0145\u0145\u015a\u015a\4\2rr\u00ee\u00ee\5")
        buf.write("\2\u00f2\u00f2\u00fd\u00fd\u018f\u018f\4\2\u021f\u021f")
        buf.write("\u0245\u0245\4\2\u017e\u017e\u0183\u0183\4\2\u011e\u011e")
        buf.write("\u0179\u0179\4\2\u031d\u031d\u031f\u031f\5\2\u02ed\u02ef")
        buf.write("\u0316\u0316\u0318\u0319\4\2\u02ed\u02ef\u0316\u0316\4")
        buf.write("\2\u02ed\u02ef\u0318\u0319\3\2\u0316\u0317\4\2\u00b9\u00b9")
        buf.write("\u0256\u0256\4\2\u017a\u017a\u0314\u0314\3\2\u02f0\u02f1")
        buf.write("\7\2\u00d8\u00d8\u011e\u011e\u01f8\u01f8\u0294\u0294\u02a3")
        buf.write("\u02a3\5\2\u00af\u00af\u0200\u0200\u02cc\u02cc\"\2\25")
        buf.write("\25\37\37\60\61<<??MMOO\\\\}}\u0095\u0095\u00a1\u00a1")
        buf.write("\u00c6\u00c7\u00dd\u00dd\u00e0\u00e0\u00ec\u00ec\u00f7")
        buf.write("\u00f7\u010d\u010d\u0177\u0177\u01a1\u01a1\u01a3\u01a3")
        buf.write("\u01c9\u01c9\u01d6\u01d6\u01e2\u01e2\u01eb\u01eb\u0202")
        buf.write("\u0202\u0204\u0204\u0221\u0221\u022a\u022a\u0257\u0257")
        buf.write("\u0260\u0261\u028d\u028d\u02a7\u02a7\13\2\u00ac\u00ac")
        buf.write("\u00be\u00be\u0173\u0173\u01a9\u01a9\u01ad\u01ad\u01c5")
        buf.write("\u01c5\u01cd\u01cd\u0237\u0237\u02c7\u02c7\u00a3\2\4\5")
        buf.write("\7\13\16\16\22\22\27\27\31\35##\'\'*,..\64\64\678:;AF")
        buf.write("HIKLNNPTVWY[]]bbggmmqsvv||\u0083\u0084\u0086\u0086\u008c")
        buf.write("\u0090\u0098\u009a\u009e\u009e\u00a0\u00a0\u00a2\u00a2")
        buf.write("\u00a4\u00a8\u00aa\u00ab\u00ad\u00ae\u00b2\u00b3\u00b5")
        buf.write("\u00b7\u00ba\u00bb\u00bf\u00c2\u00cb\u00cc\u00ce\u00ce")
        buf.write("\u00d2\u00d2\u00d4\u00d7\u00da\u00da\u00de\u00de\u00e2")
        buf.write("\u00e3\u00e7\u00e8\u00eb\u00eb\u00ed\u00ed\u00f0\u00f0")
        buf.write("\u00f5\u00f6\u00fc\u00fc\u0101\u0102\u0104\u0105\u0108")
        buf.write("\u0108\u010a\u010a\u010e\u010e\u0110\u0110\u0113\u0114")
        buf.write("\u0119\u011a\u0120\u0120\u0122\u0123\u012a\u012a\u012c")
        buf.write("\u013c\u013e\u0141\u0143\u0146\u0149\u014a\u014f\u0153")
        buf.write("\u0156\u0156\u0159\u015a\u015c\u015c\u015e\u015e\u0160")
        buf.write("\u0168\u016b\u016b\u016d\u016d\u016f\u0172\u0178\u0178")
        buf.write("\u017b\u017b\u017d\u017d\u017f\u017f\u0182\u0182\u0184")
        buf.write("\u0185\u0188\u0188\u0190\u0196\u0198\u019f\u01a4\u01a5")
        buf.write("\u01a7\u01a7\u01aa\u01ac\u01af\u01b1\u01b4\u01b4\u01b8")
        buf.write("\u01b9\u01bb\u01bc\u01bf\u01c3\u01c6\u01c6\u01c8\u01c8")
        buf.write("\u01ca\u01ca\u01ce\u01d4\u01d8\u01d8\u01da\u01dc\u01de")
        buf.write("\u01de\u01e3\u01e5\u01e7\u01e8\u01ea\u01ea\u01ec\u01ec")
        buf.write("\u01ee\u01ee\u01f1\u01f2\u01f6\u01f7\u01f9\u01f9\u01fe")
        buf.write("\u01fe\u0203\u0203\u0205\u0205\u0207\u0207\u0209\u020c")
        buf.write("\u0212\u0214\u0216\u0216\u0219\u0219\u021c\u021c\u021e")
        buf.write("\u021e\u0220\u0220\u0222\u0225\u022b\u022b\u022e\u0233")
        buf.write("\u0238\u023a\u023d\u023e\u0241\u0244\u0246\u0247\u0249")
        buf.write("\u024c\u0252\u0253\u0258\u0259\u025b\u025e\u0264\u0264")
        buf.write("\u0267\u0267\u0269\u0269\u026b\u026d\u0273\u0273\u0275")
        buf.write("\u0275\u0279\u0279\u027e\u027e\u0280\u0283\u0288\u028a")
        buf.write("\u028c\u028c\u028e\u028f\u0292\u0292\u0295\u0298\u029a")
        buf.write("\u029a\u029f\u02a1\u02a4\u02a5\u02aa\u02aa\u02ac\u02ac")
        buf.write("\u02b3\u02b4\u02b7\u02b7\u02b9\u02b9\u02bb\u02bc\u02c0")
        buf.write("\u02c6\u02c9\u02cb\u02cd\u02d7\u02d9\u02dc\u02de\u02de")
        buf.write("\u02e1\u02e4\6\2\u0249\u0249\u024c\u024c\u02dd\u02dd\u02df")
        buf.write("\u02ea8\2\4\4\16\16\25\25\35\35\37\37\60\61<<??DDMMOO")
        buf.write("\\\\}}\u0095\u0095\u00a1\u00a1\u00c6\u00c7\u00cb\u00cb")
        buf.write("\u00d4\u00d4\u00dd\u00dd\u00e0\u00e0\u00e2\u00e2\u00f7")
        buf.write("\u00f7\u010d\u010d\u0177\u0177\u0185\u0185\u0188\u0188")
        buf.write("\u0190\u0190\u0193\u0193\u0197\u0197\u019f\u019f\u01a1")
        buf.write("\u01a1\u01a3\u01a3\u01c6\u01c6\u01c9\u01c9\u01d6\u01d6")
        buf.write("\u01d8\u01d8\u01e2\u01e2\u01eb\u01eb\u01f2\u01f2\u01f9")
        buf.write("\u01f9\u0202\u0202\u0204\u0204\u0209\u020a\u0221\u0221")
        buf.write("\u022a\u022a\u0257\u0257\u0260\u0261\u0269\u0269\u028a")
        buf.write("\u028a\u028d\u028d\u0295\u0295\u0297\u0298\u02a7\u02a7")
        buf.write("\u02d2\u02d5\u009d\2\5\5\7\13\17\17\22\22\27\34##\'\'")
        buf.write("*,..\64\64\678:;ACEFHIKLNNPTVWY[]]__bbggmmqsvv||\u0083")
        buf.write("\u0084\u0086\u0086\u008a\u008a\u008c\u0090\u0098\u009a")
        buf.write("\u009e\u009e\u00a0\u00a0\u00a2\u00a2\u00a4\u00a8\u00aa")
        buf.write("\u00ab\u00ad\u00ad\u00b2\u00b2\u00b5\u00b7\u00ba\u00bb")
        buf.write("\u00bf\u00c2\u00cc\u00cc\u00ce\u00ce\u00d2\u00d2\u00d5")
        buf.write("\u00d8\u00da\u00da\u00de\u00de\u00e3\u00e3\u00e7\u00e8")
        buf.write("\u00eb\u00eb\u00ed\u00ed\u00f0\u00f0\u00f5\u00f6\u00fc")
        buf.write("\u00fc\u0101\u0102\u0104\u0105\u0108\u0108\u010a\u010a")
        buf.write("\u010e\u010e\u0110\u0110\u0113\u0114\u0119\u011a\u011e")
        buf.write("\u011e\u0120\u0120\u0122\u0123\u012a\u012a\u012c\u013c")
        buf.write("\u013e\u0141\u0143\u0147\u0149\u014a\u014f\u0153\u0156")
        buf.write("\u0156\u0159\u015a\u015c\u015c\u015e\u015e\u0160\u0168")
        buf.write("\u016b\u016b\u016d\u016d\u016f\u0172\u0178\u0178\u017b")
        buf.write("\u017b\u017d\u017d\u017f\u0180\u0182\u0182\u0191\u0192")
        buf.write("\u0194\u0196\u0198\u019e\u01a4\u01a5\u01a7\u01a7\u01aa")
        buf.write("\u01ac\u01af\u01b1\u01b4\u01b4\u01b8\u01bc\u01bf\u01c3")
        buf.write("\u01c8\u01c8\u01ca\u01ca\u01ce\u01d4\u01da\u01dc\u01de")
        buf.write("\u01de\u01e3\u01e5\u01e7\u01e8\u01ea\u01ea\u01ec\u01ec")
        buf.write("\u01ee\u01ee\u01f1\u01f1\u01f6\u01f8\u01fe\u01fe\u0203")
        buf.write("\u0203\u0205\u0205\u0207\u0207\u020b\u020c\u0212\u0214")
        buf.write("\u0216\u0217\u0219\u0219\u021c\u021c\u021e\u021e\u0220")
        buf.write("\u0220\u0222\u0225\u022b\u022b\u022e\u0233\u0237\u023a")
        buf.write("\u023d\u023e\u0241\u0244\u0246\u0247\u0249\u024c\u0252")
        buf.write("\u0253\u0258\u025e\u0264\u0264\u0267\u0267\u026b\u026d")
        buf.write("\u0275\u0275\u0279\u0279\u027e\u027e\u0280\u0283\u0289")
        buf.write("\u0289\u028c\u028c\u028e\u028f\u0292\u0292\u029a\u029a")
        buf.write("\u029f\u02a1\u02a4\u02a6\u02aa\u02aa\u02ac\u02ac\u02b3")
        buf.write("\u02b4\u02b7\u02b7\u02b9\u02b9\u02bb\u02bc\u02c0\u02c6")
        buf.write("\u02c9\u02ca\u02ce\u02cf\u02d1\u02d1\u02d6\u02d7\u02d9")
        buf.write("\u02da\7\2ee\u00d0\u00d0\u00ec\u00ec\u01e6\u01e6\u01e9")
        buf.write("\u01e9\b\2\u00ae\u00ae\u00b3\u00b3\u0184\u0184\u0237\u0237")
        buf.write("\u0273\u0273\u0288\u0288\2\u2542\2\u04d2\3\2\2\2\4\u04f6")
        buf.write("\3\2\2\2\6\u04f8\3\2\2\2\b\u0515\3\2\2\2\n\u0524\3\2\2")
        buf.write("\2\f\u054a\3\2\2\2\16\u0553\3\2\2\2\20\u0560\3\2\2\2\22")
        buf.write("\u0562\3\2\2\2\24\u0567\3\2\2\2\26\u057f\3\2\2\2\30\u0588")
        buf.write("\3\2\2\2\32\u058a\3\2\2\2\34\u0599\3\2\2\2\36\u05fb\3")
        buf.write("\2\2\2 \u05ff\3\2\2\2\"\u060f\3\2\2\2$\u06a2\3\2\2\2&")
        buf.write("\u06a7\3\2\2\2(\u06a9\3\2\2\2*\u06ab\3\2\2\2,\u06b9\3")
        buf.write("\2\2\2.\u06c1\3\2\2\2\60\u06d1\3\2\2\2\62\u06d3\3\2\2")
        buf.write("\2\64\u06d7\3\2\2\2\66\u06dc\3\2\2\28\u06de\3\2\2\2:\u0703")
        buf.write("\3\2\2\2<\u070b\3\2\2\2>\u0715\3\2\2\2@\u0717\3\2\2\2")
        buf.write("B\u072b\3\2\2\2D\u0734\3\2\2\2F\u0737\3\2\2\2H\u0744\3")
        buf.write("\2\2\2J\u0749\3\2\2\2L\u074d\3\2\2\2N\u0754\3\2\2\2P\u0769")
        buf.write("\3\2\2\2R\u0778\3\2\2\2T\u077b\3\2\2\2V\u079a\3\2\2\2")
        buf.write("X\u07a4\3\2\2\2Z\u07a7\3\2\2\2\\\u07b0\3\2\2\2^\u07b2")
        buf.write("\3\2\2\2`\u07be\3\2\2\2b\u07d7\3\2\2\2d\u07f2\3\2\2\2")
        buf.write("f\u0800\3\2\2\2h\u0803\3\2\2\2j\u0818\3\2\2\2l\u081b\3")
        buf.write("\2\2\2n\u0854\3\2\2\2p\u0856\3\2\2\2r\u085a\3\2\2\2t\u0863")
        buf.write("\3\2\2\2v\u0873\3\2\2\2x\u0875\3\2\2\2z\u087d\3\2\2\2")
        buf.write("|\u0897\3\2\2\2~\u0899\3\2\2\2\u0080\u08a5\3\2\2\2\u0082")
        buf.write("\u08b4\3\2\2\2\u0084\u08b6\3\2\2\2\u0086\u08b9\3\2\2\2")
        buf.write("\u0088\u08cf\3\2\2\2\u008a\u08d1\3\2\2\2\u008c\u08d7\3")
        buf.write("\2\2\2\u008e\u08dd\3\2\2\2\u0090\u08e3\3\2\2\2\u0092\u08e9")
        buf.write("\3\2\2\2\u0094\u08ef\3\2\2\2\u0096\u08f6\3\2\2\2\u0098")
        buf.write("\u08fe\3\2\2\2\u009a\u0900\3\2\2\2\u009c\u0906\3\2\2\2")
        buf.write("\u009e\u090c\3\2\2\2\u00a0\u0913\3\2\2\2\u00a2\u0925\3")
        buf.write("\2\2\2\u00a4\u0927\3\2\2\2\u00a6\u092b\3\2\2\2\u00a8\u0930")
        buf.write("\3\2\2\2\u00aa\u0940\3\2\2\2\u00ac\u0945\3\2\2\2\u00ae")
        buf.write("\u0966\3\2\2\2\u00b0\u0985\3\2\2\2\u00b2\u0996\3\2\2\2")
        buf.write("\u00b4\u0998\3\2\2\2\u00b6\u09ac\3\2\2\2\u00b8\u09b2\3")
        buf.write("\2\2\2\u00ba\u09b8\3\2\2\2\u00bc\u09be\3\2\2\2\u00be\u09c5")
        buf.write("\3\2\2\2\u00c0\u09ce\3\2\2\2\u00c2\u09df\3\2\2\2\u00c4")
        buf.write("\u09e1\3\2\2\2\u00c6\u09e8\3\2\2\2\u00c8\u09f2\3\2\2\2")
        buf.write("\u00ca\u0a00\3\2\2\2\u00cc\u0a06\3\2\2\2\u00ce\u0a0e\3")
        buf.write("\2\2\2\u00d0\u0a14\3\2\2\2\u00d2\u0a1c\3\2\2\2\u00d4\u0a22")
        buf.write("\3\2\2\2\u00d6\u0a2c\3\2\2\2\u00d8\u0a30\3\2\2\2\u00da")
        buf.write("\u0a36\3\2\2\2\u00dc\u0a3b\3\2\2\2\u00de\u0a46\3\2\2\2")
        buf.write("\u00e0\u0a71\3\2\2\2\u00e2\u0a77\3\2\2\2\u00e4\u0a79\3")
        buf.write("\2\2\2\u00e6\u0a80\3\2\2\2\u00e8\u0a9e\3\2\2\2\u00ea\u0aa0")
        buf.write("\3\2\2\2\u00ec\u0abf\3\2\2\2\u00ee\u0ac6\3\2\2\2\u00f0")
        buf.write("\u0aca\3\2\2\2\u00f2\u0ad2\3\2\2\2\u00f4\u0adc\3\2\2\2")
        buf.write("\u00f6\u0ade\3\2\2\2\u00f8\u0af0\3\2\2\2\u00fa\u0afc\3")
        buf.write("\2\2\2\u00fc\u0b01\3\2\2\2\u00fe\u0b07\3\2\2\2\u0100\u0b28")
        buf.write("\3\2\2\2\u0102\u0b2a\3\2\2\2\u0104\u0b32\3\2\2\2\u0106")
        buf.write("\u0b3b\3\2\2\2\u0108\u0b43\3\2\2\2\u010a\u0b4f\3\2\2\2")
        buf.write("\u010c\u0b66\3\2\2\2\u010e\u0b74\3\2\2\2\u0110\u0b78\3")
        buf.write("\2\2\2\u0112\u0b98\3\2\2\2\u0114\u0ba7\3\2\2\2\u0116\u0bb6")
        buf.write("\3\2\2\2\u0118\u0bb8\3\2\2\2\u011a\u0bd3\3\2\2\2\u011c")
        buf.write("\u0bd5\3\2\2\2\u011e\u0bd7\3\2\2\2\u0120\u0bda\3\2\2\2")
        buf.write("\u0122\u0bdd\3\2\2\2\u0124\u0be4\3\2\2\2\u0126\u0be6\3")
        buf.write("\2\2\2\u0128\u0c04\3\2\2\2\u012a\u0c10\3\2\2\2\u012c\u0c13")
        buf.write("\3\2\2\2\u012e\u0c1c\3\2\2\2\u0130\u0c20\3\2\2\2\u0132")
        buf.write("\u0c25\3\2\2\2\u0134\u0c32\3\2\2\2\u0136\u0c37\3\2\2\2")
        buf.write("\u0138\u0c3b\3\2\2\2\u013a\u0c4b\3\2\2\2\u013c\u0c4d\3")
        buf.write("\2\2\2\u013e\u0c5f\3\2\2\2\u0140\u0c61\3\2\2\2\u0142\u0c6a")
        buf.write("\3\2\2\2\u0144\u0c76\3\2\2\2\u0146\u0c7d\3\2\2\2\u0148")
        buf.write("\u0c88\3\2\2\2\u014a\u0c8a\3\2\2\2\u014c\u0c8e\3\2\2\2")
        buf.write("\u014e\u0c90\3\2\2\2\u0150\u0c95\3\2\2\2\u0152\u0c9d\3")
        buf.write("\2\2\2\u0154\u0ca6\3\2\2\2\u0156\u0ca9\3\2\2\2\u0158\u0cb8")
        buf.write("\3\2\2\2\u015a\u0cbb\3\2\2\2\u015c\u0cce\3\2\2\2\u015e")
        buf.write("\u0cd3\3\2\2\2\u0160\u0cd8\3\2\2\2\u0162\u0cdc\3\2\2\2")
        buf.write("\u0164\u0cea\3\2\2\2\u0166\u0ced\3\2\2\2\u0168\u0cf3\3")
        buf.write("\2\2\2\u016a\u0d00\3\2\2\2\u016c\u0d08\3\2\2\2\u016e\u0d22")
        buf.write("\3\2\2\2\u0170\u0d2f\3\2\2\2\u0172\u0d36\3\2\2\2\u0174")
        buf.write("\u0d38\3\2\2\2\u0176\u0d44\3\2\2\2\u0178\u0d46\3\2\2\2")
        buf.write("\u017a\u0d50\3\2\2\2\u017c\u0d68\3\2\2\2\u017e\u0d6a\3")
        buf.write("\2\2\2\u0180\u0d71\3\2\2\2\u0182\u0d7b\3\2\2\2\u0184\u0d9e")
        buf.write("\3\2\2\2\u0186\u0da8\3\2\2\2\u0188\u0daa\3\2\2\2\u018a")
        buf.write("\u0dae\3\2\2\2\u018c\u0db6\3\2\2\2\u018e\u0db8\3\2\2\2")
        buf.write("\u0190\u0dbd\3\2\2\2\u0192\u0dc1\3\2\2\2\u0194\u0ddd\3")
        buf.write("\2\2\2\u0196\u0ddf\3\2\2\2\u0198\u0de1\3\2\2\2\u019a\u0de9")
        buf.write("\3\2\2\2\u019c\u0deb\3\2\2\2\u019e\u0df3\3\2\2\2\u01a0")
        buf.write("\u0dfd\3\2\2\2\u01a2\u0e01\3\2\2\2\u01a4\u0e1a\3\2\2\2")
        buf.write("\u01a6\u0e35\3\2\2\2\u01a8\u0e37\3\2\2\2\u01aa\u0e41\3")
        buf.write("\2\2\2\u01ac\u0e60\3\2\2\2\u01ae\u0e78\3\2\2\2\u01b0\u0e7a")
        buf.write("\3\2\2\2\u01b2\u0e88\3\2\2\2\u01b4\u0e8a\3\2\2\2\u01b6")
        buf.write("\u0ead\3\2\2\2\u01b8\u0eaf\3\2\2\2\u01ba\u0ed9\3\2\2\2")
        buf.write("\u01bc\u0ee9\3\2\2\2\u01be\u0eeb\3\2\2\2\u01c0\u0ef3\3")
        buf.write("\2\2\2\u01c2\u0efc\3\2\2\2\u01c4\u0f03\3\2\2\2\u01c6\u0f66")
        buf.write("\3\2\2\2\u01c8\u0f6a\3\2\2\2\u01ca\u0f6c\3\2\2\2\u01cc")
        buf.write("\u0f70\3\2\2\2\u01ce\u0f7e\3\2\2\2\u01d0\u0f80\3\2\2\2")
        buf.write("\u01d2\u0f8d\3\2\2\2\u01d4\u0fcd\3\2\2\2\u01d6\u0fcf\3")
        buf.write("\2\2\2\u01d8\u0fd7\3\2\2\2\u01da\u0fdf\3\2\2\2\u01dc\u0fe7")
        buf.write("\3\2\2\2\u01de\u0fe9\3\2\2\2\u01e0\u1006\3\2\2\2\u01e2")
        buf.write("\u100f\3\2\2\2\u01e4\u102e\3\2\2\2\u01e6\u1030\3\2\2\2")
        buf.write("\u01e8\u1038\3\2\2\2\u01ea\u103a\3\2\2\2\u01ec\u1048\3")
        buf.write("\2\2\2\u01ee\u104a\3\2\2\2\u01f0\u1050\3\2\2\2\u01f2\u1058")
        buf.write("\3\2\2\2\u01f4\u107d\3\2\2\2\u01f6\u107f\3\2\2\2\u01f8")
        buf.write("\u108e\3\2\2\2\u01fa\u1090\3\2\2\2\u01fc\u10ce\3\2\2\2")
        buf.write("\u01fe\u10d0\3\2\2\2\u0200\u10d3\3\2\2\2\u0202\u10ec\3")
        buf.write("\2\2\2\u0204\u10f5\3\2\2\2\u0206\u10f7\3\2\2\2\u0208\u10fc")
        buf.write("\3\2\2\2\u020a\u112a\3\2\2\2\u020c\u112c\3\2\2\2\u020e")
        buf.write("\u1134\3\2\2\2\u0210\u1165\3\2\2\2\u0212\u1172\3\2\2\2")
        buf.write("\u0214\u1174\3\2\2\2\u0216\u1177\3\2\2\2\u0218\u1182\3")
        buf.write("\2\2\2\u021a\u1187\3\2\2\2\u021c\u118a\3\2\2\2\u021e\u1199")
        buf.write("\3\2\2\2\u0220\u11cb\3\2\2\2\u0222\u11cd\3\2\2\2\u0224")
        buf.write("\u11cf\3\2\2\2\u0226\u1200\3\2\2\2\u0228\u1212\3\2\2\2")
        buf.write("\u022a\u1214\3\2\2\2\u022c\u1224\3\2\2\2\u022e\u1230\3")
        buf.write("\2\2\2\u0230\u1249\3\2\2\2\u0232\u124b\3\2\2\2\u0234\u1253")
        buf.write("\3\2\2\2\u0236\u1284\3\2\2\2\u0238\u1293\3\2\2\2\u023a")
        buf.write("\u1298\3\2\2\2\u023c\u129a\3\2\2\2\u023e\u12b2\3\2\2\2")
        buf.write("\u0240\u12b4\3\2\2\2\u0242\u12ef\3\2\2\2\u0244\u12fa\3")
        buf.write("\2\2\2\u0246\u12fc\3\2\2\2\u0248\u12ff\3\2\2\2\u024a\u130c")
        buf.write("\3\2\2\2\u024c\u1328\3\2\2\2\u024e\u1330\3\2\2\2\u0250")
        buf.write("\u1332\3\2\2\2\u0252\u133d\3\2\2\2\u0254\u133f\3\2\2\2")
        buf.write("\u0256\u1347\3\2\2\2\u0258\u1349\3\2\2\2\u025a\u142d\3")
        buf.write("\2\2\2\u025c\u1434\3\2\2\2\u025e\u1436\3\2\2\2\u0260\u1438")
        buf.write("\3\2\2\2\u0262\u1442\3\2\2\2\u0264\u1469\3\2\2\2\u0266")
        buf.write("\u146d\3\2\2\2\u0268\u146f\3\2\2\2\u026a\u1477\3\2\2\2")
        buf.write("\u026c\u147b\3\2\2\2\u026e\u1483\3\2\2\2\u0270\u148c\3")
        buf.write("\2\2\2\u0272\u148e\3\2\2\2\u0274\u14a5\3\2\2\2\u0276\u14a7")
        buf.write("\3\2\2\2\u0278\u14a9\3\2\2\2\u027a\u14b9\3\2\2\2\u027c")
        buf.write("\u14c5\3\2\2\2\u027e\u14c7\3\2\2\2\u0280\u14cf\3\2\2\2")
        buf.write("\u0282\u14d7\3\2\2\2\u0284\u14e0\3\2\2\2\u0286\u14e2\3")
        buf.write("\2\2\2\u0288\u14f4\3\2\2\2\u028a\u1502\3\2\2\2\u028c\u1507")
        buf.write("\3\2\2\2\u028e\u150d\3\2\2\2\u0290\u150f\3\2\2\2\u0292")
        buf.write("\u151f\3\2\2\2\u0294\u1527\3\2\2\2\u0296\u1531\3\2\2\2")
        buf.write("\u0298\u153e\3\2\2\2\u029a\u1540\3\2\2\2\u029c\u1546\3")
        buf.write("\2\2\2\u029e\u1566\3\2\2\2\u02a0\u1568\3\2\2\2\u02a2\u156b")
        buf.write("\3\2\2\2\u02a4\u156e\3\2\2\2\u02a6\u157b\3\2\2\2\u02a8")
        buf.write("\u158b\3\2\2\2\u02aa\u15a2\3\2\2\2\u02ac\u15a4\3\2\2\2")
        buf.write("\u02ae\u15c9\3\2\2\2\u02b0\u15cb\3\2\2\2\u02b2\u1658\3")
        buf.write("\2\2\2\u02b4\u1665\3\2\2\2\u02b6\u166e\3\2\2\2\u02b8\u16f3")
        buf.write("\3\2\2\2\u02ba\u16f5\3\2\2\2\u02bc\u1724\3\2\2\2\u02be")
        buf.write("\u1726\3\2\2\2\u02c0\u172b\3\2\2\2\u02c2\u1734\3\2\2\2")
        buf.write("\u02c4\u1747\3\2\2\2\u02c6\u174a\3\2\2\2\u02c8\u1753\3")
        buf.write("\2\2\2\u02ca\u1755\3\2\2\2\u02cc\u176c\3\2\2\2\u02ce\u187f")
        buf.write("\3\2\2\2\u02d0\u18a0\3\2\2\2\u02d2\u18a2\3\2\2\2\u02d4")
        buf.write("\u18a8\3\2\2\2\u02d6\u18ab\3\2\2\2\u02d8\u18ba\3\2\2\2")
        buf.write("\u02da\u18c2\3\2\2\2\u02dc\u18c4\3\2\2\2\u02de\u18e1\3")
        buf.write("\2\2\2\u02e0\u1902\3\2\2\2\u02e2\u1904\3\2\2\2\u02e4\u190c")
        buf.write("\3\2\2\2\u02e6\u1912\3\2\2\2\u02e8\u1917\3\2\2\2\u02ea")
        buf.write("\u1919\3\2\2\2\u02ec\u192f\3\2\2\2\u02ee\u1931\3\2\2\2")
        buf.write("\u02f0\u1934\3\2\2\2\u02f2\u1937\3\2\2\2\u02f4\u1967\3")
        buf.write("\2\2\2\u02f6\u1969\3\2\2\2\u02f8\u1974\3\2\2\2\u02fa\u1976")
        buf.write("\3\2\2\2\u02fc\u1978\3\2\2\2\u02fe\u197c\3\2\2\2\u0300")
        buf.write("\u197e\3\2\2\2\u0302\u1980\3\2\2\2\u0304\u1984\3\2\2\2")
        buf.write("\u0306\u1988\3\2\2\2\u0308\u198c\3\2\2\2\u030a\u1994\3")
        buf.write("\2\2\2\u030c\u1998\3\2\2\2\u030e\u19a0\3\2\2\2\u0310\u19a2")
        buf.write("\3\2\2\2\u0312\u19b4\3\2\2\2\u0314\u19b6\3\2\2\2\u0316")
        buf.write("\u19b9\3\2\2\2\u0318\u19be\3\2\2\2\u031a\u19c6\3\2\2\2")
        buf.write("\u031c\u19cc\3\2\2\2\u031e\u19d0\3\2\2\2\u0320\u19e1\3")
        buf.write("\2\2\2\u0322\u19e4\3\2\2\2\u0324\u19e9\3\2\2\2\u0326\u19eb")
        buf.write("\3\2\2\2\u0328\u19ee\3\2\2\2\u032a\u19f7\3\2\2\2\u032c")
        buf.write("\u19ff\3\2\2\2\u032e\u1a01\3\2\2\2\u0330\u1a06\3\2\2\2")
        buf.write("\u0332\u1a0d\3\2\2\2\u0334\u1a17\3\2\2\2\u0336\u1a1f\3")
        buf.write("\2\2\2\u0338\u1a21\3\2\2\2\u033a\u1a2b\3\2\2\2\u033c\u1a33")
        buf.write("\3\2\2\2\u033e\u1a35\3\2\2\2\u0340\u1a3b\3\2\2\2\u0342")
        buf.write("\u1a50\3\2\2\2\u0344\u1a52\3\2\2\2\u0346\u1a58\3\2\2\2")
        buf.write("\u0348\u1a5b\3\2\2\2\u034a\u1a5e\3\2\2\2\u034c\u1a7c\3")
        buf.write("\2\2\2\u034e\u1a80\3\2\2\2\u0350\u1a87\3\2\2\2\u0352\u1a8e")
        buf.write("\3\2\2\2\u0354\u1a90\3\2\2\2\u0356\u1aa0\3\2\2\2\u0358")
        buf.write("\u1ab0\3\2\2\2\u035a\u1ab4\3\2\2\2\u035c\u1ab7\3\2\2\2")
        buf.write("\u035e\u1aba\3\2\2\2\u0360\u1ad2\3\2\2\2\u0362\u1ad4\3")
        buf.write("\2\2\2\u0364\u1adc\3\2\2\2\u0366\u1ade\3\2\2\2\u0368\u1ae2")
        buf.write("\3\2\2\2\u036a\u1b31\3\2\2\2\u036c\u1b33\3\2\2\2\u036e")
        buf.write("\u1b37\3\2\2\2\u0370\u1b91\3\2\2\2\u0372\u1b93\3\2\2\2")
        buf.write("\u0374\u1b95\3\2\2\2\u0376\u1ba5\3\2\2\2\u0378\u1ba7\3")
        buf.write("\2\2\2\u037a\u1bc7\3\2\2\2\u037c\u1bc9\3\2\2\2\u037e\u1bd4")
        buf.write("\3\2\2\2\u0380\u1bdb\3\2\2\2\u0382\u1beb\3\2\2\2\u0384")
        buf.write("\u1bf1\3\2\2\2\u0386\u1bf3\3\2\2\2\u0388\u1bf7\3\2\2\2")
        buf.write("\u038a\u1c02\3\2\2\2\u038c\u1c04\3\2\2\2\u038e\u1c06\3")
        buf.write("\2\2\2\u0390\u1c0d\3\2\2\2\u0392\u1c0f\3\2\2\2\u0394\u1c11")
        buf.write("\3\2\2\2\u0396\u1ca7\3\2\2\2\u0398\u1cac\3\2\2\2\u039a")
        buf.write("\u1cb3\3\2\2\2\u039c\u1cb5\3\2\2\2\u039e\u1cbd\3\2\2\2")
        buf.write("\u03a0\u1ccf\3\2\2\2\u03a2\u1cd7\3\2\2\2\u03a4\u1cdf\3")
        buf.write("\2\2\2\u03a6\u1ce1\3\2\2\2\u03a8\u1ce5\3\2\2\2\u03aa\u1ced")
        buf.write("\3\2\2\2\u03ac\u1cf4\3\2\2\2\u03ae\u1cf6\3\2\2\2\u03b0")
        buf.write("\u1d01\3\2\2\2\u03b2\u1d86\3\2\2\2\u03b4\u1d8a\3\2\2\2")
        buf.write("\u03b6\u1d8d\3\2\2\2\u03b8\u1d96\3\2\2\2\u03ba\u1d9f\3")
        buf.write("\2\2\2\u03bc\u1da7\3\2\2\2\u03be\u1dd5\3\2\2\2\u03c0\u1dd7")
        buf.write("\3\2\2\2\u03c2\u1dec\3\2\2\2\u03c4\u1df1\3\2\2\2\u03c6")
        buf.write("\u1dfc\3\2\2\2\u03c8\u1e29\3\2\2\2\u03ca\u1e4d\3\2\2\2")
        buf.write("\u03cc\u1e4f\3\2\2\2\u03ce\u1e57\3\2\2\2\u03d0\u1e64\3")
        buf.write("\2\2\2\u03d2\u1e66\3\2\2\2\u03d4\u1e6a\3\2\2\2\u03d6\u1e6d")
        buf.write("\3\2\2\2\u03d8\u1e72\3\2\2\2\u03da\u1e76\3\2\2\2\u03dc")
        buf.write("\u1e79\3\2\2\2\u03de\u1e7c\3\2\2\2\u03e0\u1e80\3\2\2\2")
        buf.write("\u03e2\u1e86\3\2\2\2\u03e4\u1e8e\3\2\2\2\u03e6\u1e96\3")
        buf.write("\2\2\2\u03e8\u1e9c\3\2\2\2\u03ea\u1e9f\3\2\2\2\u03ec\u1eb1")
        buf.write("\3\2\2\2\u03ee\u1eb3\3\2\2\2\u03f0\u1eb9\3\2\2\2\u03f2")
        buf.write("\u1ebd\3\2\2\2\u03f4\u1ec5\3\2\2\2\u03f6\u1ecd\3\2\2\2")
        buf.write("\u03f8\u1ed5\3\2\2\2\u03fa\u1ef2\3\2\2\2\u03fc\u1f11\3")
        buf.write("\2\2\2\u03fe\u1f15\3\2\2\2\u0400\u1f19\3\2\2\2\u0402\u1f1c")
        buf.write("\3\2\2\2\u0404\u1f27\3\2\2\2\u0406\u1f29\3\2\2\2\u0408")
        buf.write("\u1f2e\3\2\2\2\u040a\u1f30\3\2\2\2\u040c\u1f32\3\2\2\2")
        buf.write("\u040e\u1f34\3\2\2\2\u0410\u1f3d\3\2\2\2\u0412\u1f43\3")
        buf.write("\2\2\2\u0414\u1f45\3\2\2\2\u0416\u1f47\3\2\2\2\u0418\u1f52")
        buf.write("\3\2\2\2\u041a\u1f56\3\2\2\2\u041c\u1f58\3\2\2\2\u041e")
        buf.write("\u1f5a\3\2\2\2\u0420\u1f5c\3\2\2\2\u0422\u1f65\3\2\2\2")
        buf.write("\u0424\u1f67\3\2\2\2\u0426\u1f69\3\2\2\2\u0428\u1f6b\3")
        buf.write("\2\2\2\u042a\u1f6d\3\2\2\2\u042c\u1f6f\3\2\2\2\u042e\u1f71")
        buf.write("\3\2\2\2\u0430\u1f73\3\2\2\2\u0432\u1f77\3\2\2\2\u0434")
        buf.write("\u1f7b\3\2\2\2\u0436\u1f7d\3\2\2\2\u0438\u1f7f\3\2\2\2")
        buf.write("\u043a\u1f81\3\2\2\2\u043c\u1f83\3\2\2\2\u043e\u1f85\3")
        buf.write("\2\2\2\u0440\u1f87\3\2\2\2\u0442\u1f89\3\2\2\2\u0444\u1f8b")
        buf.write("\3\2\2\2\u0446\u1f8d\3\2\2\2\u0448\u1f8f\3\2\2\2\u044a")
        buf.write("\u1f93\3\2\2\2\u044c\u1f95\3\2\2\2\u044e\u1f98\3\2\2\2")
        buf.write("\u0450\u1fa4\3\2\2\2\u0452\u1fa6\3\2\2\2\u0454\u1fae\3")
        buf.write("\2\2\2\u0456\u1fb6\3\2\2\2\u0458\u1fba\3\2\2\2\u045a\u1fbc")
        buf.write("\3\2\2\2\u045c\u1fc0\3\2\2\2\u045e\u1fc2\3\2\2\2\u0460")
        buf.write("\u1fc4\3\2\2\2\u0462\u1fc6\3\2\2\2\u0464\u1fc8\3\2\2\2")
        buf.write("\u0466\u1fca\3\2\2\2\u0468\u1fcf\3\2\2\2\u046a\u1fd3\3")
        buf.write("\2\2\2\u046c\u1fd5\3\2\2\2\u046e\u1fdd\3\2\2\2\u0470\u1fe1")
        buf.write("\3\2\2\2\u0472\u1ff0\3\2\2\2\u0474\u1ff2\3\2\2\2\u0476")
        buf.write("\u1ff5\3\2\2\2\u0478\u1ff7\3\2\2\2\u047a\u1ff9\3\2\2\2")
        buf.write("\u047c\u2000\3\2\2\2\u047e\u200b\3\2\2\2\u0480\u2012\3")
        buf.write("\2\2\2\u0482\u2014\3\2\2\2\u0484\u2022\3\2\2\2\u0486\u2027")
        buf.write("\3\2\2\2\u0488\u202c\3\2\2\2\u048a\u2033\3\2\2\2\u048c")
        buf.write("\u203b\3\2\2\2\u048e\u203d\3\2\2\2\u0490\u2045\3\2\2\2")
        buf.write("\u0492\u2047\3\2\2\2\u0494\u2049\3\2\2\2\u0496\u2051\3")
        buf.write("\2\2\2\u0498\u2055\3\2\2\2\u049a\u2057\3\2\2\2\u049c\u2059")
        buf.write("\3\2\2\2\u049e\u2061\3\2\2\2\u04a0\u2065\3\2\2\2\u04a2")
        buf.write("\u2069\3\2\2\2\u04a4\u206d\3\2\2\2\u04a6\u206f\3\2\2\2")
        buf.write("\u04a8\u2072\3\2\2\2\u04aa\u2074\3\2\2\2\u04ac\u207c\3")
        buf.write("\2\2\2\u04ae\u2088\3\2\2\2\u04b0\u209b\3\2\2\2\u04b2\u209d")
        buf.write("\3\2\2\2\u04b4\u209f\3\2\2\2\u04b6\u20b3\3\2\2\2\u04b8")
        buf.write("\u20b5\3\2\2\2\u04ba\u20ba\3\2\2\2\u04bc\u20c6\3\2\2\2")
        buf.write("\u04be\u20cc\3\2\2\2\u04c0\u20ce\3\2\2\2\u04c2\u20d5\3")
        buf.write("\2\2\2\u04c4\u20e0\3\2\2\2\u04c6\u04d3\7\2\2\3\u04c7\u04ca")
        buf.write("\5\4\3\2\u04c8\u04ca\5\u01a8\u00d5\2\u04c9\u04c7\3\2\2")
        buf.write("\2\u04c9\u04c8\3\2\2\2\u04ca\u04d0\3\2\2\2\u04cb\u04cd")
        buf.write("\7\u0308\2\2\u04cc\u04ce\7\2\2\3\u04cd\u04cc\3\2\2\2\u04cd")
        buf.write("\u04ce\3\2\2\2\u04ce\u04d1\3\2\2\2\u04cf\u04d1\7\2\2\3")
        buf.write("\u04d0\u04cb\3\2\2\2\u04d0\u04cf\3\2\2\2\u04d1\u04d3\3")
        buf.write("\2\2\2\u04d2\u04c6\3\2\2\2\u04d2\u04c9\3\2\2\2\u04d3\3")
        buf.write("\3\2\2\2\u04d4\u04f7\5\6\4\2\u04d5\u04f7\5N(\2\u04d6\u04f7")
        buf.write("\5\u00b4[\2\u04d7\u04f7\5\u00d4k\2\u04d8\u04f7\5\u00d8")
        buf.write("m\2\u04d9\u04da\6\3\2\2\u04da\u04f7\5\u00dan\2\u04db\u04f7")
        buf.write("\5\u00dco\2\u04dc\u04f7\5\u00dep\2\u04dd\u04f7\5\u00e4")
        buf.write("s\2\u04de\u04f7\5\u00e6t\2\u04df\u04f7\5\u00eav\2\u04e0")
        buf.write("\u04f7\5\u00fe\u0080\2\u04e1\u04f7\5\u010a\u0086\2\u04e2")
        buf.write("\u04f7\5\u010c\u0087\2\u04e3\u04f7\5\u01a2\u00d2\2\u04e4")
        buf.write("\u04f7\5\u01a4\u00d3\2\u04e5\u04f7\5\u01ba\u00de\2\u04e6")
        buf.write("\u04f7\5\u01ec\u00f7\2\u04e7\u04e8\6\3\3\2\u04e8\u04f7")
        buf.write("\5\u01f2\u00fa\2\u04e9\u04f7\5\u01f8\u00fd\2\u04ea\u04f7")
        buf.write("\5\u0236\u011c\2\u04eb\u04f7\5\u023e\u0120\2\u04ec\u04f7")
        buf.write("\5\u0240\u0121\2\u04ed\u04f7\5\u0258\u012d\2\u04ee\u04ef")
        buf.write("\6\3\4\2\u04ef\u04f7\5\u0284\u0143\2\u04f0\u04f7\5\u0264")
        buf.write("\u0133\2\u04f1\u04f7\5\u0298\u014d\2\u04f2\u04f3\6\3\5")
        buf.write("\2\u04f3\u04f7\5\u034a\u01a6\2\u04f4\u04f7\5\u0354\u01ab")
        buf.write("\2\u04f5\u04f7\5\u0356\u01ac\2\u04f6\u04d4\3\2\2\2\u04f6")
        buf.write("\u04d5\3\2\2\2\u04f6\u04d6\3\2\2\2\u04f6\u04d7\3\2\2\2")
        buf.write("\u04f6\u04d8\3\2\2\2\u04f6\u04d9\3\2\2\2\u04f6\u04db\3")
        buf.write("\2\2\2\u04f6\u04dc\3\2\2\2\u04f6\u04dd\3\2\2\2\u04f6\u04de")
        buf.write("\3\2\2\2\u04f6\u04df\3\2\2\2\u04f6\u04e0\3\2\2\2\u04f6")
        buf.write("\u04e1\3\2\2\2\u04f6\u04e2\3\2\2\2\u04f6\u04e3\3\2\2\2")
        buf.write("\u04f6\u04e4\3\2\2\2\u04f6\u04e5\3\2\2\2\u04f6\u04e6\3")
        buf.write("\2\2\2\u04f6\u04e7\3\2\2\2\u04f6\u04e9\3\2\2\2\u04f6\u04ea")
        buf.write("\3\2\2\2\u04f6\u04eb\3\2\2\2\u04f6\u04ec\3\2\2\2\u04f6")
        buf.write("\u04ed\3\2\2\2\u04f6\u04ee\3\2\2\2\u04f6\u04f0\3\2\2\2")
        buf.write("\u04f6\u04f1\3\2\2\2\u04f6\u04f2\3\2\2\2\u04f6\u04f4\3")
        buf.write("\2\2\2\u04f6\u04f5\3\2\2\2\u04f7\5\3\2\2\2\u04f8\u0513")
        buf.write("\7\r\2\2\u04f9\u0514\5\24\13\2\u04fa\u0514\5\b\5\2\u04fb")
        buf.write("\u04fc\7\u01a8\2\2\u04fc\u04fe\5\u0428\u0215\2\u04fd\u04ff")
        buf.write("\5h\65\2\u04fe\u04fd\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff")
        buf.write("\u0514\3\2\2\2\u0500\u0501\7\u00d0\2\2\u0501\u0503\5\u042c")
        buf.write("\u0217\2\u0502\u0504\5h\65\2\u0503\u0502\3\2\2\2\u0503")
        buf.write("\u0504\3\2\2\2\u0504\u0514\3\2\2\2\u0505\u0514\5F$\2\u0506")
        buf.write("\u0514\5\n\6\2\u0507\u0514\58\35\2\u0508\u0509\6\4\6\2")
        buf.write("\u0509\u0514\5:\36\2\u050a\u0514\5\f\7\2\u050b\u0514\5")
        buf.write("\22\n\2\u050c\u050d\6\4\7\2\u050d\u050e\7\u00f6\2\2\u050e")
        buf.write("\u050f\7\u01e4\2\2\u050f\u0510\5\u049e\u0250\2\u0510\u0511")
        buf.write("\7\u013e\2\2\u0511\u0512\7\u010b\2\2\u0512\u0514\3\2\2")
        buf.write("\2\u0513\u04f9\3\2\2\2\u0513\u04fa\3\2\2\2\u0513\u04fb")
        buf.write("\3\2\2\2\u0513\u0500\3\2\2\2\u0513\u0505\3\2\2\2\u0513")
        buf.write("\u0506\3\2\2\2\u0513\u0507\3\2\2\2\u0513\u0508\3\2\2\2")
        buf.write("\u0513\u050a\3\2\2\2\u0513\u050b\3\2\2\2\u0513\u050c\3")
        buf.write("\2\2\2\u0514\7\3\2\2\2\u0515\u0516\7o\2\2\u0516\u0521")
        buf.write("\5\u0424\u0213\2\u0517\u0519\5R*\2\u0518\u0517\3\2\2\2")
        buf.write("\u0519\u051a\3\2\2\2\u051a\u0518\3\2\2\2\u051a\u051b\3")
        buf.write("\2\2\2\u051b\u0522\3\2\2\2\u051c\u051d\6\5\b\2\u051d\u051e")
        buf.write("\7\u0269\2\2\u051e\u051f\7r\2\2\u051f\u0520\7\u008d\2")
        buf.write("\2\u0520\u0522\7\u0167\2\2\u0521\u0518\3\2\2\2\u0521\u051c")
        buf.write("\3\2\2\2\u0522\t\3\2\2\2\u0523\u0525\5\u03d2\u01ea\2\u0524")
        buf.write("\u0523\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0526\3\2\2\2")
        buf.write("\u0526\u0527\7\u00ac\2\2\u0527\u052b\5\u0440\u0221\2\u0528")
        buf.write("\u0529\7\u0181\2\2\u0529\u052a\7\u01ec\2\2\u052a\u052c")
        buf.write("\5\u0360\u01b1\2\u052b\u0528\3\2\2\2\u052b\u052c\3\2\2")
        buf.write("\2\u052c\u0533\3\2\2\2\u052d\u052e\7\u0181\2\2\u052e\u0530")
        buf.write("\7Q\2\2\u052f\u0531\7\u0175\2\2\u0530\u052f\3\2\2\2\u0530")
        buf.write("\u0531\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0534\7\u01a4")
        buf.write("\2\2\u0533\u052d\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u0538")
        buf.write("\3\2\2\2\u0535\u0536\7\u01c7\2\2\u0536\u0537\7\u0250\2")
        buf.write("\2\u0537\u0539\5\u046a\u0236\2\u0538\u0535\3\2\2\2\u0538")
        buf.write("\u0539\3\2\2\2\u0539\u0540\3\2\2\2\u053a\u0541\7\u009e")
        buf.write("\2\2\u053b\u053e\7\u008e\2\2\u053c\u053d\7\u0181\2\2\u053d")
        buf.write("\u053f\7\u0204\2\2\u053e\u053c\3\2\2\2\u053e\u053f\3\2")
        buf.write("\2\2\u053f\u0541\3\2\2\2\u0540\u053a\3\2\2\2\u0540\u053b")
        buf.write("\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0544\3\2\2\2\u0542")
        buf.write("\u0543\7M\2\2\u0543\u0545\5\u048a\u0246\2\u0544\u0542")
        buf.write("\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u0548\3\2\2\2\u0546")
        buf.write("\u0547\7\u0095\2\2\u0547\u0549\5\u0312\u018a\2\u0548\u0546")
        buf.write("\3\2\2\2\u0548\u0549\3\2\2\2\u0549\13\3\2\2\2\u054a\u054b")
        buf.write("\7\u0122\2\2\u054b\u054c\7\u00db\2\2\u054c\u054d\5\u043c")
        buf.write("\u021f\2\u054d\u054e\7\6\2\2\u054e\u054f\7\u025d\2\2\u054f")
        buf.write("\u0551\5\u048a\u0246\2\u0550\u0552\5\16\b\2\u0551\u0550")
        buf.write("\3\2\2\2\u0551\u0552\3\2\2\2\u0552\r\3\2\2\2\u0553\u055a")
        buf.write("\5\20\t\2\u0554\u0556\7\u0307\2\2\u0555\u0554\3\2\2\2")
        buf.write("\u0555\u0556\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u0559\5")
        buf.write("\20\t\2\u0558\u0555\3\2\2\2\u0559\u055c\3\2\2\2\u055a")
        buf.write("\u0558\3\2\2\2\u055a\u055b\3\2\2\2\u055b\17\3\2\2\2\u055c")
        buf.write("\u055a\3\2\2\2\u055d\u0561\5\u008aF\2\u055e\u0561\5\u0096")
        buf.write("L\2\u055f\u0561\5\u0098M\2\u0560\u055d\3\2\2\2\u0560\u055e")
        buf.write("\3\2\2\2\u0560\u055f\3\2\2\2\u0561\21\3\2\2\2\u0562\u0563")
        buf.write("\7\u01f9\2\2\u0563\u0564\5\u0446\u0224\2\u0564\u0565\5")
        buf.write("z>\2\u0565\23\3\2\2\2\u0566\u0568\5\u040a\u0206\2\u0567")
        buf.write("\u0566\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u056b\3\2\2\2")
        buf.write("\u0569\u056a\6\13\t\2\u056a\u056c\7\u00ea\2\2\u056b\u0569")
        buf.write("\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u056d\3\2\2\2\u056d")
        buf.write("\u056e\7\u0240\2\2\u056e\u0570\5\u0450\u0229\2\u056f\u0571")
        buf.write("\5\26\f\2\u0570\u056f\3\2\2\2\u0570\u0571\3\2\2\2\u0571")
        buf.write("\25\3\2\2\2\u0572\u0575\5\30\r\2\u0573\u0576\5\u03bc\u01df")
        buf.write("\2\u0574\u0576\5\64\33\2\u0575\u0573\3\2\2\2\u0575\u0574")
        buf.write("\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0580\3\2\2\2\u0577")
        buf.write("\u0580\5\u03bc\u01df\2\u0578\u0580\5\64\33\2\u0579\u057a")
        buf.write("\5\32\16\2\u057a\u057b\7\u0307\2\2\u057b\u057d\3\2\2\2")
        buf.write("\u057c\u0579\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u057e\3")
        buf.write("\2\2\2\u057e\u0580\5\34\17\2\u057f\u0572\3\2\2\2\u057f")
        buf.write("\u0577\3\2\2\2\u057f\u0578\3\2\2\2\u057f\u057c\3\2\2\2")
        buf.write("\u0580\27\3\2\2\2\u0581\u0589\5\32\16\2\u0582\u0583\5")
        buf.write("\32\16\2\u0583\u0584\7\u0307\2\2\u0584\u0586\3\2\2\2\u0585")
        buf.write("\u0582\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0587\3\2\2\2")
        buf.write("\u0587\u0589\5 \21\2\u0588\u0581\3\2\2\2\u0588\u0585\3")
        buf.write("\2\2\2\u0589\31\3\2\2\2\u058a\u058f\5\"\22\2\u058b\u058c")
        buf.write("\7\u0307\2\2\u058c\u058e\5\"\22\2\u058d\u058b\3\2\2\2")
        buf.write("\u058e\u0591\3\2\2\2\u058f\u058d\3\2\2\2\u058f\u0590\3")
        buf.write("\2\2\2\u0590\33\3\2\2\2\u0591\u058f\3\2\2\2\u0592\u0593")
        buf.write("\7\u008f\2\2\u0593\u059a\7\u023e\2\2\u0594\u0595\7\u00ec")
        buf.write("\2\2\u0595\u059a\7\u023e\2\2\u0596\u059a\5\36\20\2\u0597")
        buf.write("\u0598\6\17\n\2\u0598\u059a\t\2\2\2\u0599\u0592\3\2\2")
        buf.write("\2\u0599\u0594\3\2\2\2\u0599\u0596\3\2\2\2\u0599\u0597")
        buf.write("\3\2\2\2\u059a\35\3\2\2\2\u059b\u059c\7\6\2\2\u059c\u059e")
        buf.write("\7\u0197\2\2\u059d\u059f\5\u040c\u0207\2\u059e\u059d\3")
        buf.write("\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a3\3\2\2\2\u05a0\u05a4")
        buf.write("\5\u03c4\u01e3\2\u05a1\u05a2\7\u0196\2\2\u05a2\u05a4\5")
        buf.write("\u0478\u023d\2\u05a3\u05a0\3\2\2\2\u05a3\u05a1\3\2\2\2")
        buf.write("\u05a4\u05fc\3\2\2\2\u05a5\u05a6\7\u0096\2\2\u05a6\u05a7")
        buf.write("\7\u0197\2\2\u05a7\u05fc\5\u046c\u0237\2\u05a8\u05a9\7")
        buf.write("\u01b8\2\2\u05a9\u05ab\7\u0197\2\2\u05aa\u05ac\5\u040c")
        buf.write("\u0207\2\u05ab\u05aa\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac")
        buf.write("\u05ad\3\2\2\2\u05ad\u05fc\5\66\34\2\u05ae\u05af\7\u0186")
        buf.write("\2\2\u05af\u05b1\7\u0197\2\2\u05b0\u05b2\5\u040c\u0207")
        buf.write("\2\u05b1\u05b0\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b3")
        buf.write("\3\2\2\2\u05b3\u05b5\5\66\34\2\u05b4\u05b6\5\u040c\u0207")
        buf.write("\2\u05b5\u05b4\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05fc")
        buf.write("\3\2\2\2\u05b7\u05b8\7\20\2\2\u05b8\u05ba\7\u0197\2\2")
        buf.write("\u05b9\u05bb\5\u040c\u0207\2\u05ba\u05b9\3\2\2\2\u05ba")
        buf.write("\u05bb\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05fc\5\66\34")
        buf.write("\2\u05bd\u05be\7@\2\2\u05be\u05bf\7\u0197\2\2\u05bf\u05c3")
        buf.write("\5\66\34\2\u05c0\u05c2\5\u023a\u011e\2\u05c1\u05c0\3\2")
        buf.write("\2\2\u05c2\u05c5\3\2\2\2\u05c3\u05c1\3\2\2\2\u05c3\u05c4")
        buf.write("\3\2\2\2\u05c4\u05fc\3\2\2\2\u05c5\u05c3\3\2\2\2\u05c6")
        buf.write("\u05c7\7\u01c9\2\2\u05c7\u05c9\7\u0197\2\2\u05c8\u05ca")
        buf.write("\5\u040c\u0207\2\u05c9\u05c8\3\2\2\2\u05c9\u05ca\3\2\2")
        buf.write("\2\u05ca\u05cb\3\2\2\2\u05cb\u05cf\5\66\34\2\u05cc\u05ce")
        buf.write("\5\u023c\u011f\2\u05cd\u05cc\3\2\2\2\u05ce\u05d1\3\2\2")
        buf.write("\2\u05cf\u05cd\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05fc")
        buf.write("\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d2\u05d3\7E\2\2\u05d3")
        buf.write("\u05d5\7\u0197\2\2\u05d4\u05d6\5\u040c\u0207\2\u05d5\u05d4")
        buf.write("\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7")
        buf.write("\u05fc\5\u0478\u023d\2\u05d8\u05d9\7\u0257\2\2\u05d9\u05da")
        buf.write("\7\u0197\2\2\u05da\u05fc\5\66\34\2\u05db\u05dc\7\u01c8")
        buf.write("\2\2\u05dc\u05de\7\u0197\2\2\u05dd\u05df\5\u040c\u0207")
        buf.write("\2\u05de\u05dd\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e4")
        buf.write("\3\2\2\2\u05e0\u05e1\5\u046c\u0237\2\u05e1\u05e2\7\u00fa")
        buf.write("\2\2\u05e2\u05e3\5\u03c4\u01e3\2\u05e3\u05e5\3\2\2\2\u05e4")
        buf.write("\u05e0\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05fc\3\2\2\2")
        buf.write("\u05e6\u05e7\7\u00ae\2\2\u05e7\u05e8\7\u0197\2\2\u05e8")
        buf.write("\u05e9\5\u046a\u0236\2\u05e9\u05ea\7\u0287\2\2\u05ea\u05eb")
        buf.write("\7\u0240\2\2\u05eb\u05ed\5\u0450\u0229\2\u05ec\u05ee\5")
        buf.write("\62\32\2\u05ed\u05ec\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee")
        buf.write("\u05fc\3\2\2\2\u05ef\u05f0\6\20\13\2\u05f0\u05f1\7\u008f")
        buf.write("\2\2\u05f1\u05f2\7\u0197\2\2\u05f2\u05f3\5\66\34\2\u05f3")
        buf.write("\u05f4\7\u023e\2\2\u05f4\u05fc\3\2\2\2\u05f5\u05f6\6\20")
        buf.write("\f\2\u05f6\u05f7\7\u00ec\2\2\u05f7\u05f8\7\u0197\2\2\u05f8")
        buf.write("\u05f9\5\66\34\2\u05f9\u05fa\7\u023e\2\2\u05fa\u05fc\3")
        buf.write("\2\2\2\u05fb\u059b\3\2\2\2\u05fb\u05a5\3\2\2\2\u05fb\u05a8")
        buf.write("\3\2\2\2\u05fb\u05ae\3\2\2\2\u05fb\u05b7\3\2\2\2\u05fb")
        buf.write("\u05bd\3\2\2\2\u05fb\u05c6\3\2\2\2\u05fb\u05d2\3\2\2\2")
        buf.write("\u05fb\u05d8\3\2\2\2\u05fb\u05db\3\2\2\2\u05fb\u05e6\3")
        buf.write("\2\2\2\u05fb\u05ef\3\2\2\2\u05fb\u05f5\3\2\2\2\u05fc\37")
        buf.write("\3\2\2\2\u05fd\u0600\5$\23\2\u05fe\u0600\5\u03b0\u01d9")
        buf.write("\2\u05ff\u05fd\3\2\2\2\u05ff\u05fe\3\2\2\2\u0600\u0609")
        buf.write("\3\2\2\2\u0601\u0605\7\u0307\2\2\u0602\u0606\5$\23\2\u0603")
        buf.write("\u0606\5\"\22\2\u0604\u0606\5\u03b0\u01d9\2\u0605\u0602")
        buf.write("\3\2\2\2\u0605\u0603\3\2\2\2\u0605\u0604\3\2\2\2\u0606")
        buf.write("\u0608\3\2\2\2\u0607\u0601\3\2\2\2\u0608\u060b\3\2\2\2")
        buf.write("\u0609\u0607\3\2\2\2\u0609\u060a\3\2\2\2\u060a!\3\2\2")
        buf.write("\2\u060b\u0609\3\2\2\2\u060c\u0610\5,\27\2\u060d\u0610")
        buf.write("\5.\30\2\u060e\u0610\5\62\32\2\u060f\u060c\3\2\2\2\u060f")
        buf.write("\u060d\3\2\2\2\u060f\u060e\3\2\2\2\u0610#\3\2\2\2\u0611")
        buf.write("\u0613\7\6\2\2\u0612\u0614\7J\2\2\u0613\u0612\3\2\2\2")
        buf.write("\u0613\u0614\3\2\2\2\u0614\u0621\3\2\2\2\u0615\u0616\5")
        buf.write("\u046a\u0236\2\u0616\u0618\5\u036e\u01b8\2\u0617\u0619")
        buf.write("\5\u0364\u01b3\2\u0618\u0617\3\2\2\2\u0618\u0619\3\2\2")
        buf.write("\2\u0619\u061b\3\2\2\2\u061a\u061c\5&\24\2\u061b\u061a")
        buf.write("\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u0622\3\2\2\2\u061d")
        buf.write("\u061e\7\u030a\2\2\u061e\u061f\5V,\2\u061f\u0620\7\u030b")
        buf.write("\2\2\u0620\u0622\3\2\2\2\u0621\u0615\3\2\2\2\u0621\u061d")
        buf.write("\3\2\2\2\u0622\u06a3\3\2\2\2\u0623\u0624\7\6\2\2\u0624")
        buf.write("\u06a3\5\u036a\u01b6\2\u0625\u0627\79\2\2\u0626\u0628")
        buf.write("\7J\2\2\u0627\u0626\3\2\2\2\u0627\u0628\3\2\2\2\u0628")
        buf.write("\u0629\3\2\2\2\u0629\u062a\5\u0414\u020b\2\u062a\u062b")
        buf.write("\5\u046a\u0236\2\u062b\u062d\5\u036e\u01b8\2\u062c\u062e")
        buf.write("\5&\24\2\u062d\u062c\3\2\2\2\u062d\u062e\3\2\2\2\u062e")
        buf.write("\u06a3\3\2\2\2\u062f\u0631\7\u015e\2\2\u0630\u0632\7J")
        buf.write("\2\2\u0631\u0630\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0633")
        buf.write("\3\2\2\2\u0633\u0634\5\u0414\u020b\2\u0634\u0636\5\u036e")
        buf.write("\u01b8\2\u0635\u0637\5&\24\2\u0636\u0635\3\2\2\2\u0636")
        buf.write("\u0637\3\2\2\2\u0637\u06a3\3\2\2\2\u0638\u0655\7\u0096")
        buf.write("\2\2\u0639\u063b\7J\2\2\u063a\u0639\3\2\2\2\u063a\u063b")
        buf.write("\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063e\5\u0414\u020b")
        buf.write("\2\u063d\u063f\5(\25\2\u063e\u063d\3\2\2\2\u063e\u063f")
        buf.write("\3\2\2\2\u063f\u0656\3\2\2\2\u0640\u0641\7\u00c9\2\2\u0641")
        buf.write("\u0648\7\u010b\2\2\u0642\u0643\6\23\r\2\u0643\u0649\5")
        buf.write("\u0414\u020b\2\u0644\u0646\6\23\16\2\u0645\u0647\5\u0414")
        buf.write("\u020b\2\u0646\u0645\3\2\2\2\u0646\u0647\3\2\2\2\u0647")
        buf.write("\u0649\3\2\2\2\u0648\u0642\3\2\2\2\u0648\u0644\3\2\2\2")
        buf.write("\u0649\u0656\3\2\2\2\u064a\u064b\7\u01a6\2\2\u064b\u0656")
        buf.write("\7\u010b\2\2\u064c\u064d\5\u0198\u00cd\2\u064d\u064e\5")
        buf.write("\u041e\u0210\2\u064e\u0656\3\2\2\2\u064f\u0650\6\23\17")
        buf.write("\2\u0650\u0651\7@\2\2\u0651\u0656\5\u046a\u0236\2\u0652")
        buf.write("\u0653\6\23\20\2\u0653\u0654\7X\2\2\u0654\u0656\5\u046a")
        buf.write("\u0236\2\u0655\u063a\3\2\2\2\u0655\u0640\3\2\2\2\u0655")
        buf.write("\u064a\3\2\2\2\u0655\u064c\3\2\2\2\u0655\u064f\3\2\2\2")
        buf.write("\u0655\u0652\3\2\2\2\u0656\u06a3\3\2\2\2\u0657\u0658\7")
        buf.write("\u008e\2\2\u0658\u06a3\7\u0109\2\2\u0659\u065a\7\u009e")
        buf.write("\2\2\u065a\u06a3\7\u0109\2\2\u065b\u065d\7\r\2\2\u065c")
        buf.write("\u065e\7J\2\2\u065d\u065c\3\2\2\2\u065d\u065e\3\2\2\2")
        buf.write("\u065e\u065f\3\2\2\2\u065f\u0669\5\u0414\u020b\2\u0660")
        buf.write("\u0661\7\u01fc\2\2\u0661\u0665\7\u0082\2\2\u0662\u0663")
        buf.write("\6\23\21\2\u0663\u0666\5\u0304\u0183\2\u0664\u0666\5\u0480")
        buf.write("\u0241\2\u0665\u0662\3\2\2\2\u0665\u0664\3\2\2\2\u0666")
        buf.write("\u066a\3\2\2\2\u0667\u0668\7\u0096\2\2\u0668\u066a\7\u0082")
        buf.write("\2\2\u0669\u0660\3\2\2\2\u0669\u0667\3\2\2\2\u066a\u06a3")
        buf.write("\3\2\2\2\u066b\u066c\6\23\22\2\u066c\u066d\7\r\2\2\u066d")
        buf.write("\u066e\7\u00ee\2\2\u066e\u066f\5\u041e\u0210\2\u066f\u0670")
        buf.write("\5\u038c\u01c7\2\u0670\u06a3\3\2\2\2\u0671\u0672\6\23")
        buf.write("\23\2\u0672\u0673\7\r\2\2\u0673\u0674\7@\2\2\u0674\u0675")
        buf.write("\5\u046a\u0236\2\u0675\u0676\5\u0368\u01b5\2\u0676\u06a3")
        buf.write("\3\2\2\2\u0677\u0678\6\23\24\2\u0678\u0679\7\r\2\2\u0679")
        buf.write("\u067a\7X\2\2\u067a\u067b\5\u046a\u0236\2\u067b\u067c")
        buf.write("\5\u0368\u01b5\2\u067c\u06a3\3\2\2\2\u067d\u067e\6\23")
        buf.write("\25\2\u067e\u067f\7\u01c7\2\2\u067f\u0680\7J\2\2\u0680")
        buf.write("\u0681\5\u0414\u020b\2\u0681\u0682\7\u0250\2\2\u0682\u0683")
        buf.write("\5\u046a\u0236\2\u0683\u06a3\3\2\2\2\u0684\u0686\7\u01c7")
        buf.write("\2\2\u0685\u0687\t\3\2\2\u0686\u0685\3\2\2\2\u0686\u0687")
        buf.write("\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u06a3\5\u044a\u0226")
        buf.write("\2\u0689\u068a\6\23\26\2\u068a\u068b\7\u01c7\2\2\u068b")
        buf.write("\u068c\5\u0198\u00cd\2\u068c\u068d\5\u041e\u0210\2\u068d")
        buf.write("\u068e\7\u0250\2\2\u068e\u068f\5\u041c\u020f\2\u068f\u06a3")
        buf.write("\3\2\2\2\u0690\u0691\7`\2\2\u0691\u0692\7\u0250\2\2\u0692")
        buf.write("\u0696\5\u02f8\u017d\2\u0693\u0694\6\23\27\2\u0694\u0697")
        buf.write("\7\u0082\2\2\u0695\u0697\5\u03aa\u01d6\2\u0696\u0693\3")
        buf.write("\2\2\2\u0696\u0695\3\2\2\2\u0697\u0699\3\2\2\2\u0698\u069a")
        buf.write("\5\u03dc\u01ef\2\u0699\u0698\3\2\2\2\u0699\u069a\3\2\2")
        buf.write("\2\u069a\u06a3\3\2\2\2\u069b\u06a3\7\u00c8\2\2\u069c\u069d")
        buf.write("\7\u018b\2\2\u069d\u069e\7/\2\2\u069e\u06a3\5*\26\2\u069f")
        buf.write("\u06a0\6\23\30\2\u06a0\u06a1\7\u0269\2\2\u06a1\u06a3\7")
        buf.write("\u0195\2\2\u06a2\u0611\3\2\2\2\u06a2\u0623\3\2\2\2\u06a2")
        buf.write("\u0625\3\2\2\2\u06a2\u062f\3\2\2\2\u06a2\u0638\3\2\2\2")
        buf.write("\u06a2\u0657\3\2\2\2\u06a2\u0659\3\2\2\2\u06a2\u065b\3")
        buf.write("\2\2\2\u06a2\u066b\3\2\2\2\u06a2\u0671\3\2\2\2\u06a2\u0677")
        buf.write("\3\2\2\2\u06a2\u067d\3\2\2\2\u06a2\u0684\3\2\2\2\u06a2")
        buf.write("\u0689\3\2\2\2\u06a2\u0690\3\2\2\2\u06a2\u069b\3\2\2\2")
        buf.write("\u06a2\u069c\3\2\2\2\u06a2\u069f\3\2\2\2\u06a3%\3\2\2")
        buf.write("\2\u06a4\u06a5\7\b\2\2\u06a5\u06a8\5\u046a\u0236\2\u06a6")
        buf.write("\u06a8\7\u00c1\2\2\u06a7\u06a4\3\2\2\2\u06a7\u06a6\3\2")
        buf.write("\2\2\u06a8\'\3\2\2\2\u06a9\u06aa\t\4\2\2\u06aa)\3\2\2")
        buf.write("\2\u06ab\u06ad\5\u046a\u0236\2\u06ac\u06ae\5\u014c\u00a7")
        buf.write("\2\u06ad\u06ac\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06b6")
        buf.write("\3\2\2\2\u06af\u06b0\7\u0307\2\2\u06b0\u06b2\5\u046a\u0236")
        buf.write("\2\u06b1\u06b3\5\u014c\u00a7\2\u06b2\u06b1\3\2\2\2\u06b2")
        buf.write("\u06b3\3\2\2\2\u06b3\u06b5\3\2\2\2\u06b4\u06af\3\2\2\2")
        buf.write("\u06b5\u06b8\3\2\2\2\u06b6\u06b4\3\2\2\2\u06b6\u06b7\3")
        buf.write("\2\2\2\u06b7+\3\2\2\2\u06b8\u06b6\3\2\2\2\u06b9\u06bb")
        buf.write("\7\13\2\2\u06ba\u06bc\7\u02f0\2\2\u06bb\u06ba\3\2\2\2")
        buf.write("\u06bb\u06bc\3\2\2\2\u06bc\u06bf\3\2\2\2\u06bd\u06c0\7")
        buf.write("\u0082\2\2\u06be\u06c0\5\u046a\u0236\2\u06bf\u06bd\3\2")
        buf.write("\2\2\u06bf\u06be\3\2\2\2\u06c0-\3\2\2\2\u06c1\u06c3\7")
        buf.write("\u0121\2\2\u06c2\u06c4\7\u02f0\2\2\u06c3\u06c2\3\2\2\2")
        buf.write("\u06c3\u06c4\3\2\2\2\u06c4\u06c7\3\2\2\2\u06c5\u06c8\7")
        buf.write("\u0082\2\2\u06c6\u06c8\5\u046a\u0236\2\u06c7\u06c5\3\2")
        buf.write("\2\2\u06c7\u06c6\3\2\2\2\u06c8/\3\2\2\2\u06c9\u06cb\5")
        buf.write(",\27\2\u06ca\u06cc\5.\30\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc")
        buf.write("\3\2\2\2\u06cc\u06d2\3\2\2\2\u06cd\u06cf\5.\30\2\u06ce")
        buf.write("\u06d0\5,\27\2\u06cf\u06ce\3\2\2\2\u06cf\u06d0\3\2\2\2")
        buf.write("\u06d0\u06d2\3\2\2\2\u06d1\u06c9\3\2\2\2\u06d1\u06cd\3")
        buf.write("\2\2\2\u06d2\61\3\2\2\2\u06d3\u06d4\6\32\31\2\u06d4\u06d5")
        buf.write("\t\5\2\2\u06d5\u06d6\7\u0273\2\2\u06d6\63\3\2\2\2\u06d7")
        buf.write("\u06d8\7\u01c6\2\2\u06d8\u06d9\7\u0195\2\2\u06d9\65\3")
        buf.write("\2\2\2\u06da\u06dd\7\f\2\2\u06db\u06dd\5\u046c\u0237\2")
        buf.write("\u06dc\u06da\3\2\2\2\u06dc\u06db\3\2\2\2\u06dd\67\3\2")
        buf.write("\2\2\u06de\u06df\7\u023e\2\2\u06df\u0701\5\u0438\u021d")
        buf.write("\2\u06e0\u06e1\t\6\2\2\u06e1\u06e2\7q\2\2\u06e2\u06e4")
        buf.write("\5\u048a\u0246\2\u06e3\u06e5\5@!\2\u06e4\u06e3\3\2\2\2")
        buf.write("\u06e4\u06e5\3\2\2\2\u06e5\u0702\3\2\2\2\u06e6\u06fa\6")
        buf.write("\35\32\2\u06e7\u06fb\3\2\2\2\u06e8\u06e9\79\2\2\u06e9")
        buf.write("\u06ea\7q\2\2\u06ea\u06f5\5\u048a\u0246\2\u06eb\u06f2")
        buf.write("\5D#\2\u06ec\u06ee\7\u0307\2\2\u06ed\u06ec\3\2\2\2\u06ed")
        buf.write("\u06ee\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f1\5D#\2\u06f0")
        buf.write("\u06ed\3\2\2\2\u06f1\u06f4\3\2\2\2\u06f2\u06f0\3\2\2\2")
        buf.write("\u06f2\u06f3\3\2\2\2\u06f3\u06f6\3\2\2\2\u06f4\u06f2\3")
        buf.write("\2\2\2\u06f5\u06eb\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06fb")
        buf.write("\3\2\2\2\u06f7\u06fb\t\7\2\2\u06f8\u06f9\7\u0175\2\2\u06f9")
        buf.write("\u06fb\7\3\2\2\u06fa\u06e7\3\2\2\2\u06fa\u06e8\3\2\2\2")
        buf.write("\u06fa\u06f7\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fb\u0702\3")
        buf.write("\2\2\2\u06fc\u06fd\7\u01c7\2\2\u06fd\u06fe\7\u0250\2\2")
        buf.write("\u06fe\u0702\5\u046a\u0236\2\u06ff\u0700\6\35\33\2\u0700")
        buf.write("\u0702\5@!\2\u0701\u06e0\3\2\2\2\u0701\u06e6\3\2\2\2\u0701")
        buf.write("\u06fc\3\2\2\2\u0701\u06ff\3\2\2\2\u07029\3\2\2\2\u0703")
        buf.write("\u0704\7\u025f\2\2\u0704\u0705\7\u023e\2\2\u0705\u0706")
        buf.write("\5\u0438\u021d\2\u0706\u0707\7\u01fc\2\2\u0707\u0709\t")
        buf.write("\b\2\2\u0708\u070a\5<\37\2\u0709\u0708\3\2\2\2\u0709\u070a")
        buf.write("\3\2\2\2\u070a;\3\2\2\2\u070b\u0712\5> \2\u070c\u070e")
        buf.write("\7\u0307\2\2\u070d\u070c\3\2\2\2\u070d\u070e\3\2\2\2\u070e")
        buf.write("\u070f\3\2\2\2\u070f\u0711\5> \2\u0710\u070d\3\2\2\2\u0711")
        buf.write("\u0714\3\2\2\2\u0712\u0710\3\2\2\2\u0712\u0713\3\2\2\2")
        buf.write("\u0713=\3\2\2\2\u0714\u0712\3\2\2\2\u0715\u0716\5\u0096")
        buf.write("L\2\u0716?\3\2\2\2\u0717\u071e\5B\"\2\u0718\u071a\7\u0307")
        buf.write("\2\2\u0719\u0718\3\2\2\2\u0719\u071a\3\2\2\2\u071a\u071b")
        buf.write("\3\2\2\2\u071b\u071d\5B\"\2\u071c\u0719\3\2\2\2\u071d")
        buf.write("\u0720\3\2\2\2\u071e\u071c\3\2\2\2\u071e\u071f\3\2\2\2")
        buf.write("\u071fA\3\2\2\2\u0720\u071e\3\2\2\2\u0721\u0723\7\u00f0")
        buf.write("\2\2\u0722\u0724\7\u02f0\2\2\u0723\u0722\3\2\2\2\u0723")
        buf.write("\u0724\3\2\2\2\u0724\u0725\3\2\2\2\u0725\u072c\5\u04a4")
        buf.write("\u0253\2\u0726\u072c\5\u008eH\2\u0727\u072c\5\u0090I\2")
        buf.write("\u0728\u072c\5\u0096L\2\u0729\u072c\5\u0098M\2\u072a\u072c")
        buf.write("\5\u009eP\2\u072b\u0721\3\2\2\2\u072b\u0726\3\2\2\2\u072b")
        buf.write("\u0727\3\2\2\2\u072b\u0728\3\2\2\2\u072b\u0729\3\2\2\2")
        buf.write("\u072b\u072a\3\2\2\2\u072cC\3\2\2\2\u072d\u072f\7\u00f0")
        buf.write("\2\2\u072e\u0730\7\u02f0\2\2\u072f\u072e\3\2\2\2\u072f")
        buf.write("\u0730\3\2\2\2\u0730\u0731\3\2\2\2\u0731\u0735\5\u04a4")
        buf.write("\u0253\2\u0732\u0735\5\u008eH\2\u0733\u0735\5\u0090I\2")
        buf.write("\u0734\u072d\3\2\2\2\u0734\u0732\3\2\2\2\u0734\u0733\3")
        buf.write("\2\2\2\u0735E\3\2\2\2\u0736\u0738\5\u00a4S\2\u0737\u0736")
        buf.write("\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u073a\3\2\2\2\u0739")
        buf.write("\u073b\5\u03d2\u01ea\2\u073a\u0739\3\2\2\2\u073a\u073b")
        buf.write("\3\2\2\2\u073b\u073d\3\2\2\2\u073c\u073e\5\u00a6T\2\u073d")
        buf.write("\u073c\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u073f\3\2\2\2")
        buf.write("\u073f\u0740\7\u027e\2\2\u0740\u0741\5\u0434\u021b\2\u0741")
        buf.write("\u0742\5H%\2\u0742G\3\2\2\2\u0743\u0745\5\u0416\u020c")
        buf.write("\2\u0744\u0743\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u0746")
        buf.write("\3\2\2\2\u0746\u0747\7\23\2\2\u0747\u0748\5J&\2\u0748")
        buf.write("I\3\2\2\2\u0749\u074b\5\\/\2\u074a\u074c\5L\'\2\u074b")
        buf.write("\u074a\3\2\2\2\u074b\u074c\3\2\2\2\u074cK\3\2\2\2\u074d")
        buf.write("\u074f\7\u0287\2\2\u074e\u0750\t\t\2\2\u074f\u074e\3\2")
        buf.write("\2\2\u074f\u0750\3\2\2\2\u0750\u0751\3\2\2\2\u0751\u0752")
        buf.write("\7@\2\2\u0752\u0753\7\u0189\2\2\u0753M\3\2\2\2\u0754\u0767")
        buf.write("\7c\2\2\u0755\u0768\5P)\2\u0756\u0768\5T+\2\u0757\u0768")
        buf.write("\5b\62\2\u0758\u0768\5`\61\2\u0759\u0768\5d\63\2\u075a")
        buf.write("\u0768\5r:\2\u075b\u0768\5\u00a0Q\2\u075c\u0768\5\u00a8")
        buf.write("U\2\u075d\u0768\5l\67\2\u075e\u0768\5x=\2\u075f\u0768")
        buf.write("\5~@\2\u0760\u0768\5\u00acW\2\u0761\u0762\6(\34\2\u0762")
        buf.write("\u0768\5\u00aeX\2\u0763\u0764\6(\35\2\u0764\u0768\5\u00b0")
        buf.write("Y\2\u0765\u0766\6(\36\2\u0766\u0768\5\u0080A\2\u0767\u0755")
        buf.write("\3\2\2\2\u0767\u0756\3\2\2\2\u0767\u0757\3\2\2\2\u0767")
        buf.write("\u0758\3\2\2\2\u0767\u0759\3\2\2\2\u0767\u075a\3\2\2\2")
        buf.write("\u0767\u075b\3\2\2\2\u0767\u075c\3\2\2\2\u0767\u075d\3")
        buf.write("\2\2\2\u0767\u075e\3\2\2\2\u0767\u075f\3\2\2\2\u0767\u0760")
        buf.write("\3\2\2\2\u0767\u0761\3\2\2\2\u0767\u0763\3\2\2\2\u0767")
        buf.write("\u0765\3\2\2\2\u0768O\3\2\2\2\u0769\u076b\7o\2\2\u076a")
        buf.write("\u076c\5\u03d6\u01ec\2\u076b\u076a\3\2\2\2\u076b\u076c")
        buf.write("\3\2\2\2\u076c\u076d\3\2\2\2\u076d\u0771\5\u0422\u0212")
        buf.write("\2\u076e\u0770\5R*\2\u076f\u076e\3\2\2\2\u0770\u0773\3")
        buf.write("\2\2\2\u0771\u076f\3\2\2\2\u0771\u0772\3\2\2\2\u0772Q")
        buf.write("\3\2\2\2\u0773\u0771\3\2\2\2\u0774\u0779\5\u03ba\u01de")
        buf.write("\2\u0775\u0779\5\u03b6\u01dc\2\u0776\u0777\6*\37\2\u0777")
        buf.write("\u0779\5\u03b8\u01dd\2\u0778\u0774\3\2\2\2\u0778\u0775")
        buf.write("\3\2\2\2\u0778\u0776\3\2\2\2\u0779S\3\2\2\2\u077a\u077c")
        buf.write("\7\u0243\2\2\u077b\u077a\3\2\2\2\u077b\u077c\3\2\2\2\u077c")
        buf.write("\u077d\3\2\2\2\u077d\u077f\7\u0240\2\2\u077e\u0780\5\u03d6")
        buf.write("\u01ec\2\u077f\u077e\3\2\2\2\u077f\u0780\3\2\2\2\u0780")
        buf.write("\u0781\3\2\2\2\u0781\u0798\5\u044a\u0226\2\u0782\u0783")
        buf.write("\7\u030a\2\2\u0783\u0784\5V,\2\u0784\u0785\7\u030b\2\2")
        buf.write("\u0785\u0787\3\2\2\2\u0786\u0782\3\2\2\2\u0786\u0787\3")
        buf.write("\2\2\2\u0787\u0789\3\2\2\2\u0788\u078a\5\u03ae\u01d8\2")
        buf.write("\u0789\u0788\3\2\2\2\u0789\u078a\3\2\2\2\u078a\u078c\3")
        buf.write("\2\2\2\u078b\u078d\5\u03bc\u01df\2\u078c\u078b\3\2\2\2")
        buf.write("\u078c\u078d\3\2\2\2\u078d\u078f\3\2\2\2\u078e\u0790\5")
        buf.write("Z.\2\u078f\u078e\3\2\2\2\u078f\u0790\3\2\2\2\u0790\u0799")
        buf.write("\3\2\2\2\u0791\u0792\7\u0115\2\2\u0792\u0799\5\u0450\u0229")
        buf.write("\2\u0793\u0794\7\u030a\2\2\u0794\u0795\7\u0115\2\2\u0795")
        buf.write("\u0796\5\u0450\u0229\2\u0796\u0797\7\u030b\2\2\u0797\u0799")
        buf.write("\3\2\2\2\u0798\u0786\3\2\2\2\u0798\u0791\3\2\2\2\u0798")
        buf.write("\u0793\3\2\2\2\u0799U\3\2\2\2\u079a\u079f\5X-\2\u079b")
        buf.write("\u079c\7\u0307\2\2\u079c\u079e\5X-\2\u079d\u079b\3\2\2")
        buf.write("\2\u079e\u07a1\3\2\2\2\u079f\u079d\3\2\2\2\u079f\u07a0")
        buf.write("\3\2\2\2\u07a0W\3\2\2\2\u07a1\u079f\3\2\2\2\u07a2\u07a5")
        buf.write("\5\u0362\u01b2\2\u07a3\u07a5\5\u036a\u01b6\2\u07a4\u07a2")
        buf.write("\3\2\2\2\u07a4\u07a3\3\2\2\2\u07a5Y\3\2\2\2\u07a6\u07a8")
        buf.write("\t\n\2\2\u07a7\u07a6\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8")
        buf.write("\u07aa\3\2\2\2\u07a9\u07ab\7\23\2\2\u07aa\u07a9\3\2\2")
        buf.write("\2\u07aa\u07ab\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u07ad")
        buf.write("\5\\/\2\u07ad[\3\2\2\2\u07ae\u07b1\5\u0110\u0089\2\u07af")
        buf.write("\u07b1\5\u0114\u008b\2\u07b0\u07ae\3\2\2\2\u07b0\u07af")
        buf.write("\3\2\2\2\u07b1]\3\2\2\2\u07b2\u07b6\7c\2\2\u07b3\u07b7")
        buf.write("\5`\61\2\u07b4\u07b7\5b\62\2\u07b5\u07b7\5d\63\2\u07b6")
        buf.write("\u07b3\3\2\2\2\u07b6\u07b4\3\2\2\2\u07b6\u07b5\3\2\2\2")
        buf.write("\u07b7\u07b9\3\2\2\2\u07b8\u07ba\7\u0308\2\2\u07b9\u07b8")
        buf.write("\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07bb\3\2\2\2\u07bb")
        buf.write("\u07bc\7\2\2\3\u07bc_\3\2\2\2\u07bd\u07bf\5\u03d2\u01ea")
        buf.write("\2\u07be\u07bd\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c0")
        buf.write("\3\2\2\2\u07c0\u07c1\7\u01a8\2\2\u07c1\u07c2\5\u0426\u0214")
        buf.write("\2\u07c2\u07cb\7\u030a\2\2\u07c3\u07c8\5\u03d8\u01ed\2")
        buf.write("\u07c4\u07c5\7\u0307\2\2\u07c5\u07c7\5\u03d8\u01ed\2\u07c6")
        buf.write("\u07c4\3\2\2\2\u07c7\u07ca\3\2\2\2\u07c8\u07c6\3\2\2\2")
        buf.write("\u07c8\u07c9\3\2\2\2\u07c9\u07cc\3\2\2\2\u07ca\u07c8\3")
        buf.write("\2\2\2\u07cb\u07c3\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07cd")
        buf.write("\3\2\2\2\u07cd\u07d1\7\u030b\2\2\u07ce\u07d0\5f\64\2\u07cf")
        buf.write("\u07ce\3\2\2\2\u07d0\u07d3\3\2\2\2\u07d1\u07cf\3\2\2\2")
        buf.write("\u07d1\u07d2\3\2\2\2\u07d2\u07d4\3\2\2\2\u07d3\u07d1\3")
        buf.write("\2\2\2\u07d4\u07d5\5\u0312\u018a\2\u07d5a\3\2\2\2\u07d6")
        buf.write("\u07d8\5\u03d2\u01ea\2\u07d7\u07d6\3\2\2\2\u07d7\u07d8")
        buf.write("\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07da\7\u00d0\2\2\u07da")
        buf.write("\u07db\5\u042a\u0216\2\u07db\u07e4\7\u030a\2\2\u07dc\u07e1")
        buf.write("\5\u03da\u01ee\2\u07dd\u07de\7\u0307\2\2\u07de\u07e0\5")
        buf.write("\u03da\u01ee\2\u07df\u07dd\3\2\2\2\u07e0\u07e3\3\2\2\2")
        buf.write("\u07e1\u07df\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e5\3")
        buf.write("\2\2\2\u07e3\u07e1\3\2\2\2\u07e4\u07dc\3\2\2\2\u07e4\u07e5")
        buf.write("\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07e7\7\u030b\2\2\u07e7")
        buf.write("\u07e8\7\u01dc\2\2\u07e8\u07ec\5\u03de\u01f0\2\u07e9\u07eb")
        buf.write("\5f\64\2\u07ea\u07e9\3\2\2\2\u07eb\u07ee\3\2\2\2\u07ec")
        buf.write("\u07ea\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07ef\3\2\2\2")
        buf.write("\u07ee\u07ec\3\2\2\2\u07ef\u07f0\5\u0312\u018a\2\u07f0")
        buf.write("c\3\2\2\2\u07f1\u07f3\7\n\2\2\u07f2\u07f1\3\2\2\2\u07f2")
        buf.write("\u07f3\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f5\7\u00d0")
        buf.write("\2\2\u07f5\u07f6\5\u0442\u0222\2\u07f6\u07f7\7\u01dc\2")
        buf.write("\2\u07f7\u07f8\t\13\2\2\u07f8\u07f9\7\u020a\2\2\u07f9")
        buf.write("\u07fa\5\u048a\u0246\2\u07fae\3\2\2\2\u07fb\u0801\5j\66")
        buf.write("\2\u07fc\u07fe\7\u0175\2\2\u07fd\u07fc\3\2\2\2\u07fd\u07fe")
        buf.write("\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0801\7\u008b\2\2\u0800")
        buf.write("\u07fb\3\2\2\2\u0800\u07fd\3\2\2\2\u0801g\3\2\2\2\u0802")
        buf.write("\u0804\5f\64\2\u0803\u0802\3\2\2\2\u0804\u0805\3\2\2\2")
        buf.write("\u0805\u0803\3\2\2\2\u0805\u0806\3\2\2\2\u0806i\3\2\2")
        buf.write("\2\u0807\u0808\7M\2\2\u0808\u0819\5\u048a\u0246\2\u0809")
        buf.write("\u080a\7\u010d\2\2\u080a\u0819\7\u021b\2\2\u080b\u080c")
        buf.write("\7\u0177\2\2\u080c\u0819\7\u021b\2\2\u080d\u080e\7\\\2")
        buf.write("\2\u080e\u0819\7\u021b\2\2\u080f\u0810\7\u01b3\2\2\u0810")
        buf.write("\u0811\7\u021b\2\2\u0811\u0819\7r\2\2\u0812\u0813\7\u015d")
        buf.write("\2\2\u0813\u0814\7\u021b\2\2\u0814\u0819\7r\2\2\u0815")
        buf.write("\u0816\7\u021b\2\2\u0816\u0817\7\u01f2\2\2\u0817\u0819")
        buf.write("\t\f\2\2\u0818\u0807\3\2\2\2\u0818\u0809\3\2\2\2\u0818")
        buf.write("\u080b\3\2\2\2\u0818\u080d\3\2\2\2\u0818\u080f\3\2\2\2")
        buf.write("\u0818\u0812\3\2\2\2\u0818\u0815\3\2\2\2\u0819k\3\2\2")
        buf.write("\2\u081a\u081c\5\u040a\u0206\2\u081b\u081a\3\2\2\2\u081b")
        buf.write("\u081c\3\2\2\2\u081c\u0846\3\2\2\2\u081d\u081f\7\u0263")
        buf.write("\2\2\u081e\u081d\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u0820")
        buf.write("\3\2\2\2\u0820\u0829\7\u00ee\2\2\u0821\u0822\6\67 \2\u0822")
        buf.write("\u0824\5\u041c\u020f\2\u0823\u0825\5\u038e\u01c8\2\u0824")
        buf.write("\u0823\3\2\2\2\u0824\u0825\3\2\2\2\u0825\u082a\3\2\2\2")
        buf.write("\u0826\u0828\5n8\2\u0827\u0826\3\2\2\2\u0827\u0828\3\2")
        buf.write("\2\2\u0828\u082a\3\2\2\2\u0829\u0821\3\2\2\2\u0829\u0827")
        buf.write("\3\2\2\2\u082a\u082b\3\2\2\2\u082b\u082f\5p9\2\u082c\u082e")
        buf.write("\5\u0388\u01c5\2\u082d\u082c\3\2\2\2\u082e\u0831\3\2\2")
        buf.write("\2\u082f\u082d\3\2\2\2\u082f\u0830\3\2\2\2\u0830\u0847")
        buf.write("\3\2\2\2\u0831\u082f\3\2\2\2\u0832\u0833\7\u00cf\2\2\u0833")
        buf.write("\u0834\7\u00ee\2\2\u0834\u0835\5\u041c\u020f\2\u0835\u0839")
        buf.write("\5p9\2\u0836\u0838\5\u0390\u01c9\2\u0837\u0836\3\2\2\2")
        buf.write("\u0838\u083b\3\2\2\2\u0839\u0837\3\2\2\2\u0839\u083a\3")
        buf.write("\2\2\2\u083a\u0847\3\2\2\2\u083b\u0839\3\2\2\2\u083c\u083d")
        buf.write("\7\u020d\2\2\u083d\u083e\7\u00ee\2\2\u083e\u083f\5\u041c")
        buf.write("\u020f\2\u083f\u0843\5p9\2\u0840\u0842\5\u0392\u01ca\2")
        buf.write("\u0841\u0840\3\2\2\2\u0842\u0845\3\2\2\2\u0843\u0841\3")
        buf.write("\2\2\2\u0843\u0844\3\2\2\2\u0844\u0847\3\2\2\2\u0845\u0843")
        buf.write("\3\2\2\2\u0846\u081e\3\2\2\2\u0846\u0832\3\2\2\2\u0846")
        buf.write("\u083c\3\2\2\2\u0847\u0849\3\2\2\2\u0848\u084a\5\60\31")
        buf.write("\2\u0849\u0848\3\2\2\2\u0849\u084a\3\2\2\2\u084am\3\2")
        buf.write("\2\2\u084b\u084e\5\u041c\u020f\2\u084c\u084d\7\u026f\2")
        buf.write("\2\u084d\u084f\5\u0386\u01c4\2\u084e\u084c\3\2\2\2\u084e")
        buf.write("\u084f\3\2\2\2\u084f\u0855\3\2\2\2\u0850\u0851\5\u041c")
        buf.write("\u020f\2\u0851\u0852\7\u0259\2\2\u0852\u0853\5\u0386\u01c4")
        buf.write("\2\u0853\u0855\3\2\2\2\u0854\u084b\3\2\2\2\u0854\u0850")
        buf.write("\3\2\2\2\u0855o\3\2\2\2\u0856\u0857\7\u0181\2\2\u0857")
        buf.write("\u0858\5\u0450\u0229\2\u0858\u0859\5\u0384\u01c3\2\u0859")
        buf.write("q\3\2\2\2\u085a\u085b\7\u0122\2\2\u085b\u085c\7\u00db")
        buf.write("\2\2\u085c\u085d\5\u043a\u021e\2\u085d\u085e\7\6\2\2\u085e")
        buf.write("\u085f\t\r\2\2\u085f\u0861\5\u048a\u0246\2\u0860\u0862")
        buf.write("\5t;\2\u0861\u0860\3\2\2\2\u0861\u0862\3\2\2\2\u0862s")
        buf.write("\3\2\2\2\u0863\u086a\5v<\2\u0864\u0866\7\u0307\2\2\u0865")
        buf.write("\u0864\3\2\2\2\u0865\u0866\3\2\2\2\u0866\u0867\3\2\2\2")
        buf.write("\u0867\u0869\5v<\2\u0868\u0865\3\2\2\2\u0869\u086c\3\2")
        buf.write("\2\2\u086a\u0868\3\2\2\2\u086a\u086b\3\2\2\2\u086bu\3")
        buf.write("\2\2\2\u086c\u086a\3\2\2\2\u086d\u0874\5\u008aF\2\u086e")
        buf.write("\u0874\5\u008cG\2\u086f\u0874\5\u0094K\2\u0870\u0874\5")
        buf.write("\u0096L\2\u0871\u0874\5\u0098M\2\u0872\u0874\5\u009aN")
        buf.write("\2\u0873\u086d\3\2\2\2\u0873\u086e\3\2\2\2\u0873\u086f")
        buf.write("\3\2\2\2\u0873\u0870\3\2\2\2\u0873\u0871\3\2\2\2\u0873")
        buf.write("\u0872\3\2\2\2\u0874w\3\2\2\2\u0875\u0876\7\u01f9\2\2")
        buf.write("\u0876\u0877\5\u0444\u0223\2\u0877\u0878\7\u00c9\2\2\u0878")
        buf.write("\u0879\7r\2\2\u0879\u087a\7\u028a\2\2\u087a\u087b\5\u049e")
        buf.write("\u0250\2\u087b\u087c\5z>\2\u087cy\3\2\2\2\u087d\u087e")
        buf.write("\7\u0188\2\2\u087e\u087f\7\u030a\2\2\u087f\u0884\5|?\2")
        buf.write("\u0880\u0881\7\u0307\2\2\u0881\u0883\5|?\2\u0882\u0880")
        buf.write("\3\2\2\2\u0883\u0886\3\2\2\2\u0884\u0882\3\2\2\2\u0884")
        buf.write("\u0885\3\2\2\2\u0885\u0887\3\2\2\2\u0886\u0884\3\2\2\2")
        buf.write("\u0887\u0888\7\u030b\2\2\u0888{\3\2\2\2\u0889\u088a\7")
        buf.write("\u00e2\2\2\u088a\u0898\5\u048a\u0246\2\u088b\u088c\7o")
        buf.write("\2\2\u088c\u0898\5\u048a\u0246\2\u088d\u088e\7\u026c\2")
        buf.write("\2\u088e\u0898\5\u048a\u0246\2\u088f\u0890\7\u0198\2\2")
        buf.write("\u0890\u0898\5\u048a\u0246\2\u0891\u0892\7\u0209\2\2\u0892")
        buf.write("\u0898\5\u048a\u0246\2\u0893\u0894\7\u0190\2\2\u0894\u0898")
        buf.write("\5\u048a\u0246\2\u0895\u0896\7\u019f\2\2\u0896\u0898\5")
        buf.write("\u0476\u023c\2\u0897\u0889\3\2\2\2\u0897\u088b\3\2\2\2")
        buf.write("\u0897\u088d\3\2\2\2\u0897\u088f\3\2\2\2\u0897\u0891\3")
        buf.write("\2\2\2\u0897\u0893\3\2\2\2\u0897\u0895\3\2\2\2\u0898}")
        buf.write("\3\2\2\2\u0899\u089a\7\u023e\2\2\u089a\u089b\5\u0436\u021c")
        buf.write("\2\u089b\u08a0\5\u0082B\2\u089c\u089d\7\u026e\2\2\u089d")
        buf.write("\u089e\7\u0122\2\2\u089e\u089f\7\u00db\2\2\u089f\u08a1")
        buf.write("\5\u043c\u021f\2\u08a0\u089c\3\2\2\2\u08a0\u08a1\3\2\2")
        buf.write("\2\u08a1\u08a3\3\2\2\2\u08a2\u08a4\5\u0086D\2\u08a3\u08a2")
        buf.write("\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\177\3\2\2\2\u08a5\u08a6")
        buf.write("\7\u025f\2\2\u08a6\u08a7\7\u023e\2\2\u08a7\u08a8\5\u0436")
        buf.write("\u021c\2\u08a8\u08a9\7\6\2\2\u08a9\u08ab\5\u0084C\2\u08aa")
        buf.write("\u08ac\5<\37\2\u08ab\u08aa\3\2\2\2\u08ab\u08ac\3\2\2\2")
        buf.write("\u08ac\u0081\3\2\2\2\u08ad\u08b0\6B!\2\u08ae\u08af\7\6")
        buf.write("\2\2\u08af\u08b1\5\u0084C\2\u08b0\u08ae\3\2\2\2\u08b0")
        buf.write("\u08b1\3\2\2\2\u08b1\u08b5\3\2\2\2\u08b2\u08b3\7\6\2\2")
        buf.write("\u08b3\u08b5\5\u0084C\2\u08b4\u08ad\3\2\2\2\u08b4\u08b2")
        buf.write("\3\2\2\2\u08b5\u0083\3\2\2\2\u08b6\u08b7\7q\2\2\u08b7")
        buf.write("\u08b8\5\u048a\u0246\2\u08b8\u0085\3\2\2\2\u08b9\u08c0")
        buf.write("\5\u0088E\2\u08ba\u08bc\7\u0307\2\2\u08bb\u08ba\3\2\2")
        buf.write("\2\u08bb\u08bc\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd\u08bf")
        buf.write("\5\u0088E\2\u08be\u08bb\3\2\2\2\u08bf\u08c2\3\2\2\2\u08c0")
        buf.write("\u08be\3\2\2\2\u08c0\u08c1\3\2\2\2\u08c1\u0087\3\2\2\2")
        buf.write("\u08c2\u08c0\3\2\2\2\u08c3\u08d0\5\u008aF\2\u08c4\u08d0")
        buf.write("\5\u008eH\2\u08c5\u08d0\5\u0090I\2\u08c6\u08d0\5\u0092")
        buf.write("J\2\u08c7\u08d0\5\u0094K\2\u08c8\u08d0\5\u0096L\2\u08c9")
        buf.write("\u08d0\5\u0098M\2\u08ca\u08d0\5\u009aN\2\u08cb\u08cc\6")
        buf.write("E\"\2\u08cc\u08d0\5\u009cO\2\u08cd\u08ce\6E#\2\u08ce\u08d0")
        buf.write("\5\u009eP\2\u08cf\u08c3\3\2\2\2\u08cf\u08c4\3\2\2\2\u08cf")
        buf.write("\u08c5\3\2\2\2\u08cf\u08c6\3\2\2\2\u08cf\u08c7\3\2\2\2")
        buf.write("\u08cf\u08c8\3\2\2\2\u08cf\u08c9\3\2\2\2\u08cf\u08ca\3")
        buf.write("\2\2\2\u08cf\u08cb\3\2\2\2\u08cf\u08cd\3\2\2\2\u08d0\u0089")
        buf.write("\3\2\2\2\u08d1\u08d3\7\u00f0\2\2\u08d2\u08d4\7\u02f0\2")
        buf.write("\2\u08d3\u08d2\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08d5")
        buf.write("\3\2\2\2\u08d5\u08d6\5\u04a4\u0253\2\u08d6\u008b\3\2\2")
        buf.write("\2\u08d7\u08d9\t\16\2\2\u08d8\u08da\7\u02f0\2\2\u08d9")
        buf.write("\u08d8\3\2\2\2\u08d9\u08da\3\2\2\2\u08da\u08db\3\2\2\2")
        buf.write("\u08db\u08dc\5\u04a4\u0253\2\u08dc\u008d\3\2\2\2\u08dd")
        buf.write("\u08df\7\31\2\2\u08de\u08e0\7\u02f0\2\2\u08df\u08de\3")
        buf.write("\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u08e2")
        buf.write("\5\u04a4\u0253\2\u08e2\u008f\3\2\2\2\u08e3\u08e5\7\u0146")
        buf.write("\2\2\u08e4\u08e6\7\u02f0\2\2\u08e5\u08e4\3\2\2\2\u08e5")
        buf.write("\u08e6\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u08e8\5\u04a4")
        buf.write("\u0253\2\u08e8\u0091\3\2\2\2\u08e9\u08eb\7\u00b7\2\2\u08ea")
        buf.write("\u08ec\7\u02f0\2\2\u08eb\u08ea\3\2\2\2\u08eb\u08ec\3\2")
        buf.write("\2\2\u08ec\u08ed\3\2\2\2\u08ed\u08ee\5\u04a4\u0253\2\u08ee")
        buf.write("\u0093\3\2\2\2\u08ef\u08f1\7\u0172\2\2\u08f0\u08f2\7\u02f0")
        buf.write("\2\2\u08f1\u08f0\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2\u08f3")
        buf.write("\3\2\2\2\u08f3\u08f4\5\u0478\u023d\2\u08f4\u0095\3\2\2")
        buf.write("\2\u08f5\u08f7\7\u022b\2\2\u08f6\u08f5\3\2\2\2\u08f6\u08f7")
        buf.write("\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08fa\7\u00a5\2\2\u08f9")
        buf.write("\u08fb\7\u02f0\2\2\u08fa\u08f9\3\2\2\2\u08fa\u08fb\3\2")
        buf.write("\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fd\5\u0448\u0225\2\u08fd")
        buf.write("\u0097\3\2\2\2\u08fe\u08ff\t\17\2\2\u08ff\u0099\3\2\2")
        buf.write("\2\u0900\u0902\7M\2\2\u0901\u0903\7\u02f0\2\2\u0902\u0901")
        buf.write("\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u0904\3\2\2\2\u0904")
        buf.write("\u0905\5\u048a\u0246\2\u0905\u009b\3\2\2\2\u0906\u0908")
        buf.write("\7\u00bf\2\2\u0907\u0909\7\u02f0\2\2\u0908\u0907\3\2\2")
        buf.write("\2\u0908\u0909\3\2\2\2\u0909\u090a\3\2\2\2\u090a\u090b")
        buf.write("\5\u04a4\u0253\2\u090b\u009d\3\2\2\2\u090c\u090e\7\u00a0")
        buf.write("\2\2\u090d\u090f\7\u02f0\2\2\u090e\u090d\3\2\2\2\u090e")
        buf.write("\u090f\3\2\2\2\u090f\u0910\3\2\2\2\u0910\u0911\5\u0484")
        buf.write("\u0243\2\u0911\u009f\3\2\2\2\u0912\u0914\5\u00a2R\2\u0913")
        buf.write("\u0912\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0916\3\2\2\2")
        buf.write("\u0915\u0917\5\u03d2\u01ea\2\u0916\u0915\3\2\2\2\u0916")
        buf.write("\u0917\3\2\2\2\u0917\u0919\3\2\2\2\u0918\u091a\5\u00a6")
        buf.write("T\2\u0919\u0918\3\2\2\2\u0919\u091a\3\2\2\2\u091a\u091b")
        buf.write("\3\2\2\2\u091b\u091c\7\u027e\2\2\u091c\u091d\5\u0432\u021a")
        buf.write("\2\u091d\u091e\5H%\2\u091e\u00a1\3\2\2\2\u091f\u0920\7")
        buf.write("\u018c\2\2\u0920\u0922\7\u01cc\2\2\u0921\u0923\5\u00a4")
        buf.write("S\2\u0922\u0921\3\2\2\2\u0922\u0923\3\2\2\2\u0923\u0926")
        buf.write("\3\2\2\2\u0924\u0926\5\u00a4S\2\u0925\u091f\3\2\2\2\u0925")
        buf.write("\u0924\3\2\2\2\u0926\u00a3\3\2\2\2\u0927\u0928\7\13\2")
        buf.write("\2\u0928\u0929\7\u02f0\2\2\u0929\u092a\t\20\2\2\u092a")
        buf.write("\u00a5\3\2\2\2\u092b\u092c\7\u021b\2\2\u092c\u092d\7\u01f2")
        buf.write("\2\2\u092d\u092e\t\f\2\2\u092e\u00a7\3\2\2\2\u092f\u0931")
        buf.write("\5\u03d2\u01ea\2\u0930\u092f\3\2\2\2\u0930\u0931\3\2\2")
        buf.write("\2\u0931\u0932\3\2\2\2\u0932\u0933\7\u0254\2\2\u0933\u0934")
        buf.write("\5\u042e\u0218\2\u0934\u0935\t\21\2\2\u0935\u0936\t\22")
        buf.write("\2\2\u0936\u0937\7\u0181\2\2\u0937\u0938\5\u0450\u0229")
        buf.write("\2\u0938\u0939\7\u00ca\2\2\u0939\u093a\7\u009b\2\2\u093a")
        buf.write("\u093c\7\u01e9\2\2\u093b\u093d\5\u00aaV\2\u093c\u093b")
        buf.write("\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u093e\3\2\2\2\u093e")
        buf.write("\u093f\5\u0312\u018a\2\u093f\u00a9\3\2\2\2\u0940\u0941")
        buf.write("\6V$\2\u0941\u0942\t\23\2\2\u0942\u0943\5\u049e\u0250")
        buf.write("\2\u0943\u00ab\3\2\2\2\u0944\u0946\5\u03d2\u01ea\2\u0945")
        buf.write("\u0944\3\2\2\2\u0945\u0946\3\2\2\2\u0946\u0947\3\2\2\2")
        buf.write("\u0947\u0949\7\u00ac\2\2\u0948\u094a\5\u03d6\u01ec\2\u0949")
        buf.write("\u0948\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u094b\3\2\2\2")
        buf.write("\u094b\u094c\5\u043e\u0220\2\u094c\u094d\7\u0181\2\2\u094d")
        buf.write("\u094e\7\u01ec\2\2\u094e\u0955\5\u0360\u01b1\2\u094f\u0950")
        buf.write("\7\u0181\2\2\u0950\u0952\7Q\2\2\u0951\u0953\7\u0175\2")
        buf.write("\2\u0952\u0951\3\2\2\2\u0952\u0953\3\2\2\2\u0953\u0954")
        buf.write("\3\2\2\2\u0954\u0956\7\u01a4\2\2\u0955\u094f\3\2\2\2\u0955")
        buf.write("\u0956\3\2\2\2\u0956\u095d\3\2\2\2\u0957\u095e\7\u009e")
        buf.write("\2\2\u0958\u095b\7\u008e\2\2\u0959\u095a\7\u0181\2\2\u095a")
        buf.write("\u095c\7\u0204\2\2\u095b\u0959\3\2\2\2\u095b\u095c\3\2")
        buf.write("\2\2\u095c\u095e\3\2\2\2\u095d\u0957\3\2\2\2\u095d\u0958")
        buf.write("\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u0961\3\2\2\2\u095f")
        buf.write("\u0960\7M\2\2\u0960\u0962\5\u048a\u0246\2\u0961\u095f")
        buf.write("\3\2\2\2\u0961\u0962\3\2\2\2\u0962\u0963\3\2\2\2\u0963")
        buf.write("\u0964\7\u0095\2\2\u0964\u0965\5\u0312\u018a\2\u0965\u00ad")
        buf.write("\3\2\2\2\u0966\u0968\7\u0295\2\2\u0967\u0969\5\u03d6\u01ec")
        buf.write("\2\u0968\u0967\3\2\2\2\u0968\u0969\3\2\2\2\u0969\u096a")
        buf.write("\3\2\2\2\u096a\u096b\5\u0232\u011a\2\u096b\u00af\3\2\2")
        buf.write("\2\u096c\u096d\7\u018c\2\2\u096d\u096e\7\u01cc\2\2\u096e")
        buf.write("\u096f\7\u020d\2\2\u096f\u0970\7\u02d0\2\2\u0970\u0971")
        buf.write("\7\u02c8\2\2\u0971\u0975\5\u047c\u023f\2\u0972\u0974\5")
        buf.write("\u00b2Z\2\u0973\u0972\3\2\2\2\u0974\u0977\3\2\2\2\u0975")
        buf.write("\u0973\3\2\2\2\u0975\u0976\3\2\2\2\u0976\u0986\3\2\2\2")
        buf.write("\u0977\u0975\3\2\2\2\u0978\u0979\7\u020d\2\2\u0979\u097a")
        buf.write("\7\u02d0\2\2\u097a\u097c\7\u02c8\2\2\u097b\u097d\5\u03d6")
        buf.write("\u01ec\2\u097c\u097b\3\2\2\2\u097c\u097d\3\2\2\2\u097d")
        buf.write("\u097e\3\2\2\2\u097e\u0982\5\u047c\u023f\2\u097f\u0981")
        buf.write("\5\u00b2Z\2\u0980\u097f\3\2\2\2\u0981\u0984\3\2\2\2\u0982")
        buf.write("\u0980\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u0986\3\2\2\2")
        buf.write("\u0984\u0982\3\2\2\2\u0985\u096c\3\2\2\2\u0985\u0978\3")
        buf.write("\2\2\2\u0986\u00b1\3\2\2\2\u0987\u0988\7\u0167\2\2\u0988")
        buf.write("\u0989\7\u0246\2\2\u0989\u0997\5\u048c\u0247\2\u098a\u098b")
        buf.write("\7\u02cd\2\2\u098b\u098c\7\u0246\2\2\u098c\u0997\5\u048c")
        buf.write("\u0247\2\u098d\u098e\7\u02cf\2\2\u098e\u098f\5\u048c\u0247")
        buf.write("\2\u098f\u0990\7\u00e8\2\2\u0990\u0991\7/\2\2\u0991\u0992")
        buf.write("\5\u047c\u023f\2\u0992\u0997\3\2\2\2\u0993\u0994\7\u02ce")
        buf.write("\2\2\u0994\u0995\7\u0246\2\2\u0995\u0997\5\u048c\u0247")
        buf.write("\2\u0996\u0987\3\2\2\2\u0996\u098a\3\2\2\2\u0996\u098d")
        buf.write("\3\2\2\2\u0996\u0993\3\2\2\2\u0997\u00b3\3\2\2\2\u0998")
        buf.write("\u09aa\7\u0096\2\2\u0999\u09ab\5\u00b6\\\2\u099a\u09ab")
        buf.write("\5\u00b8]\2\u099b\u09ab\5\u00ba^\2\u099c\u09ab\5\u00bc")
        buf.write("_\2\u099d\u09ab\5\u00be`\2\u099e\u09ab\5\u00c0a\2\u099f")
        buf.write("\u09ab\5\u00c4c\2\u09a0\u09ab\5\u00c6d\2\u09a1\u09ab\5")
        buf.write("\u00c8e\2\u09a2\u09ab\5\u00caf\2\u09a3\u09ab\5\u00ccg")
        buf.write("\2\u09a4\u09a5\6[%\2\u09a5\u09ab\5\u00ceh\2\u09a6\u09a7")
        buf.write("\6[&\2\u09a7\u09ab\5\u00d0i\2\u09a8\u09a9\6[\'\2\u09a9")
        buf.write("\u09ab\5\u00d2j\2\u09aa\u0999\3\2\2\2\u09aa\u099a\3\2")
        buf.write("\2\2\u09aa\u099b\3\2\2\2\u09aa\u099c\3\2\2\2\u09aa\u099d")
        buf.write("\3\2\2\2\u09aa\u099e\3\2\2\2\u09aa\u099f\3\2\2\2\u09aa")
        buf.write("\u09a0\3\2\2\2\u09aa\u09a1\3\2\2\2\u09aa\u09a2\3\2\2\2")
        buf.write("\u09aa\u09a3\3\2\2\2\u09aa\u09a4\3\2\2\2\u09aa\u09a6\3")
        buf.write("\2\2\2\u09aa\u09a8\3\2\2\2\u09ab\u00b5\3\2\2\2\u09ac\u09ae")
        buf.write("\7o\2\2\u09ad\u09af\5\u03d4\u01eb\2\u09ae\u09ad\3\2\2")
        buf.write("\2\u09ae\u09af\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09b1")
        buf.write("\5\u0424\u0213\2\u09b1\u00b7\3\2\2\2\u09b2\u09b4\7\u00ac")
        buf.write("\2\2\u09b3\u09b5\5\u03d4\u01eb\2\u09b4\u09b3\3\2\2\2\u09b4")
        buf.write("\u09b5\3\2\2\2\u09b5\u09b6\3\2\2\2\u09b6\u09b7\5\u0440")
        buf.write("\u0221\2\u09b7\u00b9\3\2\2\2\u09b8\u09ba\7\u00d0\2\2\u09b9")
        buf.write("\u09bb\5\u03d4\u01eb\2\u09ba\u09b9\3\2\2\2\u09ba\u09bb")
        buf.write("\3\2\2\2\u09bb\u09bc\3\2\2\2\u09bc\u09bd\5\u042c\u0217")
        buf.write("\2\u09bd\u00bb\3\2\2\2\u09be\u09c0\7\u01a8\2\2\u09bf\u09c1")
        buf.write("\5\u03d4\u01eb\2\u09c0\u09bf\3\2\2\2\u09c0\u09c1\3\2\2")
        buf.write("\2\u09c1\u09c2\3\2\2\2\u09c2\u09c3\5\u0428\u0215\2\u09c3")
        buf.write("\u00bd\3\2\2\2\u09c4\u09c6\5\u040a\u0206\2\u09c5\u09c4")
        buf.write("\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7")
        buf.write("\u09c8\7\u00ee\2\2\u09c8\u09c9\5\u041e\u0210\2\u09c9\u09ca")
        buf.write("\7\u0181\2\2\u09ca\u09cc\5\u0450\u0229\2\u09cb\u09cd\5")
        buf.write("\60\31\2\u09cc\u09cb\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd")
        buf.write("\u00bf\3\2\2\2\u09ce\u09cf\7\u0122\2\2\u09cf\u09d0\7\u00db")
        buf.write("\2\2\u09d0\u09db\5\u043c\u021f\2\u09d1\u09d8\5\u00c2b")
        buf.write("\2\u09d2\u09d4\7\u0307\2\2\u09d3\u09d2\3\2\2\2\u09d3\u09d4")
        buf.write("\3\2\2\2\u09d4\u09d5\3\2\2\2\u09d5\u09d7\5\u00c2b\2\u09d6")
        buf.write("\u09d3\3\2\2\2\u09d7\u09da\3\2\2\2\u09d8\u09d6\3\2\2\2")
        buf.write("\u09d8\u09d9\3\2\2\2\u09d9\u09dc\3\2\2\2\u09da\u09d8\3")
        buf.write("\2\2\2\u09db\u09d1\3\2\2\2\u09db\u09dc\3\2\2\2\u09dc\u00c1")
        buf.write("\3\2\2\2\u09dd\u09e0\5\u0098M\2\u09de\u09e0\5\u0096L\2")
        buf.write("\u09df\u09dd\3\2\2\2\u09df\u09de\3\2\2\2\u09e0\u00c3\3")
        buf.write("\2\2\2\u09e1\u09e3\7\u01f9\2\2\u09e2\u09e4\5\u03d4\u01eb")
        buf.write("\2\u09e3\u09e2\3\2\2\2\u09e3\u09e4\3\2\2\2\u09e4\u09e5")
        buf.write("\3\2\2\2\u09e5\u09e6\5\u0446\u0224\2\u09e6\u00c5\3\2\2")
        buf.write("\2\u09e7\u09e9\7\u0243\2\2\u09e8\u09e7\3\2\2\2\u09e8\u09e9")
        buf.write("\3\2\2\2\u09e9\u09ea\3\2\2\2\u09ea\u09ec\t\24\2\2\u09eb")
        buf.write("\u09ed\5\u03d4\u01eb\2\u09ec\u09eb\3\2\2\2\u09ec\u09ed")
        buf.write("\3\2\2\2\u09ed\u09ee\3\2\2\2\u09ee\u09f0\5\u0452\u022a")
        buf.write("\2\u09ef\u09f1\t\4\2\2\u09f0\u09ef\3\2\2\2\u09f0\u09f1")
        buf.write("\3\2\2\2\u09f1\u00c7\3\2\2\2\u09f2\u09f3\7\u023e\2\2\u09f3")
        buf.write("\u09fe\5\u0438\u021d\2\u09f4\u09fb\5\u00c2b\2\u09f5\u09f7")
        buf.write("\7\u0307\2\2\u09f6\u09f5\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7")
        buf.write("\u09f8\3\2\2\2\u09f8\u09fa\5\u00c2b\2\u09f9\u09f6\3\2")
        buf.write("\2\2\u09fa\u09fd\3\2\2\2\u09fb\u09f9\3\2\2\2\u09fb\u09fc")
        buf.write("\3\2\2\2\u09fc\u09ff\3\2\2\2\u09fd\u09fb\3\2\2\2\u09fe")
        buf.write("\u09f4\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u00c9\3\2\2\2")
        buf.write("\u0a00\u0a02\7\u0254\2\2\u0a01\u0a03\5\u03d4\u01eb\2\u0a02")
        buf.write("\u0a01\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a04\3\2\2\2")
        buf.write("\u0a04\u0a05\5\u0430\u0219\2\u0a05\u00cb\3\2\2\2\u0a06")
        buf.write("\u0a08\7\u027e\2\2\u0a07\u0a09\5\u03d4\u01eb\2\u0a08\u0a07")
        buf.write("\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a")
        buf.write("\u0a0c\5\u03e2\u01f2\2\u0a0b\u0a0d\t\4\2\2\u0a0c\u0a0b")
        buf.write("\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u00cd\3\2\2\2\u0a0e")
        buf.write("\u0a10\7\u0295\2\2\u0a0f\u0a11\5\u03d4\u01eb\2\u0a10\u0a0f")
        buf.write("\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12")
        buf.write("\u0a13\5\u0232\u011a\2\u0a13\u00cf\3\2\2\2\u0a14\u0a15")
        buf.write("\7\u020d\2\2\u0a15\u0a16\7\u02d0\2\2\u0a16\u0a18\7\u02c8")
        buf.write("\2\2\u0a17\u0a19\5\u03d4\u01eb\2\u0a18\u0a17\3\2\2\2\u0a18")
        buf.write("\u0a19\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u0a1b\5\u047c")
        buf.write("\u023f\2\u0a1b\u00d1\3\2\2\2\u0a1c\u0a1d\7\u025f\2\2\u0a1d")
        buf.write("\u0a1e\7\u023e\2\2\u0a1e\u0a20\5\u0438\u021d\2\u0a1f\u0a21")
        buf.write("\5<\37\2\u0a20\u0a1f\3\2\2\2\u0a20\u0a21\3\2\2\2\u0a21")
        buf.write("\u00d3\3\2\2\2\u0a22\u0a23\7\u01c7\2\2\u0a23\u0a24\t\24")
        buf.write("\2\2\u0a24\u0a29\5\u00d6l\2\u0a25\u0a26\7\u0307\2\2\u0a26")
        buf.write("\u0a28\5\u00d6l\2\u0a27\u0a25\3\2\2\2\u0a28\u0a2b\3\2")
        buf.write("\2\2\u0a29\u0a27\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u00d5")
        buf.write("\3\2\2\2\u0a2b\u0a29\3\2\2\2\u0a2c\u0a2d\5\u0450\u0229")
        buf.write("\2\u0a2d\u0a2e\7\u0250\2\2\u0a2e\u0a2f\5\u044a\u0226\2")
        buf.write("\u0a2f\u00d7\3\2\2\2\u0a30\u0a32\7\u0257\2\2\u0a31\u0a33")
        buf.write("\7\u0240\2\2\u0a32\u0a31\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33")
        buf.write("\u0a34\3\2\2\2\u0a34\u0a35\5\u0450\u0229\2\u0a35\u00d9")
        buf.write("\3\2\2\2\u0a36\u0a37\7\u00ec\2\2\u0a37\u0a38\7\u0240\2")
        buf.write("\2\u0a38\u0a39\7\u00cd\2\2\u0a39\u0a3a\5\u048e\u0248\2")
        buf.write("\u0a3a\u00db\3\2\2\2\u0a3b\u0a3c\7\62\2\2\u0a3c\u0a42")
        buf.write("\5\u0428\u0215\2\u0a3d\u0a3f\7\u030a\2\2\u0a3e\u0a40\5")
        buf.write("\u02f6\u017c\2\u0a3f\u0a3e\3\2\2\2\u0a3f\u0a40\3\2\2\2")
        buf.write("\u0a40\u0a41\3\2\2\2\u0a41\u0a43\7\u030b\2\2\u0a42\u0a3d")
        buf.write("\3\2\2\2\u0a42\u0a43\3\2\2\2\u0a43\u00dd\3\2\2\2\u0a44")
        buf.write("\u0a45\6p(\2\u0a45\u0a47\5\u0142\u00a2\2\u0a46\u0a44\3")
        buf.write("\2\2\2\u0a46\u0a47\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0a4c")
        buf.write("\7\u0087\2\2\u0a49\u0a4b\5\u00e2r\2\u0a4a\u0a49\3\2\2")
        buf.write("\2\u0a4b\u0a4e\3\2\2\2\u0a4c\u0a4a\3\2\2\2\u0a4c\u0a4d")
        buf.write("\3\2\2\2\u0a4d\u0a6f\3\2\2\2\u0a4e\u0a4c\3\2\2\2\u0a4f")
        buf.write("\u0a67\7\u00cd\2\2\u0a50\u0a51\5\u0454\u022b\2\u0a51\u0a52")
        buf.write("\7\u026f\2\2\u0a52\u0a54\5\u0150\u00a9\2\u0a53\u0a55\5")
        buf.write("\u0168\u00b5\2\u0a54\u0a53\3\2\2\2\u0a54\u0a55\3\2\2\2")
        buf.write("\u0a55\u0a68\3\2\2\2\u0a56\u0a59\5\u0450\u0229\2\u0a57")
        buf.write("\u0a58\6p)\2\u0a58\u0a5a\5\u0190\u00c9\2\u0a59\u0a57\3")
        buf.write("\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a\u0a5c\3\2\2\2\u0a5b\u0a5d")
        buf.write("\5\u00e0q\2\u0a5c\u0a5b\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d")
        buf.write("\u0a5f\3\2\2\2\u0a5e\u0a60\5\u0168\u00b5\2\u0a5f\u0a5e")
        buf.write("\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a62\3\2\2\2\u0a61")
        buf.write("\u0a63\5\u014a\u00a6\2\u0a62\u0a61\3\2\2\2\u0a62\u0a63")
        buf.write("\3\2\2\2\u0a63\u0a65\3\2\2\2\u0a64\u0a66\5\u0120\u0091")
        buf.write("\2\u0a65\u0a64\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0a68")
        buf.write("\3\2\2\2\u0a67\u0a50\3\2\2\2\u0a67\u0a56\3\2\2\2\u0a68")
        buf.write("\u0a70\3\2\2\2\u0a69\u0a6a\5\u0454\u022b\2\u0a6a\u0a6b")
        buf.write("\7\u00cd\2\2\u0a6b\u0a6d\5\u0150\u00a9\2\u0a6c\u0a6e\5")
        buf.write("\u0168\u00b5\2\u0a6d\u0a6c\3\2\2\2\u0a6d\u0a6e\3\2\2\2")
        buf.write("\u0a6e\u0a70\3\2\2\2\u0a6f\u0a4f\3\2\2\2\u0a6f\u0a69\3")
        buf.write("\2\2\2\u0a70\u00df\3\2\2\2\u0a71\u0a72\6q*\2\u0a72\u0a73")
        buf.write("\7\u0197\2\2\u0a73\u0a74\7\u030a\2\2\u0a74\u0a75\5\u046c")
        buf.write("\u0237\2\u0a75\u0a76\7\u030b\2\2\u0a76\u00e1\3\2\2\2\u0a77")
        buf.write("\u0a78\t\25\2\2\u0a78\u00e3\3\2\2\2\u0a79\u0a7e\7\u0095")
        buf.write("\2\2\u0a7a\u0a7b\6s+\2\u0a7b\u0a7f\5\u02f6\u017c\2\u0a7c")
        buf.write("\u0a7d\6s,\2\u0a7d\u0a7f\5\u0162\u00b2\2\u0a7e\u0a7a\3")
        buf.write("\2\2\2\u0a7e\u0a7c\3\2\2\2\u0a7f\u00e5\3\2\2\2\u0a80\u0a92")
        buf.write("\7\u00dd\2\2\u0a81\u0a82\5\u0450\u0229\2\u0a82\u0a84\7")
        buf.write("\u0185\2\2\u0a83\u0a85\5\u0190\u00c9\2\u0a84\u0a83\3\2")
        buf.write("\2\2\u0a84\u0a85\3\2\2\2\u0a85\u0a93\3\2\2\2\u0a86\u0a90")
        buf.write("\5\u046a\u0236\2\u0a87\u0a91\7D\2\2\u0a88\u0a89\7\u01b5")
        buf.write("\2\2\u0a89\u0a8b\5\u00e8u\2\u0a8a\u0a8c\5\u0168\u00b5")
        buf.write("\2\u0a8b\u0a8a\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8e")
        buf.write("\3\2\2\2\u0a8d\u0a8f\5\u011e\u0090\2\u0a8e\u0a8d\3\2\2")
        buf.write("\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u0a91\3\2\2\2\u0a90\u0a87")
        buf.write("\3\2\2\2\u0a90\u0a88\3\2\2\2\u0a91\u0a93\3\2\2\2\u0a92")
        buf.write("\u0a81\3\2\2\2\u0a92\u0a86\3\2\2\2\u0a93\u00e7\3\2\2\2")
        buf.write("\u0a94\u0a9f\t\26\2\2\u0a95\u0a9c\5\u046a\u0236\2\u0a96")
        buf.write("\u0a9d\t\27\2\2\u0a97\u0a98\t\30\2\2\u0a98\u0a99\7\u030a")
        buf.write("\2\2\u0a99\u0a9a\5\u00f8}\2\u0a9a\u0a9b\7\u030b\2\2\u0a9b")
        buf.write("\u0a9d\3\2\2\2\u0a9c\u0a96\3\2\2\2\u0a9c\u0a97\3\2\2\2")
        buf.write("\u0a9d\u0a9f\3\2\2\2\u0a9e\u0a94\3\2\2\2\u0a9e\u0a95\3")
        buf.write("\2\2\2\u0a9f\u00e9\3\2\2\2\u0aa0\u0aa2\7\u00f4\2\2\u0aa1")
        buf.write("\u0aa3\5\u00ecw\2\u0aa2\u0aa1\3\2\2\2\u0aa2\u0aa3\3\2")
        buf.write("\2\2\u0aa3\u0aa5\3\2\2\2\u0aa4\u0aa6\7\u00ea\2\2\u0aa5")
        buf.write("\u0aa4\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aa8\3\2\2\2")
        buf.write("\u0aa7\u0aa9\7\u00fa\2\2\u0aa8\u0aa7\3\2\2\2\u0aa8\u0aa9")
        buf.write("\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa\u0aac\5\u0450\u0229")
        buf.write("\2\u0aab\u0aad\5\u040e\u0208\2\u0aac\u0aab\3\2\2\2\u0aac")
        buf.write("\u0aad\3\2\2\2\u0aad\u0aba\3\2\2\2\u0aae\u0ab1\5\u00ee")
        buf.write("x\2\u0aaf\u0ab0\6v-\2\u0ab0\u0ab2\5\u00fa~\2\u0ab1\u0aaf")
        buf.write("\3\2\2\2\u0ab1\u0ab2\3\2\2\2\u0ab2\u0abb\3\2\2\2\u0ab3")
        buf.write("\u0ab4\7\u01fc\2\2\u0ab4\u0ab7\5\u03e4\u01f3\2\u0ab5\u0ab6")
        buf.write("\6v.\2\u0ab6\u0ab8\5\u00fa~\2\u0ab7\u0ab5\3\2\2\2\u0ab7")
        buf.write("\u0ab8\3\2\2\2\u0ab8\u0abb\3\2\2\2\u0ab9\u0abb\5\u00f4")
        buf.write("{\2\u0aba\u0aae\3\2\2\2\u0aba\u0ab3\3\2\2\2\u0aba\u0ab9")
        buf.write("\3\2\2\2\u0abb\u0abd\3\2\2\2\u0abc\u0abe\5\u00fc\177\2")
        buf.write("\u0abd\u0abc\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u00eb\3")
        buf.write("\2\2\2\u0abf\u0ac0\t\31\2\2\u0ac0\u00ed\3\2\2\2\u0ac1")
        buf.write("\u0ac3\7\u030a\2\2\u0ac2\u0ac4\5\u00f0y\2\u0ac3\u0ac2")
        buf.write("\3\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5")
        buf.write("\u0ac7\7\u030b\2\2\u0ac6\u0ac1\3\2\2\2\u0ac6\u0ac7\3\2")
        buf.write("\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0ac9\5\u00f2z\2\u0ac9")
        buf.write("\u00ef\3\2\2\2\u0aca\u0acf\5\u041a\u020e\2\u0acb\u0acc")
        buf.write("\7\u0307\2\2\u0acc\u0ace\5\u041a\u020e\2\u0acd\u0acb\3")
        buf.write("\2\2\2\u0ace\u0ad1\3\2\2\2\u0acf\u0acd\3\2\2\2\u0acf\u0ad0")
        buf.write("\3\2\2\2\u0ad0\u00f1\3\2\2\2\u0ad1\u0acf\3\2\2\2\u0ad2")
        buf.write("\u0ad3\t\32\2\2\u0ad3\u0ad4\5\u00f6|\2\u0ad4\u00f3\3\2")
        buf.write("\2\2\u0ad5\u0add\5\\/\2\u0ad6\u0ad8\7\u030a\2\2\u0ad7")
        buf.write("\u0ad9\5\u00f0y\2\u0ad8\u0ad7\3\2\2\2\u0ad8\u0ad9\3\2")
        buf.write("\2\2\u0ad9\u0ada\3\2\2\2\u0ada\u0adb\7\u030b\2\2\u0adb")
        buf.write("\u0add\5\\/\2\u0adc\u0ad5\3\2\2\2\u0adc\u0ad6\3\2\2\2")
        buf.write("\u0add\u00f5\3\2\2\2\u0ade\u0ae0\7\u030a\2\2\u0adf\u0ae1")
        buf.write("\5\u00f8}\2\u0ae0\u0adf\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1")
        buf.write("\u0ae2\3\2\2\2\u0ae2\u0aeb\7\u030b\2\2\u0ae3\u0ae4\7\u0307")
        buf.write("\2\2\u0ae4\u0ae6\7\u030a\2\2\u0ae5\u0ae7\5\u00f8}\2\u0ae6")
        buf.write("\u0ae5\3\2\2\2\u0ae6\u0ae7\3\2\2\2\u0ae7\u0ae8\3\2\2\2")
        buf.write("\u0ae8\u0aea\7\u030b\2\2\u0ae9\u0ae3\3\2\2\2\u0aea\u0aed")
        buf.write("\3\2\2\2\u0aeb\u0ae9\3\2\2\2\u0aeb\u0aec\3\2\2\2\u0aec")
        buf.write("\u00f7\3\2\2\2\u0aed\u0aeb\3\2\2\2\u0aee\u0af1\5\u02a6")
        buf.write("\u0154\2\u0aef\u0af1\7\u0082\2\2\u0af0\u0aee\3\2\2\2\u0af0")
        buf.write("\u0aef\3\2\2\2\u0af1\u0af9\3\2\2\2\u0af2\u0af5\7\u0307")
        buf.write("\2\2\u0af3\u0af6\5\u02a6\u0154\2\u0af4\u0af6\7\u0082\2")
        buf.write("\2\u0af5\u0af3\3\2\2\2\u0af5\u0af4\3\2\2\2\u0af6\u0af8")
        buf.write("\3\2\2\2\u0af7\u0af2\3\2\2\2\u0af8\u0afb\3\2\2\2\u0af9")
        buf.write("\u0af7\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u00f9\3\2\2\2")
        buf.write("\u0afb\u0af9\3\2\2\2\u0afc\u0afd\7\23\2\2\u0afd\u0aff")
        buf.write("\5\u046a\u0236\2\u0afe\u0b00\5\u0416\u020c\2\u0aff\u0afe")
        buf.write("\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00\u00fb\3\2\2\2\u0b01")
        buf.write("\u0b02\7\u0181\2\2\u0b02\u0b03\7\u0099\2\2\u0b03\u0b04")
        buf.write("\7\u010b\2\2\u0b04\u0b05\7\u0268\2\2\u0b05\u0b06\5\u03e4")
        buf.write("\u01f3\2\u0b06\u00fd\3\2\2\2\u0b07\u0b08\7\u011b\2\2\u0b08")
        buf.write("\u0b0a\5\u0100\u0081\2\u0b09\u0b0b\t\33\2\2\u0b0a\u0b09")
        buf.write("\3\2\2\2\u0b0a\u0b0b\3\2\2\2\u0b0b\u0b0d\3\2\2\2\u0b0c")
        buf.write("\u0b0e\7\u011e\2\2\u0b0d\u0b0c\3\2\2\2\u0b0d\u0b0e\3\2")
        buf.write("\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b10\7\u00ef\2\2\u0b10")
        buf.write("\u0b12\5\u048a\u0246\2\u0b11\u0b13\t\n\2\2\u0b12\u0b11")
        buf.write("\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b14\3\2\2\2\u0b14")
        buf.write("\u0b15\7\u00fa\2\2\u0b15\u0b16\7\u0240\2\2\u0b16\u0b18")
        buf.write("\5\u0450\u0229\2\u0b17\u0b19\5\u040e\u0208\2\u0b18\u0b17")
        buf.write("\3\2\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b1b\3\2\2\2\u0b1a")
        buf.write("\u0b1c\5\u03e8\u01f5\2\u0b1b\u0b1a\3\2\2\2\u0b1b\u0b1c")
        buf.write("\3\2\2\2\u0b1c\u0b1e\3\2\2\2\u0b1d\u0b1f\5\u0102\u0082")
        buf.write("\2\u0b1e\u0b1d\3\2\2\2\u0b1e\u0b1f\3\2\2\2\u0b1f\u0b21")
        buf.write("\3\2\2\2\u0b20\u0b22\5\u03ea\u01f6\2\u0b21\u0b20\3\2\2")
        buf.write("\2\u0b21\u0b22\3\2\2\2\u0b22\u0b24\3\2\2\2\u0b23\u0b25")
        buf.write("\5\u03ee\u01f8\2\u0b24\u0b23\3\2\2\2\u0b24\u0b25\3\2\2")
        buf.write("\2\u0b25\u0b26\3\2\2\2\u0b26\u0b27\5\u0104\u0083\2\u0b27")
        buf.write("\u00ff\3\2\2\2\u0b28\u0b29\t\34\2\2\u0b29\u0101\3\2\2")
        buf.write("\2\u0b2a\u0b2b\7\u01e6\2\2\u0b2b\u0b2c\7\u00e8\2\2\u0b2c")
        buf.write("\u0b2d\7/\2\2\u0b2d\u0b2e\5\u0486\u0244\2\u0b2e\u0103")
        buf.write("\3\2\2\2\u0b2f\u0b30\7\u00ea\2\2\u0b30\u0b31\7\u02ed\2")
        buf.write("\2\u0b31\u0b33\t\35\2\2\u0b32\u0b2f\3\2\2\2\u0b32\u0b33")
        buf.write("\3\2\2\2\u0b33\u0b35\3\2\2\2\u0b34\u0b36\5\u0106\u0084")
        buf.write("\2\u0b35\u0b34\3\2\2\2\u0b35\u0b36\3\2\2\2\u0b36\u0b39")
        buf.write("\3\2\2\2\u0b37\u0b38\7\u01fc\2\2\u0b38\u0b3a\5\u03e4\u01f3")
        buf.write("\2\u0b39\u0b37\3\2\2\2\u0b39\u0b3a\3\2\2\2\u0b3a\u0105")
        buf.write("\3\2\2\2\u0b3b\u0b3d\7\u030a\2\2\u0b3c\u0b3e\5\u0108\u0085")
        buf.write("\2\u0b3d\u0b3c\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b3f")
        buf.write("\3\2\2\2\u0b3f\u0b40\7\u030b\2\2\u0b40\u0107\3\2\2\2\u0b41")
        buf.write("\u0b44\5\u0418\u020d\2\u0b42\u0b44\5\u02e8\u0175\2\u0b43")
        buf.write("\u0b41\3\2\2\2\u0b43\u0b42\3\2\2\2\u0b44\u0b4c\3\2\2\2")
        buf.write("\u0b45\u0b48\7\u0307\2\2\u0b46\u0b49\5\u0418\u020d\2\u0b47")
        buf.write("\u0b49\5\u02e8\u0175\2\u0b48\u0b46\3\2\2\2\u0b48\u0b47")
        buf.write("\3\2\2\2\u0b49\u0b4b\3\2\2\2\u0b4a\u0b45\3\2\2\2\u0b4b")
        buf.write("\u0b4e\3\2\2\2\u0b4c\u0b4a\3\2\2\2\u0b4c\u0b4d\3\2\2\2")
        buf.write("\u0b4d\u0109\3\2\2\2\u0b4e\u0b4c\3\2\2\2\u0b4f\u0b51\7")
        buf.write("\u01cc\2\2\u0b50\u0b52\t\36\2\2\u0b51\u0b50\3\2\2\2\u0b51")
        buf.write("\u0b52\3\2\2\2\u0b52\u0b54\3\2\2\2\u0b53\u0b55\7\u00fa")
        buf.write("\2\2\u0b54\u0b53\3\2\2\2\u0b54\u0b55\3\2\2\2\u0b55\u0b56")
        buf.write("\3\2\2\2\u0b56\u0b58\5\u0450\u0229\2\u0b57\u0b59\5\u040e")
        buf.write("\u0208\2\u0b58\u0b57\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59")
        buf.write("\u0b5e\3\2\2\2\u0b5a\u0b5f\5\u00eex\2\u0b5b\u0b5c\7\u01fc")
        buf.write("\2\2\u0b5c\u0b5f\5\u03e4\u01f3\2\u0b5d\u0b5f\5\u00f4{")
        buf.write("\2\u0b5e\u0b5a\3\2\2\2\u0b5e\u0b5b\3\2\2\2\u0b5e\u0b5d")
        buf.write("\3\2\2\2\u0b5f\u010b\3\2\2\2\u0b60\u0b62\5\u0110\u0089")
        buf.write("\2\u0b61\u0b63\5\u015a\u00ae\2\u0b62\u0b61\3\2\2\2\u0b62")
        buf.write("\u0b63\3\2\2\2\u0b63\u0b67\3\2\2\2\u0b64\u0b67\5\u0114")
        buf.write("\u008b\2\u0b65\u0b67\5\u010e\u0088\2\u0b66\u0b60\3\2\2")
        buf.write("\2\u0b66\u0b64\3\2\2\2\u0b66\u0b65\3\2\2\2\u0b67\u010d")
        buf.write("\3\2\2\2\u0b68\u0b69\7\u030a\2\2\u0b69\u0b6a\5\u010e\u0088")
        buf.write("\2\u0b6a\u0b6b\7\u030b\2\2\u0b6b\u0b75\3\2\2\2\u0b6c\u0b6d")
        buf.write("\5\u0110\u0089\2\u0b6d\u0b6f\5\u0126\u0094\2\u0b6e\u0b70")
        buf.write("\5\u015a\u00ae\2\u0b6f\u0b6e\3\2\2\2\u0b6f\u0b70\3\2\2")
        buf.write("\2\u0b70\u0b75\3\2\2\2\u0b71\u0b72\5\u015a\u00ae\2\u0b72")
        buf.write("\u0b73\5\u0126\u0094\2\u0b73\u0b75\3\2\2\2\u0b74\u0b68")
        buf.write("\3\2\2\2\u0b74\u0b6c\3\2\2\2\u0b74\u0b71\3\2\2\2\u0b75")
        buf.write("\u010f\3\2\2\2\u0b76\u0b77\6\u0089/\2\u0b77\u0b79\5\u0142")
        buf.write("\u00a2\2\u0b78\u0b76\3\2\2\2\u0b78\u0b79\3\2\2\2\u0b79")
        buf.write("\u0b88\3\2\2\2\u0b7a\u0b7c\5\u0112\u008a\2\u0b7b\u0b7d")
        buf.write("\5\u014a\u00a6\2\u0b7c\u0b7b\3\2\2\2\u0b7c\u0b7d\3\2\2")
        buf.write("\2\u0b7d\u0b7f\3\2\2\2\u0b7e\u0b80\5\u011e\u0090\2\u0b7f")
        buf.write("\u0b7e\3\2\2\2\u0b7f\u0b80\3\2\2\2\u0b80\u0b89\3\2\2\2")
        buf.write("\u0b81\u0b83\5\u0114\u008b\2\u0b82\u0b84\5\u014a\u00a6")
        buf.write("\2\u0b83\u0b82\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b86")
        buf.write("\3\2\2\2\u0b85\u0b87\5\u011e\u0090\2\u0b86\u0b85\3\2\2")
        buf.write("\2\u0b86\u0b87\3\2\2\2\u0b87\u0b89\3\2\2\2\u0b88\u0b7a")
        buf.write("\3\2\2\2\u0b88\u0b81\3\2\2\2\u0b89\u0b8c\3\2\2\2\u0b8a")
        buf.write("\u0b8b\6\u0089\60\2\u0b8b\u0b8d\5\u0128\u0095\2\u0b8c")
        buf.write("\u0b8a\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d\u0111\3\2\2\2")
        buf.write("\u0b8e\u0b99\5\u0116\u008c\2\u0b8f\u0b90\5\u0114\u008b")
        buf.write("\2\u0b90\u0b92\7\u0262\2\2\u0b91\u0b93\5\u018e\u00c8\2")
        buf.write("\u0b92\u0b91\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93\u0b96\3")
        buf.write("\2\2\2\u0b94\u0b97\5\u0116\u008c\2\u0b95\u0b97\5\u0114")
        buf.write("\u008b\2\u0b96\u0b94\3\2\2\2\u0b96\u0b95\3\2\2\2\u0b97")
        buf.write("\u0b99\3\2\2\2\u0b98\u0b8e\3\2\2\2\u0b98\u0b8f\3\2\2\2")
        buf.write("\u0b99\u0ba4\3\2\2\2\u0b9a\u0b9c\7\u0262\2\2\u0b9b\u0b9d")
        buf.write("\5\u018e\u00c8\2\u0b9c\u0b9b\3\2\2\2\u0b9c\u0b9d\3\2\2")
        buf.write("\2\u0b9d\u0ba0\3\2\2\2\u0b9e\u0ba1\5\u0116\u008c\2\u0b9f")
        buf.write("\u0ba1\5\u0114\u008b\2\u0ba0\u0b9e\3\2\2\2\u0ba0\u0b9f")
        buf.write("\3\2\2\2\u0ba1\u0ba3\3\2\2\2\u0ba2\u0b9a\3\2\2\2\u0ba3")
        buf.write("\u0ba6\3\2\2\2\u0ba4\u0ba2\3\2\2\2\u0ba4\u0ba5\3\2\2\2")
        buf.write("\u0ba5\u0113\3\2\2\2\u0ba6\u0ba4\3\2\2\2\u0ba7\u0bad\7")
        buf.write("\u030a\2\2\u0ba8\u0bae\5\u0114\u008b\2\u0ba9\u0bab\5\u0110")
        buf.write("\u0089\2\u0baa\u0bac\5\u015a\u00ae\2\u0bab\u0baa\3\2\2")
        buf.write("\2\u0bab\u0bac\3\2\2\2\u0bac\u0bae\3\2\2\2\u0bad\u0ba8")
        buf.write("\3\2\2\2\u0bad\u0ba9\3\2\2\2\u0bae\u0baf\3\2\2\2\u0baf")
        buf.write("\u0bb0\7\u030b\2\2\u0bb0\u0115\3\2\2\2\u0bb1\u0bb7\5\u0118")
        buf.write("\u008d\2\u0bb2\u0bb3\6\u008c\61\2\u0bb3\u0bb7\5\u0152")
        buf.write("\u00aa\2\u0bb4\u0bb5\6\u008c\62\2\u0bb5\u0bb7\5\u0154")
        buf.write("\u00ab\2\u0bb6\u0bb1\3\2\2\2\u0bb6\u0bb2\3\2\2\2\u0bb6")
        buf.write("\u0bb4\3\2\2\2\u0bb7\u0117\3\2\2\2\u0bb8\u0bbc\7\u01f3")
        buf.write("\2\2\u0bb9\u0bbb\5\u0158\u00ad\2\u0bba\u0bb9\3\2\2\2\u0bbb")
        buf.write("\u0bbe\3\2\2\2\u0bbc\u0bba\3\2\2\2\u0bbc\u0bbd\3\2\2\2")
        buf.write("\u0bbd\u0bbf\3\2\2\2\u0bbe\u0bbc\3\2\2\2\u0bbf\u0bc1\5")
        buf.write("\u0162\u00b2\2\u0bc0\u0bc2\5\u0126\u0094\2\u0bc1\u0bc0")
        buf.write("\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2\u0bc4\3\2\2\2\u0bc3")
        buf.write("\u0bc5\5\u014e\u00a8\2\u0bc4\u0bc3\3\2\2\2\u0bc4\u0bc5")
        buf.write("\3\2\2\2\u0bc5\u0bc7\3\2\2\2\u0bc6\u0bc8\5\u0168\u00b5")
        buf.write("\2\u0bc7\u0bc6\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8\u0bca")
        buf.write("\3\2\2\2\u0bc9\u0bcb\5\u0146\u00a4\2\u0bca\u0bc9\3\2\2")
        buf.write("\2\u0bca\u0bcb\3\2\2\2\u0bcb\u0bcd\3\2\2\2\u0bcc\u0bce")
        buf.write("\5\u012a\u0096\2\u0bcd\u0bcc\3\2\2\2\u0bcd\u0bce\3\2\2")
        buf.write("\2\u0bce\u0bd1\3\2\2\2\u0bcf\u0bd0\6\u008d\63\2\u0bd0")
        buf.write("\u0bd2\5\u012c\u0097\2\u0bd1\u0bcf\3\2\2\2\u0bd1\u0bd2")
        buf.write("\3\2\2\2\u0bd2\u0119\3\2\2\2\u0bd3\u0bd4\5\u0114\u008b")
        buf.write("\2\u0bd4\u011b\3\2\2\2\u0bd5\u0bd6\t\37\2\2\u0bd6\u011d")
        buf.write("\3\2\2\2\u0bd7\u0bd8\7\u0116\2\2\u0bd8\u0bd9\5\u0122\u0092")
        buf.write("\2\u0bd9\u011f\3\2\2\2\u0bda\u0bdb\7\u0116\2\2\u0bdb\u0bdc")
        buf.write("\5\u0124\u0093\2\u0bdc\u0121\3\2\2\2\u0bdd\u0be0\5\u0124")
        buf.write("\u0093\2\u0bde\u0bdf\t \2\2\u0bdf\u0be1\5\u0124\u0093")
        buf.write("\2\u0be0\u0bde\3\2\2\2\u0be0\u0be1\3\2\2\2\u0be1\u0123")
        buf.write("\3\2\2\2\u0be2\u0be5\5\u046a\u0236\2\u0be3\u0be5\t!\2")
        buf.write("\2\u0be4\u0be2\3\2\2\2\u0be4\u0be3\3\2\2\2\u0be5\u0125")
        buf.write("\3\2\2\2\u0be6\u0c02\7\u00fa\2\2\u0be7\u0be8\7\u018e\2")
        buf.write("\2\u0be8\u0bea\5\u0484\u0243\2\u0be9\u0beb\5\u03e8\u01f5")
        buf.write("\2\u0bea\u0be9\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u0bed")
        buf.write("\3\2\2\2\u0bec\u0bee\5\u03ea\u01f6\2\u0bed\u0bec\3\2\2")
        buf.write("\2\u0bed\u0bee\3\2\2\2\u0bee\u0bf0\3\2\2\2\u0bef\u0bf1")
        buf.write("\5\u03ee\u01f8\2\u0bf0\u0bef\3\2\2\2\u0bf0\u0bf1\3\2\2")
        buf.write("\2\u0bf1\u0c03\3\2\2\2\u0bf2\u0bf3\7\u0098\2\2\u0bf3\u0c03")
        buf.write("\5\u0484\u0243\2\u0bf4\u0bf7\5\u049e\u0250\2\u0bf5\u0bf7")
        buf.write("\5\u02e8\u0175\2\u0bf6\u0bf4\3\2\2\2\u0bf6\u0bf5\3\2\2")
        buf.write("\2\u0bf7\u0bff\3\2\2\2\u0bf8\u0bfb\7\u0307\2\2\u0bf9\u0bfc")
        buf.write("\5\u049e\u0250\2\u0bfa\u0bfc\5\u02e8\u0175\2\u0bfb\u0bf9")
        buf.write("\3\2\2\2\u0bfb\u0bfa\3\2\2\2\u0bfc\u0bfe\3\2\2\2\u0bfd")
        buf.write("\u0bf8\3\2\2\2\u0bfe\u0c01\3\2\2\2\u0bff\u0bfd\3\2\2\2")
        buf.write("\u0bff\u0c00\3\2\2\2\u0c00\u0c03\3\2\2\2\u0c01\u0bff\3")
        buf.write("\2\2\2\u0c02\u0be7\3\2\2\2\u0c02\u0bf2\3\2\2\2\u0c02\u0bf6")
        buf.write("\3\2\2\2\u0c03\u0127\3\2\2\2\u0c04\u0c05\7\u01a8\2\2\u0c05")
        buf.write("\u0c06\7\17\2\2\u0c06\u0c0c\7\u030a\2\2\u0c07\u0c0a\7")
        buf.write("\u02ed\2\2\u0c08\u0c09\7\u0307\2\2\u0c09\u0c0b\7\u02ed")
        buf.write("\2\2\u0c0a\u0c08\3\2\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b\u0c0d")
        buf.write("\3\2\2\2\u0c0c\u0c07\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d")
        buf.write("\u0c0e\3\2\2\2\u0c0e\u0c0f\7\u030b\2\2\u0c0f\u0129\3\2")
        buf.write("\2\2\u0c10\u0c11\7\u00df\2\2\u0c11\u0c12\5\u02a6\u0154")
        buf.write("\2\u0c12\u012b\3\2\2\2\u0c13\u0c14\7\u02bd\2\2\u0c14\u0c19")
        buf.write("\5\u012e\u0098\2\u0c15\u0c16\7\u0307\2\2\u0c16\u0c18\5")
        buf.write("\u012e\u0098\2\u0c17\u0c15\3\2\2\2\u0c18\u0c1b\3\2\2\2")
        buf.write("\u0c19\u0c17\3\2\2\2\u0c19\u0c1a\3\2\2\2\u0c1a\u012d\3")
        buf.write("\2\2\2\u0c1b\u0c19\3\2\2\2\u0c1c\u0c1d\5\u0466\u0234\2")
        buf.write("\u0c1d\u0c1e\7\23\2\2\u0c1e\u0c1f\5\u0130\u0099\2\u0c1f")
        buf.write("\u012f\3\2\2\2\u0c20\u0c21\7\u030a\2\2\u0c21\u0c22\5\u0132")
        buf.write("\u009a\2\u0c22\u0c23\7\u030b\2\2\u0c23\u0131\3\2\2\2\u0c24")
        buf.write("\u0c26\5\u0466\u0234\2\u0c25\u0c24\3\2\2\2\u0c25\u0c26")
        buf.write("\3\2\2\2\u0c26\u0c2a\3\2\2\2\u0c27\u0c28\7\u0197\2\2\u0c28")
        buf.write("\u0c29\7/\2\2\u0c29\u0c2b\5\u0308\u0185\2\u0c2a\u0c27")
        buf.write("\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c2d\3\2\2\2\u0c2c")
        buf.write("\u0c2e\5\u014a\u00a6\2\u0c2d\u0c2c\3\2\2\2\u0c2d\u0c2e")
        buf.write("\3\2\2\2\u0c2e\u0c30\3\2\2\2\u0c2f\u0c31\5\u0134\u009b")
        buf.write("\2\u0c30\u0c2f\3\2\2\2\u0c30\u0c31\3\2\2\2\u0c31\u0133")
        buf.write("\3\2\2\2\u0c32\u0c33\5\u0136\u009c\2\u0c33\u0c35\5\u0138")
        buf.write("\u009d\2\u0c34\u0c36\5\u0140\u00a1\2\u0c35\u0c34\3\2\2")
        buf.write("\2\u0c35\u0c36\3\2\2\2\u0c36\u0135\3\2\2\2\u0c37\u0c38")
        buf.write("\t\"\2\2\u0c38\u0137\3\2\2\2\u0c39\u0c3c\5\u013a\u009e")
        buf.write("\2\u0c3a\u0c3c\5\u013c\u009f\2\u0c3b\u0c39\3\2\2\2\u0c3b")
        buf.write("\u0c3a\3\2\2\2\u0c3c\u0139\3\2\2\2\u0c3d\u0c3e\7\u02bc")
        buf.write("\2\2\u0c3e\u0c4c\7\u02b7\2\2\u0c3f\u0c40\5\u047a\u023e")
        buf.write("\2\u0c40\u0c41\7\u02b7\2\2\u0c41\u0c4c\3\2\2\2\u0c42\u0c43")
        buf.write("\7\u0315\2\2\u0c43\u0c4c\7\u02b7\2\2\u0c44\u0c45\7\u00f9")
        buf.write("\2\2\u0c45\u0c46\5\u02a6\u0154\2\u0c46\u0c47\5\u02fe\u0180")
        buf.write("\2\u0c47\u0c48\7\u02b7\2\2\u0c48\u0c4c\3\2\2\2\u0c49\u0c4a")
        buf.write("\7g\2\2\u0c4a\u0c4c\7\u01e9\2\2\u0c4b\u0c3d\3\2\2\2\u0c4b")
        buf.write("\u0c3f\3\2\2\2\u0c4b\u0c42\3\2\2\2\u0c4b\u0c44\3\2\2\2")
        buf.write("\u0c4b\u0c49\3\2\2\2\u0c4c\u013b\3\2\2\2\u0c4d\u0c4e\7")
        buf.write(" \2\2\u0c4e\u0c4f\5\u013e\u00a0\2\u0c4f\u0c50\7\21\2\2")
        buf.write("\u0c50\u0c51\5\u013e\u00a0\2\u0c51\u013d\3\2\2\2\u0c52")
        buf.write("\u0c60\5\u013a\u009e\2\u0c53\u0c54\7\u02bc\2\2\u0c54\u0c60")
        buf.write("\7\u02ac\2\2\u0c55\u0c56\5\u047a\u023e\2\u0c56\u0c57\7")
        buf.write("\u02ac\2\2\u0c57\u0c60\3\2\2\2\u0c58\u0c59\7\u0315\2\2")
        buf.write("\u0c59\u0c60\7\u02ac\2\2\u0c5a\u0c5b\7\u00f9\2\2\u0c5b")
        buf.write("\u0c5c\5\u02a6\u0154\2\u0c5c\u0c5d\5\u02fe\u0180\2\u0c5d")
        buf.write("\u0c5e\7\u02ac\2\2\u0c5e\u0c60\3\2\2\2\u0c5f\u0c52\3\2")
        buf.write("\2\2\u0c5f\u0c53\3\2\2\2\u0c5f\u0c55\3\2\2\2\u0c5f\u0c58")
        buf.write("\3\2\2\2\u0c5f\u0c5a\3\2\2\2\u0c60\u013f\3\2\2\2\u0c61")
        buf.write("\u0c68\7\u02aa\2\2\u0c62\u0c63\7g\2\2\u0c63\u0c69\7\u01e9")
        buf.write("\2\2\u0c64\u0c69\7\u00db\2\2\u0c65\u0c69\7\u02bb\2\2\u0c66")
        buf.write("\u0c67\7\u0177\2\2\u0c67\u0c69\7\u02b4\2\2\u0c68\u0c62")
        buf.write("\3\2\2\2\u0c68\u0c64\3\2\2\2\u0c68\u0c65\3\2\2\2\u0c68")
        buf.write("\u0c66\3\2\2\2\u0c69\u0141\3\2\2\2\u0c6a\u0c6c\7\u0287")
        buf.write("\2\2\u0c6b\u0c6d\7\u029b\2\2\u0c6c\u0c6b\3\2\2\2\u0c6c")
        buf.write("\u0c6d\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e\u0c73\5\u0144")
        buf.write("\u00a3\2\u0c6f\u0c70\7\u0307\2\2\u0c70\u0c72\5\u0144\u00a3")
        buf.write("\2\u0c71\u0c6f\3\2\2\2\u0c72\u0c75\3\2\2\2\u0c73\u0c71")
        buf.write("\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74\u0143\3\2\2\2\u0c75")
        buf.write("\u0c73\3\2\2\2\u0c76\u0c78\5\u046a\u0236\2\u0c77\u0c79")
        buf.write("\5\u0416\u020c\2\u0c78\u0c77\3\2\2\2\u0c78\u0c79\3\2\2")
        buf.write("\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7b\7\23\2\2\u0c7b\u0c7c")
        buf.write("\5\u011a\u008e\2\u0c7c\u0145\3\2\2\2\u0c7d\u0c7e\7\u00db")
        buf.write("\2\2\u0c7e\u0c7f\7/\2\2\u0c7f\u0c81\5\u0308\u0185\2\u0c80")
        buf.write("\u0c82\5\u0148\u00a5\2\u0c81\u0c80\3\2\2\2\u0c81\u0c82")
        buf.write("\3\2\2\2\u0c82\u0147\3\2\2\2\u0c83\u0c84\7\u0287\2\2\u0c84")
        buf.write("\u0c89\7\u01e3\2\2\u0c85\u0c86\6\u00a5\64\2\u0c86\u0c87")
        buf.write("\7\u0287\2\2\u0c87\u0c89\7e\2\2\u0c88\u0c83\3\2\2\2\u0c88")
        buf.write("\u0c85\3\2\2\2\u0c89\u0149\3\2\2\2\u0c8a\u0c8b\7\u018b")
        buf.write("\2\2\u0c8b\u0c8c\7/\2\2\u0c8c\u0c8d\5\u0308\u0185\2\u0c8d")
        buf.write("\u014b\3\2\2\2\u0c8e\u0c8f\t#\2\2\u0c8f\u014d\3\2\2\2")
        buf.write("\u0c90\u0c93\7\u00cd\2\2\u0c91\u0c94\7\u0097\2\2\u0c92")
        buf.write("\u0c94\5\u0150\u00a9\2\u0c93\u0c91\3\2\2\2\u0c93\u0c92")
        buf.write("\3\2\2\2\u0c94\u014f\3\2\2\2\u0c95\u0c9a\5\u016a\u00b6")
        buf.write("\2\u0c96\u0c97\7\u0307\2\2\u0c97\u0c99\5\u016a\u00b6\2")
        buf.write("\u0c98\u0c96\3\2\2\2\u0c99\u0c9c\3\2\2\2\u0c9a\u0c98\3")
        buf.write("\2\2\2\u0c9a\u0c9b\3\2\2\2\u0c9b\u0151\3\2\2\2\u0c9c\u0c9a")
        buf.write("\3\2\2\2\u0c9d\u0c9e\7\u0274\2\2\u0c9e\u0ca3\5\u0156\u00ac")
        buf.write("\2\u0c9f\u0ca0\7\u0307\2\2\u0ca0\u0ca2\5\u0156\u00ac\2")
        buf.write("\u0ca1\u0c9f\3\2\2\2\u0ca2\u0ca5\3\2\2\2\u0ca3\u0ca1\3")
        buf.write("\2\2\2\u0ca3\u0ca4\3\2\2\2\u0ca4\u0153\3\2\2\2\u0ca5\u0ca3")
        buf.write("\3\2\2\2\u0ca6\u0ca7\7\u0240\2\2\u0ca7\u0ca8\5\u0450\u0229")
        buf.write("\2\u0ca8\u0155\3\2\2\2\u0ca9\u0caa\7\u01e9\2\2\u0caa\u0cac")
        buf.write("\7\u030a\2\2\u0cab\u0cad\5\u00f8}\2\u0cac\u0cab\3\2\2")
        buf.write("\2\u0cac\u0cad\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae\u0caf")
        buf.write("\7\u030b\2\2\u0caf\u0157\3\2\2\2\u0cb0\u0cb9\5\u011c\u008f")
        buf.write("\2\u0cb1\u0cb9\7\u0219\2\2\u0cb2\u0cb3\6\u00ad\65\2\u0cb3")
        buf.write("\u0cb9\7\u0217\2\2\u0cb4\u0cb5\6\u00ad\66\2\u0cb5\u0cb6")
        buf.write("\7\u0147\2\2\u0cb6\u0cb7\7\u02f0\2\2\u0cb7\u0cb9\5\u0478")
        buf.write("\u023d\2\u0cb8\u0cb0\3\2\2\2\u0cb8\u0cb1\3\2\2\2\u0cb8")
        buf.write("\u0cb2\3\2\2\2\u0cb8\u0cb4\3\2\2\2\u0cb9\u0159\3\2\2\2")
        buf.write("\u0cba\u0cbc\5\u015c\u00af\2\u0cbb\u0cba\3\2\2\2\u0cbc")
        buf.write("\u0cbd\3\2\2\2\u0cbd\u0cbb\3\2\2\2\u0cbd\u0cbe\3\2\2\2")
        buf.write("\u0cbe\u015b\3\2\2\2\u0cbf\u0cc0\7\u00ca\2\2\u0cc0\u0cc4")
        buf.write("\5\u015e\u00b0\2\u0cc1\u0cc2\6\u00af\67\2\u0cc2\u0cc3")
        buf.write("\7\u029e\2\2\u0cc3\u0cc5\5\u0454\u022b\2\u0cc4\u0cc1\3")
        buf.write("\2\2\2\u0cc4\u0cc5\3\2\2\2\u0cc5\u0cc8\3\2\2\2\u0cc6\u0cc7")
        buf.write("\6\u00af8\2\u0cc7\u0cc9\5\u0160\u00b1\2\u0cc8\u0cc6\3")
        buf.write("\2\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9\u0ccf\3\2\2\2\u0cca\u0ccb")
        buf.write("\7\u0121\2\2\u0ccb\u0ccc\7\u00fd\2\2\u0ccc\u0ccd\7\u01fe")
        buf.write("\2\2\u0ccd\u0ccf\7\u015c\2\2\u0cce\u0cbf\3\2\2\2\u0cce")
        buf.write("\u0cca\3\2\2\2\u0ccf\u015d\3\2\2\2\u0cd0\u0cd4\7\u0268")
        buf.write("\2\2\u0cd1\u0cd2\6\u00b09\2\u0cd2\u0cd4\7\u01fe\2\2\u0cd3")
        buf.write("\u0cd0\3\2\2\2\u0cd3\u0cd1\3\2\2\2\u0cd4\u015f\3\2\2\2")
        buf.write("\u0cd5\u0cd6\7\u029f\2\2\u0cd6\u0cd9\7\u02a0\2\2\u0cd7")
        buf.write("\u0cd9\7\u02a1\2\2\u0cd8\u0cd5\3\2\2\2\u0cd8\u0cd7\3\2")
        buf.write("\2\2\u0cd9\u0161\3\2\2\2\u0cda\u0cdd\5\u0164\u00b3\2\u0cdb")
        buf.write("\u0cdd\7\u02fa\2\2\u0cdc\u0cda\3\2\2\2\u0cdc\u0cdb\3\2")
        buf.write("\2\2\u0cdd\u0ce2\3\2\2\2\u0cde\u0cdf\7\u0307\2\2\u0cdf")
        buf.write("\u0ce1\5\u0164\u00b3\2\u0ce0\u0cde\3\2\2\2\u0ce1\u0ce4")
        buf.write("\3\2\2\2\u0ce2\u0ce0\3\2\2\2\u0ce2\u0ce3\3\2\2\2\u0ce3")
        buf.write("\u0163\3\2\2\2\u0ce4\u0ce2\3\2\2\2\u0ce5\u0ceb\5\u0420")
        buf.write("\u0211\2\u0ce6\u0ce8\5\u02a6\u0154\2\u0ce7\u0ce9\5\u0166")
        buf.write("\u00b4\2\u0ce8\u0ce7\3\2\2\2\u0ce8\u0ce9\3\2\2\2\u0ce9")
        buf.write("\u0ceb\3\2\2\2\u0cea\u0ce5\3\2\2\2\u0cea\u0ce6\3\2\2\2")
        buf.write("\u0ceb\u0165\3\2\2\2\u0cec\u0cee\7\23\2\2\u0ced\u0cec")
        buf.write("\3\2\2\2\u0ced\u0cee\3\2\2\2\u0cee\u0cf1\3\2\2\2\u0cef")
        buf.write("\u0cf2\5\u046a\u0236\2\u0cf0\u0cf2\5\u0484\u0243\2\u0cf1")
        buf.write("\u0cef\3\2\2\2\u0cf1\u0cf0\3\2\2\2\u0cf2\u0167\3\2\2\2")
        buf.write("\u0cf3\u0cf4\7\u0285\2\2\u0cf4\u0cf5\5\u02a6\u0154\2\u0cf5")
        buf.write("\u0169\3\2\2\2\u0cf6\u0d01\5\u0176\u00bc\2\u0cf7\u0cfb")
        buf.write("\7\u030c\2\2\u0cf8\u0cf9\6\u00b6:\2\u0cf9\u0cfc\5\u046a")
        buf.write("\u0236\2\u0cfa\u0cfc\7\u02de\2\2\u0cfb\u0cf8\3\2\2\2\u0cfb")
        buf.write("\u0cfa\3\2\2\2\u0cfc\u0cfd\3\2\2\2\u0cfd\u0cfe\5\u016c")
        buf.write("\u00b7\2\u0cfe\u0cff\7\u030d\2\2\u0cff\u0d01\3\2\2\2\u0d00")
        buf.write("\u0cf6\3\2\2\2\u0d00\u0cf7\3\2\2\2\u0d01\u0d05\3\2\2\2")
        buf.write("\u0d02\u0d04\5\u016e\u00b8\2\u0d03\u0d02\3\2\2\2\u0d04")
        buf.write("\u0d07\3\2\2\2\u0d05\u0d03\3\2\2\2\u0d05\u0d06\3\2\2\2")
        buf.write("\u0d06\u016b\3\2\2\2\u0d07\u0d05\3\2\2\2\u0d08\u0d0c\5")
        buf.write("\u0176\u00bc\2\u0d09\u0d0b\5\u016e\u00b8\2\u0d0a\u0d09")
        buf.write("\3\2\2\2\u0d0b\u0d0e\3\2\2\2\u0d0c\u0d0a\3\2\2\2\u0d0c")
        buf.write("\u0d0d\3\2\2\2\u0d0d\u016d\3\2\2\2\u0d0e\u0d0c\3\2\2\2")
        buf.write("\u0d0f\u0d10\5\u0172\u00ba\2\u0d10\u0d15\5\u016a\u00b6")
        buf.write("\2\u0d11\u0d12\7\u0181\2\2\u0d12\u0d16\5\u02a6\u0154\2")
        buf.write("\u0d13\u0d14\7\u026f\2\2\u0d14\u0d16\5\u046e\u0238\2\u0d15")
        buf.write("\u0d11\3\2\2\2\u0d15\u0d13\3\2\2\2\u0d15\u0d16\3\2\2\2")
        buf.write("\u0d16\u0d23\3\2\2\2\u0d17\u0d18\5\u0174\u00bb\2\u0d18")
        buf.write("\u0d1d\5\u016a\u00b6\2\u0d19\u0d1a\7\u0181\2\2\u0d1a\u0d1e")
        buf.write("\5\u02a6\u0154\2\u0d1b\u0d1c\7\u026f\2\2\u0d1c\u0d1e\5")
        buf.write("\u046e\u0238\2\u0d1d\u0d19\3\2\2\2\u0d1d\u0d1b\3\2\2\2")
        buf.write("\u0d1e\u0d23\3\2\2\2\u0d1f\u0d20\5\u0170\u00b9\2\u0d20")
        buf.write("\u0d21\5\u0176\u00bc\2\u0d21\u0d23\3\2\2\2\u0d22\u0d0f")
        buf.write("\3\2\2\2\u0d22\u0d17\3\2\2\2\u0d22\u0d1f\3\2\2\2\u0d23")
        buf.write("\u016f\3\2\2\2\u0d24\u0d26\7\u0169\2\2\u0d25\u0d27\7\u00f1")
        buf.write("\2\2\u0d26\u0d25\3\2\2\2\u0d26\u0d27\3\2\2\2\u0d27\u0d28")
        buf.write("\3\2\2\2\u0d28\u0d30\7\u0107\2\2\u0d29\u0d2a\7\u0169\2")
        buf.write("\2\u0d2a\u0d2c\t$\2\2\u0d2b\u0d2d\7\u018d\2\2\u0d2c\u0d2b")
        buf.write("\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d2e\3\2\2\2\u0d2e")
        buf.write("\u0d30\7\u0107\2\2\u0d2f\u0d24\3\2\2\2\u0d2f\u0d29\3\2")
        buf.write("\2\2\u0d30\u0171\3\2\2\2\u0d31\u0d33\t%\2\2\u0d32\u0d31")
        buf.write("\3\2\2\2\u0d32\u0d33\3\2\2\2\u0d33\u0d34\3\2\2\2\u0d34")
        buf.write("\u0d37\7\u0107\2\2\u0d35\u0d37\7\u022d\2\2\u0d36\u0d32")
        buf.write("\3\2\2\2\u0d36\u0d35\3\2\2\2\u0d37\u0173\3\2\2\2\u0d38")
        buf.write("\u0d3a\t$\2\2\u0d39\u0d3b\7\u018d\2\2\u0d3a\u0d39\3\2")
        buf.write("\2\2\u0d3a\u0d3b\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c\u0d3d")
        buf.write("\7\u0107\2\2\u0d3d\u0175\3\2\2\2\u0d3e\u0d45\5\u0178\u00bd")
        buf.write("\2\u0d3f\u0d45\5\u017a\u00be\2\u0d40\u0d45\5\u017c\u00bf")
        buf.write("\2\u0d41\u0d45\5\u017e\u00c0\2\u0d42\u0d43\6\u00bc;\2")
        buf.write("\u0d43\u0d45\5\u0180\u00c1\2\u0d44\u0d3e\3\2\2\2\u0d44")
        buf.write("\u0d3f\3\2\2\2\u0d44\u0d40\3\2\2\2\u0d44\u0d41\3\2\2\2")
        buf.write("\u0d44\u0d42\3\2\2\2\u0d45\u0177\3\2\2\2\u0d46\u0d48\5")
        buf.write("\u0450\u0229\2\u0d47\u0d49\5\u040e\u0208\2\u0d48\u0d47")
        buf.write("\3\2\2\2\u0d48\u0d49\3\2\2\2\u0d49\u0d4b\3\2\2\2\u0d4a")
        buf.write("\u0d4c\5\u0190\u00c9\2\u0d4b\u0d4a\3\2\2\2\u0d4b\u0d4c")
        buf.write("\3\2\2\2\u0d4c\u0d4e\3\2\2\2\u0d4d\u0d4f\5\u0192\u00ca")
        buf.write("\2\u0d4e\u0d4d\3\2\2\2\u0d4e\u0d4f\3\2\2\2\u0d4f\u0179")
        buf.write("\3\2\2\2\u0d50\u0d53\7\u030a\2\2\u0d51\u0d54\5\u0178\u00bd")
        buf.write("\2\u0d52\u0d54\5\u017a\u00be\2\u0d53\u0d51\3\2\2\2\u0d53")
        buf.write("\u0d52\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d56\7\u030b")
        buf.write("\2\2\u0d56\u017b\3\2\2\2\u0d57\u0d59\5\u011a\u008e\2\u0d58")
        buf.write("\u0d5a\5\u0190\u00c9\2\u0d59\u0d58\3\2\2\2\u0d59\u0d5a")
        buf.write("\3\2\2\2\u0d5a\u0d5d\3\2\2\2\u0d5b\u0d5c\6\u00bf<\2\u0d5c")
        buf.write("\u0d5e\5\u0416\u020c\2\u0d5d\u0d5b\3\2\2\2\u0d5d\u0d5e")
        buf.write("\3\2\2\2\u0d5e\u0d69\3\2\2\2\u0d5f\u0d60\6\u00bf=\2\u0d60")
        buf.write("\u0d61\7\u02d8\2\2\u0d61\u0d63\5\u011a\u008e\2\u0d62\u0d64")
        buf.write("\5\u0190\u00c9\2\u0d63\u0d62\3\2\2\2\u0d63\u0d64\3\2\2")
        buf.write("\2\u0d64\u0d66\3\2\2\2\u0d65\u0d67\5\u0416\u020c\2\u0d66")
        buf.write("\u0d65\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d69\3\2\2\2")
        buf.write("\u0d68\u0d57\3\2\2\2\u0d68\u0d5f\3\2\2\2\u0d69\u017d\3")
        buf.write("\2\2\2\u0d6a\u0d6d\7\u030a\2\2\u0d6b\u0d6e\5\u0150\u00a9")
        buf.write("\2\u0d6c\u0d6e\5\u017e\u00c0\2\u0d6d\u0d6b\3\2\2\2\u0d6d")
        buf.write("\u0d6c\3\2\2\2\u0d6e\u0d6f\3\2\2\2\u0d6f\u0d70\7\u030b")
        buf.write("\2\2\u0d70\u017f\3\2\2\2\u0d71\u0d72\7\u02bf\2\2\u0d72")
        buf.write("\u0d73\7\u030a\2\2\u0d73\u0d74\5\u02a6\u0154\2\u0d74\u0d75")
        buf.write("\7\u0307\2\2\u0d75\u0d76\5\u0484\u0243\2\u0d76\u0d77\5")
        buf.write("\u0182\u00c2\2\u0d77\u0d79\7\u030b\2\2\u0d78\u0d7a\5\u0190")
        buf.write("\u00c9\2\u0d79\u0d78\3\2\2\2\u0d79\u0d7a\3\2\2\2\u0d7a")
        buf.write("\u0181\3\2\2\2\u0d7b\u0d7c\7I\2\2\u0d7c\u0d7d\7\u030a")
        buf.write("\2\2\u0d7d\u0d82\5\u0184\u00c3\2\u0d7e\u0d7f\7\u0307\2")
        buf.write("\2\u0d7f\u0d81\5\u0184\u00c3\2\u0d80\u0d7e\3\2\2\2\u0d81")
        buf.write("\u0d84\3\2\2\2\u0d82\u0d80\3\2\2\2\u0d82\u0d83\3\2\2\2")
        buf.write("\u0d83\u0d85\3\2\2\2\u0d84\u0d82\3\2\2\2\u0d85\u0d86\7")
        buf.write("\u030b\2\2\u0d86\u0183\3\2\2\2\u0d87\u0d88\5\u046a\u0236")
        buf.write("\2\u0d88\u0d89\7\u00ca\2\2\u0d89\u0d8a\7\u02c1\2\2\u0d8a")
        buf.write("\u0d9f\3\2\2\2\u0d8b\u0d8c\5\u046a\u0236\2\u0d8c\u0d8f")
        buf.write("\5\u0396\u01cc\2\u0d8d\u0d8e\6\u00c3>\2\u0d8e\u0d90\5")
        buf.write("\u03dc\u01ef\2\u0d8f\u0d8d\3\2\2\2\u0d8f\u0d90\3\2\2\2")
        buf.write("\u0d90\u0d92\3\2\2\2\u0d91\u0d93\7\u00b0\2\2\u0d92\u0d91")
        buf.write("\3\2\2\2\u0d92\u0d93\3\2\2\2\u0d93\u0d94\3\2\2\2\u0d94")
        buf.write("\u0d95\7\u02c2\2\2\u0d95\u0d97\5\u0484\u0243\2\u0d96\u0d98")
        buf.write("\5\u0186\u00c4\2\u0d97\u0d96\3\2\2\2\u0d97\u0d98\3\2\2")
        buf.write("\2\u0d98\u0d9f\3\2\2\2\u0d99\u0d9a\7\u02c0\2\2\u0d9a\u0d9b")
        buf.write("\7\u02c2\2\2\u0d9b\u0d9c\5\u0484\u0243\2\u0d9c\u0d9d\5")
        buf.write("\u0182\u00c2\2\u0d9d\u0d9f\3\2\2\2\u0d9e\u0d87\3\2\2\2")
        buf.write("\u0d9e\u0d8b\3\2\2\2\u0d9e\u0d99\3\2\2\2\u0d9f\u0185\3")
        buf.write("\2\2\2\u0da0\u0da2\5\u0188\u00c5\2\u0da1\u0da3\5\u018a")
        buf.write("\u00c6\2\u0da2\u0da1\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3")
        buf.write("\u0da9\3\2\2\2\u0da4\u0da6\5\u018a\u00c6\2\u0da5\u0da7")
        buf.write("\5\u0188\u00c5\2\u0da6\u0da5\3\2\2\2\u0da6\u0da7\3\2\2")
        buf.write("\2\u0da7\u0da9\3\2\2\2\u0da8\u0da0\3\2\2\2\u0da8\u0da4")
        buf.write("\3\2\2\2\u0da9\u0187\3\2\2\2\u0daa\u0dab\5\u018c\u00c7")
        buf.write("\2\u0dab\u0dac\7\u0181\2\2\u0dac\u0dad\7\u02be\2\2\u0dad")
        buf.write("\u0189\3\2\2\2\u0dae\u0daf\5\u018c\u00c7\2\u0daf\u0db0")
        buf.write("\7\u0181\2\2\u0db0\u0db1\7\u00a7\2\2\u0db1\u018b\3\2\2")
        buf.write("\2\u0db2\u0db7\7\u00a7\2\2\u0db3\u0db7\7\u017a\2\2\u0db4")
        buf.write("\u0db5\7\u0082\2\2\u0db5\u0db7\5\u0484\u0243\2\u0db6\u0db2")
        buf.write("\3\2\2\2\u0db6\u0db3\3\2\2\2\u0db6\u0db4\3\2\2\2\u0db7")
        buf.write("\u018d\3\2\2\2\u0db8\u0db9\t&\2\2\u0db9\u018f\3\2\2\2")
        buf.write("\u0dba\u0dbe\7\23\2\2\u0dbb\u0dbc\6\u00c9?\2\u0dbc\u0dbe")
        buf.write("\7\u02f0\2\2\u0dbd\u0dba\3\2\2\2\u0dbd\u0dbb\3\2\2\2\u0dbd")
        buf.write("\u0dbe\3\2\2\2\u0dbe\u0dbf\3\2\2\2\u0dbf\u0dc0\5\u046a")
        buf.write("\u0236\2\u0dc0\u0191\3\2\2\2\u0dc1\u0dc6\5\u0194\u00cb")
        buf.write("\2\u0dc2\u0dc3\7\u0307\2\2\u0dc3\u0dc5\5\u0194\u00cb\2")
        buf.write("\u0dc4\u0dc2\3\2\2\2\u0dc5\u0dc8\3\2\2\2\u0dc6\u0dc4\3")
        buf.write("\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u0193\3\2\2\2\u0dc8\u0dc6")
        buf.write("\3\2\2\2\u0dc9\u0dca\5\u0196\u00cc\2\u0dca\u0dcc\5\u0198")
        buf.write("\u00cd\2\u0dcb\u0dcd\5\u019c\u00cf\2\u0dcc\u0dcb\3\2\2")
        buf.write("\2\u0dcc\u0dcd\3\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce\u0dcf")
        buf.write("\7\u030a\2\2\u0dcf\u0dd0\5\u019e\u00d0\2\u0dd0\u0dd1\7")
        buf.write("\u030b\2\2\u0dd1\u0dde\3\2\2\2\u0dd2\u0dd3\7\u026e\2\2")
        buf.write("\u0dd3\u0dd5\5\u0198\u00cd\2\u0dd4\u0dd6\5\u019c\u00cf")
        buf.write("\2\u0dd5\u0dd4\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd7")
        buf.write("\3\2\2\2\u0dd7\u0dd9\7\u030a\2\2\u0dd8\u0dda\5\u019e\u00d0")
        buf.write("\2\u0dd9\u0dd8\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda\u0ddb")
        buf.write("\3\2\2\2\u0ddb\u0ddc\7\u030b\2\2\u0ddc\u0dde\3\2\2\2\u0ddd")
        buf.write("\u0dc9\3\2\2\2\u0ddd\u0dd2\3\2\2\2\u0dde\u0195\3\2\2\2")
        buf.write("\u0ddf\u0de0\t\'\2\2\u0de0\u0197\3\2\2\2\u0de1\u0de2\t")
        buf.write("(\2\2\u0de2\u0199\3\2\2\2\u0de3\u0de4\7\u01a6\2\2\u0de4")
        buf.write("\u0dea\7\u010b\2\2\u0de5\u0de7\7\u0263\2\2\u0de6\u0de8")
        buf.write("\5\u0198\u00cd\2\u0de7\u0de6\3\2\2\2\u0de7\u0de8\3\2\2")
        buf.write("\2\u0de8\u0dea\3\2\2\2\u0de9\u0de3\3\2\2\2\u0de9\u0de5")
        buf.write("\3\2\2\2\u0dea\u019b\3\2\2\2\u0deb\u0df1\7\u00ca\2\2\u0dec")
        buf.write("\u0df2\7\u0107\2\2\u0ded\u0dee\7\u018b\2\2\u0dee\u0df2")
        buf.write("\7/\2\2\u0def\u0df0\7\u00db\2\2\u0df0\u0df2\7/\2\2\u0df1")
        buf.write("\u0dec\3\2\2\2\u0df1\u0ded\3\2\2\2\u0df1\u0def\3\2\2\2")
        buf.write("\u0df2\u019d\3\2\2\2\u0df3\u0df8\5\u01a0\u00d1\2\u0df4")
        buf.write("\u0df5\7\u0307\2\2\u0df5\u0df7\5\u01a0\u00d1\2\u0df6\u0df4")
        buf.write("\3\2\2\2\u0df7\u0dfa\3\2\2\2\u0df8\u0df6\3\2\2\2\u0df8")
        buf.write("\u0df9\3\2\2\2\u0df9\u019f\3\2\2\2\u0dfa\u0df8\3\2\2\2")
        buf.write("\u0dfb\u0dfe\5\u046a\u0236\2\u0dfc\u0dfe\7\u01a6\2\2\u0dfd")
        buf.write("\u0dfb\3\2\2\2\u0dfd\u0dfc\3\2\2\2\u0dfe\u01a1\3\2\2\2")
        buf.write("\u0dff\u0e00\6\u00d2@\2\u0e00\u0e02\5\u0142\u00a2\2\u0e01")
        buf.write("\u0dff\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02\u0e03\3\2\2\2")
        buf.write("\u0e03\u0e05\7\u0268\2\2\u0e04\u0e06\7\u0129\2\2\u0e05")
        buf.write("\u0e04\3\2\2\2\u0e05\u0e06\3\2\2\2\u0e06\u0e08\3\2\2\2")
        buf.write("\u0e07\u0e09\7\u00ea\2\2\u0e08\u0e07\3\2\2\2\u0e08\u0e09")
        buf.write("\3\2\2\2\u0e09\u0e0a\3\2\2\2\u0e0a\u0e0b\5\u0150\u00a9")
        buf.write("\2\u0e0b\u0e0c\7\u01fc\2\2\u0e0c\u0e0e\5\u03e4\u01f3\2")
        buf.write("\u0e0d\u0e0f\5\u0168\u00b5\2\u0e0e\u0e0d\3\2\2\2\u0e0e")
        buf.write("\u0e0f\3\2\2\2\u0e0f\u0e11\3\2\2\2\u0e10\u0e12\5\u014a")
        buf.write("\u00a6\2\u0e11\u0e10\3\2\2\2\u0e11\u0e12\3\2\2\2\u0e12")
        buf.write("\u0e14\3\2\2\2\u0e13\u0e15\5\u0120\u0091\2\u0e14\u0e13")
        buf.write("\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u01a3\3\2\2\2\u0e16")
        buf.write("\u0e1b\5\u01a6\u00d4\2\u0e17\u0e1b\5\u01ac\u00d7\2\u0e18")
        buf.write("\u0e1b\5\u01ae\u00d8\2\u0e19\u0e1b\5\u01b4\u00db\2\u0e1a")
        buf.write("\u0e16\3\2\2\2\u0e1a\u0e17\3\2\2\2\u0e1a\u0e18\3\2\2\2")
        buf.write("\u0e1a\u0e19\3\2\2\2\u0e1b\u01a5\3\2\2\2\u0e1c\u0e1d\7")
        buf.write("\u0221\2\2\u0e1d\u0e21\7\u0252\2\2\u0e1e\u0e20\5\u01aa")
        buf.write("\u00d6\2\u0e1f\u0e1e\3\2\2\2\u0e20\u0e23\3\2\2\2\u0e21")
        buf.write("\u0e1f\3\2\2\2\u0e21\u0e22\3\2\2\2\u0e22\u0e36\3\2\2\2")
        buf.write("\u0e23\u0e21\3\2\2\2\u0e24\u0e26\7O\2\2\u0e25\u0e27\7")
        buf.write("\u0289\2\2\u0e26\u0e25\3\2\2\2\u0e26\u0e27\3\2\2\2\u0e27")
        buf.write("\u0e2d\3\2\2\2\u0e28\u0e2a\7\21\2\2\u0e29\u0e2b\7\u0177")
        buf.write("\2\2\u0e2a\u0e29\3\2\2\2\u0e2a\u0e2b\3\2\2\2\u0e2b\u0e2c")
        buf.write("\3\2\2\2\u0e2c\u0e2e\78\2\2\u0e2d\u0e28\3\2\2\2\u0e2d")
        buf.write("\u0e2e\3\2\2\2\u0e2e\u0e33\3\2\2\2\u0e2f\u0e31\7\u0177")
        buf.write("\2\2\u0e30\u0e2f\3\2\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0e32")
        buf.write("\3\2\2\2\u0e32\u0e34\7\u01c4\2\2\u0e33\u0e30\3\2\2\2\u0e33")
        buf.write("\u0e34\3\2\2\2\u0e34\u0e36\3\2\2\2\u0e35\u0e1c\3\2\2\2")
        buf.write("\u0e35\u0e24\3\2\2\2\u0e36\u01a7\3\2\2\2\u0e37\u0e39\7")
        buf.write("\37\2\2\u0e38\u0e3a\7\u0289\2\2\u0e39\u0e38\3\2\2\2\u0e39")
        buf.write("\u0e3a\3\2\2\2\u0e3a\u01a9\3\2\2\2\u0e3b\u0e3c\7\u0287")
        buf.write("\2\2\u0e3c\u0e3d\7W\2\2\u0e3d\u0e42\7\u0207\2\2\u0e3e")
        buf.write("\u0e3f\6\u00d6A\2\u0e3f\u0e40\7\u01b5\2\2\u0e40\u0e42")
        buf.write("\t)\2\2\u0e41\u0e3b\3\2\2\2\u0e41\u0e3e\3\2\2\2\u0e42")
        buf.write("\u01ab\3\2\2\2\u0e43\u0e44\7\u01eb\2\2\u0e44\u0e61\5\u046a")
        buf.write("\u0236\2\u0e45\u0e47\7\u01e2\2\2\u0e46\u0e48\7\u0289\2")
        buf.write("\2\u0e47\u0e46\3\2\2\2\u0e47\u0e48\3\2\2\2\u0e48\u0e5b")
        buf.write("\3\2\2\2\u0e49\u0e4b\7\u0250\2\2\u0e4a\u0e4c\7\u01eb\2")
        buf.write("\2\u0e4b\u0e4a\3\2\2\2\u0e4b\u0e4c\3\2\2\2\u0e4c\u0e4d")
        buf.write("\3\2\2\2\u0e4d\u0e5c\5\u046a\u0236\2\u0e4e\u0e50\7\21")
        buf.write("\2\2\u0e4f\u0e51\7\u0177\2\2\u0e50\u0e4f\3\2\2\2\u0e50")
        buf.write("\u0e51\3\2\2\2\u0e51\u0e52\3\2\2\2\u0e52\u0e54\78\2\2")
        buf.write("\u0e53\u0e4e\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54\u0e59\3")
        buf.write("\2\2\2\u0e55\u0e57\7\u0177\2\2\u0e56\u0e55\3\2\2\2\u0e56")
        buf.write("\u0e57\3\2\2\2\u0e57\u0e58\3\2\2\2\u0e58\u0e5a\7\u01c4")
        buf.write("\2\2\u0e59\u0e56\3\2\2\2\u0e59\u0e5a\3\2\2\2\u0e5a\u0e5c")
        buf.write("\3\2\2\2\u0e5b\u0e49\3\2\2\2\u0e5b\u0e53\3\2\2\2\u0e5c")
        buf.write("\u0e61\3\2\2\2\u0e5d\u0e5e\7\u01c4\2\2\u0e5e\u0e5f\7\u01eb")
        buf.write("\2\2\u0e5f\u0e61\5\u046a\u0236\2\u0e60\u0e43\3\2\2\2\u0e60")
        buf.write("\u0e45\3\2\2\2\u0e60\u0e5d\3\2\2\2\u0e61\u01ad\3\2\2\2")
        buf.write("\u0e62\u0e63\7\u0121\2\2\u0e63\u0e64\t\24\2\2\u0e64\u0e69")
        buf.write("\5\u01b0\u00d9\2\u0e65\u0e66\7\u0307\2\2\u0e66\u0e68\5")
        buf.write("\u01b0\u00d9\2\u0e67\u0e65\3\2\2\2\u0e68\u0e6b\3\2\2\2")
        buf.write("\u0e69\u0e67\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0e79\3")
        buf.write("\2\2\2\u0e6b\u0e69\3\2\2\2\u0e6c\u0e6d\6\u00d8B\2\u0e6d")
        buf.write("\u0e6e\7\u0121\2\2\u0e6e\u0e6f\7\u00f6\2\2\u0e6f\u0e70")
        buf.write("\7\u00ca\2\2\u0e70\u0e79\7\35\2\2\u0e71\u0e76\7\u0265")
        buf.write("\2\2\u0e72\u0e77\7\u023d\2\2\u0e73\u0e77\7\u0240\2\2\u0e74")
        buf.write("\u0e75\6\u00d8C\2\u0e75\u0e77\7\u00f6\2\2\u0e76\u0e72")
        buf.write("\3\2\2\2\u0e76\u0e73\3\2\2\2\u0e76\u0e74\3\2\2\2\u0e77")
        buf.write("\u0e79\3\2\2\2\u0e78\u0e62\3\2\2\2\u0e78\u0e6c\3\2\2\2")
        buf.write("\u0e78\u0e71\3\2\2\2\u0e79\u01af\3\2\2\2\u0e7a\u0e7c\5")
        buf.write("\u0450\u0229\2\u0e7b\u0e7d\5\u0190\u00c9\2\u0e7c\u0e7b")
        buf.write("\3\2\2\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e")
        buf.write("\u0e7f\5\u01b2\u00da\2\u0e7f\u01b1\3\2\2\2\u0e80\u0e82")
        buf.write("\7\u01b5\2\2\u0e81\u0e83\7\u011e\2\2\u0e82\u0e81\3\2\2")
        buf.write("\2\u0e82\u0e83\3\2\2\2\u0e83\u0e89\3\2\2\2\u0e84\u0e86")
        buf.write("\7\u0129\2\2\u0e85\u0e84\3\2\2\2\u0e85\u0e86\3\2\2\2\u0e86")
        buf.write("\u0e87\3\2\2\2\u0e87\u0e89\7\u028b\2\2\u0e88\u0e80\3\2")
        buf.write("\2\2\u0e88\u0e85\3\2\2\2\u0e89\u01b3\3\2\2\2\u0e8a\u0ea5")
        buf.write("\7\u028d\2\2\u0e8b\u0e8c\t*\2\2\u0e8c\u0e8e\5\u01b8\u00dd")
        buf.write("\2\u0e8d\u0e8f\t+\2\2\u0e8e\u0e8d\3\2\2\2\u0e8e\u0e8f")
        buf.write("\3\2\2\2\u0e8f\u0ea6\3\2\2\2\u0e90\u0e91\7\u00a1\2\2\u0e91")
        buf.write("\u0e97\5\u01b8\u00dd\2\u0e92\u0e95\7\u0238\2\2\u0e93\u0e94")
        buf.write("\7\u00ca\2\2\u0e94\u0e96\7\u0156\2\2\u0e95\u0e93\3\2\2")
        buf.write("\2\u0e95\u0e96\3\2\2\2\u0e96\u0e98\3\2\2\2\u0e97\u0e92")
        buf.write("\3\2\2\2\u0e97\u0e98\3\2\2\2\u0e98\u0ea6\3\2\2\2\u0e99")
        buf.write("\u0e9a\7\u01a3\2\2\u0e9a\u0ea6\5\u01b8\u00dd\2\u0e9b\u0e9c")
        buf.write("\7O\2\2\u0e9c\u0e9f\5\u01b8\u00dd\2\u0e9d\u0e9e\7\u0182")
        buf.write("\2\2\u0e9e\u0ea0\7\u0199\2\2\u0e9f\u0e9d\3\2\2\2\u0e9f")
        buf.write("\u0ea0\3\2\2\2\u0ea0\u0ea6\3\2\2\2\u0ea1\u0ea2\7\u01e2")
        buf.write("\2\2\u0ea2\u0ea6\5\u01b8\u00dd\2\u0ea3\u0ea4\7\u01b9\2")
        buf.write("\2\u0ea4\u0ea6\5\u01b6\u00dc\2\u0ea5\u0e8b\3\2\2\2\u0ea5")
        buf.write("\u0e90\3\2\2\2\u0ea5\u0e99\3\2\2\2\u0ea5\u0e9b\3\2\2\2")
        buf.write("\u0ea5\u0ea1\3\2\2\2\u0ea5\u0ea3\3\2\2\2\u0ea6\u01b5\3")
        buf.write("\2\2\2\u0ea7\u0eaa\6\u00dcD\2\u0ea8\u0ea9\7`\2\2\u0ea9")
        buf.write("\u0eab\7\u028e\2\2\u0eaa\u0ea8\3\2\2\2\u0eaa\u0eab\3\2")
        buf.write("\2\2\u0eab\u0eae\3\2\2\2\u0eac\u0eae\3\2\2\2\u0ead\u0ea7")
        buf.write("\3\2\2\2\u0ead\u0eac\3\2\2\2\u0eae\u01b7\3\2\2\2\u0eaf")
        buf.write("\u0eb6\5\u0486\u0244\2\u0eb0\u0eb1\7\u0307\2\2\u0eb1\u0eb4")
        buf.write("\5\u0486\u0244\2\u0eb2\u0eb3\7\u0307\2\2\u0eb3\u0eb5\5")
        buf.write("\u0476\u023c\2\u0eb4\u0eb2\3\2\2\2\u0eb4\u0eb5\3\2\2\2")
        buf.write("\u0eb5\u0eb7\3\2\2\2\u0eb6\u0eb0\3\2\2\2\u0eb6\u0eb7\3")
        buf.write("\2\2\2\u0eb7\u01b9\3\2\2\2\u0eb8\u0eb9\7\u01ae\2\2\u0eb9")
        buf.write("\u0eba\t,\2\2\u0eba\u0ebf\7\u0123\2\2\u0ebb\u0ebc\7\u0250")
        buf.write("\2\2\u0ebc\u0ec0\5\u048a\u0246\2\u0ebd\u0ebe\7\36\2\2")
        buf.write("\u0ebe\u0ec0\5\u02a6\u0154\2\u0ebf\u0ebb\3\2\2\2\u0ebf")
        buf.write("\u0ebd\3\2\2\2\u0ec0\u0eda\3\2\2\2\u0ec1\u0eda\5\u01c2")
        buf.write("\u00e2\2\u0ec2\u0ec3\7\u01d6\2\2\u0ec3\u0ec8\5\u01bc\u00df")
        buf.write("\2\u0ec4\u0ec5\7\u0307\2\2\u0ec5\u0ec7\5\u01bc\u00df\2")
        buf.write("\u0ec6\u0ec4\3\2\2\2\u0ec7\u0eca\3\2\2\2\u0ec8\u0ec6\3")
        buf.write("\2\2\2\u0ec8\u0ec9\3\2\2\2\u0ec9\u0eda\3\2\2\2\u0eca\u0ec8")
        buf.write("\3\2\2\2\u0ecb\u0ecc\6\u00deE\2\u0ecc\u0ecd\7\u01d6\2")
        buf.write("\2\u0ecd\u0ed1\7\u0294\2\2\u0ece\u0ecf\5\u03d4\u01eb\2")
        buf.write("\u0ecf\u0ed0\5\u046a\u0236\2\u0ed0\u0ed2\3\2\2\2\u0ed1")
        buf.write("\u0ece\3\2\2\2\u0ed1\u0ed2\3\2\2\2\u0ed2\u0eda\3\2\2\2")
        buf.write("\u0ed3\u0eda\5\u01e0\u00f1\2\u0ed4\u0ed5\6\u00deF\2\u0ed5")
        buf.write("\u0eda\5\u01d2\u00ea\2\u0ed6\u0eda\5\u01c0\u00e1\2\u0ed7")
        buf.write("\u0ed8\6\u00deG\2\u0ed8\u0eda\5\u01ea\u00f6\2\u0ed9\u0eb8")
        buf.write("\3\2\2\2\u0ed9\u0ec1\3\2\2\2\u0ed9\u0ec2\3\2\2\2\u0ed9")
        buf.write("\u0ecb\3\2\2\2\u0ed9\u0ed3\3\2\2\2\u0ed9\u0ed4\3\2\2\2")
        buf.write("\u0ed9\u0ed6\3\2\2\2\u0ed9\u0ed7\3\2\2\2\u0eda\u01bb\3")
        buf.write("\2\2\2\u0edb\u0edd\7\u013e\2\2\u0edc\u0ede\5\u01be\u00e0")
        buf.write("\2\u0edd\u0edc\3\2\2\2\u0edd\u0ede\3\2\2\2\u0ede\u0eea")
        buf.write("\3\2\2\2\u0edf\u0ee0\6\u00dfH\2\u0ee0\u0ee1\7\u01b0\2")
        buf.write("\2\u0ee1\u0eea\7\61\2\2\u0ee2\u0ee4\7\u0204\2\2\u0ee3")
        buf.write("\u0ee5\7\f\2\2\u0ee4\u0ee3\3\2\2\2\u0ee4\u0ee5\3\2\2\2")
        buf.write("\u0ee5\u0ee7\3\2\2\2\u0ee6\u0ee8\5\u0310\u0189\2\u0ee7")
        buf.write("\u0ee6\3\2\2\2\u0ee7\u0ee8\3\2\2\2\u0ee8\u0eea\3\2\2\2")
        buf.write("\u0ee9\u0edb\3\2\2\2\u0ee9\u0edf\3\2\2\2\u0ee9\u0ee2\3")
        buf.write("\2\2\2\u0eea\u01bd\3\2\2\2\u0eeb\u0eec\6\u00e0I\2\u0eec")
        buf.write("\u0ef1\7\u0250\2\2\u0eed\u0eee\6\u00e0J\2\u0eee\u0ef2")
        buf.write("\5\u0478\u023d\2\u0eef\u0ef0\6\u00e0K\2\u0ef0\u0ef2\5")
        buf.write("\u047c\u023f\2\u0ef1\u0eed\3\2\2\2\u0ef1\u0eef\3\2\2\2")
        buf.write("\u0ef2\u01bf\3\2\2\2\u0ef3\u0ef7\7\u011b\2\2\u0ef4\u0ef8")
        buf.write("\7r\2\2\u0ef5\u0ef6\7\u0240\2\2\u0ef6\u0ef8\5\u0450\u0229")
        buf.write("\2\u0ef7\u0ef4\3\2\2\2\u0ef7\u0ef5\3\2\2\2\u0ef8\u0ef9")
        buf.write("\3\2\2\2\u0ef9\u0efa\7\u00cd\2\2\u0efa\u0efb\7\u013e\2")
        buf.write("\2\u0efb\u01c1\3\2\2\2\u0efc\u0efd\79\2\2\u0efd\u0efe")
        buf.write("\7\u013e\2\2\u0efe\u0eff\7\u0250\2\2\u0eff\u0f01\5\u01c4")
        buf.write("\u00e3\2\u0f00\u0f02\5\u0310\u0189\2\u0f01\u0f00\3\2\2")
        buf.write("\2\u0f01\u0f02\3\2\2\2\u0f02\u01c3\3\2\2\2\u0f03\u0f08")
        buf.write("\5\u01c6\u00e4\2\u0f04\u0f05\7\u0307\2\2\u0f05\u0f07\5")
        buf.write("\u01c6\u00e4\2\u0f06\u0f04\3\2\2\2\u0f07\u0f0a\3\2\2\2")
        buf.write("\u0f08\u0f06\3\2\2\2\u0f08\u0f09\3\2\2\2\u0f09\u01c5\3")
        buf.write("\2\2\2\u0f0a\u0f08\3\2\2\2\u0f0b\u0f0c\7\u012e\2\2\u0f0c")
        buf.write("\u0f0d\7\u02f0\2\2\u0f0d\u0f67\5\u048c\u0247\2\u0f0e\u0f0f")
        buf.write("\7\u02db\2\2\u0f0f\u0f10\7\u02f0\2\2\u0f10\u0f67\5\u048c")
        buf.write("\u0247\2\u0f11\u0f12\7\u012b\2\2\u0f12\u0f13\7\u02f0\2")
        buf.write("\2\u0f13\u0f67\5\u048c\u0247\2\u0f14\u0f15\7\u0140\2\2")
        buf.write("\u0f15\u0f16\7\u02f0\2\2\u0f16\u0f67\5\u048c\u0247\2\u0f17")
        buf.write("\u0f18\7\u0131\2\2\u0f18\u0f19\7\u02f0\2\2\u0f19\u0f67")
        buf.write("\5\u048c\u0247\2\u0f1a\u0f1b\7\u0132\2\2\u0f1b\u0f1c\7")
        buf.write("\u02f0\2\2\u0f1c\u0f67\5\u0476\u023c\2\u0f1d\u0f1e\7\u012c")
        buf.write("\2\2\u0f1e\u0f1f\7\u02f0\2\2\u0f1f\u0f67\5\u0476\u023c")
        buf.write("\2\u0f20\u0f21\7\u0133\2\2\u0f21\u0f22\7\u02f0\2\2\u0f22")
        buf.write("\u0f67\5\u0476\u023c\2\u0f23\u0f24\7\u012d\2\2\u0f24\u0f25")
        buf.write("\7\u02f0\2\2\u0f25\u0f67\5\u0476\u023c\2\u0f26\u0f27\7")
        buf.write("\u013c\2\2\u0f27\u0f28\7\u02f0\2\2\u0f28\u0f67\5\u0476")
        buf.write("\u023c\2\u0f29\u0f2a\7\u0136\2\2\u0f2a\u0f2b\7\u02f0\2")
        buf.write("\2\u0f2b\u0f67\5\u048c\u0247\2\u0f2c\u0f2d\7\u0135\2\2")
        buf.write("\u0f2d\u0f2e\7\u02f0\2\2\u0f2e\u0f67\5\u048c\u0247\2\u0f2f")
        buf.write("\u0f30\7\u013f\2\2\u0f30\u0f31\7\u02f0\2\2\u0f31\u0f67")
        buf.write("\5\u048c\u0247\2\u0f32\u0f33\7\u0137\2\2\u0f33\u0f34\7")
        buf.write("\u02f0\2\2\u0f34\u0f67\5\u048c\u0247\2\u0f35\u0f36\7\u02e4")
        buf.write("\2\2\u0f36\u0f37\7\u02f0\2\2\u0f37\u0f67\5\u01cc\u00e7")
        buf.write("\2\u0f38\u0f39\7\u0138\2\2\u0f39\u0f3a\7\u02f0\2\2\u0f3a")
        buf.write("\u0f67\5\u048c\u0247\2\u0f3b\u0f3c\7\u013b\2\2\u0f3c\u0f3d")
        buf.write("\7\u02f0\2\2\u0f3d\u0f67\5\u048c\u0247\2\u0f3e\u0f3f\7")
        buf.write("\u013d\2\2\u0f3f\u0f40\7\u02f0\2\2\u0f40\u0f67\5\u0476")
        buf.write("\u023c\2\u0f41\u0f42\7\u0139\2\2\u0f42\u0f43\7\u02f0\2")
        buf.write("\2\u0f43\u0f67\5\u048a\u0246\2\u0f44\u0f45\7\u013a\2\2")
        buf.write("\u0f45\u0f46\7\u02f0\2\2\u0f46\u0f67\5\u048c\u0247\2\u0f47")
        buf.write("\u0f48\7\u02ca\2\2\u0f48\u0f49\7\u02f0\2\2\u0f49\u0f67")
        buf.write("\5\u048c\u0247\2\u0f4a\u0f4b\7\u02cb\2\2\u0f4b\u0f4c\7")
        buf.write("\u02f0\2\2\u0f4c\u0f67\5\u0476\u023c\2\u0f4d\u0f4e\7\u0141")
        buf.write("\2\2\u0f4e\u0f4f\7\u02f0\2\2\u0f4f\u0f67\5\u0476\u023c")
        buf.write("\2\u0f50\u0f51\7\u00eb\2\2\u0f51\u0f52\7\u02f0\2\2\u0f52")
        buf.write("\u0f67\5\u01d0\u00e9\2\u0f53\u0f54\7\u02e1\2\2\u0f54\u0f55")
        buf.write("\7\u02f0\2\2\u0f55\u0f67\5\u0484\u0243\2\u0f56\u0f57\7")
        buf.write("\u02e2\2\2\u0f57\u0f58\7\u02f0\2\2\u0f58\u0f67\5\u0476")
        buf.write("\u023c\2\u0f59\u0f5a\7\u012a\2\2\u0f5a\u0f5b\7\u02f0\2")
        buf.write("\2\u0f5b\u0f67\5\u0476\u023c\2\u0f5c\u0f5d\7\u02e3\2\2")
        buf.write("\u0f5d\u0f5e\7\u02f0\2\2\u0f5e\u0f67\5\u01c8\u00e5\2\u0f5f")
        buf.write("\u0f60\7\u02e5\2\2\u0f60\u0f61\7\u02f0\2\2\u0f61\u0f67")
        buf.write("\5\u0476\u023c\2\u0f62\u0f63\7\u02e8\2\2\u0f63\u0f64\7")
        buf.write("\u02f0\2\2\u0f64\u0f67\5\u01ca\u00e6\2\u0f65\u0f67\5\u01ce")
        buf.write("\u00e8\2\u0f66\u0f0b\3\2\2\2\u0f66\u0f0e\3\2\2\2\u0f66")
        buf.write("\u0f11\3\2\2\2\u0f66\u0f14\3\2\2\2\u0f66\u0f17\3\2\2\2")
        buf.write("\u0f66\u0f1a\3\2\2\2\u0f66\u0f1d\3\2\2\2\u0f66\u0f20\3")
        buf.write("\2\2\2\u0f66\u0f23\3\2\2\2\u0f66\u0f26\3\2\2\2\u0f66\u0f29")
        buf.write("\3\2\2\2\u0f66\u0f2c\3\2\2\2\u0f66\u0f2f\3\2\2\2\u0f66")
        buf.write("\u0f32\3\2\2\2\u0f66\u0f35\3\2\2\2\u0f66\u0f38\3\2\2\2")
        buf.write("\u0f66\u0f3b\3\2\2\2\u0f66\u0f3e\3\2\2\2\u0f66\u0f41\3")
        buf.write("\2\2\2\u0f66\u0f44\3\2\2\2\u0f66\u0f47\3\2\2\2\u0f66\u0f4a")
        buf.write("\3\2\2\2\u0f66\u0f4d\3\2\2\2\u0f66\u0f50\3\2\2\2\u0f66")
        buf.write("\u0f53\3\2\2\2\u0f66\u0f56\3\2\2\2\u0f66\u0f59\3\2\2\2")
        buf.write("\u0f66\u0f5c\3\2\2\2\u0f66\u0f5f\3\2\2\2\u0f66\u0f62\3")
        buf.write("\2\2\2\u0f66\u0f65\3\2\2\2\u0f67\u01c7\3\2\2\2\u0f68\u0f6b")
        buf.write("\5\u0402\u0202\2\u0f69\u0f6b\7\u017a\2\2\u0f6a\u0f68\3")
        buf.write("\2\2\2\u0f6a\u0f69\3\2\2\2\u0f6b\u01c9\3\2\2\2\u0f6c\u0f6d")
        buf.write("\t-\2\2\u0f6d\u01cb\3\2\2\2\u0f6e\u0f71\5\u048c\u0247")
        buf.write("\2\u0f6f\u0f71\7\u017a\2\2\u0f70\u0f6e\3\2\2\2\u0f70\u0f6f")
        buf.write("\3\2\2\2\u0f71\u01cd\3\2\2\2\u0f72\u0f73\7\u012f\2\2\u0f73")
        buf.write("\u0f74\7\u02f0\2\2\u0f74\u0f7f\5\u048c\u0247\2\u0f75\u0f76")
        buf.write("\7\u0130\2\2\u0f76\u0f77\7\u02f0\2\2\u0f77\u0f7f\5\u047a")
        buf.write("\u023e\2\u0f78\u0f79\7\u01c1\2\2\u0f79\u0f7a\7\u02f0\2")
        buf.write("\2\u0f7a\u0f7f\5\u048c\u0247\2\u0f7b\u0f7c\7\u01c2\2\2")
        buf.write("\u0f7c\u0f7d\7\u02f0\2\2\u0f7d\u0f7f\5\u0476\u023c\2\u0f7e")
        buf.write("\u0f72\3\2\2\2\u0f7e\u0f75\3\2\2\2\u0f7e\u0f78\3\2\2\2")
        buf.write("\u0f7e\u0f7b\3\2\2\2\u0f7f\u01cf\3\2\2\2\u0f80\u0f89\7")
        buf.write("\u030a\2\2\u0f81\u0f86\5\u0476\u023c\2\u0f82\u0f83\7\u0307")
        buf.write("\2\2\u0f83\u0f85\5\u0476\u023c\2\u0f84\u0f82\3\2\2\2\u0f85")
        buf.write("\u0f88\3\2\2\2\u0f86\u0f84\3\2\2\2\u0f86\u0f87\3\2\2\2")
        buf.write("\u0f87\u0f8a\3\2\2\2\u0f88\u0f86\3\2\2\2\u0f89\u0f81\3")
        buf.write("\2\2\2\u0f89\u0f8a\3\2\2\2\u0f8a\u0f8b\3\2\2\2\u0f8b\u0f8c")
        buf.write("\7\u030b\2\2\u0f8c\u01d1\3\2\2\2\u0f8d\u0f8e\79\2\2\u0f8e")
        buf.write("\u0f8f\7\u01cd\2\2\u0f8f\u0f90\7\u00c0\2\2\u0f90\u0f95")
        buf.write("\5\u01d4\u00eb\2\u0f91\u0f92\7\u0307\2\2\u0f92\u0f94\5")
        buf.write("\u01d4\u00eb\2\u0f93\u0f91\3\2\2\2\u0f94\u0f97\3\2\2\2")
        buf.write("\u0f95\u0f93\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96\u0f9a\3")
        buf.write("\2\2\2\u0f97\u0f95\3\2\2\2\u0f98\u0f99\6\u00eaL\2\u0f99")
        buf.write("\u0f9b\5\u0310\u0189\2\u0f9a\u0f98\3\2\2\2\u0f9a\u0f9b")
        buf.write("\3\2\2\2\u0f9b\u01d3\3\2\2\2\u0f9c\u0f9d\7\u01ce\2\2\u0f9d")
        buf.write("\u0f9e\7\u02f0\2\2\u0f9e\u0fa0\7\u030a\2\2\u0f9f\u0fa1")
        buf.write("\5\u01d6\u00ec\2\u0fa0\u0f9f\3\2\2\2\u0fa0\u0fa1\3\2\2")
        buf.write("\2\u0fa1\u0fa2\3\2\2\2\u0fa2\u0fce\7\u030b\2\2\u0fa3\u0fa4")
        buf.write("\7\u01cf\2\2\u0fa4\u0fa5\7\u02f0\2\2\u0fa5\u0fa7\7\u030a")
        buf.write("\2\2\u0fa6\u0fa8\5\u01d6\u00ec\2\u0fa7\u0fa6\3\2\2\2\u0fa7")
        buf.write("\u0fa8\3\2\2\2\u0fa8\u0fa9\3\2\2\2\u0fa9\u0fce\7\u030b")
        buf.write("\2\2\u0faa\u0fab\7\u01d0\2\2\u0fab\u0fac\7\u02f0\2\2\u0fac")
        buf.write("\u0fae\7\u030a\2\2\u0fad\u0faf\5\u01d8\u00ed\2\u0fae\u0fad")
        buf.write("\3\2\2\2\u0fae\u0faf\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0")
        buf.write("\u0fce\7\u030b\2\2\u0fb1\u0fb2\7\u01d1\2\2\u0fb2\u0fb3")
        buf.write("\7\u02f0\2\2\u0fb3\u0fb5\7\u030a\2\2\u0fb4\u0fb6\5\u01d8")
        buf.write("\u00ed\2\u0fb5\u0fb4\3\2\2\2\u0fb5\u0fb6\3\2\2\2\u0fb6")
        buf.write("\u0fb7\3\2\2\2\u0fb7\u0fce\7\u030b\2\2\u0fb8\u0fb9\7\u01d2")
        buf.write("\2\2\u0fb9\u0fba\7\u02f0\2\2\u0fba\u0fbc\7\u030a\2\2\u0fbb")
        buf.write("\u0fbd\5\u01da\u00ee\2\u0fbc\u0fbb\3\2\2\2\u0fbc\u0fbd")
        buf.write("\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe\u0fce\7\u030b\2\2\u0fbf")
        buf.write("\u0fc0\7\u01d3\2\2\u0fc0\u0fc1\7\u02f0\2\2\u0fc1\u0fc3")
        buf.write("\7\u030a\2\2\u0fc2\u0fc4\5\u01da\u00ee\2\u0fc3\u0fc2\3")
        buf.write("\2\2\2\u0fc3\u0fc4\3\2\2\2\u0fc4\u0fc5\3\2\2\2\u0fc5\u0fce")
        buf.write("\7\u030b\2\2\u0fc6\u0fc7\7\u01d4\2\2\u0fc7\u0fc8\7\u02f0")
        buf.write("\2\2\u0fc8\u0fca\7\u030a\2\2\u0fc9\u0fcb\5\u01de\u00f0")
        buf.write("\2\u0fca\u0fc9\3\2\2\2\u0fca\u0fcb\3\2\2\2\u0fcb\u0fcc")
        buf.write("\3\2\2\2\u0fcc\u0fce\7\u030b\2\2\u0fcd\u0f9c\3\2\2\2\u0fcd")
        buf.write("\u0fa3\3\2\2\2\u0fcd\u0faa\3\2\2\2\u0fcd\u0fb1\3\2\2\2")
        buf.write("\u0fcd\u0fb8\3\2\2\2\u0fcd\u0fbf\3\2\2\2\u0fcd\u0fc6\3")
        buf.write("\2\2\2\u0fce\u01d5\3\2\2\2\u0fcf\u0fd4\5\u0424\u0213\2")
        buf.write("\u0fd0\u0fd1\7\u0307\2\2\u0fd1\u0fd3\5\u0424\u0213\2\u0fd2")
        buf.write("\u0fd0\3\2\2\2\u0fd3\u0fd6\3\2\2\2\u0fd4\u0fd2\3\2\2\2")
        buf.write("\u0fd4\u0fd5\3\2\2\2\u0fd5\u01d7\3\2\2\2\u0fd6\u0fd4\3")
        buf.write("\2\2\2\u0fd7\u0fdc\5\u044c\u0227\2\u0fd8\u0fd9\7\u0307")
        buf.write("\2\2\u0fd9\u0fdb\5\u044c\u0227\2\u0fda\u0fd8\3\2\2\2\u0fdb")
        buf.write("\u0fde\3\2\2\2\u0fdc\u0fda\3\2\2\2\u0fdc\u0fdd\3\2\2\2")
        buf.write("\u0fdd\u01d9\3\2\2\2\u0fde\u0fdc\3\2\2\2\u0fdf\u0fe4\5")
        buf.write("\u01dc\u00ef\2\u0fe0\u0fe1\7\u0307\2\2\u0fe1\u0fe3\5\u01dc")
        buf.write("\u00ef\2\u0fe2\u0fe0\3\2\2\2\u0fe3\u0fe6\3\2\2\2\u0fe4")
        buf.write("\u0fe2\3\2\2\2\u0fe4\u0fe5\3\2\2\2\u0fe5\u01db\3\2\2\2")
        buf.write("\u0fe6\u0fe4\3\2\2\2\u0fe7\u0fe8\5\u048c\u0247\2\u0fe8")
        buf.write("\u01dd\3\2\2\2\u0fe9\u0fee\5\u03e0\u01f1\2\u0fea\u0feb")
        buf.write("\7\u0307\2\2\u0feb\u0fed\5\u03e0\u01f1\2\u0fec\u0fea\3")
        buf.write("\2\2\2\u0fed\u0ff0\3\2\2\2\u0fee\u0fec\3\2\2\2\u0fee\u0fef")
        buf.write("\3\2\2\2\u0fef\u01df\3\2\2\2\u0ff0\u0fee\3\2\2\2\u0ff1")
        buf.write("\u0ff2\7\u0221\2\2\u0ff2\u0ff4\7\u0204\2\2\u0ff3\u0ff5")
        buf.write("\5\u01e6\u00f4\2\u0ff4\u0ff3\3\2\2\2\u0ff4\u0ff5\3\2\2")
        buf.write("\2\u0ff5\u0ff8\3\2\2\2\u0ff6\u0ff7\7\u0267\2\2\u0ff7\u0ff9")
        buf.write("\5\u01e2\u00f2\2\u0ff8\u0ff6\3\2\2\2\u0ff8\u0ff9\3\2\2")
        buf.write("\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u0ffc\5\u01e4\u00f3\2\u0ffb")
        buf.write("\u0ffd\5\u0310\u0189\2\u0ffc\u0ffb\3\2\2\2\u0ffc\u0ffd")
        buf.write("\3\2\2\2\u0ffd\u1007\3\2\2\2\u0ffe\u0fff\7\u022a\2\2\u0fff")
        buf.write("\u1001\7\u0204\2\2\u1000\u1002\5\u01e6\u00f4\2\u1001\u1000")
        buf.write("\3\2\2\2\u1001\u1002\3\2\2\2\u1002\u1004\3\2\2\2\u1003")
        buf.write("\u1005\5\u0310\u0189\2\u1004\u1003\3\2\2\2\u1004\u1005")
        buf.write("\3\2\2\2\u1005\u1007\3\2\2\2\u1006\u0ff1\3\2\2\2\u1006")
        buf.write("\u0ffe\3\2\2\2\u1007\u01e1\3\2\2\2\u1008\u1010\5\u01ce")
        buf.write("\u00e8\2\u1009\u100a\6\u00f2M\2\u100a\u100b\t.\2\2\u100b")
        buf.write("\u100c\7\u02f0\2\2\u100c\u1010\5\u0486\u0244\2\u100d\u100e")
        buf.write("\6\u00f2N\2\u100e\u1010\7\u0213\2\2\u100f\u1008\3\2\2")
        buf.write("\2\u100f\u1009\3\2\2\2\u100f\u100d\3\2\2\2\u1010\u1015")
        buf.write("\3\2\2\2\u1011\u1012\7\u0307\2\2\u1012\u1014\5\u01ce\u00e8")
        buf.write("\2\u1013\u1011\3\2\2\2\u1014\u1017\3\2\2\2\u1015\u1013")
        buf.write("\3\2\2\2\u1015\u1016\3\2\2\2\u1016\u01e3\3\2\2\2\u1017")
        buf.write("\u1015\3\2\2\2\u1018\u101c\6\u00f3O\2\u1019\u101a\7\u026c")
        buf.write("\2\2\u101a\u101b\7\u02f0\2\2\u101b\u101d\5\u0486\u0244")
        buf.write("\2\u101c\u1019\3\2\2\2\u101c\u101d\3\2\2\2\u101d\u1021")
        buf.write("\3\2\2\2\u101e\u101f\7\u0198\2\2\u101f\u1020\7\u02f0\2")
        buf.write("\2\u1020\u1022\5\u0486\u0244\2\u1021\u101e\3\2\2\2\u1021")
        buf.write("\u1022\3\2\2\2\u1022\u1026\3\2\2\2\u1023\u1024\7\u0083")
        buf.write("\2\2\u1024\u1025\7\u02f0\2\2\u1025\u1027\5\u0486\u0244")
        buf.write("\2\u1026\u1023\3\2\2\2\u1026\u1027\3\2\2\2\u1027\u102b")
        buf.write("\3\2\2\2\u1028\u1029\7\u019b\2\2\u1029\u102a\7\u02f0\2")
        buf.write("\2\u102a\u102c\5\u0486\u0244\2\u102b\u1028\3\2\2\2\u102b")
        buf.write("\u102c\3\2\2\2\u102c\u102f\3\2\2\2\u102d\u102f\3\2\2\2")
        buf.write("\u102e\u1018\3\2\2\2\u102e\u102d\3\2\2\2\u102f\u01e5\3")
        buf.write("\2\2\2\u1030\u1035\5\u01e8\u00f5\2\u1031\u1032\7\u0307")
        buf.write("\2\2\u1032\u1034\5\u01e8\u00f5\2\u1033\u1031\3\2\2\2\u1034")
        buf.write("\u1037\3\2\2\2\u1035\u1033\3\2\2\2\u1035\u1036\3\2\2\2")
        buf.write("\u1036\u01e7\3\2\2\2\u1037\u1035\3\2\2\2\u1038\u1039\t")
        buf.write("/\2\2\u1039\u01e9\3\2\2\2\u103a\u103b\t\60\2\2\u103b\u103c")
        buf.write("\7\u00d4\2\2\u103c\u01eb\3\2\2\2\u103d\u103e\7\u01a3\2")
        buf.write("\2\u103e\u103f\5\u046a\u0236\2\u103f\u1042\7\u00cd\2\2")
        buf.write("\u1040\u1043\5\u048a\u0246\2\u1041\u1043\5\u02e8\u0175")
        buf.write("\2\u1042\u1040\3\2\2\2\u1042\u1041\3\2\2\2\u1043\u1049")
        buf.write("\3\2\2\2\u1044\u1049\5\u01ee\u00f8\2\u1045\u1046\t\61")
        buf.write("\2\2\u1046\u1047\7\u01a3\2\2\u1047\u1049\5\u046a\u0236")
        buf.write("\2\u1048\u103d\3\2\2\2\u1048\u1044\3\2\2\2\u1048\u1045")
        buf.write("\3\2\2\2\u1049\u01ed\3\2\2\2\u104a\u104b\7\u00af\2\2\u104b")
        buf.write("\u104e\5\u046a\u0236\2\u104c\u104d\7\u026f\2\2\u104d\u104f")
        buf.write("\5\u01f0\u00f9\2\u104e\u104c\3\2\2\2\u104e\u104f\3\2\2")
        buf.write("\2\u104f\u01ef\3\2\2\2\u1050\u1055\5\u02e8\u0175\2\u1051")
        buf.write("\u1052\7\u0307\2\2\u1052\u1054\5\u02e8\u0175\2\u1053\u1051")
        buf.write("\3\2\2\2\u1054\u1057\3\2\2\2\u1055\u1053\3\2\2\2\u1055")
        buf.write("\u1056\3\2\2\2\u1056\u01f1\3\2\2\2\u1057\u1055\3\2\2\2")
        buf.write("\u1058\u1071\7\u02a7\2\2\u1059\u105a\7\u011e\2\2\u105a")
        buf.write("\u105b\7r\2\2\u105b\u105d\7\u008d\2\2\u105c\u105e\5\u04a8")
        buf.write("\u0255\2\u105d\u105c\3\2\2\2\u105d\u105e\3\2\2\2\u105e")
        buf.write("\u105f\3\2\2\2\u105f\u1072\5\u0484\u0243\2\u1060\u1063")
        buf.write("\7\u02a6\2\2\u1061\u1062\7\u00ca\2\2\u1062\u1064\7\u01cd")
        buf.write("\2\2\u1063\u1061\3\2\2\2\u1063\u1064\3\2\2\2\u1064\u1072")
        buf.write("\3\2\2\2\u1065\u1066\6\u00faP\2\u1066\u1067\7\u00f6\2")
        buf.write("\2\u1067\u1068\7\u00cd\2\2\u1068\u1069\5\u0404\u0203\2")
        buf.write("\u1069\u106a\7\u0309\2\2\u106a\u106b\5\u0476\u023c\2\u106b")
        buf.write("\u106c\7\u00e8\2\2\u106c\u106d\7/\2\2\u106d\u106f\5\u0484")
        buf.write("\u0243\2\u106e\u1070\5\u01f4\u00fb\2\u106f\u106e\3\2\2")
        buf.write("\2\u106f\u1070\3\2\2\2\u1070\u1072\3\2\2\2\u1071\u1059")
        buf.write("\3\2\2\2\u1071\u1060\3\2\2\2\u1071\u1065\3\2\2\2\u1072")
        buf.write("\u01f3\3\2\2\2\u1073\u107e\5\u01f6\u00fc\2\u1074\u1075")
        buf.write("\7r\2\2\u1075\u1077\7\u008d\2\2\u1076\u1078\5\u04a8\u0255")
        buf.write("\2\u1077\u1076\3\2\2\2\u1077\u1078\3\2\2\2\u1078\u1079")
        buf.write("\3\2\2\2\u1079\u107b\5\u0484\u0243\2\u107a\u107c\5\u01f6")
        buf.write("\u00fc\2\u107b\u107a\3\2\2\2\u107b\u107c\3\2\2\2\u107c")
        buf.write("\u107e\3\2\2\2\u107d\u1073\3\2\2\2\u107d\u1074\3\2\2\2")
        buf.write("\u107e\u01f5\3\2\2\2\u107f\u1081\7\u01d5\2\2\u1080\u1082")
        buf.write("\7\u0177\2\2\u1081\u1080\3\2\2\2\u1081\u1082\3\2\2\2\u1082")
        buf.write("\u1083\3\2\2\2\u1083\u1084\7\u021d\2\2\u1084\u01f7\3\2")
        buf.write("\2\2\u1085\u1086\6\u00fdQ\2\u1086\u108f\5\u01fa\u00fe")
        buf.write("\2\u1087\u108f\5\u0200\u0101\2\u1088\u108f\5\u020c\u0107")
        buf.write("\2\u1089\u108f\5\u020e\u0108\2\u108a\u108f\5\u021c\u010f")
        buf.write("\2\u108b\u108f\5\u021e\u0110\2\u108c\u108d\6\u00fdR\2")
        buf.write("\u108d\u108f\5\u0230\u0119\2\u108e\u1085\3\2\2\2\u108e")
        buf.write("\u1087\3\2\2\2\u108e\u1088\3\2\2\2\u108e\u1089\3\2\2\2")
        buf.write("\u108e\u108a\3\2\2\2\u108e\u108b\3\2\2\2\u108e\u108c\3")
        buf.write("\2\2\2\u108f\u01f9\3\2\2\2\u1090\u1091\7\r\2\2\u1091\u1094")
        buf.write("\7\u026c\2\2\u1092\u1093\6\u00feS\2\u1093\u1095\5\u03d4")
        buf.write("\u01eb\2\u1094\u1092\3\2\2\2\u1094\u1095\3\2\2\2\u1095")
        buf.write("\u1096\3\2\2\2\u1096\u1097\5\u01fc\u00ff\2\u1097\u01fb")
        buf.write("\3\2\2\2\u1098\u1099\6\u00ffT\2\u1099\u109d\5\u03f4\u01fb")
        buf.write("\2\u109a\u109b\6\u00ffU\2\u109b\u109d\5\u03f6\u01fc\2")
        buf.write("\u109c\u1098\3\2\2\2\u109c\u109a\3\2\2\2\u109d\u109e\3")
        buf.write("\2\2\2\u109e\u109f\5\u0202\u0102\2\u109f\u10cf\3\2\2\2")
        buf.write("\u10a0\u10a1\6\u00ffV\2\u10a1\u10a2\5\u0404\u0203\2\u10a2")
        buf.write("\u10a3\7\u00e8\2\2\u10a3\u10a4\7/\2\2\u10a4\u10a7\5\u0486")
        buf.write("\u0244\2\u10a5\u10a6\6\u00ffW\2\u10a6\u10a8\5\u0400\u0201")
        buf.write("\2\u10a7\u10a5\3\2\2\2\u10a7\u10a8\3\2\2\2\u10a8\u10ab")
        buf.write("\3\2\2\2\u10a9\u10aa\6\u00ffX\2\u10aa\u10ac\5\u03fc\u01ff")
        buf.write("\2\u10ab\u10a9\3\2\2\2\u10ab\u10ac\3\2\2\2\u10ac\u10cf")
        buf.write("\3\2\2\2\u10ad\u10ae\6\u00ffY\2\u10ae\u10af\5\u0404\u0203")
        buf.write("\2\u10af\u10b0\5\u03fe\u0200\2\u10b0\u10cf\3\2\2\2\u10b1")
        buf.write("\u10b2\6\u00ffZ\2\u10b2\u10b3\5\u0404\u0203\2\u10b3\u10b4")
        buf.write("\7\u0082\2\2\u10b4\u10b8\7\u0295\2\2\u10b5\u10b9\7\f\2")
        buf.write("\2\u10b6\u10b9\7\u0173\2\2\u10b7\u10b9\5\u0232\u011a\2")
        buf.write("\u10b8\u10b5\3\2\2\2\u10b8\u10b6\3\2\2\2\u10b8\u10b7\3")
        buf.write("\2\2\2\u10b9\u10cf\3\2\2\2\u10ba\u10bb\6\u00ff[\2\u10bb")
        buf.write("\u10bc\5\u0404\u0203\2\u10bc\u10bf\7\u00e8\2\2\u10bd\u10be")
        buf.write("\7\u0287\2\2\u10be\u10c0\5\u049e\u0250\2\u10bf\u10bd\3")
        buf.write("\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10c1\3\2\2\2\u10c1\u10c2")
        buf.write("\7/\2\2\u10c2\u10c3\7\u02e0\2\2\u10c3\u10c5\7\u0198\2")
        buf.write("\2\u10c4\u10c6\5\u03fc\u01ff\2\u10c5\u10c4\3\2\2\2\u10c5")
        buf.write("\u10c6\3\2\2\2\u10c6\u10cf\3\2\2\2\u10c7\u10c8\7\u02e7")
        buf.write("\2\2\u10c8\u10cf\5\u0478\u023d\2\u10c9\u10cc\7\u02e6\2")
        buf.write("\2\u10ca\u10cd\5\u0478\u023d\2\u10cb\u10cd\7\u02bc\2\2")
        buf.write("\u10cc\u10ca\3\2\2\2\u10cc\u10cb\3\2\2\2\u10cd\u10cf\3")
        buf.write("\2\2\2\u10ce\u109c\3\2\2\2\u10ce\u10a0\3\2\2\2\u10ce\u10ad")
        buf.write("\3\2\2\2\u10ce\u10b1\3\2\2\2\u10ce\u10ba\3\2\2\2\u10ce")
        buf.write("\u10c7\3\2\2\2\u10ce\u10c9\3\2\2\2\u10cf\u01fd\3\2\2\2")
        buf.write("\u10d0\u10d1\7\u026c\2\2\u10d1\u10d2\5\u04a6\u0254\2\u10d2")
        buf.write("\u01ff\3\2\2\2\u10d3\u10d4\7c\2\2\u10d4\u10d8\7\u026c")
        buf.write("\2\2\u10d5\u10d6\6\u0101\\\2\u10d6\u10d9\5\u03d6\u01ec")
        buf.write("\2\u10d7\u10d9\3\2\2\2\u10d8\u10d5\3\2\2\2\u10d8\u10d7")
        buf.write("\3\2\2\2\u10d9\u10da\3\2\2\2\u10da\u10db\5\u03f4\u01fb")
        buf.write("\2\u10db\u10dc\5\u0204\u0103\2\u10dc\u10dd\5\u0202\u0102")
        buf.write("\2\u10dd\u0201\3\2\2\2\u10de\u10e0\6\u0102]\2\u10df\u10e1")
        buf.write("\5\u0206\u0104\2\u10e0\u10df\3\2\2\2\u10e0\u10e1\3\2\2")
        buf.write("\2\u10e1\u10e3\3\2\2\2\u10e2\u10e4\5\u0208\u0105\2\u10e3")
        buf.write("\u10e2\3\2\2\2\u10e3\u10e4\3\2\2\2\u10e4\u10e8\3\2\2\2")
        buf.write("\u10e5\u10e7\5\u020a\u0106\2\u10e6\u10e5\3\2\2\2\u10e7")
        buf.write("\u10ea\3\2\2\2\u10e8\u10e6\3\2\2\2\u10e8\u10e9\3\2\2\2")
        buf.write("\u10e9\u10ed\3\2\2\2\u10ea\u10e8\3\2\2\2\u10eb\u10ed\3")
        buf.write("\2\2\2\u10ec\u10de\3\2\2\2\u10ec\u10eb\3\2\2\2\u10ed\u0203")
        buf.write("\3\2\2\2\u10ee\u10f2\6\u0103^\2\u10ef\u10f0\7\u0082\2")
        buf.write("\2\u10f0\u10f1\7\u0295\2\2\u10f1\u10f3\5\u0232\u011a\2")
        buf.write("\u10f2\u10ef\3\2\2\2\u10f2\u10f3\3\2\2\2\u10f3\u10f6\3")
        buf.write("\2\2\2\u10f4\u10f6\3\2\2\2\u10f5\u10ee\3\2\2\2\u10f5\u10f4")
        buf.write("\3\2\2\2\u10f6\u0205\3\2\2\2\u10f7\u10fa\7\u01d5\2\2\u10f8")
        buf.write("\u10fb\5\u022a\u0116\2\u10f9\u10fb\t\62\2\2\u10fa\u10f8")
        buf.write("\3\2\2\2\u10fa\u10f9\3\2\2\2\u10fb\u0207\3\2\2\2\u10fc")
        buf.write("\u1105\7\u0287\2\2\u10fd\u10fe\7\u0144\2\2\u10fe\u1106")
        buf.write("\5\u0476\u023c\2\u10ff\u1100\7\u0149\2\2\u1100\u1106\5")
        buf.write("\u0476\u023c\2\u1101\u1102\7\u0143\2\2\u1102\u1106\5\u0476")
        buf.write("\u023c\2\u1103\u1104\7\u014a\2\2\u1104\u1106\5\u0476\u023c")
        buf.write("\2\u1105\u10fd\3\2\2\2\u1105\u10ff\3\2\2\2\u1105\u1101")
        buf.write("\3\2\2\2\u1105\u1103\3\2\2\2\u1106\u1107\3\2\2\2\u1107")
        buf.write("\u1105\3\2\2\2\u1107\u1108\3\2\2\2\u1108\u0209\3\2\2\2")
        buf.write("\u1109\u110a\7\4\2\2\u110a\u112b\t\63\2\2\u110b\u1128")
        buf.write("\7\u0198\2\2\u110c\u1113\7\u00b3\2\2\u110d\u110e\7\u00f9")
        buf.write("\2\2\u110e\u110f\5\u0478\u023d\2\u110f\u1110\7|\2\2\u1110")
        buf.write("\u1114\3\2\2\2\u1111\u1114\7\u016f\2\2\u1112\u1114\7\u0082")
        buf.write("\2\2\u1113\u110d\3\2\2\2\u1113\u1111\3\2\2\2\u1113\u1112")
        buf.write("\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u1129\3\2\2\2\u1115")
        buf.write("\u1118\7\u02c3\2\2\u1116\u1119\5\u0478\u023d\2\u1117\u1119")
        buf.write("\7\u0082\2\2\u1118\u1116\3\2\2\2\u1118\u1117\3\2\2\2\u1119")
        buf.write("\u1129\3\2\2\2\u111a\u111b\7\u02c4\2\2\u111b\u1120\7\u00f9")
        buf.write("\2\2\u111c\u111d\5\u0478\u023d\2\u111d\u111e\7|\2\2\u111e")
        buf.write("\u1121\3\2\2\2\u111f\u1121\7\u0082\2\2\u1120\u111c\3\2")
        buf.write("\2\2\u1120\u111f\3\2\2\2\u1121\u1129\3\2\2\2\u1122\u1123")
        buf.write("\6\u0106_\2\u1123\u1124\7\u01d5\2\2\u1124\u1126\7g\2\2")
        buf.write("\u1125\u1127\t\64\2\2\u1126\u1125\3\2\2\2\u1126\u1127")
        buf.write("\3\2\2\2\u1127\u1129\3\2\2\2\u1128\u110c\3\2\2\2\u1128")
        buf.write("\u1115\3\2\2\2\u1128\u111a\3\2\2\2\u1128\u1122\3\2\2\2")
        buf.write("\u1129\u112b\3\2\2\2\u112a\u1109\3\2\2\2\u112a\u110b\3")
        buf.write("\2\2\2\u112b\u020b\3\2\2\2\u112c\u112d\7\u0096\2\2\u112d")
        buf.write("\u1130\7\u026c\2\2\u112e\u112f\6\u0107`\2\u112f\u1131")
        buf.write("\5\u03d4\u01eb\2\u1130\u112e\3\2\2\2\u1130\u1131\3\2\2")
        buf.write("\2\u1131\u1132\3\2\2\2\u1132\u1133\5\u03f2\u01fa\2\u1133")
        buf.write("\u020d\3\2\2\2\u1134\u115f\7\u00d9\2\2\u1135\u1136\6\u0108")
        buf.write("a\2\u1136\u1137\5\u0224\u0113\2\u1137\u1138\7\u0250\2")
        buf.write("\2\u1138\u113c\5\u03f2\u01fa\2\u1139\u113a\7\u0287\2\2")
        buf.write("\u113a\u113b\7\u0296\2\2\u113b\u113d\7\u0189\2\2\u113c")
        buf.write("\u1139\3\2\2\2\u113c\u113d\3\2\2\2\u113d\u1160\3\2\2\2")
        buf.write("\u113e\u1144\5\u0224\u0113\2\u113f\u1141\7\f\2\2\u1140")
        buf.write("\u1142\7\u01a7\2\2\u1141\u1140\3\2\2\2\u1141\u1142\3\2")
        buf.write("\2\2\u1142\u1144\3\2\2\2\u1143\u113e\3\2\2\2\u1143\u113f")
        buf.write("\3\2\2\2\u1144\u1145\3\2\2\2\u1145\u1147\7\u0181\2\2\u1146")
        buf.write("\u1148\5\u0222\u0112\2\u1147\u1146\3\2\2\2\u1147\u1148")
        buf.write("\3\2\2\2\u1148\u1149\3\2\2\2\u1149\u114a\5\u0228\u0115")
        buf.write("\2\u114a\u114b\7\u0250\2\2\u114b\u114d\5\u0210\u0109\2")
        buf.write("\u114c\u114e\5\u021a\u010e\2\u114d\u114c\3\2\2\2\u114d")
        buf.write("\u114e\3\2\2\2\u114e\u1150\3\2\2\2\u114f\u1151\5\u0212")
        buf.write("\u010a\2\u1150\u114f\3\2\2\2\u1150\u1151\3\2\2\2\u1151")
        buf.write("\u1153\3\2\2\2\u1152\u1154\5\u0218\u010d\2\u1153\u1152")
        buf.write("\3\2\2\2\u1153\u1154\3\2\2\2\u1154\u1160\3\2\2\2\u1155")
        buf.write("\u1156\7\u01ad\2\2\u1156\u1157\7\u0181\2\2\u1157\u1158")
        buf.write("\5\u0404\u0203\2\u1158\u1159\7\u0250\2\2\u1159\u115d\5")
        buf.write("\u0210\u0109\2\u115a\u115b\7\u0287\2\2\u115b\u115c\7\u00d9")
        buf.write("\2\2\u115c\u115e\7\u0189\2\2\u115d\u115a\3\2\2\2\u115d")
        buf.write("\u115e\3\2\2\2\u115e\u1160\3\2\2\2\u115f\u1135\3\2\2\2")
        buf.write("\u115f\u1143\3\2\2\2\u115f\u1155\3\2\2\2\u1160\u020f\3")
        buf.write("\2\2\2\u1161\u1162\6\u0109b\2\u1162\u1166\5\u03f4\u01fb")
        buf.write("\2\u1163\u1164\6\u0109c\2\u1164\u1166\5\u03f2\u01fa\2")
        buf.write("\u1165\u1161\3\2\2\2\u1165\u1163\3\2\2\2\u1166\u0211\3")
        buf.write("\2\2\2\u1167\u1168\6\u010ad\2\u1168\u116a\7\u0287\2\2")
        buf.write("\u1169\u116b\5\u022e\u0118\2\u116a\u1169\3\2\2\2\u116b")
        buf.write("\u116c\3\2\2\2\u116c\u116a\3\2\2\2\u116c\u116d\3\2\2\2")
        buf.write("\u116d\u1173\3\2\2\2\u116e\u116f\6\u010ae\2\u116f\u1170")
        buf.write("\7\u0287\2\2\u1170\u1171\7\u00d9\2\2\u1171\u1173\7\u0189")
        buf.write("\2\2\u1172\u1167\3\2\2\2\u1172\u116e\3\2\2\2\u1173\u0213")
        buf.write("\3\2\2\2\u1174\u1175\7\u0299\2\2\u1175\u1176\5\u0232\u011a")
        buf.write("\2\u1176\u0215\3\2\2\2\u1177\u1178\7\u0287\2\2\u1178\u1180")
        buf.write("\7\u0295\2\2\u1179\u1181\5\u0232\u011a\2\u117a\u117c\7")
        buf.write("\f\2\2\u117b\u117d\5\u0214\u010b\2\u117c\u117b\3\2\2\2")
        buf.write("\u117c\u117d\3\2\2\2\u117d\u1181\3\2\2\2\u117e\u1181\7")
        buf.write("\u0173\2\2\u117f\u1181\7\u0082\2\2\u1180\u1179\3\2\2\2")
        buf.write("\u1180\u117a\3\2\2\2\u1180\u117e\3\2\2\2\u1180\u117f\3")
        buf.write("\2\2\2\u1181\u0217\3\2\2\2\u1182\u1183\7\23\2\2\u1183")
        buf.write("\u1185\7\u026c\2\2\u1184\u1186\5\u0216\u010c\2\u1185\u1184")
        buf.write("\3\2\2\2\u1185\u1186\3\2\2\2\u1186\u0219\3\2\2\2\u1187")
        buf.write("\u1188\6\u010ef\2\u1188\u1189\5\u0206\u0104\2\u1189\u021b")
        buf.write("\3\2\2\2\u118a\u118b\7\u01c7\2\2\u118b\u118c\7\u026c\2")
        buf.write("\2\u118c\u118d\5\u0404\u0203\2\u118d\u118e\7\u0250\2\2")
        buf.write("\u118e\u1196\5\u0404\u0203\2\u118f\u1190\7\u0307\2\2\u1190")
        buf.write("\u1191\5\u0404\u0203\2\u1191\u1192\7\u0250\2\2\u1192\u1193")
        buf.write("\5\u0404\u0203\2\u1193\u1195\3\2\2\2\u1194\u118f\3\2\2")
        buf.write("\2\u1195\u1198\3\2\2\2\u1196\u1194\3\2\2\2\u1196\u1197")
        buf.write("\3\2\2\2\u1197\u021d\3\2\2\2\u1198\u1196\3\2\2\2\u1199")
        buf.write("\u11bb\7\u01df\2\2\u119a\u119b\6\u0110g\2\u119b\u119c")
        buf.write("\5\u0224\u0113\2\u119c\u119d\7\u00cd\2\2\u119d\u119e\5")
        buf.write("\u03f2\u01fa\2\u119e\u11bc\3\2\2\2\u119f\u11a0\5\u0224")
        buf.write("\u0113\2\u11a0\u11a1\5\u0220\u0111\2\u11a1\u11a2\7\u00cd")
        buf.write("\2\2\u11a2\u11a3\5\u03f2\u01fa\2\u11a3\u11bc\3\2\2\2\u11a4")
        buf.write("\u11a6\7\f\2\2\u11a5\u11a7\7\u01a7\2\2\u11a6\u11a5\3\2")
        buf.write("\2\2\u11a6\u11a7\3\2\2\2\u11a7\u11b3\3\2\2\2\u11a8\u11a9")
        buf.write("\6\u0110h\2\u11a9\u11ab\7\u0181\2\2\u11aa\u11ac\5\u0222")
        buf.write("\u0112\2\u11ab\u11aa\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac")
        buf.write("\u11ad\3\2\2\2\u11ad\u11b4\5\u0228\u0115\2\u11ae\u11af")
        buf.write("\7\u0307\2\2\u11af\u11b0\7\u00d9\2\2\u11b0\u11b1\7\u0189")
        buf.write("\2\2\u11b1\u11b2\7\u00cd\2\2\u11b2\u11b4\5\u03f2\u01fa")
        buf.write("\2\u11b3\u11a8\3\2\2\2\u11b3\u11ae\3\2\2\2\u11b4\u11bc")
        buf.write("\3\2\2\2\u11b5\u11b6\7\u01ad\2\2\u11b6\u11b7\7\u0181\2")
        buf.write("\2\u11b7\u11b8\5\u0404\u0203\2\u11b8\u11b9\7\u00cd\2\2")
        buf.write("\u11b9\u11ba\5\u03f2\u01fa\2\u11ba\u11bc\3\2\2\2\u11bb")
        buf.write("\u119a\3\2\2\2\u11bb\u119f\3\2\2\2\u11bb\u11a4\3\2\2\2")
        buf.write("\u11bb\u11b5\3\2\2\2\u11bc\u021f\3\2\2\2\u11bd\u11be\6")
        buf.write("\u0111i\2\u11be\u11c0\7\u0181\2\2\u11bf\u11c1\5\u0222")
        buf.write("\u0112\2\u11c0\u11bf\3\2\2\2\u11c0\u11c1\3\2\2\2\u11c1")
        buf.write("\u11c2\3\2\2\2\u11c2\u11cc\5\u0228\u0115\2\u11c3\u11c9")
        buf.write("\6\u0111j\2\u11c4\u11c6\7\u0181\2\2\u11c5\u11c7\5\u0222")
        buf.write("\u0112\2\u11c6\u11c5\3\2\2\2\u11c6\u11c7\3\2\2\2\u11c7")
        buf.write("\u11c8\3\2\2\2\u11c8\u11ca\5\u0228\u0115\2\u11c9\u11c4")
        buf.write("\3\2\2\2\u11c9\u11ca\3\2\2\2\u11ca\u11cc\3\2\2\2\u11cb")
        buf.write("\u11bd\3\2\2\2\u11cb\u11c3\3\2\2\2\u11cc\u0221\3\2\2\2")
        buf.write("\u11cd\u11ce\t\65\2\2\u11ce\u0223\3\2\2\2\u11cf\u11d4")
        buf.write("\5\u0226\u0114\2\u11d0\u11d1\7\u0307\2\2\u11d1\u11d3\5")
        buf.write("\u0226\u0114\2\u11d2\u11d0\3\2\2\2\u11d3\u11d6\3\2\2\2")
        buf.write("\u11d4\u11d2\3\2\2\2\u11d4\u11d5\3\2\2\2\u11d5\u0225\3")
        buf.write("\2\2\2\u11d6\u11d4\3\2\2\2\u11d7\u11e2\6\u0114k\2\u11d8")
        buf.write("\u11da\5\u04a2\u0252\2\u11d9\u11db\5\u0416\u020c\2\u11da")
        buf.write("\u11d9\3\2\2\2\u11da\u11db\3\2\2\2\u11db\u11e3\3\2\2\2")
        buf.write("\u11dc\u11e0\5\u04a2\u0252\2\u11dd\u11e1\7\u0312\2\2\u11de")
        buf.write("\u11df\7\u0311\2\2\u11df\u11e1\5\u049e\u0250\2\u11e0\u11dd")
        buf.write("\3\2\2\2\u11e0\u11de\3\2\2\2\u11e1\u11e3\3\2\2\2\u11e2")
        buf.write("\u11d8\3\2\2\2\u11e2\u11dc\3\2\2\2\u11e3\u1201\3\2\2\2")
        buf.write("\u11e4\u11e6\t\66\2\2\u11e5\u11e7\5\u0416\u020c\2\u11e6")
        buf.write("\u11e5\3\2\2\2\u11e6\u11e7\3\2\2\2\u11e7\u1201\3\2\2\2")
        buf.write("\u11e8\u1201\t\67\2\2\u11e9\u11ea\7\u00d9\2\2\u11ea\u1201")
        buf.write("\7\u0189\2\2\u11eb\u11ec\7\u01ff\2\2\u11ec\u1201\7p\2")
        buf.write("\2\u11ed\u11f1\7c\2\2\u11ee\u11ef\7\u0243\2\2\u11ef\u11f2")
        buf.write("\7\u023d\2\2\u11f0\u11f2\t8\2\2\u11f1\u11ee\3\2\2\2\u11f1")
        buf.write("\u11f0\3\2\2\2\u11f1\u11f2\3\2\2\2\u11f2\u1201\3\2\2\2")
        buf.write("\u11f3\u11f4\7\u0121\2\2\u11f4\u1201\7\u023d\2\2\u11f5")
        buf.write("\u11f6\7\u01cd\2\2\u11f6\u1201\t9\2\2\u11f7\u11f8\7\u01ff")
        buf.write("\2\2\u11f8\u1201\7\u027e\2\2\u11f9\u11fb\7\r\2\2\u11fa")
        buf.write("\u11fc\7\u01e5\2\2\u11fb\u11fa\3\2\2\2\u11fb\u11fc\3\2")
        buf.write("\2\2\u11fc\u1201\3\2\2\2\u11fd\u11fe\6\u0114l\2\u11fe")
        buf.write("\u11ff\t:\2\2\u11ff\u1201\7\u0295\2\2\u1200\u11d7\3\2")
        buf.write("\2\2\u1200\u11e4\3\2\2\2\u1200\u11e8\3\2\2\2\u1200\u11e9")
        buf.write("\3\2\2\2\u1200\u11eb\3\2\2\2\u1200\u11ed\3\2\2\2\u1200")
        buf.write("\u11f3\3\2\2\2\u1200\u11f5\3\2\2\2\u1200\u11f7\3\2\2\2")
        buf.write("\u1200\u11f9\3\2\2\2\u1200\u11fd\3\2\2\2\u1201\u0227\3")
        buf.write("\2\2\2\u1202\u1205\7\u02fa\2\2\u1203\u1204\7\u0306\2\2")
        buf.write("\u1204\u1206\7\u02fa\2\2\u1205\u1203\3\2\2\2\u1205\u1206")
        buf.write("\3\2\2\2\u1206\u1213\3\2\2\2\u1207\u120a\5\u0424\u0213")
        buf.write("\2\u1208\u1209\7\u0306\2\2\u1209\u120b\7\u02fa\2\2\u120a")
        buf.write("\u1208\3\2\2\2\u120a\u120b\3\2\2\2\u120b\u1213\3\2\2\2")
        buf.write("\u120c\u1213\5\u0450\u0229\2\u120d\u120e\6\u0115m\2\u120e")
        buf.write("\u120f\5\u0424\u0213\2\u120f\u1210\7\u0306\2\2\u1210\u1211")
        buf.write("\5\u0450\u0229\2\u1211\u1213\3\2\2\2\u1212\u1202\3\2\2")
        buf.write("\2\u1212\u1207\3\2\2\2\u1212\u120c\3\2\2\2\u1212\u120d")
        buf.write("\3\2\2\2\u1213\u0229\3\2\2\2\u1214\u121b\5\u022c\u0117")
        buf.write("\2\u1215\u1217\7\21\2\2\u1216\u1215\3\2\2\2\u1216\u1217")
        buf.write("\3\2\2\2\u1217\u1218\3\2\2\2\u1218\u121a\5\u022c\u0117")
        buf.write("\2\u1219\u1216\3\2\2\2\u121a\u121d\3\2\2\2\u121b\u1219")
        buf.write("\3\2\2\2\u121b\u121c\3\2\2\2\u121c\u022b\3\2\2\2\u121d")
        buf.write("\u121b\3\2\2\2\u121e\u121f\7A\2\2\u121f\u1225\5\u0486")
        buf.write("\u0244\2\u1220\u1221\7\u0105\2\2\u1221\u1225\5\u0486\u0244")
        buf.write("\2\u1222\u1223\7\u0231\2\2\u1223\u1225\5\u0486\u0244\2")
        buf.write("\u1224\u121e\3\2\2\2\u1224\u1220\3\2\2\2\u1224\u1222\3")
        buf.write("\2\2\2\u1225\u022d\3\2\2\2\u1226\u1227\7\u00d9\2\2\u1227")
        buf.write("\u1231\7\u0189\2\2\u1228\u1229\7\u0144\2\2\u1229\u1231")
        buf.write("\5\u0476\u023c\2\u122a\u122b\7\u0149\2\2\u122b\u1231\5")
        buf.write("\u0476\u023c\2\u122c\u122d\7\u0143\2\2\u122d\u1231\5\u0476")
        buf.write("\u023c\2\u122e\u122f\7\u014a\2\2\u122f\u1231\5\u0476\u023c")
        buf.write("\2\u1230\u1226\3\2\2\2\u1230\u1228\3\2\2\2\u1230\u122a")
        buf.write("\3\2\2\2\u1230\u122c\3\2\2\2\u1230\u122e\3\2\2\2\u1231")
        buf.write("\u022f\3\2\2\2\u1232\u1233\7\u01fc\2\2\u1233\u1234\7\u0295")
        buf.write("\2\2\u1234\u124a\5\u0232\u011a\2\u1235\u1236\7\u01fc\2")
        buf.write("\2\u1236\u1237\7\u0295\2\2\u1237\u124a\t;\2\2\u1238\u1239")
        buf.write("\7\u01fc\2\2\u1239\u123a\7\u0082\2\2\u123a\u123e\7\u0295")
        buf.write("\2\2\u123b\u123f\5\u0232\u011a\2\u123c\u123f\7\u0173\2")
        buf.write("\2\u123d\u123f\7\f\2\2\u123e\u123b\3\2\2\2\u123e\u123c")
        buf.write("\3\2\2\2\u123e\u123d\3\2\2\2\u123f\u1240\3\2\2\2\u1240")
        buf.write("\u1241\7\u0250\2\2\u1241\u124a\5\u0232\u011a\2\u1242\u1243")
        buf.write("\7\u01fc\2\2\u1243\u1244\7\u0295\2\2\u1244\u1247\7\f\2")
        buf.write("\2\u1245\u1246\7\u0299\2\2\u1246\u1248\5\u0232\u011a\2")
        buf.write("\u1247\u1245\3\2\2\2\u1247\u1248\3\2\2\2\u1248\u124a\3")
        buf.write("\2\2\2\u1249\u1232\3\2\2\2\u1249\u1235\3\2\2\2\u1249\u1238")
        buf.write("\3\2\2\2\u1249\u1242\3\2\2\2\u124a\u0231\3\2\2\2\u124b")
        buf.write("\u1250\5\u0234\u011b\2\u124c\u124d\7\u0307\2\2\u124d\u124f")
        buf.write("\5\u0234\u011b\2\u124e\u124c\3\2\2\2\u124f\u1252\3\2\2")
        buf.write("\2\u1250\u124e\3\2\2\2\u1250\u1251\3\2\2\2\u1251\u0233")
        buf.write("\3\2\2\2\u1252\u1250\3\2\2\2\u1253\u1257\5\u04a2\u0252")
        buf.write("\2\u1254\u1255\7\u0311\2\2\u1255\u1258\5\u049e\u0250\2")
        buf.write("\u1256\u1258\7\u0312\2\2\u1257\u1254\3\2\2\2\u1257\u1256")
        buf.write("\3\2\2\2\u1257\u1258\3\2\2\2\u1258\u0235\3\2\2\2\u1259")
        buf.write("\u125b\7\20\2\2\u125a\u125c\5\u040c\u0207\2\u125b\u125a")
        buf.write("\3\2\2\2\u125b\u125c\3\2\2\2\u125c\u125d\3\2\2\2\u125d")
        buf.write("\u125e\7\u0240\2\2\u125e\u1261\5\u0452\u022a\2\u125f\u1260")
        buf.write("\6\u011cn\2\u1260\u1262\5\u0238\u011d\2\u1261\u125f\3")
        buf.write("\2\2\2\u1261\u1262\3\2\2\2\u1262\u1285\3\2\2\2\u1263\u1264")
        buf.write("\7@\2\2\u1264\u1265\7\u0240\2\2\u1265\u1269\5\u0452\u022a")
        buf.write("\2\u1266\u1268\5\u023a\u011e\2\u1267\u1266\3\2\2\2\u1268")
        buf.write("\u126b\3\2\2\2\u1269\u1267\3\2\2\2\u1269\u126a\3\2\2\2")
        buf.write("\u126a\u1285\3\2\2\2\u126b\u1269\3\2\2\2\u126c\u126d\7")
        buf.write("?\2\2\u126d\u126e\7\u0240\2\2\u126e\u1270\5\u0452\u022a")
        buf.write("\2\u126f\u1271\t<\2\2\u1270\u126f\3\2\2\2\u1270\u1271")
        buf.write("\3\2\2\2\u1271\u1285\3\2\2\2\u1272\u1274\7\u0186\2\2\u1273")
        buf.write("\u1275\5\u040c\u0207\2\u1274\u1273\3\2\2\2\u1274\u1275")
        buf.write("\3\2\2\2\u1275\u1276\3\2\2\2\u1276\u1277\7\u0240\2\2\u1277")
        buf.write("\u1285\5\u0452\u022a\2\u1278\u127a\7\u01c9\2\2\u1279\u127b")
        buf.write("\5\u040c\u0207\2\u127a\u1279\3\2\2\2\u127a\u127b\3\2\2")
        buf.write("\2\u127b\u127c\3\2\2\2\u127c\u127d\7\u0240\2\2\u127d\u1281")
        buf.write("\5\u0452\u022a\2\u127e\u1280\5\u023c\u011f\2\u127f\u127e")
        buf.write("\3\2\2\2\u1280\u1283\3\2\2\2\u1281\u127f\3\2\2\2\u1281")
        buf.write("\u1282\3\2\2\2\u1282\u1285\3\2\2\2\u1283\u1281\3\2\2\2")
        buf.write("\u1284\u1259\3\2\2\2\u1284\u1263\3\2\2\2\u1284\u126c\3")
        buf.write("\2\2\2\u1284\u1272\3\2\2\2\u1284\u1278\3\2\2\2\u1285\u0237")
        buf.write("\3\2\2\2\u1286\u1287\7\u0268\2\2\u1287\u1288\7\u02a4\2")
        buf.write("\2\u1288\u1289\7\u0181\2\2\u1289\u128d\5\u046c\u0237\2")
        buf.write("\u128a\u128b\7\u0287\2\2\u128b\u128c\7\u02ed\2\2\u128c")
        buf.write("\u128e\7\u02a5\2\2\u128d\u128a\3\2\2\2\u128d\u128e\3\2")
        buf.write("\2\2\u128e\u1294\3\2\2\2\u128f\u1290\7\u0096\2\2\u1290")
        buf.write("\u1291\7\u02a4\2\2\u1291\u1292\7\u0181\2\2\u1292\u1294")
        buf.write("\5\u046c\u0237\2\u1293\u1286\3\2\2\2\u1293\u128f\3\2\2")
        buf.write("\2\u1294\u0239\3\2\2\2\u1295\u1296\7\u00ca\2\2\u1296\u1299")
        buf.write("\7\u0269\2\2\u1297\u1299\t=\2\2\u1298\u1295\3\2\2\2\u1298")
        buf.write("\u1297\3\2\2\2\u1299\u023b\3\2\2\2\u129a\u129b\t>\2\2")
        buf.write("\u129b\u023d\3\2\2\2\u129c\u129d\7\u00f7\2\2\u129d\u129e")
        buf.write("\7\u019c\2\2\u129e\u129f\5\u046a\u0236\2\u129f\u12a0\7")
        buf.write("\u020a\2\2\u12a0\u12a1\5\u0484\u0243\2\u12a1\u12b3\3\2")
        buf.write("\2\2\u12a2\u12a3\7\u00f7\2\2\u12a3\u12a4\7\u029a\2\2\u12a4")
        buf.write("\u12b3\5\u048e\u0248\2\u12a5\u12a6\7\u0261\2\2\u12a6\u12a7")
        buf.write("\7\u019c\2\2\u12a7\u12b3\5\u0460\u0231\2\u12a8\u12a9\7")
        buf.write("\u0261\2\2\u12a9\u12aa\7\u029a\2\2\u12aa\u12af\5\u0462")
        buf.write("\u0232\2\u12ab\u12ac\7\u0307\2\2\u12ac\u12ae\5\u0462\u0232")
        buf.write("\2\u12ad\u12ab\3\2\2\2\u12ae\u12b1\3\2\2\2\u12af\u12ad")
        buf.write("\3\2\2\2\u12af\u12b0\3\2\2\2\u12b0\u12b3\3\2\2\2\u12b1")
        buf.write("\u12af\3\2\2\2\u12b2\u129c\3\2\2\2\u12b2\u12a2\3\2\2\2")
        buf.write("\u12b2\u12a5\3\2\2\2\u12b2\u12a8\3\2\2\2\u12b3\u023f\3")
        buf.write("\2\2\2\u12b4\u12b5\7\u01fc\2\2\u12b5\u12b6\5\u0242\u0122")
        buf.write("\2\u12b6\u0241\3\2\2\2\u12b7\u12b8\5\u024c\u0127\2\u12b8")
        buf.write("\u12b9\5\u024a\u0126\2\u12b9\u12f0\3\2\2\2\u12ba\u12bb")
        buf.write("\7\u0252\2\2\u12bb\u12f0\5\u0244\u0123\2\u12bc\u12bd\5")
        buf.write("\u04aa\u0256\2\u12bd\u12be\5\u0252\u012a\2\u12be\u12f0")
        buf.write("\3\2\2\2\u12bf\u12c2\7\u0198\2\2\u12c0\u12c1\7\u00ca\2")
        buf.write("\2\u12c1\u12c3\5\u0404\u0203\2\u12c2\u12c0\3\2\2\2\u12c2")
        buf.write("\u12c3\3\2\2\2\u12c3\u12c4\3\2\2\2\u12c4\u12df\5\u04a8")
        buf.write("\u0255\2\u12c5\u12c7\5\u0486\u0244\2\u12c6\u12c8\5\u0400")
        buf.write("\u0201\2\u12c7\u12c6\3\2\2\2\u12c7\u12c8\3\2\2\2\u12c8")
        buf.write("\u12ca\3\2\2\2\u12c9\u12cb\5\u03fc\u01ff\2\u12ca\u12c9")
        buf.write("\3\2\2\2\u12ca\u12cb\3\2\2\2\u12cb\u12e0\3\2\2\2\u12cc")
        buf.write("\u12ce\5\u0486\u0244\2\u12cd\u12cf\5\u0400\u0201\2\u12ce")
        buf.write("\u12cd\3\2\2\2\u12ce\u12cf\3\2\2\2\u12cf\u12d1\3\2\2\2")
        buf.write("\u12d0\u12d2\5\u03fc\u01ff\2\u12d1\u12d0\3\2\2\2\u12d1")
        buf.write("\u12d2\3\2\2\2\u12d2\u12e0\3\2\2\2\u12d3\u12d4\6\u0122")
        buf.write("o\2\u12d4\u12d5\7\u0180\2\2\u12d5\u12d6\7\u030a\2\2\u12d6")
        buf.write("\u12d7\5\u0486\u0244\2\u12d7\u12d8\7\u030b\2\2\u12d8\u12e0")
        buf.write("\3\2\2\2\u12d9\u12da\6\u0122p\2\u12da\u12db\7\u0198\2")
        buf.write("\2\u12db\u12dc\7\u030a\2\2\u12dc\u12dd\5\u0486\u0244\2")
        buf.write("\u12dd\u12de\7\u030b\2\2\u12de\u12e0\3\2\2\2\u12df\u12c5")
        buf.write("\3\2\2\2\u12df\u12cc\3\2\2\2\u12df\u12d3\3\2\2\2\u12df")
        buf.write("\u12d9\3\2\2\2\u12e0\u12f0\3\2\2\2\u12e1\u12e2\6\u0122")
        buf.write("q\2\u12e2\u12e5\7\u0198\2\2\u12e3\u12e4\7\u00ca\2\2\u12e4")
        buf.write("\u12e6\5\u0404\u0203\2\u12e5\u12e3\3\2\2\2\u12e5\u12e6")
        buf.write("\3\2\2\2\u12e6\u12e7\3\2\2\2\u12e7\u12e8\7\u0250\2\2\u12e8")
        buf.write("\u12ea\7\u02e0\2\2\u12e9\u12eb\5\u0400\u0201\2\u12ea\u12e9")
        buf.write("\3\2\2\2\u12ea\u12eb\3\2\2\2\u12eb\u12ed\3\2\2\2\u12ec")
        buf.write("\u12ee\5\u03fc\u01ff\2\u12ed\u12ec\3\2\2\2\u12ed\u12ee")
        buf.write("\3\2\2\2\u12ee\u12f0\3\2\2\2\u12ef\u12b7\3\2\2\2\u12ef")
        buf.write("\u12ba\3\2\2\2\u12ef\u12bc\3\2\2\2\u12ef\u12bf\3\2\2\2")
        buf.write("\u12ef\u12e1\3\2\2\2\u12f0\u0243\3\2\2\2\u12f1\u12f3\5")
        buf.write("\u0246\u0124\2\u12f2\u12f4\5\u0248\u0125\2\u12f3\u12f2")
        buf.write("\3\2\2\2\u12f3\u12f4\3\2\2\2\u12f4\u12fb\3\2\2\2\u12f5")
        buf.write("\u12f8\5\u0248\u0125\2\u12f6\u12f7\7\u0307\2\2\u12f7\u12f9")
        buf.write("\5\u0246\u0124\2\u12f8\u12f6\3\2\2\2\u12f8\u12f9\3\2\2")
        buf.write("\2\u12f9\u12fb\3\2\2\2\u12fa\u12f1\3\2\2\2\u12fa\u12f5")
        buf.write("\3\2\2\2\u12fb\u0245\3\2\2\2\u12fc\u12fd\7\u01b5\2\2\u12fd")
        buf.write("\u12fe\t)\2\2\u12fe\u0247\3\2\2\2\u12ff\u1300\7\u0104")
        buf.write("\2\2\u1300\u1306\7\u0114\2\2\u1301\u1302\7\u01ca\2\2\u1302")
        buf.write("\u1307\7\u01b5\2\2\u1303\u1304\7\u01b5\2\2\u1304\u1307")
        buf.write("\t?\2\2\u1305\u1307\7\u01f6\2\2\u1306\u1301\3\2\2\2\u1306")
        buf.write("\u1303\3\2\2\2\u1306\u1305\3\2\2\2\u1307\u0249\3\2\2\2")
        buf.write("\u1308\u1309\7\u0307\2\2\u1309\u130b\5\u024e\u0128\2\u130a")
        buf.write("\u1308\3\2\2\2\u130b\u130e\3\2\2\2\u130c\u130a\3\2\2\2")
        buf.write("\u130c\u130d\3\2\2\2\u130d\u024b\3\2\2\2\u130e\u130c\3")
        buf.write("\2\2\2\u130f\u1310\5\u02ec\u0177\2\u1310\u1311\5\u04a8")
        buf.write("\u0255\2\u1311\u1312\5\u0256\u012c\2\u1312\u1329\3\2\2")
        buf.write("\2\u1313\u1329\5\u03e8\u01f5\2\u1314\u1315\5\u02e8\u0175")
        buf.write("\2\u1315\u1316\5\u04a8\u0255\2\u1316\u1317\5\u02a6\u0154")
        buf.write("\2\u1317\u1329\3\2\2\2\u1318\u1319\5\u0250\u0129\2\u1319")
        buf.write("\u131a\5\u04a8\u0255\2\u131a\u131b\5\u0256\u012c\2\u131b")
        buf.write("\u1329\3\2\2\2\u131c\u1326\7\u0166\2\2\u131d\u131e\5\u04a8")
        buf.write("\u0255\2\u131e\u131f\5\u02a6\u0154\2\u131f\u1327\3\2\2")
        buf.write("\2\u1320\u1322\5\u03aa\u01d6\2\u1321\u1323\5\u03dc\u01ef")
        buf.write("\2\u1322\u1321\3\2\2\2\u1322\u1323\3\2\2\2\u1323\u1327")
        buf.write("\3\2\2\2\u1324\u1325\6\u0127r\2\u1325\u1327\7\u0082\2")
        buf.write("\2\u1326\u131d\3\2\2\2\u1326\u1320\3\2\2\2\u1326\u1324")
        buf.write("\3\2\2\2\u1327\u1329\3\2\2\2\u1328\u130f\3\2\2\2\u1328")
        buf.write("\u1313\3\2\2\2\u1328\u1314\3\2\2\2\u1328\u1318\3\2\2\2")
        buf.write("\u1328\u131c\3\2\2\2\u1329\u024d\3\2\2\2\u132a\u132b\5")
        buf.write("\u04aa\u0256\2\u132b\u132c\5\u02ec\u0177\2\u132c\u132d")
        buf.write("\5\u04a8\u0255\2\u132d\u132e\5\u0256\u012c\2\u132e\u1331")
        buf.write("\3\2\2\2\u132f\u1331\5\u024c\u0127\2\u1330\u132a\3\2\2")
        buf.write("\2\u1330\u132f\3\2\2\2\u1331\u024f\3\2\2\2\u1332\u1334")
        buf.write("\7\u0313\2\2\u1333\u1335\5\u04ae\u0258\2\u1334\u1333\3")
        buf.write("\2\2\2\u1334\u1335\3\2\2\2\u1335\u1336\3\2\2\2\u1336\u1337")
        buf.write("\5\u02ec\u0177\2\u1337\u0251\3\2\2\2\u1338\u1339\5\u0254")
        buf.write("\u012b\2\u1339\u133a\5\u024a\u0126\2\u133a\u133e\3\2\2")
        buf.write("\2\u133b\u133c\7\u0252\2\2\u133c\u133e\5\u0244\u0123\2")
        buf.write("\u133d\u1338\3\2\2\2\u133d\u133b\3\2\2\2\u133e\u0253\3")
        buf.write("\2\2\2\u133f\u1340\5\u02ec\u0177\2\u1340\u1341\5\u04a8")
        buf.write("\u0255\2\u1341\u1342\5\u0256\u012c\2\u1342\u0255\3\2\2")
        buf.write("\2\u1343\u1348\5\u02a6\u0154\2\u1344\u1348\t@\2\2\u1345")
        buf.write("\u1346\6\u012cs\2\u1346\u1348\tA\2\2\u1347\u1343\3\2\2")
        buf.write("\2\u1347\u1344\3\2\2\2\u1347\u1345\3\2\2\2\u1348\u0257")
        buf.write("\3\2\2\2\u1349\u1425\7\u01ff\2\2\u134a\u134b\6\u012dt")
        buf.write("\2\u134b\u1426\7\30\2\2\u134c\u134e\7p\2\2\u134d\u134f")
        buf.write("\5\u0408\u0205\2\u134e\u134d\3\2\2\2\u134e\u134f\3\2\2")
        buf.write("\2\u134f\u1426\3\2\2\2\u1350\u1352\5\u025a\u012e\2\u1351")
        buf.write("\u1350\3\2\2\2\u1351\u1352\3\2\2\2\u1352\u1353\3\2\2\2")
        buf.write("\u1353\u1355\7\u023d\2\2\u1354\u1356\5\u0260\u0131\2\u1355")
        buf.write("\u1354\3\2\2\2\u1355\u1356\3\2\2\2\u1356\u1358\3\2\2\2")
        buf.write("\u1357\u1359\5\u0408\u0205\2\u1358\u1357\3\2\2\2\u1358")
        buf.write("\u1359\3\2\2\2\u1359\u1426\3\2\2\2\u135a\u135c\7\u00ce")
        buf.write("\2\2\u135b\u135a\3\2\2\2\u135b\u135c\3\2\2\2\u135c\u135d")
        buf.write("\3\2\2\2\u135d\u135f\7\u0253\2\2\u135e\u1360\5\u0260\u0131")
        buf.write("\2\u135f\u135e\3\2\2\2\u135f\u1360\3\2\2\2\u1360\u1362")
        buf.write("\3\2\2\2\u1361\u1363\5\u0408\u0205\2\u1362\u1361\3\2\2")
        buf.write("\2\u1362\u1363\3\2\2\2\u1363\u1426\3\2\2\2\u1364\u1366")
        buf.write("\7\u00ab\2\2\u1365\u1367\5\u0260\u0131\2\u1366\u1365\3")
        buf.write("\2\2\2\u1366\u1367\3\2\2\2\u1367\u1369\3\2\2\2\u1368\u136a")
        buf.write("\5\u0408\u0205\2\u1369\u1368\3\2\2\2\u1369\u136a\3\2\2")
        buf.write("\2\u136a\u1426\3\2\2\2\u136b\u136c\7\u0240\2\2\u136c\u136e")
        buf.write("\7\u0225\2\2\u136d\u136f\5\u0260\u0131\2\u136e\u136d\3")
        buf.write("\2\2\2\u136e\u136f\3\2\2\2\u136f\u1371\3\2\2\2\u1370\u1372")
        buf.write("\5\u0408\u0205\2\u1371\u1370\3\2\2\2\u1371\u1372\3\2\2")
        buf.write("\2\u1372\u1426\3\2\2\2\u1373\u1374\7\u0185\2\2\u1374\u1376")
        buf.write("\7\u023d\2\2\u1375\u1377\5\u0260\u0131\2\u1376\u1375\3")
        buf.write("\2\2\2\u1376\u1377\3\2\2\2\u1377\u1379\3\2\2\2\u1378\u137a")
        buf.write("\5\u0408\u0205\2\u1379\u1378\3\2\2\2\u1379\u137a\3\2\2")
        buf.write("\2\u137a\u1426\3\2\2\2\u137b\u1426\7\u019a\2\2\u137c\u137f")
        buf.write("\7\u00a5\2\2\u137d\u1380\5\u0448\u0225\2\u137e\u1380\7")
        buf.write("\f\2\2\u137f\u137d\3\2\2\2\u137f\u137e\3\2\2\2\u1380\u1381")
        buf.write("\3\2\2\2\u1381\u1426\tB\2\2\u1382\u1384\5\u025a\u012e")
        buf.write("\2\u1383\u1382\3\2\2\2\u1383\u1384\3\2\2\2\u1384\u1385")
        buf.write("\3\2\2\2\u1385\u1386\7I\2\2\u1386\u1387\tC\2\2\u1387\u1389")
        buf.write("\5\u0450\u0229\2\u1388\u138a\5\u0260\u0131\2\u1389\u1388")
        buf.write("\3\2\2\2\u1389\u138a\3\2\2\2\u138a\u138c\3\2\2\2\u138b")
        buf.write("\u138d\5\u0408\u0205\2\u138c\u138b\3\2\2\2\u138c\u138d")
        buf.write("\3\2\2\2\u138d\u1426\3\2\2\2\u138e\u138f\t,\2\2\u138f")
        buf.write("\u1426\7\u0123\2\2\u1390\u1397\7\u0204\2\2\u1391\u1398")
        buf.write("\7\u00e3\2\2\u1392\u1393\7\u0225\2\2\u1393\u1395\5\u025c")
        buf.write("\u012f\2\u1394\u1396\5\u0310\u0189\2\u1395\u1394\3\2\2")
        buf.write("\2\u1395\u1396\3\2\2\2\u1396\u1398\3\2\2\2\u1397\u1391")
        buf.write("\3\2\2\2\u1397\u1392\3\2\2\2\u1398\u1426\3\2\2\2\u1399")
        buf.write("\u139a\tD\2\2\u139a\u139d\7\u00ab\2\2\u139b\u139c\7\u00fd")
        buf.write("\2\2\u139c\u139e\5\u0486\u0244\2\u139d\u139b\3\2\2\2\u139d")
        buf.write("\u139e\3\2\2\2\u139e\u13a1\3\2\2\2\u139f\u13a0\7\u00cd")
        buf.write("\2\2\u13a0\u13a2\5\u047a\u023e\2\u13a1\u139f\3\2\2\2\u13a1")
        buf.write("\u13a2\3\2\2\2\u13a2\u13a4\3\2\2\2\u13a3\u13a5\5\u011e")
        buf.write("\u0090\2\u13a4\u13a3\3\2\2\2\u13a4\u13a5\3\2\2\2\u13a5")
        buf.write("\u13a7\3\2\2\2\u13a6\u13a8\5\u0310\u0189\2\u13a7\u13a6")
        buf.write("\3\2\2\2\u13a7\u13a8\3\2\2\2\u13a8\u1426\3\2\2\2\u13a9")
        buf.write("\u13aa\6\u012du\2\u13aa\u13ac\7\u00b6\2\2\u13ab\u13a9")
        buf.write("\3\2\2\2\u13ab\u13ac\3\2\2\2\u13ac\u13ad\3\2\2\2\u13ad")
        buf.write("\u13ae\tE\2\2\u13ae\u13af\5\u025e\u0130\2\u13af\u13b1")
        buf.write("\5\u0450\u0229\2\u13b0\u13b2\5\u0260\u0131\2\u13b1\u13b0")
        buf.write("\3\2\2\2\u13b1\u13b2\3\2\2\2\u13b2\u13b4\3\2\2\2\u13b3")
        buf.write("\u13b5\5\u0168\u00b5\2\u13b4\u13b3\3\2\2\2\u13b4\u13b5")
        buf.write("\3\2\2\2\u13b5\u1426\3\2\2\2\u13b6\u13b8\7\u022b\2\2\u13b7")
        buf.write("\u13b6\3\2\2\2\u13b7\u13b8\3\2\2\2\u13b8\u13b9\3\2\2\2")
        buf.write("\u13b9\u1426\7\u00a4\2\2\u13ba\u13bb\7a\2\2\u13bb\u13bc")
        buf.write("\7\u030a\2\2\u13bc\u13bd\7\u02fa\2\2\u13bd\u13be\7\u030b")
        buf.write("\2\2\u13be\u1426\tF\2\2\u13bf\u13c1\7\u0281\2\2\u13c0")
        buf.write("\u13c2\5\u011e\u0090\2\u13c1\u13c0\3\2\2\2\u13c1\u13c2")
        buf.write("\3\2\2\2\u13c2\u1426\3\2\2\2\u13c3\u13c5\7\u00a8\2\2\u13c4")
        buf.write("\u13c6\5\u011e\u0090\2\u13c5\u13c4\3\2\2\2\u13c5\u13c6")
        buf.write("\3\2\2\2\u13c6\u1426\3\2\2\2\u13c7\u1426\7\u01ac\2\2\u13c8")
        buf.write("\u13d1\7\u01ab\2\2\u13c9\u13ce\5\u0262\u0132\2\u13ca\u13cb")
        buf.write("\7\u0307\2\2\u13cb\u13cd\5\u0262\u0132\2\u13cc\u13ca\3")
        buf.write("\2\2\2\u13cd\u13d0\3\2\2\2\u13ce\u13cc\3\2\2\2\u13ce\u13cf")
        buf.write("\3\2\2\2\u13cf\u13d2\3\2\2\2\u13d0\u13ce\3\2\2\2\u13d1")
        buf.write("\u13c9\3\2\2\2\u13d1\u13d2\3\2\2\2\u13d2\u13d6\3\2\2\2")
        buf.write("\u13d3\u13d4\7\u00ca\2\2\u13d4\u13d5\7\u01b0\2\2\u13d5")
        buf.write("\u13d7\7\u02ed\2\2\u13d6\u13d3\3\2\2\2\u13d6\u13d7\3\2")
        buf.write("\2\2\u13d7\u13d9\3\2\2\2\u13d8\u13da\5\u011e\u0090\2\u13d9")
        buf.write("\u13d8\3\2\2\2\u13d9\u13da\3\2\2\2\u13da\u1426\3\2\2\2")
        buf.write("\u13db\u13dd\5\u04aa\u0256\2\u13dc\u13db\3\2\2\2\u13dc")
        buf.write("\u13dd\3\2\2\2\u13dd\u13de\3\2\2\2\u13de\u13e0\tG\2\2")
        buf.write("\u13df\u13e1\5\u0408\u0205\2\u13e0\u13df\3\2\2\2\u13e0")
        buf.write("\u13e1\3\2\2\2\u13e1\u1426\3\2\2\2\u13e2\u13e4\7\u00ce")
        buf.write("\2\2\u13e3\u13e2\3\2\2\2\u13e3\u13e4\3\2\2\2\u13e4\u13e5")
        buf.write("\3\2\2\2\u13e5\u1426\7\u01aa\2\2\u13e6\u13e8\5\u02f8\u017d")
        buf.write("\2\u13e7\u13e9\5\u0408\u0205\2\u13e8\u13e7\3\2\2\2\u13e8")
        buf.write("\u13e9\3\2\2\2\u13e9\u1426\3\2\2\2\u13ea\u13ec\7H\2\2")
        buf.write("\u13eb\u13ed\5\u0408\u0205\2\u13ec\u13eb\3\2\2\2\u13ec")
        buf.write("\u13ed\3\2\2\2\u13ed\u1426\3\2\2\2\u13ee\u13ef\6\u012d")
        buf.write("v\2\u13ef\u1426\7_\2\2\u13f0\u1426\7\u01a7\2\2\u13f1\u13f4")
        buf.write("\7\u00da\2\2\u13f2\u13f3\7\u00ca\2\2\u13f3\u13f5\5\u0404")
        buf.write("\u0203\2\u13f4\u13f2\3\2\2\2\u13f4\u13f5\3\2\2\2\u13f5")
        buf.write("\u1426\3\2\2\2\u13f6\u13f7\7\u00da\2\2\u13f7\u13f8\7\u00ca")
        buf.write("\2\2\u13f8\u13f9\5\u0404\u0203\2\u13f9\u13fa\7\u026f\2")
        buf.write("\2\u13fa\u13fb\5\u03f2\u01fa\2\u13fb\u1426\3\2\2\2\u13fc")
        buf.write("\u13fd\7\u013e\2\2\u13fd\u1426\7\u0225\2\2\u13fe\u1413")
        buf.write("\7c\2\2\u13ff\u1401\7o\2\2\u1400\u1402\5\u03d6\u01ec\2")
        buf.write("\u1401\u1400\3\2\2\2\u1401\u1402\3\2\2\2\u1402\u1403\3")
        buf.write("\2\2\2\u1403\u1414\5\u0424\u0213\2\u1404\u1405\7\u00ac")
        buf.write("\2\2\u1405\u1414\5\u0440\u0221\2\u1406\u1407\7\u00d0\2")
        buf.write("\2\u1407\u1414\5\u042c\u0217\2\u1408\u1409\7\u01a8\2\2")
        buf.write("\u1409\u1414\5\u0428\u0215\2\u140a\u140b\7\u0240\2\2\u140b")
        buf.write("\u1414\5\u0450\u0229\2\u140c\u140d\7\u0254\2\2\u140d\u1414")
        buf.write("\5\u0430\u0219\2\u140e\u140f\7\u027e\2\2\u140f\u1414\5")
        buf.write("\u0434\u021b\2\u1410\u1411\6\u012dw\2\u1411\u1412\7\u026c")
        buf.write("\2\2\u1412\u1414\5\u0404\u0203\2\u1413\u13ff\3\2\2\2\u1413")
        buf.write("\u1404\3\2\2\2\u1413\u1406\3\2\2\2\u1413\u1408\3\2\2\2")
        buf.write("\u1413\u140a\3\2\2\2\u1413\u140c\3\2\2\2\u1413\u140e\3")
        buf.write("\2\2\2\u1413\u1410\3\2\2\2\u1414\u1426\3\2\2\2\u1415\u1416")
        buf.write("\7\u01a8\2\2\u1416\u1418\7\u0225\2\2\u1417\u1419\5\u0408")
        buf.write("\u0205\2\u1418\u1417\3\2\2\2\u1418\u1419\3\2\2\2\u1419")
        buf.write("\u1426\3\2\2\2\u141a\u141b\7\u00d0\2\2\u141b\u141d\7\u0225")
        buf.write("\2\2\u141c\u141e\5\u0408\u0205\2\u141d\u141c\3\2\2\2\u141d")
        buf.write("\u141e\3\2\2\2\u141e\u1426\3\2\2\2\u141f\u1420\7\u01a8")
        buf.write("\2\2\u1420\u1421\7F\2\2\u1421\u1426\5\u0428\u0215\2\u1422")
        buf.write("\u1423\7\u00d0\2\2\u1423\u1424\7F\2\2\u1424\u1426\5\u042c")
        buf.write("\u0217\2\u1425\u134a\3\2\2\2\u1425\u134c\3\2\2\2\u1425")
        buf.write("\u1351\3\2\2\2\u1425\u135b\3\2\2\2\u1425\u1364\3\2\2\2")
        buf.write("\u1425\u136b\3\2\2\2\u1425\u1373\3\2\2\2\u1425\u137b\3")
        buf.write("\2\2\2\u1425\u137c\3\2\2\2\u1425\u1383\3\2\2\2\u1425\u138e")
        buf.write("\3\2\2\2\u1425\u1390\3\2\2\2\u1425\u1399\3\2\2\2\u1425")
        buf.write("\u13ab\3\2\2\2\u1425\u13b7\3\2\2\2\u1425\u13ba\3\2\2\2")
        buf.write("\u1425\u13bf\3\2\2\2\u1425\u13c3\3\2\2\2\u1425\u13c7\3")
        buf.write("\2\2\2\u1425\u13c8\3\2\2\2\u1425\u13dc\3\2\2\2\u1425\u13e3")
        buf.write("\3\2\2\2\u1425\u13e6\3\2\2\2\u1425\u13ea\3\2\2\2\u1425")
        buf.write("\u13ee\3\2\2\2\u1425\u13f0\3\2\2\2\u1425\u13f1\3\2\2\2")
        buf.write("\u1425\u13f6\3\2\2\2\u1425\u13fc\3\2\2\2\u1425\u13fe\3")
        buf.write("\2\2\2\u1425\u1415\3\2\2\2\u1425\u141a\3\2\2\2\u1425\u141f")
        buf.write("\3\2\2\2\u1425\u1422\3\2\2\2\u1426\u0259\3\2\2\2\u1427")
        buf.write("\u142e\7\u00ce\2\2\u1428\u1429\6\u012ex\2\u1429\u142b")
        buf.write("\7\u00b6\2\2\u142a\u142c\7\u00ce\2\2\u142b\u142a\3\2\2")
        buf.write("\2\u142b\u142c\3\2\2\2\u142c\u142e\3\2\2\2\u142d\u1427")
        buf.write("\3\2\2\2\u142d\u1428\3\2\2\2\u142e\u025b\3\2\2\2\u142f")
        buf.write("\u1431\6\u012fy\2\u1430\u1432\7\u0174\2\2\u1431\u1430")
        buf.write("\3\2\2\2\u1431\u1432\3\2\2\2\u1432\u1435\3\2\2\2\u1433")
        buf.write("\u1435\3\2\2\2\u1434\u142f\3\2\2\2\u1434\u1433\3\2\2\2")
        buf.write("\u1435\u025d\3\2\2\2\u1436\u1437\tC\2\2\u1437\u025f\3")
        buf.write("\2\2\2\u1438\u1439\5\u025e\u0130\2\u1439\u143a\5\u046a")
        buf.write("\u0236\2\u143a\u0261\3\2\2\2\u143b\u143c\7*\2\2\u143c")
        buf.write("\u1443\7\u0101\2\2\u143d\u143e\7]\2\2\u143e\u1443\7\u023a")
        buf.write("\2\2\u143f\u1440\7\u0192\2\2\u1440\u1443\7\u00bb\2\2\u1441")
        buf.write("\u1443\tH\2\2\u1442\u143b\3\2\2\2\u1442\u143d\3\2\2\2")
        buf.write("\u1442\u143f\3\2\2\2\u1442\u1441\3\2\2\2\u1443\u0263\3")
        buf.write("\2\2\2\u1444\u1445\7#\2\2\u1445\u146a\5\u048a\u0246\2")
        buf.write("\u1446\u1447\7\61\2\2\u1447\u1448\7\u00ee\2\2\u1448\u1449")
        buf.write("\5\u0266\u0134\2\u1449\u144c\7\u00fd\2\2\u144a\u144d\5")
        buf.write("\u046a\u0236\2\u144b\u144d\7\u0082\2\2\u144c\u144a\3\2")
        buf.write("\2\2\u144c\u144b\3\2\2\2\u144d\u146a\3\2\2\2\u144e\u1450")
        buf.write("\7\u00c6\2\2\u144f\u1451\5\u040c\u0207\2\u1450\u144f\3")
        buf.write("\2\2\2\u1450\u1451\3\2\2\2\u1451\u145b\3\2\2\2\u1452\u145c")
        buf.write("\5\u0278\u013d\2\u1453\u1458\5\u0274\u013b\2\u1454\u1455")
        buf.write("\7\u0307\2\2\u1455\u1457\5\u0274\u013b\2\u1456\u1454\3")
        buf.write("\2\2\2\u1457\u145a\3\2\2\2\u1458\u1456\3\2\2\2\u1458\u1459")
        buf.write("\3\2\2\2\u1459\u145c\3\2\2\2\u145a\u1458\3\2\2\2\u145b")
        buf.write("\u1452\3\2\2\2\u145b\u1453\3\2\2\2\u145c\u146a\3\2\2\2")
        buf.write("\u145d\u145f\7\u010c\2\2\u145e\u1460\tI\2\2\u145f\u145e")
        buf.write("\3\2\2\2\u145f\u1460\3\2\2\2\u1460\u1461\3\2\2\2\u1461")
        buf.write("\u146a\5\u02a6\u0154\2\u1462\u1463\7\u011b\2\2\u1463\u1464")
        buf.write("\7\u00ee\2\2\u1464\u1465\7\u00fa\2\2\u1465\u1466\7\61")
        buf.write("\2\2\u1466\u146a\5\u027c\u013f\2\u1467\u1468\6\u0133z")
        buf.write("\2\u1468\u146a\7\u0200\2\2\u1469\u1444\3\2\2\2\u1469\u1446")
        buf.write("\3\2\2\2\u1469\u144e\3\2\2\2\u1469\u145d\3\2\2\2\u1469")
        buf.write("\u1462\3\2\2\2\u1469\u1467\3\2\2\2\u146a\u0265\3\2\2\2")
        buf.write("\u146b\u146e\5\u0268\u0135\2\u146c\u146e\5\u026c\u0137")
        buf.write("\2\u146d\u146b\3\2\2\2\u146d\u146c\3\2\2\2\u146e\u0267")
        buf.write("\3\2\2\2\u146f\u1474\5\u026a\u0136\2\u1470\u1471\7\u0307")
        buf.write("\2\2\u1471\u1473\5\u026a\u0136\2\u1472\u1470\3\2\2\2\u1473")
        buf.write("\u1476\3\2\2\2\u1474\u1472\3\2\2\2\u1474\u1475\3\2\2\2")
        buf.write("\u1475\u0269\3\2\2\2\u1476\u1474\3\2\2\2\u1477\u1479\5")
        buf.write("\u0450\u0229\2\u1478\u147a\5\u026e\u0138\2\u1479\u1478")
        buf.write("\3\2\2\2\u1479\u147a\3\2\2\2\u147a\u026b\3\2\2\2\u147b")
        buf.write("\u147c\5\u0450\u0229\2\u147c\u147d\7\u0197\2\2\u147d\u147e")
        buf.write("\7\u030a\2\2\u147e\u147f\5\66\34\2\u147f\u1481\7\u030b")
        buf.write("\2\2\u1480\u1482\5\u026e\u0138\2\u1481\u1480\3\2\2\2\u1481")
        buf.write("\u1482\3\2\2\2\u1482\u026d\3\2\2\2\u1483\u1484\5\u0198")
        buf.write("\u00cd\2\u1484\u1486\7\u030a\2\2\u1485\u1487\5\u0272\u013a")
        buf.write("\2\u1486\u1485\3\2\2\2\u1486\u1487\3\2\2\2\u1487\u1488")
        buf.write("\3\2\2\2\u1488\u1489\7\u030b\2\2\u1489\u026f\3\2\2\2\u148a")
        buf.write("\u148d\5\u046a\u0236\2\u148b\u148d\7\u01a6\2\2\u148c\u148a")
        buf.write("\3\2\2\2\u148c\u148b\3\2\2\2\u148d\u0271\3\2\2\2\u148e")
        buf.write("\u1493\5\u0270\u0139\2\u148f\u1490\7\u0307\2\2\u1490\u1492")
        buf.write("\5\u0270\u0139\2\u1491\u148f\3\2\2\2\u1492\u1495\3\2\2")
        buf.write("\2\u1493\u1491\3\2\2\2\u1493\u1494\3\2\2\2\u1494\u0273")
        buf.write("\3\2\2\2\u1495\u1493\3\2\2\2\u1496\u14a6\tJ\2\2\u1497")
        buf.write("\u1499\5\u0276\u013c\2\u1498\u1497\3\2\2\2\u1498\u1499")
        buf.write("\3\2\2\2\u1499\u149a\3\2\2\2\u149a\u14a6\7\u0123\2\2\u149b")
        buf.write("\u149c\7\u01bf\2\2\u149c\u149e\7\u0123\2\2\u149d\u149f")
        buf.write("\5\u0310\u0189\2\u149e\u149d\3\2\2\2\u149e\u149f\3\2\2")
        buf.write("\2\u149f\u14a6\3\2\2\2\u14a0\u14a1\6\u013b{\2\u14a1\u14a2")
        buf.write("\7\u01b0\2\2\u14a2\u14a6\7\61\2\2\u14a3\u14a4\6\u013b")
        buf.write("|\2\u14a4\u14a6\7\u0187\2\2\u14a5\u1496\3\2\2\2\u14a5")
        buf.write("\u1498\3\2\2\2\u14a5\u149b\3\2\2\2\u14a5\u14a0\3\2\2\2")
        buf.write("\u14a5\u14a3\3\2\2\2\u14a6\u0275\3\2\2\2\u14a7\u14a8\t")
        buf.write("K\2\2\u14a8\u0277\3\2\2\2\u14a9\u14b1\t\24\2\2\u14aa\u14ab")
        buf.write("\7\u0287\2\2\u14ab\u14ac\7\u01b5\2\2\u14ac\u14b2\7\u0121")
        buf.write("\2\2\u14ad\u14af\5\u046c\u0237\2\u14ae\u14b0\5\u027a\u013e")
        buf.write("\2\u14af\u14ae\3\2\2\2\u14af\u14b0\3\2\2\2\u14b0\u14b2")
        buf.write("\3\2\2\2\u14b1\u14aa\3\2\2\2\u14b1\u14ad\3\2\2\2\u14b1")
        buf.write("\u14b2\3\2\2\2\u14b2\u0279\3\2\2\2\u14b3\u14b4\6\u013e")
        buf.write("}\2\u14b4\u14b5\7\u00ca\2\2\u14b5\u14ba\7\u00b5\2\2\u14b6")
        buf.write("\u14b7\7\u0287\2\2\u14b7\u14b8\7\u01b5\2\2\u14b8\u14ba")
        buf.write("\7\u0121\2\2\u14b9\u14b3\3\2\2\2\u14b9\u14b6\3\2\2\2\u14ba")
        buf.write("\u027b\3\2\2\2\u14bb\u14bc\5\u0450\u0229\2\u14bc\u14be")
        buf.write("\5\u0282\u0142\2\u14bd\u14bf\5\u026e\u0138\2\u14be\u14bd")
        buf.write("\3\2\2\2\u14be\u14bf\3\2\2\2\u14bf\u14c2\3\2\2\2\u14c0")
        buf.write("\u14c1\7\u00ea\2\2\u14c1\u14c3\7\u0110\2\2\u14c2\u14c0")
        buf.write("\3\2\2\2\u14c2\u14c3\3\2\2\2\u14c3\u14c6\3\2\2\2\u14c4")
        buf.write("\u14c6\5\u027e\u0140\2\u14c5\u14bb\3\2\2\2\u14c5\u14c4")
        buf.write("\3\2\2\2\u14c6\u027d\3\2\2\2\u14c7\u14cc\5\u0280\u0141")
        buf.write("\2\u14c8\u14c9\7\u0307\2\2\u14c9\u14cb\5\u0280\u0141\2")
        buf.write("\u14ca\u14c8\3\2\2\2\u14cb\u14ce\3\2\2\2\u14cc\u14ca\3")
        buf.write("\2\2\2\u14cc\u14cd\3\2\2\2\u14cd\u027f\3\2\2\2\u14ce\u14cc")
        buf.write("\3\2\2\2\u14cf\u14d1\5\u0450\u0229\2\u14d0\u14d2\5\u026e")
        buf.write("\u0138\2\u14d1\u14d0\3\2\2\2\u14d1\u14d2\3\2\2\2\u14d2")
        buf.write("\u14d5\3\2\2\2\u14d3\u14d4\7\u00ea\2\2\u14d4\u14d6\7\u0110")
        buf.write("\2\2\u14d5\u14d3\3\2\2\2\u14d5\u14d6\3\2\2\2\u14d6\u0281")
        buf.write("\3\2\2\2\u14d7\u14d8\7\u0197\2\2\u14d8\u14d9\7\u030a\2")
        buf.write("\2\u14d9\u14da\5\66\34\2\u14da\u14db\7\u030b\2\2\u14db")
        buf.write("\u0283\3\2\2\2\u14dc\u14e1\5\u0286\u0144\2\u14dd\u14e1")
        buf.write("\5\u0290\u0149\2\u14de\u14e1\5\u0292\u014a\2\u14df\u14e1")
        buf.write("\5\u0296\u014c\2\u14e0\u14dc\3\2\2\2\u14e0\u14dd\3\2\2")
        buf.write("\2\u14e0\u14de\3\2\2\2\u14e0\u14df\3\2\2\2\u14e1\u0285")
        buf.write("\3\2\2\2\u14e2\u14e3\7c\2\2\u14e3\u14e4\7\u02c7\2\2\u14e4")
        buf.write("\u14e5\7\u00db\2\2\u14e5\u14e6\5\u046a\u0236\2\u14e6\u14e8")
        buf.write("\7\u0259\2\2\u14e7\u14e9\5\u04a8\u0255\2\u14e8\u14e7\3")
        buf.write("\2\2\2\u14e8\u14e9\3\2\2\2\u14e9\u14ea\3\2\2\2\u14ea\u14ec")
        buf.write("\tL\2\2\u14eb\u14ed\5\u0288\u0145\2\u14ec\u14eb\3\2\2")
        buf.write("\2\u14ec\u14ed\3\2\2\2\u14ed\u14ef\3\2\2\2\u14ee\u14f0")
        buf.write("\5\u028c\u0147\2\u14ef\u14ee\3\2\2\2\u14ef\u14f0\3\2\2")
        buf.write("\2\u14f0\u14f2\3\2\2\2\u14f1\u14f3\5\u028e\u0148\2\u14f2")
        buf.write("\u14f1\3\2\2\2\u14f2\u14f3\3\2\2\2\u14f3\u0287\3\2\2\2")
        buf.write("\u14f4\u14f6\7\u02c9\2\2\u14f5\u14f7\5\u04a8\u0255\2\u14f6")
        buf.write("\u14f5\3\2\2\2\u14f6\u14f7\3\2\2\2\u14f7\u14f8\3\2\2\2")
        buf.write("\u14f8\u14ff\5\u028a\u0146\2\u14f9\u14fb\7\u0307\2\2\u14fa")
        buf.write("\u14f9\3\2\2\2\u14fa\u14fb\3\2\2\2\u14fb\u14fc\3\2\2\2")
        buf.write("\u14fc\u14fe\5\u028a\u0146\2\u14fd\u14fa\3\2\2\2\u14fe")
        buf.write("\u1501\3\2\2\2\u14ff\u14fd\3\2\2\2\u14ff\u1500\3\2\2\2")
        buf.write("\u1500\u0289\3\2\2\2\u1501\u14ff\3\2\2\2\u1502\u1505\7")
        buf.write("\u02ed\2\2\u1503\u1504\7\u02f9\2\2\u1504\u1506\7\u02ed")
        buf.write("\2\2\u1505\u1503\3\2\2\2\u1505\u1506\3\2\2\2\u1506\u028b")
        buf.write("\3\2\2\2\u1507\u1509\7\u02c6\2\2\u1508\u150a\5\u04a8\u0255")
        buf.write("\2\u1509\u1508\3\2\2\2\u1509\u150a\3\2\2\2\u150a\u150b")
        buf.write("\3\2\2\2\u150b\u150c\7\u02ed\2\2\u150c\u028d\3\2\2\2\u150d")
        buf.write("\u150e\tM\2\2\u150e\u028f\3\2\2\2\u150f\u1510\7\r\2\2")
        buf.write("\u1510\u1511\7\u02c7\2\2\u1511\u1512\7\u00db\2\2\u1512")
        buf.write("\u1514\5\u0464\u0233\2\u1513\u1515\5\u0288\u0145\2\u1514")
        buf.write("\u1513\3\2\2\2\u1514\u1515\3\2\2\2\u1515\u1517\3\2\2\2")
        buf.write("\u1516\u1518\5\u028c\u0147\2\u1517\u1516\3\2\2\2\u1517")
        buf.write("\u1518\3\2\2\2\u1518\u151a\3\2\2\2\u1519\u151b\5\u028e")
        buf.write("\u0148\2\u151a\u1519\3\2\2\2\u151a\u151b\3\2\2\2\u151b")
        buf.write("\u151d\3\2\2\2\u151c\u151e\7\u00c8\2\2\u151d\u151c\3\2")
        buf.write("\2\2\u151d\u151e\3\2\2\2\u151e\u0291\3\2\2\2\u151f\u1520")
        buf.write("\7\u01fc\2\2\u1520\u1521\7\u02c7\2\2\u1521\u1522\7\u00db")
        buf.write("\2\2\u1522\u1525\5\u046a\u0236\2\u1523\u1524\7\u00ca\2")
        buf.write("\2\u1524\u1526\5\u0294\u014b\2\u1525\u1523\3\2\2\2\u1525")
        buf.write("\u1526\3\2\2\2\u1526\u0293\3\2\2\2\u1527\u152e\5\u0478")
        buf.write("\u023d\2\u1528\u152a\7\u0307\2\2\u1529\u1528\3\2\2\2\u1529")
        buf.write("\u152a\3\2\2\2\u152a\u152b\3\2\2\2\u152b\u152d\5\u0478")
        buf.write("\u023d\2\u152c\u1529\3\2\2\2\u152d\u1530\3\2\2\2\u152e")
        buf.write("\u152c\3\2\2\2\u152e\u152f\3\2\2\2\u152f\u0295\3\2\2\2")
        buf.write("\u1530\u152e\3\2\2\2\u1531\u1532\7\u0096\2\2\u1532\u1533")
        buf.write("\7\u02c7\2\2\u1533\u1534\7\u00db\2\2\u1534\u1536\5\u0464")
        buf.write("\u0233\2\u1535\u1537\7\u00c8\2\2\u1536\u1535\3\2\2\2\u1536")
        buf.write("\u1537\3\2\2\2\u1537\u0297\3\2\2\2\u1538\u153f\5\u029a")
        buf.write("\u014e\2\u1539\u153f\5\u029c\u014f\2\u153a\u153f\5\u02a0")
        buf.write("\u0151\2\u153b\u153f\5\u02a2\u0152\2\u153c\u153d\6\u014d")
        buf.write("~\2\u153d\u153f\5\u02a4\u0153\2\u153e\u1538\3\2\2\2\u153e")
        buf.write("\u1539\3\2\2\2\u153e\u153a\3\2\2\2\u153e\u153b\3\2\2\2")
        buf.write("\u153e\u153c\3\2\2\2\u153f\u0299\3\2\2\2\u1540\u1541\t")
        buf.write("N\2\2\u1541\u1544\5\u0450\u0229\2\u1542\u1545\5\u0486")
        buf.write("\u0244\2\u1543\u1545\5\u0418\u020d\2\u1544\u1542\3\2\2")
        buf.write("\2\u1544\u1543\3\2\2\2\u1544\u1545\3\2\2\2\u1545\u029b")
        buf.write("\3\2\2\2\u1546\u1556\tN\2\2\u1547\u1548\6\u014f\177\2")
        buf.write("\u1548\u1557\7\u00b6\2\2\u1549\u154a\6\u014f\u0080\2\u154a")
        buf.write("\u1557\7\u0196\2\2\u154b\u154c\6\u014f\u0081\2\u154c\u154d")
        buf.write("\7\u00cb\2\2\u154d\u154e\7\u02f0\2\2\u154e\u1557\5\u049e")
        buf.write("\u0250\2\u154f\u1550\6\u014f\u0082\2\u1550\u1557\7\20")
        buf.write("\2\2\u1551\u1552\6\u014f\u0083\2\u1552\u1553\7\20\2\2")
        buf.write("\u1553\u1554\7\u00cb\2\2\u1554\u1555\7\u02f0\2\2\u1555")
        buf.write("\u1557\5\u049e\u0250\2\u1556\u1547\3\2\2\2\u1556\u1549")
        buf.write("\3\2\2\2\u1556\u154b\3\2\2\2\u1556\u154f\3\2\2\2\u1556")
        buf.write("\u1551\3\2\2\2\u1556\u1557\3\2\2\2\u1557\u1558\3\2\2\2")
        buf.write("\u1558\u1559\5\u029e\u0150\2\u1559\u029d\3\2\2\2\u155a")
        buf.write("\u1567\5\u010c\u0087\2\u155b\u1560\6\u0150\u0084\2\u155c")
        buf.write("\u1561\5\u00dep\2\u155d\u1561\5\u00eav\2\u155e\u1561\5")
        buf.write("\u010a\u0086\2\u155f\u1561\5\u01a2\u00d2\2\u1560\u155c")
        buf.write("\3\2\2\2\u1560\u155d\3\2\2\2\u1560\u155e\3\2\2\2\u1560")
        buf.write("\u155f\3\2\2\2\u1561\u1567\3\2\2\2\u1562\u1563\6\u0150")
        buf.write("\u0085\2\u1563\u1564\7\u00ca\2\2\u1564\u1565\7V\2\2\u1565")
        buf.write("\u1567\5\u0478\u023d\2\u1566\u155a\3\2\2\2\u1566\u155b")
        buf.write("\3\2\2\2\u1566\u1562\3\2\2\2\u1567\u029f\3\2\2\2\u1568")
        buf.write("\u1569\7\u00e0\2\2\u1569\u156a\5\u049e\u0250\2\u156a\u02a1")
        buf.write("\3\2\2\2\u156b\u156c\7\u026e\2\2\u156c\u156d\5\u046a\u0236")
        buf.write("\2\u156d\u02a3\3\2\2\2\u156e\u156f\7\u02cc\2\2\u156f\u02a5")
        buf.write("\3\2\2\2\u1570\u1571\b\u0154\1\2\u1571\u1577\5\u02a8\u0155")
        buf.write("\2\u1572\u1574\7\u0103\2\2\u1573\u1575\5\u02fa\u017e\2")
        buf.write("\u1574\u1573\3\2\2\2\u1574\u1575\3\2\2\2\u1575\u1576\3")
        buf.write("\2\2\2\u1576\u1578\tO\2\2\u1577\u1572\3\2\2\2\u1577\u1578")
        buf.write("\3\2\2\2\u1578\u157c\3\2\2\2\u1579\u157a\7\u0175\2\2\u157a")
        buf.write("\u157c\5\u02a6\u0154\6\u157b\u1570\3\2\2\2\u157b\u1579")
        buf.write("\3\2\2\2\u157c\u1588\3\2\2\2\u157d\u157e\f\5\2\2\u157e")
        buf.write("\u157f\tP\2\2\u157f\u1587\5\u02a6\u0154\6\u1580\u1581")
        buf.write("\f\4\2\2\u1581\u1582\7\u0290\2\2\u1582\u1587\5\u02a6\u0154")
        buf.write("\5\u1583\u1584\f\3\2\2\u1584\u1585\tQ\2\2\u1585\u1587")
        buf.write("\5\u02a6\u0154\4\u1586\u157d\3\2\2\2\u1586\u1580\3\2\2")
        buf.write("\2\u1586\u1583\3\2\2\2\u1587\u158a\3\2\2\2\u1588\u1586")
        buf.write("\3\2\2\2\u1588\u1589\3\2\2\2\u1589\u02a7\3\2\2\2\u158a")
        buf.write("\u1588\3\2\2\2\u158b\u158c\b\u0155\1\2\u158c\u158d\5\u02ac")
        buf.write("\u0157\2\u158d\u159f\3\2\2\2\u158e\u158f\f\5\2\2\u158f")
        buf.write("\u1591\7\u0103\2\2\u1590\u1592\5\u02fa\u017e\2\u1591\u1590")
        buf.write("\3\2\2\2\u1591\u1592\3\2\2\2\u1592\u1593\3\2\2\2\u1593")
        buf.write("\u159e\7\u017a\2\2\u1594\u1595\f\4\2\2\u1595\u1596\5\u02aa")
        buf.write("\u0156\2\u1596\u1597\5\u02ac\u0157\2\u1597\u159e\3\2\2")
        buf.write("\2\u1598\u1599\f\3\2\2\u1599\u159a\5\u02aa\u0156\2\u159a")
        buf.write("\u159b\tR\2\2\u159b\u159c\5\u011a\u008e\2\u159c\u159e")
        buf.write("\3\2\2\2\u159d\u158e\3\2\2\2\u159d\u1594\3\2\2\2\u159d")
        buf.write("\u1598\3\2\2\2\u159e\u15a1\3\2\2\2\u159f\u159d\3\2\2\2")
        buf.write("\u159f\u15a0\3\2\2\2\u15a0\u02a9\3\2\2\2\u15a1\u159f\3")
        buf.write("\2\2\2\u15a2\u15a3\tS\2\2\u15a3\u02ab\3\2\2\2\u15a4\u15b2")
        buf.write("\5\u02b0\u0159\2\u15a5\u15a7\5\u02fa\u017e\2\u15a6\u15a5")
        buf.write("\3\2\2\2\u15a6\u15a7\3\2\2\2\u15a7\u15a8\3\2\2\2\u15a8")
        buf.write("\u15b3\5\u02ae\u0158\2\u15a9\u15aa\6\u0157\u008c\2\u15aa")
        buf.write("\u15ac\7\u02df\2\2\u15ab\u15ad\7\u029e\2\2\u15ac\u15ab")
        buf.write("\3\2\2\2\u15ac\u15ad\3\2\2\2\u15ad\u15ae\3\2\2\2\u15ae")
        buf.write("\u15b3\5\u0306\u0184\2\u15af\u15b0\7\u020b\2\2\u15b0\u15b1")
        buf.write("\7\u0115\2\2\u15b1\u15b3\5\u02b0\u0159\2\u15b2\u15a6\3")
        buf.write("\2\2\2\u15b2\u15a9\3\2\2\2\u15b2\u15af\3\2\2\2\u15b2\u15b3")
        buf.write("\3\2\2\2\u15b3\u02ad\3\2\2\2\u15b4\u15ba\7\u00fd\2\2\u15b5")
        buf.write("\u15bb\5\u011a\u008e\2\u15b6\u15b7\7\u030a\2\2\u15b7\u15b8")
        buf.write("\5\u02f6\u017c\2\u15b8\u15b9\7\u030b\2\2\u15b9\u15bb\3")
        buf.write("\2\2\2\u15ba\u15b5\3\2\2\2\u15ba\u15b6\3\2\2\2\u15bb\u15ca")
        buf.write("\3\2\2\2\u15bc\u15bd\7 \2\2\u15bd\u15be\5\u02b0\u0159")
        buf.write("\2\u15be\u15bf\7\21\2\2\u15bf\u15c0\5\u02ac\u0157\2\u15c0")
        buf.write("\u15ca\3\2\2\2\u15c1\u15c2\7\u0115\2\2\u15c2\u15c5\5\u02b2")
        buf.write("\u015a\2\u15c3\u15c4\7\u00aa\2\2\u15c4\u15c6\5\u02b2\u015a")
        buf.write("\2\u15c5\u15c3\3\2\2\2\u15c5\u15c6\3\2\2\2\u15c6\u15ca")
        buf.write("\3\2\2\2\u15c7\u15c8\7\u01be\2\2\u15c8\u15ca\5\u02b0\u0159")
        buf.write("\2\u15c9\u15b4\3\2\2\2\u15c9\u15bc\3\2\2\2\u15c9\u15c1")
        buf.write("\3\2\2\2\u15c9\u15c7\3\2\2\2\u15ca\u02af\3\2\2\2\u15cb")
        buf.write("\u15cc\b\u0159\1\2\u15cc\u15cd\5\u02b2\u015a\2\u15cd\u15e8")
        buf.write("\3\2\2\2\u15ce\u15cf\f\t\2\2\u15cf\u15d0\7\u0303\2\2\u15d0")
        buf.write("\u15e7\5\u02b0\u0159\n\u15d1\u15d2\f\b\2\2\u15d2\u15d3")
        buf.write("\tT\2\2\u15d3\u15e7\5\u02b0\u0159\t\u15d4\u15d5\f\7\2")
        buf.write("\2\u15d5\u15d6\tU\2\2\u15d6\u15e7\5\u02b0\u0159\b\u15d7")
        buf.write("\u15d8\f\5\2\2\u15d8\u15d9\tV\2\2\u15d9\u15e7\5\u02b0")
        buf.write("\u0159\6\u15da\u15db\f\4\2\2\u15db\u15dc\7\u0302\2\2\u15dc")
        buf.write("\u15e7\5\u02b0\u0159\5\u15dd\u15de\f\3\2\2\u15de\u15df")
        buf.write("\7\u0305\2\2\u15df\u15e7\5\u02b0\u0159\4\u15e0\u15e1\f")
        buf.write("\6\2\2\u15e1\u15e2\tU\2\2\u15e2\u15e3\7\u00f9\2\2\u15e3")
        buf.write("\u15e4\5\u02a6\u0154\2\u15e4\u15e5\5\u02fe\u0180\2\u15e5")
        buf.write("\u15e7\3\2\2\2\u15e6\u15ce\3\2\2\2\u15e6\u15d1\3\2\2\2")
        buf.write("\u15e6\u15d4\3\2\2\2\u15e6\u15d7\3\2\2\2\u15e6\u15da\3")
        buf.write("\2\2\2\u15e6\u15dd\3\2\2\2\u15e6\u15e0\3\2\2\2\u15e7\u15ea")
        buf.write("\3\2\2\2\u15e8\u15e6\3\2\2\2\u15e8\u15e9\3\2\2\2\u15e9")
        buf.write("\u02b1\3\2\2\2\u15ea\u15e8\3\2\2\2\u15eb\u15ec\b\u015a")
        buf.write("\1\2\u15ec\u15f0\5\u02e6\u0174\2\u15ed\u15ee\5\u04a8\u0255")
        buf.write("\2\u15ee\u15ef\5\u02a6\u0154\2\u15ef\u15f1\3\2\2\2\u15f0")
        buf.write("\u15ed\3\2\2\2\u15f0\u15f1\3\2\2\2\u15f1\u1659\3\2\2\2")
        buf.write("\u15f2\u15f4\5\u0418\u020d\2\u15f3\u15f5\5\u02b6\u015c")
        buf.write("\2\u15f4\u15f3\3\2\2\2\u15f4\u15f5\3\2\2\2\u15f5\u1659")
        buf.write("\3\2\2\2\u15f6\u1659\5\u02ce\u0168\2\u15f7\u1659\5\u02e0")
        buf.write("\u0171\2\u15f8\u1659\5\u047e\u0240\2\u15f9\u1659\7\u0315")
        buf.write("\2\2\u15fa\u1659\5\u02b8\u015d\2\u15fb\u15fc\6\u015a\u0094")
        buf.write("\2\u15fc\u1659\5\u02ba\u015e\2\u15fd\u15fe\6\u015a\u0095")
        buf.write("\2\u15fe\u1659\5\u02bc\u015f\2\u15ff\u1600\tW\2\2\u1600")
        buf.write("\u1659\5\u02b2\u015a\20\u1601\u1602\5\u02fc\u017f\2\u1602")
        buf.write("\u1603\5\u02b2\u015a\17\u1603\u1659\3\2\2\2\u1604\u1606")
        buf.write("\7\u01e9\2\2\u1605\u1604\3\2\2\2\u1605\u1606\3\2\2\2\u1606")
        buf.write("\u1607\3\2\2\2\u1607\u1608\7\u030a\2\2\u1608\u1609\5\u02f6")
        buf.write("\u017c\2\u1609\u160a\7\u030b\2\2\u160a\u1659\3\2\2\2\u160b")
        buf.write("\u160d\7\u00b0\2\2\u160c\u160b\3\2\2\2\u160c\u160d\3\2")
        buf.write("\2\2\u160d\u160e\3\2\2\2\u160e\u1659\5\u011a\u008e\2\u160f")
        buf.write("\u1610\7\u030c\2\2\u1610\u1611\5\u046a\u0236\2\u1611\u1612")
        buf.write("\5\u02a6\u0154\2\u1612\u1613\7\u030d\2\2\u1613\u1659\3")
        buf.write("\2\2\2\u1614\u1615\7\u0142\2\2\u1615\u1616\5\u02c8\u0165")
        buf.write("\2\u1616\u1617\7\t\2\2\u1617\u1618\7\u030a\2\2\u1618\u161a")
        buf.write("\5\u02b0\u0159\2\u1619\u161b\5\u02cc\u0167\2\u161a\u1619")
        buf.write("\3\2\2\2\u161a\u161b\3\2\2\2\u161b\u161c\3\2\2\2\u161c")
        buf.write("\u161d\7\u030b\2\2\u161d\u1659\3\2\2\2\u161e\u161f\7\"")
        buf.write("\2\2\u161f\u1659\5\u02b2\u015a\n\u1620\u1621\7\66\2\2")
        buf.write("\u1621\u1622\7\u030a\2\2\u1622\u1623\5\u02a6\u0154\2\u1623")
        buf.write("\u1624\7\23\2\2\u1624\u1626\5\u02f4\u017b\2\u1625\u1627")
        buf.write("\5\u02b4\u015b\2\u1626\u1625\3\2\2\2\u1626\u1627\3\2\2")
        buf.write("\2\u1627\u1628\3\2\2\2\u1628\u1629\7\u030b\2\2\u1629\u1659")
        buf.write("\3\2\2\2\u162a\u162c\7\65\2\2\u162b\u162d\5\u02a6\u0154")
        buf.write("\2\u162c\u162b\3\2\2\2\u162c\u162d\3\2\2\2\u162d\u1631")
        buf.write("\3\2\2\2\u162e\u162f\5\u02ee\u0178\2\u162f\u1630\5\u02f0")
        buf.write("\u0179\2\u1630\u1632\3\2\2\2\u1631\u162e\3\2\2\2\u1632")
        buf.write("\u1633\3\2\2\2\u1633\u1631\3\2\2\2\u1633\u1634\3\2\2\2")
        buf.write("\u1634\u1636\3\2\2\2\u1635\u1637\5\u02f2\u017a\2\u1636")
        buf.write("\u1635\3\2\2\2\u1636\u1637\3\2\2\2\u1637\u1638\3\2\2\2")
        buf.write("\u1638\u1639\7\u00a1\2\2\u1639\u1659\3\2\2\2\u163a\u163b")
        buf.write("\7`\2\2\u163b\u163c\7\u030a\2\2\u163c\u163d\5\u02a6\u0154")
        buf.write("\2\u163d\u163e\7\u0307\2\2\u163e\u163f\5\u02f4\u017b\2")
        buf.write("\u163f\u1640\7\u030b\2\2\u1640\u1659\3\2\2\2\u1641\u1642")
        buf.write("\7`\2\2\u1642\u1643\7\u030a\2\2\u1643\u1644\5\u02a6\u0154")
        buf.write("\2\u1644\u1645\7\u026f\2\2\u1645\u1646\5\u03aa\u01d6\2")
        buf.write("\u1646\u1647\7\u030b\2\2\u1647\u1659\3\2\2\2\u1648\u1649")
        buf.write("\7\u0082\2\2\u1649\u164a\7\u030a\2\2\u164a\u164b\5\u0472")
        buf.write("\u023a\2\u164b\u164c\7\u030b\2\2\u164c\u1659\3\2\2\2\u164d")
        buf.write("\u164e\7\u0274\2\2\u164e\u164f\7\u030a\2\2\u164f\u1650")
        buf.write("\5\u0472\u023a\2\u1650\u1651\7\u030b\2\2\u1651\u1659\3")
        buf.write("\2\2\2\u1652\u1653\7\u00f9\2\2\u1653\u1654\5\u02a6\u0154")
        buf.write("\2\u1654\u1655\5\u02fe\u0180\2\u1655\u1656\7\u02f8\2\2")
        buf.write("\u1656\u1657\5\u02a6\u0154\2\u1657\u1659\3\2\2\2\u1658")
        buf.write("\u15eb\3\2\2\2\u1658\u15f2\3\2\2\2\u1658\u15f6\3\2\2\2")
        buf.write("\u1658\u15f7\3\2\2\2\u1658\u15f8\3\2\2\2\u1658\u15f9\3")
        buf.write("\2\2\2\u1658\u15fa\3\2\2\2\u1658\u15fb\3\2\2\2\u1658\u15fd")
        buf.write("\3\2\2\2\u1658\u15ff\3\2\2\2\u1658\u1601\3\2\2\2\u1658")
        buf.write("\u1605\3\2\2\2\u1658\u160c\3\2\2\2\u1658\u160f\3\2\2\2")
        buf.write("\u1658\u1614\3\2\2\2\u1658\u161e\3\2\2\2\u1658\u1620\3")
        buf.write("\2\2\2\u1658\u162a\3\2\2\2\u1658\u163a\3\2\2\2\u1658\u1641")
        buf.write("\3\2\2\2\u1658\u1648\3\2\2\2\u1658\u164d\3\2\2\2\u1658")
        buf.write("\u1652\3\2\2\2\u1659\u1662\3\2\2\2\u165a\u165b\f\21\2")
        buf.write("\2\u165b\u165c\7\u02ec\2\2\u165c\u1661\5\u02b2\u015a\22")
        buf.write("\u165d\u165e\f\27\2\2\u165e\u165f\7G\2\2\u165f\u1661\5")
        buf.write("\u049e\u0250\2\u1660\u165a\3\2\2\2\u1660\u165d\3\2\2\2")
        buf.write("\u1661\u1664\3\2\2\2\u1662\u1660\3\2\2\2\u1662\u1663\3")
        buf.write("\2\2\2\u1663\u02b3\3\2\2\2\u1664\u1662\3\2\2\2\u1665\u1666")
        buf.write("\6\u015b\u0098\2\u1666\u1667\7\u02dd\2\2\u1667\u02b5\3")
        buf.write("\2\2\2\u1668\u1669\6\u015c\u0099\2\u1669\u166a\7\u030f")
        buf.write("\2\2\u166a\u166f\5\u0484\u0243\2\u166b\u166c\6\u015c\u009a")
        buf.write("\2\u166c\u166d\7\u0310\2\2\u166d\u166f\5\u0484\u0243\2")
        buf.write("\u166e\u1668\3\2\2\2\u166e\u166b\3\2\2\2\u166f\u02b7\3")
        buf.write("\2\2\2\u1670\u1671\7\34\2\2\u1671\u1673\7\u030a\2\2\u1672")
        buf.write("\u1674\7\u0091\2\2\u1673\u1672\3\2\2\2\u1673\u1674\3\2")
        buf.write("\2\2\u1674\u1675\3\2\2\2\u1675\u1676\5\u02c6\u0164\2\u1676")
        buf.write("\u1679\7\u030b\2\2\u1677\u1678\6\u015d\u009b\2\u1678\u167a")
        buf.write("\5\u02be\u0160\2\u1679\u1677\3\2\2\2\u1679\u167a\3\2\2")
        buf.write("\2\u167a\u16f4\3\2\2\2\u167b\u167c\tX\2\2\u167c\u167d")
        buf.write("\7\u030a\2\2\u167d\u167e\5\u02c6\u0164\2\u167e\u1681\7")
        buf.write("\u030b\2\2\u167f\u1680\6\u015d\u009c\2\u1680\u1682\5\u02be")
        buf.write("\u0160\2\u1681\u167f\3\2\2\2\u1681\u1682\3\2\2\2\u1682")
        buf.write("\u16f4\3\2\2\2\u1683\u1684\6\u015d\u009d\2\u1684\u16f4")
        buf.write("\5\u02c4\u0163\2\u1685\u1686\7a\2\2\u1686\u1688\7\u030a")
        buf.write("\2\2\u1687\u1689\7\f\2\2\u1688\u1687\3\2\2\2\u1688\u1689")
        buf.write("\3\2\2\2\u1689\u168a\3\2\2\2\u168a\u168b\7\u02fa\2\2\u168b")
        buf.write("\u168e\7\u030b\2\2\u168c\u168d\6\u015d\u009e\2\u168d\u168f")
        buf.write("\5\u02be\u0160\2\u168e\u168c\3\2\2\2\u168e\u168f\3\2\2")
        buf.write("\2\u168f\u16f4\3\2\2\2\u1690\u1691\7a\2\2\u1691\u1699")
        buf.write("\7\u030a\2\2\u1692\u1694\7\f\2\2\u1693\u1692\3\2\2\2\u1693")
        buf.write("\u1694\3\2\2\2\u1694\u1695\3\2\2\2\u1695\u169a\7\u02fa")
        buf.write("\2\2\u1696\u169a\5\u02c6\u0164\2\u1697\u1698\7\u0091\2")
        buf.write("\2\u1698\u169a\5\u02f6\u017c\2\u1699\u1693\3\2\2\2\u1699")
        buf.write("\u1696\3\2\2\2\u1699\u1697\3\2\2\2\u169a\u169b\3\2\2\2")
        buf.write("\u169b\u169e\7\u030b\2\2\u169c\u169d\6\u015d\u009f\2\u169d")
        buf.write("\u169f\5\u02be\u0160\2\u169e\u169c\3\2\2\2\u169e\u169f")
        buf.write("\3\2\2\2\u169f\u16f4\3\2\2\2\u16a0\u16a1\7\u015b\2\2\u16a1")
        buf.write("\u16a3\7\u030a\2\2\u16a2\u16a4\7\u0091\2\2\u16a3\u16a2")
        buf.write("\3\2\2\2\u16a3\u16a4\3\2\2\2\u16a4\u16a5\3\2\2\2\u16a5")
        buf.write("\u16a6\5\u02c6\u0164\2\u16a6\u16a9\7\u030b\2\2\u16a7\u16a8")
        buf.write("\6\u015d\u00a0\2\u16a8\u16aa\5\u02be\u0160\2\u16a9\u16a7")
        buf.write("\3\2\2\2\u16a9\u16aa\3\2\2\2\u16aa\u16f4\3\2\2\2\u16ab")
        buf.write("\u16ac\7\u0148\2\2\u16ac\u16ae\7\u030a\2\2\u16ad\u16af")
        buf.write("\7\u0091\2\2\u16ae\u16ad\3\2\2\2\u16ae\u16af\3\2\2\2\u16af")
        buf.write("\u16b0\3\2\2\2\u16b0\u16b1\5\u02c6\u0164\2\u16b1\u16b4")
        buf.write("\7\u030b\2\2\u16b2\u16b3\6\u015d\u00a1\2\u16b3\u16b5\5")
        buf.write("\u02be\u0160\2\u16b4\u16b2\3\2\2\2\u16b4\u16b5\3\2\2\2")
        buf.write("\u16b5\u16f4\3\2\2\2\u16b6\u16b7\7\u0229\2\2\u16b7\u16b8")
        buf.write("\7\u030a\2\2\u16b8\u16b9\5\u02c6\u0164\2\u16b9\u16bc\7")
        buf.write("\u030b\2\2\u16ba\u16bb\6\u015d\u00a2\2\u16bb\u16bd\5\u02be")
        buf.write("\u0160\2\u16bc\u16ba\3\2\2\2\u16bc\u16bd\3\2\2\2\u16bd")
        buf.write("\u16f4\3\2\2\2\u16be\u16bf\7\u027a\2\2\u16bf\u16c0\7\u030a")
        buf.write("\2\2\u16c0\u16c1\5\u02c6\u0164\2\u16c1\u16c4\7\u030b\2")
        buf.write("\2\u16c2\u16c3\6\u015d\u00a3\2\u16c3\u16c5\5\u02be\u0160")
        buf.write("\2\u16c4\u16c2\3\2\2\2\u16c4\u16c5\3\2\2\2\u16c5\u16f4")
        buf.write("\3\2\2\2\u16c6\u16c7\7\u0226\2\2\u16c7\u16c8\7\u030a\2")
        buf.write("\2\u16c8\u16c9\5\u02c6\u0164\2\u16c9\u16cc\7\u030b\2\2")
        buf.write("\u16ca\u16cb\6\u015d\u00a4\2\u16cb\u16cd\5\u02be\u0160")
        buf.write("\2\u16cc\u16ca\3\2\2\2\u16cc\u16cd\3\2\2\2\u16cd\u16f4")
        buf.write("\3\2\2\2\u16ce\u16cf\7\u027d\2\2\u16cf\u16d0\7\u030a\2")
        buf.write("\2\u16d0\u16d1\5\u02c6\u0164\2\u16d1\u16d4\7\u030b\2\2")
        buf.write("\u16d2\u16d3\6\u015d\u00a5\2\u16d3\u16d5\5\u02be\u0160")
        buf.write("\2\u16d4\u16d2\3\2\2\2\u16d4\u16d5\3\2\2\2\u16d5\u16f4")
        buf.write("\3\2\2\2\u16d6\u16d7\7\u0236\2\2\u16d7\u16d9\7\u030a\2")
        buf.write("\2\u16d8\u16da\7\u0091\2\2\u16d9\u16d8\3\2\2\2\u16d9\u16da")
        buf.write("\3\2\2\2\u16da\u16db\3\2\2\2\u16db\u16dc\5\u02c6\u0164")
        buf.write("\2\u16dc\u16df\7\u030b\2\2\u16dd\u16de\6\u015d\u00a6\2")
        buf.write("\u16de\u16e0\5\u02be\u0160\2\u16df\u16dd\3\2\2\2\u16df")
        buf.write("\u16e0\3\2\2\2\u16e0\u16f4\3\2\2\2\u16e1\u16e2\7\u00dc")
        buf.write("\2\2\u16e2\u16e4\7\u030a\2\2\u16e3\u16e5\7\u0091\2\2\u16e4")
        buf.write("\u16e3\3\2\2\2\u16e4\u16e5\3\2\2\2\u16e5\u16e6\3\2\2\2")
        buf.write("\u16e6\u16e8\5\u02f6\u017c\2\u16e7\u16e9\5\u014a\u00a6")
        buf.write("\2\u16e8\u16e7\3\2\2\2\u16e8\u16e9\3\2\2\2\u16e9\u16ec")
        buf.write("\3\2\2\2\u16ea\u16eb\7\u01f5\2\2\u16eb\u16ed\5\u0486\u0244")
        buf.write("\2\u16ec\u16ea\3\2\2\2\u16ec\u16ed\3\2\2\2\u16ed\u16ee")
        buf.write("\3\2\2\2\u16ee\u16f1\7\u030b\2\2\u16ef\u16f0\6\u015d\u00a7")
        buf.write("\2\u16f0\u16f2\5\u02be\u0160\2\u16f1\u16ef\3\2\2\2\u16f1")
        buf.write("\u16f2\3\2\2\2\u16f2\u16f4\3\2\2\2\u16f3\u1670\3\2\2\2")
        buf.write("\u16f3\u167b\3\2\2\2\u16f3\u1683\3\2\2\2\u16f3\u1685\3")
        buf.write("\2\2\2\u16f3\u1690\3\2\2\2\u16f3\u16a0\3\2\2\2\u16f3\u16ab")
        buf.write("\3\2\2\2\u16f3\u16b6\3\2\2\2\u16f3\u16be\3\2\2\2\u16f3")
        buf.write("\u16c6\3\2\2\2\u16f3\u16ce\3\2\2\2\u16f3\u16d6\3\2\2\2")
        buf.write("\u16f3\u16e1\3\2\2\2\u16f4\u02b9\3\2\2\2\u16f5\u16f6\7")
        buf.write("\u02a2\2\2\u16f6\u16f7\7\u030a\2\2\u16f7\u16f8\5\u02f6")
        buf.write("\u017c\2\u16f8\u16f9\7\u030b\2\2\u16f9\u02bb\3\2\2\2\u16fa")
        buf.write("\u16fb\tY\2\2\u16fb\u16fc\5\u04a6\u0254\2\u16fc\u16fd")
        buf.write("\5\u02be\u0160\2\u16fd\u1725\3\2\2\2\u16fe\u16ff\7\u02b2")
        buf.write("\2\2\u16ff\u1700\5\u0306\u0184\2\u1700\u1701\5\u02be\u0160")
        buf.write("\2\u1701\u1725\3\2\2\2\u1702\u1703\tZ\2\2\u1703\u1704")
        buf.write("\7\u030a\2\2\u1704\u1706\5\u02a6\u0154\2\u1705\u1707\5")
        buf.write("\u02c0\u0161\2\u1706\u1705\3\2\2\2\u1706\u1707\3\2\2\2")
        buf.write("\u1707\u1708\3\2\2\2\u1708\u170a\7\u030b\2\2\u1709\u170b")
        buf.write("\5\u02c2\u0162\2\u170a\u1709\3\2\2\2\u170a\u170b\3\2\2")
        buf.write("\2\u170b\u170c\3\2\2\2\u170c\u170d\5\u02be\u0160\2\u170d")
        buf.write("\u1725\3\2\2\2\u170e\u170f\t[\2\2\u170f\u1711\5\u0304")
        buf.write("\u0183\2\u1710\u1712\5\u02c2\u0162\2\u1711\u1710\3\2\2")
        buf.write("\2\u1711\u1712\3\2\2\2\u1712\u1713\3\2\2\2\u1713\u1714")
        buf.write("\5\u02be\u0160\2\u1714\u1725\3\2\2\2\u1715\u1716\7\u02b1")
        buf.write("\2\2\u1716\u1717\7\u030a\2\2\u1717\u1718\5\u02a6\u0154")
        buf.write("\2\u1718\u1719\7\u0307\2\2\u1719\u171a\5\u02b2\u015a\2")
        buf.write("\u171a\u171d\7\u030b\2\2\u171b\u171c\7\u00cd\2\2\u171c")
        buf.write("\u171e\t\\\2\2\u171d\u171b\3\2\2\2\u171d\u171e\3\2\2\2")
        buf.write("\u171e\u1720\3\2\2\2\u171f\u1721\5\u02c2\u0162\2\u1720")
        buf.write("\u171f\3\2\2\2\u1720\u1721\3\2\2\2\u1721\u1722\3\2\2\2")
        buf.write("\u1722\u1723\5\u02be\u0160\2\u1723\u1725\3\2\2\2\u1724")
        buf.write("\u16fa\3\2\2\2\u1724\u16fe\3\2\2\2\u1724\u1702\3\2\2\2")
        buf.write("\u1724\u170e\3\2\2\2\u1724\u1715\3\2\2\2\u1725\u02bd\3")
        buf.write("\2\2\2\u1726\u1729\7\u02b5\2\2\u1727\u172a\5\u0466\u0234")
        buf.write("\2\u1728\u172a\5\u0130\u0099\2\u1729\u1727\3\2\2\2\u1729")
        buf.write("\u1728\3\2\2\2\u172a\u02bf\3\2\2\2\u172b\u172e\7\u0307")
        buf.write("\2\2\u172c\u172f\5\u047a\u023e\2\u172d\u172f\7\u0315\2")
        buf.write("\2\u172e\u172c\3\2\2\2\u172e\u172d\3\2\2\2\u172f\u1732")
        buf.write("\3\2\2\2\u1730\u1731\7\u0307\2\2\u1731\u1733\5\u02a6\u0154")
        buf.write("\2\u1732\u1730\3\2\2\2\u1732\u1733\3\2\2\2\u1733\u02c1")
        buf.write("\3\2\2\2\u1734\u1735\t]\2\2\u1735\u1736\7\u02b3\2\2\u1736")
        buf.write("\u02c3\3\2\2\2\u1737\u1738\7\u029d\2\2\u1738\u1739\7\u030a")
        buf.write("\2\2\u1739\u173a\5\u02c6\u0164\2\u173a\u173c\7\u030b\2")
        buf.write("\2\u173b\u173d\5\u02be\u0160\2\u173c\u173b\3\2\2\2\u173c")
        buf.write("\u173d\3\2\2\2\u173d\u1748\3\2\2\2\u173e\u173f\7\u029c")
        buf.write("\2\2\u173f\u1740\7\u030a\2\2\u1740\u1741\5\u02c6\u0164")
        buf.write("\2\u1741\u1742\7\u0307\2\2\u1742\u1743\5\u02c6\u0164\2")
        buf.write("\u1743\u1745\7\u030b\2\2\u1744\u1746\5\u02be\u0160\2\u1745")
        buf.write("\u1744\3\2\2\2\u1745\u1746\3\2\2\2\u1746\u1748\3\2\2\2")
        buf.write("\u1747\u1737\3\2\2\2\u1747\u173e\3\2\2\2\u1748\u02c5\3")
        buf.write("\2\2\2\u1749\u174b\7\f\2\2\u174a\u1749\3\2\2\2\u174a\u174b")
        buf.write("\3\2\2\2\u174b\u174c\3\2\2\2\u174c\u174d\5\u02a6\u0154")
        buf.write("\2\u174d\u02c7\3\2\2\2\u174e\u1754\5\u02ca\u0166\2\u174f")
        buf.write("\u1750\7\u030a\2\2\u1750\u1751\5\u02ca\u0166\2\u1751\u1752")
        buf.write("\7\u030b\2\2\u1752\u1754\3\2\2\2\u1753\u174e\3\2\2\2\u1753")
        buf.write("\u174f\3\2\2\2\u1754\u02c9\3\2\2\2\u1755\u175a\5\u0472")
        buf.write("\u023a\2\u1756\u1757\7\u0307\2\2\u1757\u1759\5\u0472\u023a")
        buf.write("\2\u1758\u1756\3\2\2\2\u1759\u175c\3\2\2\2\u175a\u1758")
        buf.write("\3\2\2\2\u175a\u175b\3\2\2\2\u175b\u02cb\3\2\2\2\u175c")
        buf.write("\u175a\3\2\2\2\u175d\u175e\7\u00fd\2\2\u175e\u175f\7+")
        buf.write("\2\2\u175f\u176d\7\u015c\2\2\u1760\u1761\7\u00fd\2\2\u1761")
        buf.write("\u1762\7\u0169\2\2\u1762\u1763\7\u010d\2\2\u1763\u1767")
        buf.write("\7\u015c\2\2\u1764\u1765\7\u0287\2\2\u1765\u1766\7\u01b0")
        buf.write("\2\2\u1766\u1768\7\u00b2\2\2\u1767\u1764\3\2\2\2\u1767")
        buf.write("\u1768\3\2\2\2\u1768\u176d\3\2\2\2\u1769\u176a\7\u0287")
        buf.write("\2\2\u176a\u176b\7\u01b0\2\2\u176b\u176d\7\u00b2\2\2\u176c")
        buf.write("\u175d\3\2\2\2\u176c\u1760\3\2\2\2\u176c\u1769\3\2\2\2")
        buf.write("\u176d\u02cd\3\2\2\2\u176e\u176f\7>\2\2\u176f\u1770\7")
        buf.write("\u030a\2\2\u1770\u1773\5\u02f6\u017c\2\u1771\u1772\7\u026f")
        buf.write("\2\2\u1772\u1774\5\u03aa\u01d6\2\u1773\u1771\3\2\2\2\u1773")
        buf.write("\u1774\3\2\2\2\u1774\u1775\3\2\2\2\u1775\u1776\7\u030b")
        buf.write("\2\2\u1776\u1880\3\2\2\2\u1777\u1779\7k\2\2\u1778\u177a")
        buf.write("\5\u04a6\u0254\2\u1779\u1778\3\2\2\2\u1779\u177a\3\2\2")
        buf.write("\2\u177a\u1880\3\2\2\2\u177b\u177c\7v\2\2\u177c\u1880")
        buf.write("\5\u0304\u0183\2\u177d\u177e\7|\2\2\u177e\u1880\5\u0304")
        buf.write("\u0183\2\u177f\u1780\7\u00e7\2\2\u1780\u1880\5\u0304\u0183")
        buf.write("\2\u1781\u1782\7\u00f4\2\2\u1782\u1783\7\u030a\2\2\u1783")
        buf.write("\u1784\5\u02a6\u0154\2\u1784\u1785\7\u0307\2\2\u1785\u1786")
        buf.write("\5\u02a6\u0154\2\u1786\u1787\7\u0307\2\2\u1787\u1788\5")
        buf.write("\u02a6\u0154\2\u1788\u1789\7\u0307\2\2\u1789\u178a\5\u02a6")
        buf.write("\u0154\2\u178a\u178b\7\u030b\2\2\u178b\u1880\3\2\2\2\u178c")
        buf.write("\u178d\7\u00f9\2\2\u178d\u178e\7\u030a\2\2\u178e\u1791")
        buf.write("\5\u02a6\u0154\2\u178f\u1790\7\u0307\2\2\u1790\u1792\5")
        buf.write("\u02a6\u0154\2\u1791\u178f\3\2\2\2\u1792\u1793\3\2\2\2")
        buf.write("\u1793\u1791\3\2\2\2\u1793\u1794\3\2\2\2\u1794\u1795\3")
        buf.write("\2\2\2\u1795\u1796\7\u030b\2\2\u1796\u1880\3\2\2\2\u1797")
        buf.write("\u1798\7\u0112\2\2\u1798\u1799\7\u030a\2\2\u1799\u179a")
        buf.write("\5\u02a6\u0154\2\u179a\u179b\7\u0307\2\2\u179b\u179c\5")
        buf.write("\u02a6\u0154\2\u179c\u179d\7\u030b\2\2\u179d\u1880\3\2")
        buf.write("\2\2\u179e\u179f\7\u0159\2\2\u179f\u1880\5\u0304\u0183")
        buf.write("\2\u17a0\u17a1\7\u0160\2\2\u17a1\u1880\5\u0304\u0183\2")
        buf.write("\u17a2\u17a3\7\u01e0\2\2\u17a3\u17a4\7\u030a\2\2\u17a4")
        buf.write("\u17a5\5\u02a6\u0154\2\u17a5\u17a6\7\u0307\2\2\u17a6\u17a7")
        buf.write("\5\u02a6\u0154\2\u17a7\u17a8\7\u030b\2\2\u17a8\u1880\3")
        buf.write("\2\2\2\u17a9\u17aa\7\u01f1\2\2\u17aa\u1880\5\u0304\u0183")
        buf.write("\2\u17ab\u17ac\7\u024c\2\2\u17ac\u1880\5\u0304\u0183\2")
        buf.write("\u17ad\u17ae\7\u0249\2\2\u17ae\u17af\7\u030a\2\2\u17af")
        buf.write("\u17b2\5\u02a6\u0154\2\u17b0\u17b1\7\u0307\2\2\u17b1\u17b3")
        buf.write("\5\u02a6\u0154\2\u17b2\u17b0\3\2\2\2\u17b2\u17b3\3\2\2")
        buf.write("\2\u17b3\u17b4\3\2\2\2\u17b4\u17b5\7\u030b\2\2\u17b5\u1880")
        buf.write("\3\2\2\2\u17b6\u1880\5\u02dc\u016f\2\u17b7\u17b8\7\u026c")
        buf.write("\2\2\u17b8\u1880\5\u04a6\u0254\2\u17b9\u17ba\7\u0274\2")
        buf.write("\2\u17ba\u1880\5\u0304\u0183\2\u17bb\u17bc\7\u0292\2\2")
        buf.write("\u17bc\u1880\5\u0304\u0183\2\u17bd\u17be\t^\2\2\u17be")
        buf.write("\u17bf\7\u030a\2\2\u17bf\u17c0\5\u02a6\u0154\2\u17c0\u17c6")
        buf.write("\7\u0307\2\2\u17c1\u17c7\5\u02a6\u0154\2\u17c2\u17c3\7")
        buf.write("\u00f9\2\2\u17c3\u17c4\5\u02a6\u0154\2\u17c4\u17c5\5\u02fe")
        buf.write("\u0180\2\u17c5\u17c7\3\2\2\2\u17c6\u17c1\3\2\2\2\u17c6")
        buf.write("\u17c2\3\2\2\2\u17c7\u17c8\3\2\2\2\u17c8\u17c9\7\u030b")
        buf.write("\2\2\u17c9\u1880\3\2\2\2\u17ca\u17cc\7f\2\2\u17cb\u17cd")
        buf.write("\5\u04a6\u0254\2\u17cc\u17cb\3\2\2\2\u17cc\u17cd\3\2\2")
        buf.write("\2\u17cd\u1880\3\2\2\2\u17ce\u17d0\7n\2\2\u17cf\u17d1")
        buf.write("\5\u02d2\u016a\2\u17d0\u17cf\3\2\2\2\u17d0\u17d1\3\2\2")
        buf.write("\2\u17d1\u1880\3\2\2\2\u17d2\u17d3\t_\2\2\u17d3\u17d4")
        buf.write("\7\u030a\2\2\u17d4\u17d5\5\u02a6\u0154\2\u17d5\u17d6\7")
        buf.write("\u0307\2\2\u17d6\u17d7\7\u00f9\2\2\u17d7\u17d8\5\u02a6")
        buf.write("\u0154\2\u17d8\u17d9\5\u02fe\u0180\2\u17d9\u17da\7\u030b")
        buf.write("\2\2\u17da\u1880\3\2\2\2\u17db\u17dc\7\u00b8\2\2\u17dc")
        buf.write("\u17dd\7\u030a\2\2\u17dd\u17de\5\u02fe\u0180\2\u17de\u17df")
        buf.write("\7\u00cd\2\2\u17df\u17e0\5\u02a6\u0154\2\u17e0\u17e1\7")
        buf.write("\u030b\2\2\u17e1\u1880\3\2\2\2\u17e2\u17e3\7\u00d7\2\2")
        buf.write("\u17e3\u17e4\7\u030a\2\2\u17e4\u17e5\5\u02da\u016e\2\u17e5")
        buf.write("\u17e6\7\u0307\2\2\u17e6\u17e7\5\u02a6\u0154\2\u17e7\u17e8")
        buf.write("\7\u030b\2\2\u17e8\u1880\3\2\2\2\u17e9\u17eb\7\u0176\2")
        buf.write("\2\u17ea\u17ec\5\u02d2\u016a\2\u17eb\u17ea\3\2\2\2\u17eb")
        buf.write("\u17ec\3\2\2\2\u17ec\u1880\3\2\2\2\u17ed\u17ee\7\u01a0")
        buf.write("\2\2\u17ee\u17ef\7\u030a\2\2\u17ef\u17f0\5\u02b0\u0159")
        buf.write("\2\u17f0\u17f1\7\u00fd\2\2\u17f1\u17f2\5\u02a6\u0154\2")
        buf.write("\u17f2\u17f3\7\u030b\2\2\u17f3\u1880\3\2\2\2\u17f4\u1880")
        buf.write("\5\u02de\u0170\2\u17f5\u17f7\7\u023b\2\2\u17f6\u17f8\5")
        buf.write("\u02d2\u016a\2\u17f7\u17f6\3\2\2\2\u17f7\u17f8\3\2\2\2")
        buf.write("\u17f8\u1880\3\2\2\2\u17f9\u17fa\t`\2\2\u17fa\u17fb\7")
        buf.write("\u030a\2\2\u17fb\u17fc\5\u0300\u0181\2\u17fc\u17fd\7\u0307")
        buf.write("\2\2\u17fd\u17fe\5\u02a6\u0154\2\u17fe\u17ff\7\u0307\2")
        buf.write("\2\u17ff\u1800\5\u02a6\u0154\2\u1800\u1801\7\u030b\2\2")
        buf.write("\u1801\u1880\3\2\2\2\u1802\u1804\7\u0270\2\2\u1803\u1805")
        buf.write("\5\u04a6\u0254\2\u1804\u1803\3\2\2\2\u1804\u1805\3\2\2")
        buf.write("\2\u1805\u1880\3\2\2\2\u1806\u1808\7\u0272\2\2\u1807\u1809")
        buf.write("\5\u02d2\u016a\2\u1808\u1807\3\2\2\2\u1808\u1809\3\2\2")
        buf.write("\2\u1809\u1880\3\2\2\2\u180a\u180c\7\u0271\2\2\u180b\u180d")
        buf.write("\5\u02d2\u016a\2\u180c\u180b\3\2\2\2\u180c\u180d\3\2\2")
        buf.write("\2\u180d\u1880\3\2\2\2\u180e\u180f\7\25\2\2\u180f\u1880")
        buf.write("\5\u0304\u0183\2\u1810\u1811\7<\2\2\u1811\u1880\5\u0304")
        buf.write("\u0183\2\u1812\u1813\7E\2\2\u1813\u1880\5\u0302\u0182")
        buf.write("\2\u1814\u1815\7H\2\2\u1815\u1880\5\u0304\u0183\2\u1816")
        buf.write("\u1817\7o\2\2\u1817\u1880\5\u04a6\u0254\2\u1818\u1819")
        buf.write("\7\u00e9\2\2\u1819\u181a\7\u030a\2\2\u181a\u181b\5\u02a6")
        buf.write("\u0154\2\u181b\u181c\7\u0307\2\2\u181c\u181d\5\u02a6\u0154")
        buf.write("\2\u181d\u181e\7\u0307\2\2\u181e\u181f\5\u02a6\u0154\2")
        buf.write("\u181f\u1820\7\u030b\2\2\u1820\u1880\3\2\2\2\u1821\u1822")
        buf.write("\7\u00cb\2\2\u1822\u1823\7\u030a\2\2\u1823\u1824\5\u02a6")
        buf.write("\u0154\2\u1824\u1825\7\u0307\2\2\u1825\u1828\5\u02a6\u0154")
        buf.write("\2\u1826\u1827\7\u0307\2\2\u1827\u1829\5\u02a6\u0154\2")
        buf.write("\u1828\u1826\3\2\2\2\u1828\u1829\3\2\2\2\u1829\u182a\3")
        buf.write("\2\2\2\u182a\u182b\7\u030b\2\2\u182b\u1880\3\2\2\2\u182c")
        buf.write("\u182d\7\u0153\2\2\u182d\u1880\5\u0304\u0183\2\u182e\u182f")
        buf.write("\7\u015f\2\2\u182f\u1830\7\u030a\2\2\u1830\u1831\5\u02a6")
        buf.write("\u0154\2\u1831\u1832\7\u0307\2\2\u1832\u1833\5\u02a6\u0154")
        buf.write("\2\u1833\u1834\7\u030b\2\2\u1834\u1880\3\2\2\2\u1835\u1836")
        buf.write("\6\u0168\u00a8\2\u1836\u1837\7\u0180\2\2\u1837\u1838\7")
        buf.write("\u030a\2\2\u1838\u1839\5\u048a\u0246\2\u1839\u183a\7\u030b")
        buf.write("\2\2\u183a\u1880\3\2\2\2\u183b\u183c\6\u0168\u00a9\2\u183c")
        buf.write("\u183d\7\u0198\2\2\u183d\u1880\5\u0304\u0183\2\u183e\u183f")
        buf.write("\7\u01af\2\2\u183f\u1880\5\u0304\u0183\2\u1840\u1841\7")
        buf.write("\u01cb\2\2\u1841\u1842\7\u030a\2\2\u1842\u1843\5\u02a6")
        buf.write("\u0154\2\u1843\u1844\7\u0307\2\2\u1844\u1845\5\u02a6\u0154")
        buf.write("\2\u1845\u1846\7\u030b\2\2\u1846\u1880\3\2\2\2\u1847\u1848")
        buf.write("\7\u01cc\2\2\u1848\u1849\7\u030a\2\2\u1849\u184a\5\u02a6")
        buf.write("\u0154\2\u184a\u184b\7\u0307\2\2\u184b\u184c\5\u02a6\u0154")
        buf.write("\2\u184c\u184d\7\u0307\2\2\u184d\u184e\5\u02a6\u0154\2")
        buf.write("\u184e\u184f\7\u030b\2\2\u184f\u1880\3\2\2\2\u1850\u1851")
        buf.write("\7\u01de\2\2\u1851\u1880\5\u0304\u0183\2\u1852\u1853\7")
        buf.write("\u01e7\2\2\u1853\u1880\5\u04a6\u0254\2\u1854\u1855\7\u0257")
        buf.write("\2\2\u1855\u1856\7\u030a\2\2\u1856\u1857\5\u02a6\u0154")
        buf.write("\2\u1857\u1858\7\u0307\2\2\u1858\u1859\5\u02a6\u0154\2")
        buf.write("\u1859\u185a\7\u030b\2\2\u185a\u1880\3\2\2\2\u185b\u185c")
        buf.write("\7\u0282\2\2\u185c\u185d\7\u030a\2\2\u185d\u1860\5\u02a6")
        buf.write("\u0154\2\u185e\u185f\7\u0307\2\2\u185f\u1861\5\u02a6\u0154")
        buf.write("\2\u1860\u185e\3\2\2\2\u1860\u1861\3\2\2\2\u1861\u1862")
        buf.write("\3\2\2\2\u1862\u1863\7\u030b\2\2\u1863\u1880\3\2\2\2\u1864")
        buf.write("\u1865\7\u0283\2\2\u1865\u1866\7\u030a\2\2\u1866\u187a")
        buf.write("\5\u02a6\u0154\2\u1867\u1868\7\23\2\2\u1868\u1869\7>\2")
        buf.write("\2\u1869\u186b\5\u03a6\u01d4\2\u186a\u1867\3\2\2\2\u186a")
        buf.write("\u186b\3\2\2\2\u186b\u186e\3\2\2\2\u186c\u186d\6\u0168")
        buf.write("\u00aa\2\u186d\u186f\5\u02d6\u016c\2\u186e\u186c\3\2\2")
        buf.write("\2\u186e\u186f\3\2\2\2\u186f\u187b\3\2\2\2\u1870\u1871")
        buf.write("\7\23\2\2\u1871\u1872\7\"\2\2\u1872\u187b\5\u03a6\u01d4")
        buf.write("\2\u1873\u1874\7\u0307\2\2\u1874\u1875\5\u0476\u023c\2")
        buf.write("\u1875\u1876\7\u0307\2\2\u1876\u1877\5\u0476\u023c\2\u1877")
        buf.write("\u1878\7\u0307\2\2\u1878\u1879\5\u0476\u023c\2\u1879\u187b")
        buf.write("\3\2\2\2\u187a\u186a\3\2\2\2\u187a\u1870\3\2\2\2\u187a")
        buf.write("\u1873\3\2\2\2\u187b\u187c\3\2\2\2\u187c\u187d\7\u030b")
        buf.write("\2\2\u187d\u1880\3\2\2\2\u187e\u1880\5\u02d0\u0169\2\u187f")
        buf.write("\u176e\3\2\2\2\u187f\u1777\3\2\2\2\u187f\u177b\3\2\2\2")
        buf.write("\u187f\u177d\3\2\2\2\u187f\u177f\3\2\2\2\u187f\u1781\3")
        buf.write("\2\2\2\u187f\u178c\3\2\2\2\u187f\u1797\3\2\2\2\u187f\u179e")
        buf.write("\3\2\2\2\u187f\u17a0\3\2\2\2\u187f\u17a2\3\2\2\2\u187f")
        buf.write("\u17a9\3\2\2\2\u187f\u17ab\3\2\2\2\u187f\u17ad\3\2\2\2")
        buf.write("\u187f\u17b6\3\2\2\2\u187f\u17b7\3\2\2\2\u187f\u17b9\3")
        buf.write("\2\2\2\u187f\u17bb\3\2\2\2\u187f\u17bd\3\2\2\2\u187f\u17ca")
        buf.write("\3\2\2\2\u187f\u17ce\3\2\2\2\u187f\u17d2\3\2\2\2\u187f")
        buf.write("\u17db\3\2\2\2\u187f\u17e2\3\2\2\2\u187f\u17e9\3\2\2\2")
        buf.write("\u187f\u17ed\3\2\2\2\u187f\u17f4\3\2\2\2\u187f\u17f5\3")
        buf.write("\2\2\2\u187f\u17f9\3\2\2\2\u187f\u1802\3\2\2\2\u187f\u1806")
        buf.write("\3\2\2\2\u187f\u180a\3\2\2\2\u187f\u180e\3\2\2\2\u187f")
        buf.write("\u1810\3\2\2\2\u187f\u1812\3\2\2\2\u187f\u1814\3\2\2\2")
        buf.write("\u187f\u1816\3\2\2\2\u187f\u1818\3\2\2\2\u187f\u1821\3")
        buf.write("\2\2\2\u187f\u182c\3\2\2\2\u187f\u182e\3\2\2\2\u187f\u1835")
        buf.write("\3\2\2\2\u187f\u183b\3\2\2\2\u187f\u183e\3\2\2\2\u187f")
        buf.write("\u1840\3\2\2\2\u187f\u1847\3\2\2\2\u187f\u1850\3\2\2\2")
        buf.write("\u187f\u1852\3\2\2\2\u187f\u1854\3\2\2\2\u187f\u185b\3")
        buf.write("\2\2\2\u187f\u1864\3\2\2\2\u187f\u187e\3\2\2\2\u1880\u02cf")
        buf.write("\3\2\2\2\u1881\u1882\6\u0169\u00ab\2\u1882\u1883\7\\\2")
        buf.write("\2\u1883\u1884\7\u030a\2\2\u1884\u1885\5\u02a6\u0154\2")
        buf.write("\u1885\u1886\7\u0307\2\2\u1886\u1887\5\u02a6\u0154\2\u1887")
        buf.write("\u1888\7\u030b\2\2\u1888\u18a1\3\2\2\2\u1889\u188a\7\u00d5")
        buf.write("\2\2\u188a\u188c\7\u030a\2\2\u188b\u188d\5\u02f6\u017c")
        buf.write("\2\u188c\u188b\3\2\2\2\u188c\u188d\3\2\2\2\u188d\u188e")
        buf.write("\3\2\2\2\u188e\u18a1\7\u030b\2\2\u188f\u1890\7\u0119\2")
        buf.write("\2\u1890\u18a1\5\u0302\u0182\2\u1891\u1892\7\u0161\2\2")
        buf.write("\u1892\u18a1\5\u0302\u0182\2\u1893\u1894\7\u0162\2\2\u1894")
        buf.write("\u18a1\5\u0302\u0182\2\u1895\u1896\7\u0163\2\2\u1896\u18a1")
        buf.write("\5\u0302\u0182\2\u1897\u1898\7\u019d\2\2\u1898\u1899\7")
        buf.write("\u030a\2\2\u1899\u189a\5\u02a6\u0154\2\u189a\u189b\7\u0307")
        buf.write("\2\2\u189b\u189c\5\u02a6\u0154\2\u189c\u189d\7\u030b\2")
        buf.write("\2\u189d\u18a1\3\2\2\2\u189e\u189f\7\u019e\2\2\u189f\u18a1")
        buf.write("\5\u0302\u0182\2\u18a0\u1881\3\2\2\2\u18a0\u1889\3\2\2")
        buf.write("\2\u18a0\u188f\3\2\2\2\u18a0\u1891\3\2\2\2\u18a0\u1893")
        buf.write("\3\2\2\2\u18a0\u1895\3\2\2\2\u18a0\u1897\3\2\2\2\u18a0")
        buf.write("\u189e\3\2\2\2\u18a1\u02d1\3\2\2\2\u18a2\u18a4\7\u030a")
        buf.write("\2\2\u18a3\u18a5\5\u02d4\u016b\2\u18a4\u18a3\3\2\2\2\u18a4")
        buf.write("\u18a5\3\2\2\2\u18a5\u18a6\3\2\2\2\u18a6\u18a7\7\u030b")
        buf.write("\2\2\u18a7\u02d3\3\2\2\2\u18a8\u18a9\6\u016b\u00ac\2\u18a9")
        buf.write("\u18aa\7\u02ed\2\2\u18aa\u02d5\3\2\2\2\u18ab\u18b8\7\u0114")
        buf.write("\2\2\u18ac\u18ad\5\u0478\u023d\2\u18ad\u18ae\7\u02f9\2")
        buf.write("\2\u18ae\u18af\5\u0478\u023d\2\u18af\u18b9\3\2\2\2\u18b0")
        buf.write("\u18b5\5\u02d8\u016d\2\u18b1\u18b2\7\u0307\2\2\u18b2\u18b4")
        buf.write("\5\u02d8\u016d\2\u18b3\u18b1\3\2\2\2\u18b4\u18b7\3\2\2")
        buf.write("\2\u18b5\u18b3\3\2\2\2\u18b5\u18b6\3\2\2\2\u18b6\u18b9")
        buf.write("\3\2\2\2\u18b7\u18b5\3\2\2\2\u18b8\u18ac\3\2\2\2\u18b8")
        buf.write("\u18b0\3\2\2\2\u18b9\u02d7\3\2\2\2\u18ba\u18c0\5\u0478")
        buf.write("\u023d\2\u18bb\u18bd\t#\2\2\u18bc\u18be\7\u01de\2\2\u18bd")
        buf.write("\u18bc\3\2\2\2\u18bd\u18be\3\2\2\2\u18be\u18c1\3\2\2\2")
        buf.write("\u18bf\u18c1\7\u01de\2\2\u18c0\u18bb\3\2\2\2\u18c0\u18bf")
        buf.write("\3\2\2\2\u18c0\u18c1\3\2\2\2\u18c1\u02d9\3\2\2\2\u18c2")
        buf.write("\u18c3\ta\2\2\u18c3\u02db\3\2\2\2\u18c4\u18c5\7\u0255")
        buf.write("\2\2\u18c5\u18dd\7\u030a\2\2\u18c6\u18c9\5\u02a6\u0154")
        buf.write("\2\u18c7\u18c8\7\u00cd\2\2\u18c8\u18ca\5\u02a6\u0154\2")
        buf.write("\u18c9\u18c7\3\2\2\2\u18c9\u18ca\3\2\2\2\u18ca\u18de\3")
        buf.write("\2\2\2\u18cb\u18cd\7\u010f\2\2\u18cc\u18ce\5\u02a6\u0154")
        buf.write("\2\u18cd\u18cc\3\2\2\2\u18cd\u18ce\3\2\2\2\u18ce\u18cf")
        buf.write("\3\2\2\2\u18cf\u18d0\7\u00cd\2\2\u18d0\u18de\5\u02a6\u0154")
        buf.write("\2\u18d1\u18d3\7\u0251\2\2\u18d2\u18d4\5\u02a6\u0154\2")
        buf.write("\u18d3\u18d2\3\2\2\2\u18d3\u18d4\3\2\2\2\u18d4\u18d5\3")
        buf.write("\2\2\2\u18d5\u18d6\7\u00cd\2\2\u18d6\u18de\5\u02a6\u0154")
        buf.write("\2\u18d7\u18d9\7-\2\2\u18d8\u18da\5\u02a6\u0154\2\u18d9")
        buf.write("\u18d8\3\2\2\2\u18d9\u18da\3\2\2\2\u18da\u18db\3\2\2\2")
        buf.write("\u18db\u18dc\7\u00cd\2\2\u18dc\u18de\5\u02a6\u0154\2\u18dd")
        buf.write("\u18c6\3\2\2\2\u18dd\u18cb\3\2\2\2\u18dd\u18d1\3\2\2\2")
        buf.write("\u18dd\u18d7\3\2\2\2\u18de\u18df\3\2\2\2\u18df\u18e0\7")
        buf.write("\u030b\2\2\u18e0\u02dd\3\2\2\2\u18e1\u18e2\7\u0235\2\2")
        buf.write("\u18e2\u18e3\7\u030a\2\2\u18e3\u18f0\5\u02a6\u0154\2\u18e4")
        buf.write("\u18e5\7\u0307\2\2\u18e5\u18e8\5\u02a6\u0154\2\u18e6\u18e7")
        buf.write("\7\u0307\2\2\u18e7\u18e9\5\u02a6\u0154\2\u18e8\u18e6\3")
        buf.write("\2\2\2\u18e8\u18e9\3\2\2\2\u18e9\u18f1\3\2\2\2\u18ea\u18eb")
        buf.write("\7\u00cd\2\2\u18eb\u18ee\5\u02a6\u0154\2\u18ec\u18ed\7")
        buf.write("\u00ca\2\2\u18ed\u18ef\5\u02a6\u0154\2\u18ee\u18ec\3\2")
        buf.write("\2\2\u18ee\u18ef\3\2\2\2\u18ef\u18f1\3\2\2\2\u18f0\u18e4")
        buf.write("\3\2\2\2\u18f0\u18ea\3\2\2\2\u18f1\u18f2\3\2\2\2\u18f2")
        buf.write("\u18f3\7\u030b\2\2\u18f3\u02df\3\2\2\2\u18f4\u18f5\5\u0468")
        buf.write("\u0235\2\u18f5\u18f7\7\u030a\2\2\u18f6\u18f8\5\u02e2\u0172")
        buf.write("\2\u18f7\u18f6\3\2\2\2\u18f7\u18f8\3\2\2\2\u18f8\u18f9")
        buf.write("\3\2\2\2\u18f9\u18fa\7\u030b\2\2\u18fa\u1903\3\2\2\2\u18fb")
        buf.write("\u18fc\5\u0470\u0239\2\u18fc\u18fe\7\u030a\2\2\u18fd\u18ff")
        buf.write("\5\u02f6\u017c\2\u18fe\u18fd\3\2\2\2\u18fe\u18ff\3\2\2")
        buf.write("\2\u18ff\u1900\3\2\2\2\u1900\u1901\7\u030b\2\2\u1901\u1903")
        buf.write("\3\2\2\2\u1902\u18f4\3\2\2\2\u1902\u18fb\3\2\2\2\u1903")
        buf.write("\u02e1\3\2\2\2\u1904\u1909\5\u02e4\u0173\2\u1905\u1906")
        buf.write("\7\u0307\2\2\u1906\u1908\5\u02e4\u0173\2\u1907\u1905\3")
        buf.write("\2\2\2\u1908\u190b\3\2\2\2\u1909\u1907\3\2\2\2\u1909\u190a")
        buf.write("\3\2\2\2\u190a\u02e3\3\2\2\2\u190b\u1909\3\2\2\2\u190c")
        buf.write("\u190e\5\u02a6\u0154\2\u190d\u190f\5\u0166\u00b4\2\u190e")
        buf.write("\u190d\3\2\2\2\u190e\u190f\3\2\2\2\u190f\u02e5\3\2\2\2")
        buf.write("\u1910\u1913\5\u02e8\u0175\2\u1911\u1913\5\u02ea\u0176")
        buf.write("\2\u1912\u1910\3\2\2\2\u1912\u1911\3\2\2\2\u1913\u02e7")
        buf.write("\3\2\2\2\u1914\u1915\7\u0311\2\2\u1915\u1918\5\u049e\u0250")
        buf.write("\2\u1916\u1918\7\u0312\2\2\u1917\u1914\3\2\2\2\u1917\u1916")
        buf.write("\3\2\2\2\u1918\u02e9\3\2\2\2\u1919\u191b\7\u0313\2\2\u191a")
        buf.write("\u191c\5\u04ac\u0257\2\u191b\u191a\3\2\2\2\u191b\u191c")
        buf.write("\3\2\2\2\u191c\u191d\3\2\2\2\u191d\u191f\5\u049e\u0250")
        buf.write("\2\u191e\u1920\5\u0474\u023b\2\u191f\u191e\3\2\2\2\u191f")
        buf.write("\u1920\3\2\2\2\u1920\u02eb\3\2\2\2\u1921\u1922\6\u0177")
        buf.write("\u00ad\2\u1922\u1924\5\u046a\u0236\2\u1923\u1925\5\u0474")
        buf.write("\u023b\2\u1924\u1923\3\2\2\2\u1924\u1925\3\2\2\2\u1925")
        buf.write("\u192c\3\2\2\2\u1926\u1927\6\u0177\u00ae\2\u1927\u1929")
        buf.write("\5\u04a0\u0251\2\u1928\u192a\5\u0474\u023b\2\u1929\u1928")
        buf.write("\3\2\2\2\u1929\u192a\3\2\2\2\u192a\u192c\3\2\2\2\u192b")
        buf.write("\u1921\3\2\2\2\u192b\u1926\3\2\2\2\u192c\u1930\3\2\2\2")
        buf.write("\u192d\u192e\7\u0082\2\2\u192e\u1930\5\u0474\u023b\2\u192f")
        buf.write("\u192b\3\2\2\2\u192f\u192d\3\2\2\2\u1930\u02ed\3\2\2\2")
        buf.write("\u1931\u1932\7\u0284\2\2\u1932\u1933\5\u02a6\u0154\2\u1933")
        buf.write("\u02ef\3\2\2\2\u1934\u1935\7\u0248\2\2\u1935\u1936\5\u02a6")
        buf.write("\u0154\2\u1936\u02f1\3\2\2\2\u1937\u1938\7\u009c\2\2\u1938")
        buf.write("\u1939\5\u02a6\u0154\2\u1939\u02f3\3\2\2\2\u193a\u193c")
        buf.write("\7\"\2\2\u193b\u193d\5\u039c\u01cf\2\u193c\u193b\3\2\2")
        buf.write("\2\u193c\u193d\3\2\2\2\u193d\u1968\3\2\2\2\u193e\u1940")
        buf.write("\7>\2\2\u193f\u1941\5\u039c\u01cf\2\u1940\u193f\3\2\2")
        buf.write("\2\u1940\u1941\3\2\2\2\u1941\u1943\3\2\2\2\u1942\u1944")
        buf.write("\5\u03a0\u01d1\2\u1943\u1942\3\2\2\2\u1943\u1944\3\2\2")
        buf.write("\2\u1944\u1968\3\2\2\2\u1945\u1947\5\u0398\u01cd\2\u1946")
        buf.write("\u1948\5\u039c\u01cf\2\u1947\u1946\3\2\2\2\u1947\u1948")
        buf.write("\3\2\2\2\u1948\u1968\3\2\2\2\u1949\u194b\7\u0202\2\2\u194a")
        buf.write("\u194c\7\u00fb\2\2\u194b\u194a\3\2\2\2\u194b\u194c\3\2")
        buf.write("\2\2\u194c\u1968\3\2\2\2\u194d\u194f\7\u0266\2\2\u194e")
        buf.write("\u1950\7\u00fb\2\2\u194f\u194e\3\2\2\2\u194f\u1950\3\2")
        buf.write("\2\2\u1950\u1968\3\2\2\2\u1951\u1968\7v\2\2\u1952\u1954")
        buf.write("\7\u024c\2\2\u1953\u1955\5\u03a8\u01d5\2\u1954\u1953\3")
        buf.write("\2\2\2\u1954\u1955\3\2\2\2\u1955\u1968\3\2\2\2\u1956\u1958")
        buf.write("\7s\2\2\u1957\u1959\5\u03a8\u01d5\2\u1958\u1957\3\2\2")
        buf.write("\2\u1958\u1959\3\2\2\2\u1959\u1968\3\2\2\2\u195a\u195c")
        buf.write("\7\u0080\2\2\u195b\u195d\5\u0498\u024d\2\u195c\u195b\3")
        buf.write("\2\2\2\u195c\u195d\3\2\2\2\u195d\u1968\3\2\2\2\u195e\u195f")
        buf.write("\6\u017b\u00af\2\u195f\u1968\7\u0108\2\2\u1960\u1961\6")
        buf.write("\u017b\u00b0\2\u1961\u1968\5\u039a\u01ce\2\u1962\u1963")
        buf.write("\6\u017b\u00b1\2\u1963\u1965\7\u00c5\2\2\u1964\u1966\5")
        buf.write("\u049a\u024e\2\u1965\u1964\3\2\2\2\u1965\u1966\3\2\2\2")
        buf.write("\u1966\u1968\3\2\2\2\u1967\u193a\3\2\2\2\u1967\u193e\3")
        buf.write("\2\2\2\u1967\u1945\3\2\2\2\u1967\u1949\3\2\2\2\u1967\u194d")
        buf.write("\3\2\2\2\u1967\u1951\3\2\2\2\u1967\u1952\3\2\2\2\u1967")
        buf.write("\u1956\3\2\2\2\u1967\u195a\3\2\2\2\u1967\u195e\3\2\2\2")
        buf.write("\u1967\u1960\3\2\2\2\u1967\u1962\3\2\2\2\u1968\u02f5\3")
        buf.write("\2\2\2\u1969\u196e\5\u02a6\u0154\2\u196a\u196b\7\u0307")
        buf.write("\2\2\u196b\u196d\5\u02a6\u0154\2\u196c\u196a\3\2\2\2\u196d")
        buf.write("\u1970\3\2\2\2\u196e\u196c\3\2\2\2\u196e\u196f\3\2\2\2")
        buf.write("\u196f\u02f7\3\2\2\2\u1970\u196e\3\2\2\2\u1971\u1972\7")
        buf.write(">\2\2\u1972\u1975\7\u01fc\2\2\u1973\u1975\7<\2\2\u1974")
        buf.write("\u1971\3\2\2\2\u1974\u1973\3\2\2\2\u1975\u02f9\3\2\2\2")
        buf.write("\u1976\u1977\tb\2\2\u1977\u02fb\3\2\2\2\u1978\u1979\t")
        buf.write("c\2\2\u1979\u02fd\3\2\2\2\u197a\u197d\5\u0300\u0181\2")
        buf.write("\u197b\u197d\td\2\2\u197c\u197a\3\2\2\2\u197c\u197b\3")
        buf.write("\2\2\2\u197d\u02ff\3\2\2\2\u197e\u197f\te\2\2\u197f\u0301")
        buf.write("\3\2\2\2\u1980\u1981\7\u030a\2\2\u1981\u1982\5\u02f6\u017c")
        buf.write("\2\u1982\u1983\7\u030b\2\2\u1983\u0303\3\2\2\2\u1984\u1985")
        buf.write("\7\u030a\2\2\u1985\u1986\5\u02a6\u0154\2\u1986\u1987\7")
        buf.write("\u030b\2\2\u1987\u0305\3\2\2\2\u1988\u1989\7\u030a\2\2")
        buf.write("\u1989\u198a\5\u02b2\u015a\2\u198a\u198b\7\u030b\2\2\u198b")
        buf.write("\u0307\3\2\2\2\u198c\u1991\5\u030a\u0186\2\u198d\u198e")
        buf.write("\7\u0307\2\2\u198e\u1990\5\u030a\u0186\2\u198f\u198d\3")
        buf.write("\2\2\2\u1990\u1993\3\2\2\2\u1991\u198f\3\2\2\2\u1991\u1992")
        buf.write("\3\2\2\2\u1992\u0309\3\2\2\2\u1993\u1991\3\2\2\2\u1994")
        buf.write("\u1996\5\u02a6\u0154\2\u1995\u1997\5\u014c\u00a7\2\u1996")
        buf.write("\u1995\3\2\2\2\u1996\u1997\3\2\2\2\u1997\u030b\3\2\2\2")
        buf.write("\u1998\u199d\5\u030e\u0188\2\u1999\u199a\7\u0307\2\2\u199a")
        buf.write("\u199c\5\u030e\u0188\2\u199b\u1999\3\2\2\2\u199c\u199f")
        buf.write("\3\2\2\2\u199d\u199b\3\2\2\2\u199d\u199e\3\2\2\2\u199e")
        buf.write("\u030d\3\2\2\2\u199f\u199d\3\2\2\2\u19a0\u19a1\5\u02a6")
        buf.write("\u0154\2\u19a1\u030f\3\2\2\2\u19a2\u19a3\6\u0189\u00b2")
        buf.write("\2\u19a3\u19a4\7\u00ca\2\2\u19a4\u19a5\7;\2\2\u19a5\u19a6")
        buf.write("\5\u048c\u0247\2\u19a6\u0311\3\2\2\2\u19a7\u19b5\5\4\3")
        buf.write("\2\u19a8\u19b5\5\u0314\u018b\2\u19a9\u19b5\5\u0316\u018c")
        buf.write("\2\u19aa\u19b5\5\u031e\u0190\2\u19ab\u19b5\5\u0322\u0192")
        buf.write("\2\u19ac\u19b5\5\u0324\u0193\2\u19ad\u19b5\5\u032a\u0196")
        buf.write("\2\u19ae\u19b5\5\u032c\u0197\2\u19af\u19b5\5\u0348\u01a5")
        buf.write("\2\u19b0\u19b5\5\u0346\u01a4\2\u19b1\u19b5\5\u035a\u01ae")
        buf.write("\2\u19b2\u19b5\5\u035e\u01b0\2\u19b3\u19b5\5\u035c\u01af")
        buf.write("\2\u19b4\u19a7\3\2\2\2\u19b4\u19a8\3\2\2\2\u19b4\u19a9")
        buf.write("\3\2\2\2\u19b4\u19aa\3\2\2\2\u19b4\u19ab\3\2\2\2\u19b4")
        buf.write("\u19ac\3\2\2\2\u19b4\u19ad\3\2\2\2\u19b4\u19ae\3\2\2\2")
        buf.write("\u19b4\u19af\3\2\2\2\u19b4\u19b0\3\2\2\2\u19b4\u19b1\3")
        buf.write("\2\2\2\u19b4\u19b2\3\2\2\2\u19b4\u19b3\3\2\2\2\u19b5\u0313")
        buf.write("\3\2\2\2\u19b6\u19b7\7\u01dd\2\2\u19b7\u19b8\5\u02a6\u0154")
        buf.write("\2\u19b8\u0315\3\2\2\2\u19b9\u19ba\7\u00e9\2\2\u19ba\u19bb")
        buf.write("\5\u0318\u018d\2\u19bb\u19bc\7\u00a1\2\2\u19bc\u19bd\7")
        buf.write("\u00e9\2\2\u19bd\u0317\3\2\2\2\u19be\u19bf\5\u02a6\u0154")
        buf.write("\2\u19bf\u19c4\5\u031a\u018e\2\u19c0\u19c1\7\u009d\2\2")
        buf.write("\u19c1\u19c5\5\u0318\u018d\2\u19c2\u19c3\7\u009c\2\2\u19c3")
        buf.write("\u19c5\5\u031c\u018f\2\u19c4\u19c0\3\2\2\2\u19c4\u19c2")
        buf.write("\3\2\2\2\u19c4\u19c5\3\2\2\2\u19c5\u0319\3\2\2\2\u19c6")
        buf.write("\u19c7\7\u0248\2\2\u19c7\u19c8\5\u031c\u018f\2\u19c8\u031b")
        buf.write("\3\2\2\2\u19c9\u19ca\5\u0312\u018a\2\u19ca\u19cb\7\u0308")
        buf.write("\2\2\u19cb\u19cd\3\2\2\2\u19cc\u19c9\3\2\2\2\u19cd\u19ce")
        buf.write("\3\2\2\2\u19ce\u19cc\3\2\2\2\u19ce\u19cf\3\2\2\2\u19cf")
        buf.write("\u031d\3\2\2\2\u19d0\u19d2\7\65\2\2\u19d1\u19d3\5\u02a6")
        buf.write("\u0154\2\u19d2\u19d1\3\2\2\2\u19d2\u19d3\3\2\2\2\u19d3")
        buf.write("\u19d7\3\2\2\2\u19d4\u19d5\5\u02ee\u0178\2\u19d5\u19d6")
        buf.write("\5\u031a\u018e\2\u19d6\u19d8\3\2\2\2\u19d7\u19d4\3\2\2")
        buf.write("\2\u19d8\u19d9\3\2\2\2\u19d9\u19d7\3\2\2\2\u19d9\u19da")
        buf.write("\3\2\2\2\u19da\u19dc\3\2\2\2\u19db\u19dd\5\u0320\u0191")
        buf.write("\2\u19dc\u19db\3\2\2\2\u19dc\u19dd\3\2\2\2\u19dd\u19de")
        buf.write("\3\2\2\2\u19de\u19df\7\u00a1\2\2\u19df\u19e0\7\65\2\2")
        buf.write("\u19e0\u031f\3\2\2\2\u19e1\u19e2\7\u009c\2\2\u19e2\u19e3")
        buf.write("\5\u031c\u018f\2\u19e3\u0321\3\2\2\2\u19e4\u19e5\5\u0326")
        buf.write("\u0194\2\u19e5\u19e7\5\u0328\u0195\2\u19e6\u19e8\5\u045a")
        buf.write("\u022e\2\u19e7\u19e6\3\2\2\2\u19e7\u19e8\3\2\2\2\u19e8")
        buf.write("\u0323\3\2\2\2\u19e9\u19ea\5\u0328\u0195\2\u19ea\u0325")
        buf.write("\3\2\2\2\u19eb\u19ec\5\u0458\u022d\2\u19ec\u19ed\7\u0309")
        buf.write("\2\2\u19ed\u0327\3\2\2\2\u19ee\u19f0\7\37\2\2\u19ef\u19f1")
        buf.write("\5\u0334\u019b\2\u19f0\u19ef\3\2\2\2\u19f0\u19f1\3\2\2")
        buf.write("\2\u19f1\u19f3\3\2\2\2\u19f2\u19f4\5\u031c\u018f\2\u19f3")
        buf.write("\u19f2\3\2\2\2\u19f3\u19f4\3\2\2\2\u19f4\u19f5\3\2\2\2")
        buf.write("\u19f5\u19f6\7\u00a1\2\2\u19f6\u0329\3\2\2\2\u19f7\u19f8")
        buf.write("\5\u0326\u0194\2\u19f8\u19fa\5\u032c\u0197\2\u19f9\u19fb")
        buf.write("\5\u045a\u022e\2\u19fa\u19f9\3\2\2\2\u19fa\u19fb\3\2\2")
        buf.write("\2\u19fb\u032b\3\2\2\2\u19fc\u1a00\5\u032e\u0198\2\u19fd")
        buf.write("\u1a00\5\u0330\u0199\2\u19fe\u1a00\5\u0332\u019a\2\u19ff")
        buf.write("\u19fc\3\2\2\2\u19ff\u19fd\3\2\2\2\u19ff\u19fe\3\2\2\2")
        buf.write("\u1a00\u032d\3\2\2\2\u1a01\u1a02\7\u0128\2\2\u1a02\u1a03")
        buf.write("\5\u031c\u018f\2\u1a03\u1a04\7\u00a1\2\2\u1a04\u1a05\7")
        buf.write("\u0128\2\2\u1a05\u032f\3\2\2\2\u1a06\u1a07\7\u0286\2\2")
        buf.write("\u1a07\u1a08\5\u02a6\u0154\2\u1a08\u1a09\7\u0095\2\2\u1a09")
        buf.write("\u1a0a\5\u031c\u018f\2\u1a0a\u1a0b\7\u00a1\2\2\u1a0b\u1a0c")
        buf.write("\7\u0286\2\2\u1a0c\u0331\3\2\2\2\u1a0d\u1a0e\7\u01cb\2")
        buf.write("\2\u1a0e\u1a0f\5\u031c\u018f\2\u1a0f\u1a10\7\u0267\2\2")
        buf.write("\u1a10\u1a11\5\u02a6\u0154\2\u1a11\u1a12\7\u00a1\2\2\u1a12")
        buf.write("\u1a13\7\u01cb\2\2\u1a13\u0333\3\2\2\2\u1a14\u1a15\5\u0336")
        buf.write("\u019c\2\u1a15\u1a16\7\u0308\2\2\u1a16\u1a18\3\2\2\2\u1a17")
        buf.write("\u1a14\3\2\2\2\u1a18\u1a19\3\2\2\2\u1a19\u1a17\3\2\2\2")
        buf.write("\u1a19\u1a1a\3\2\2\2\u1a1a\u0335\3\2\2\2\u1a1b\u1a20\5")
        buf.write("\u0338\u019d\2\u1a1c\u1a20\5\u033a\u019e\2\u1a1d\u1a20")
        buf.write("\5\u0340\u01a1\2\u1a1e\u1a20\5\u0344\u01a3\2\u1a1f\u1a1b")
        buf.write("\3\2\2\2\u1a1f\u1a1c\3\2\2\2\u1a1f\u1a1d\3\2\2\2\u1a1f")
        buf.write("\u1a1e\3\2\2\2\u1a20\u0337\3\2\2\2\u1a21\u1a22\7\u0081")
        buf.write("\2\2\u1a22\u1a23\5\u046c\u0237\2\u1a23\u1a25\5\u0396\u01cc")
        buf.write("\2\u1a24\u1a26\5\u03dc\u01ef\2\u1a25\u1a24\3\2\2\2\u1a25")
        buf.write("\u1a26\3\2\2\2\u1a26\u1a29\3\2\2\2\u1a27\u1a28\7\u0082")
        buf.write("\2\2\u1a28\u1a2a\5\u02a6\u0154\2\u1a29\u1a27\3\2\2\2\u1a29")
        buf.write("\u1a2a\3\2\2\2\u1a2a\u0339\3\2\2\2\u1a2b\u1a2c\7\u0081")
        buf.write("\2\2\u1a2c\u1a2d\5\u046a\u0236\2\u1a2d\u1a2e\7U\2\2\u1a2e")
        buf.write("\u1a2f\7\u00ca\2\2\u1a2f\u1a30\5\u033c\u019f\2\u1a30\u033b")
        buf.write("\3\2\2\2\u1a31\u1a34\5\u0476\u023c\2\u1a32\u1a34\5\u033e")
        buf.write("\u01a0\2\u1a33\u1a31\3\2\2\2\u1a33\u1a32\3\2\2\2\u1a34")
        buf.write("\u033d\3\2\2\2\u1a35\u1a37\7\u0210\2\2\u1a36\u1a38\7\u0275")
        buf.write("\2\2\u1a37\u1a36\3\2\2\2\u1a37\u1a38\3\2\2\2\u1a38\u1a39")
        buf.write("\3\2\2\2\u1a39\u1a3a\5\u048a\u0246\2\u1a3a\u033f\3\2\2")
        buf.write("\2\u1a3b\u1a3c\7\u0081\2\2\u1a3c\u1a3d\tf\2\2\u1a3d\u1a3e")
        buf.write("\7\u00dd\2\2\u1a3e\u1a3f\7\u00ca\2\2\u1a3f\u1a44\5\u0342")
        buf.write("\u01a2\2\u1a40\u1a41\7\u0307\2\2\u1a41\u1a43\5\u0342\u01a2")
        buf.write("\2\u1a42\u1a40\3\2\2\2\u1a43\u1a46\3\2\2\2\u1a44\u1a42")
        buf.write("\3\2\2\2\u1a44\u1a45\3\2\2\2\u1a45\u1a47\3\2\2\2\u1a46")
        buf.write("\u1a44\3\2\2\2\u1a47\u1a48\5\u0312\u018a\2\u1a48\u0341")
        buf.write("\3\2\2\2\u1a49\u1a51\5\u033c\u019f\2\u1a4a\u1a51\5\u046a")
        buf.write("\u0236\2\u1a4b\u1a51\7\u0211\2\2\u1a4c\u1a4d\5\u02fa\u017e")
        buf.write("\2\u1a4d\u1a4e\7\u00cc\2\2\u1a4e\u1a51\3\2\2\2\u1a4f\u1a51")
        buf.write("\7\u020f\2\2\u1a50\u1a49\3\2\2\2\u1a50\u1a4a\3\2\2\2\u1a50")
        buf.write("\u1a4b\3\2\2\2\u1a50\u1a4c\3\2\2\2\u1a50\u1a4f\3\2\2\2")
        buf.write("\u1a51\u0343\3\2\2\2\u1a52\u1a53\7\u0081\2\2\u1a53\u1a54")
        buf.write("\5\u046a\u0236\2\u1a54\u1a55\7l\2\2\u1a55\u1a56\7\u00ca")
        buf.write("\2\2\u1a56\u1a57\5\u010c\u0087\2\u1a57\u0345\3\2\2\2\u1a58")
        buf.write("\u1a59\7\u0106\2\2\u1a59\u1a5a\5\u045a\u022e\2\u1a5a\u0347")
        buf.write("\3\2\2\2\u1a5b\u1a5c\7\u0111\2\2\u1a5c\u1a5d\5\u045a\u022e")
        buf.write("\2\u1a5d\u0349\3\2\2\2\u1a5e\u1a62\7\u00d1\2\2\u1a5f\u1a63")
        buf.write("\7g\2\2\u1a60\u1a61\6\u01a6\u00b3\2\u1a61\u1a63\7\u021e")
        buf.write("\2\2\u1a62\u1a5f\3\2\2\2\u1a62\u1a60\3\2\2\2\u1a62\u1a63")
        buf.write("\3\2\2\2\u1a63\u1a64\3\2\2\2\u1a64\u1a77\7\u008c\2\2\u1a65")
        buf.write("\u1a6a\5\u034e\u01a8\2\u1a66\u1a67\7\u0307\2\2\u1a67\u1a69")
        buf.write("\5\u034e\u01a8\2\u1a68\u1a66\3\2\2\2\u1a69\u1a6c\3\2\2")
        buf.write("\2\u1a6a\u1a68\3\2\2\2\u1a6a\u1a6b\3\2\2\2\u1a6b\u1a78")
        buf.write("\3\2\2\2\u1a6c\u1a6a\3\2\2\2\u1a6d\u1a6e\7U\2\2\u1a6e")
        buf.write("\u1a6f\5\u034c\u01a7\2\u1a6f\u1a74\5\u0350\u01a9\2\u1a70")
        buf.write("\u1a71\7\u0307\2\2\u1a71\u1a73\5\u0350\u01a9\2\u1a72\u1a70")
        buf.write("\3\2\2\2\u1a73\u1a76\3\2\2\2\u1a74\u1a72\3\2\2\2\u1a74")
        buf.write("\u1a75\3\2\2\2\u1a75\u1a78\3\2\2\2\u1a76\u1a74\3\2\2\2")
        buf.write("\u1a77\u1a65\3\2\2\2\u1a77\u1a6d\3\2\2\2\u1a78\u034b\3")
        buf.write("\2\2\2\u1a79\u1a7d\5\u047e\u0240\2\u1a7a\u1a7d\5\u02e6")
        buf.write("\u0174\2\u1a7b\u1a7d\5\u0470\u0239\2\u1a7c\u1a79\3\2\2")
        buf.write("\2\u1a7c\u1a7a\3\2\2\2\u1a7c\u1a7b\3\2\2\2\u1a7d\u034d")
        buf.write("\3\2\2\2\u1a7e\u1a81\5\u02e6\u0174\2\u1a7f\u1a81\5\u046a")
        buf.write("\u0236\2\u1a80\u1a7e\3\2\2\2\u1a80\u1a7f\3\2\2\2\u1a81")
        buf.write("\u1a82\3\2\2\2\u1a82\u1a83\7\u02f0\2\2\u1a83\u1a84\tg")
        buf.write("\2\2\u1a84\u034f\3\2\2\2\u1a85\u1a88\5\u02e6\u0174\2\u1a86")
        buf.write("\u1a88\5\u046a\u0236\2\u1a87\u1a85\3\2\2\2\u1a87\u1a86")
        buf.write("\3\2\2\2\u1a88\u1a89\3\2\2\2\u1a89\u1a8c\7\u02f0\2\2\u1a8a")
        buf.write("\u1a8d\5\u0352\u01aa\2\u1a8b\u1a8d\7\u01db\2\2\u1a8c\u1a8a")
        buf.write("\3\2\2\2\u1a8c\u1a8b\3\2\2\2\u1a8d\u0351\3\2\2\2\u1a8e")
        buf.write("\u1a8f\th\2\2\u1a8f\u0353\3\2\2\2\u1a90\u1a93\7\u0201")
        buf.write("\2\2\u1a91\u1a94\5\u046a\u0236\2\u1a92\u1a94\5\u033e\u01a0")
        buf.write("\2\u1a93\u1a91\3\2\2\2\u1a93\u1a92\3\2\2\2\u1a94\u1a9e")
        buf.write("\3\2\2\2\u1a95\u1a96\7\u01fc\2\2\u1a96\u1a9b\5\u0358\u01ad")
        buf.write("\2\u1a97\u1a98\7\u0307\2\2\u1a98\u1a9a\5\u0358\u01ad\2")
        buf.write("\u1a99\u1a97\3\2\2\2\u1a9a\u1a9d\3\2\2\2\u1a9b\u1a99\3")
        buf.write("\2\2\2\u1a9b\u1a9c\3\2\2\2\u1a9c\u1a9f\3\2\2\2\u1a9d\u1a9b")
        buf.write("\3\2\2\2\u1a9e\u1a95\3\2\2\2\u1a9e\u1a9f\3\2\2\2\u1a9f")
        buf.write("\u0355\3\2\2\2\u1aa0\u1aa3\7\u01d7\2\2\u1aa1\u1aa4\5\u046a")
        buf.write("\u0236\2\u1aa2\u1aa4\5\u033e\u01a0\2\u1aa3\u1aa1\3\2\2")
        buf.write("\2\u1aa3\u1aa2\3\2\2\2\u1aa3\u1aa4\3\2\2\2\u1aa4\u1aae")
        buf.write("\3\2\2\2\u1aa5\u1aa6\7\u01fc\2\2\u1aa6\u1aab\5\u0358\u01ad")
        buf.write("\2\u1aa7\u1aa8\7\u0307\2\2\u1aa8\u1aaa\5\u0358\u01ad\2")
        buf.write("\u1aa9\u1aa7\3\2\2\2\u1aaa\u1aad\3\2\2\2\u1aab\u1aa9\3")
        buf.write("\2\2\2\u1aab\u1aac\3\2\2\2\u1aac\u1aaf\3\2\2\2\u1aad\u1aab")
        buf.write("\3\2\2\2\u1aae\u1aa5\3\2\2\2\u1aae\u1aaf\3\2\2\2\u1aaf")
        buf.write("\u0357\3\2\2\2\u1ab0\u1ab1\5\u0352\u01aa\2\u1ab1\u1ab2")
        buf.write("\7\u02f0\2\2\u1ab2\u1ab3\5\u034c\u01a7\2\u1ab3\u0359\3")
        buf.write("\2\2\2\u1ab4\u1ab5\7\u0185\2\2\u1ab5\u1ab6\5\u046a\u0236")
        buf.write("\2\u1ab6\u035b\3\2\2\2\u1ab7\u1ab8\7D\2\2\u1ab8\u1ab9")
        buf.write("\5\u046a\u0236\2\u1ab9\u035d\3\2\2\2\u1aba\u1abf\7\u00bc")
        buf.write("\2\2\u1abb\u1abd\7\u0171\2\2\u1abc\u1abb\3\2\2\2\u1abc")
        buf.write("\u1abd\3\2\2\2\u1abd\u1abe\3\2\2\2\u1abe\u1ac0\7\u00cd")
        buf.write("\2\2\u1abf\u1abc\3\2\2\2\u1abf\u1ac0\3\2\2\2\u1ac0\u1ac1")
        buf.write("\3\2\2\2\u1ac1\u1ac2\5\u046a\u0236\2\u1ac2\u1ac3\7\u00fa")
        buf.write("\2\2\u1ac3\u1ac4\5\u046c\u0237\2\u1ac4\u035f\3\2\2\2\u1ac5")
        buf.write("\u1ac6\7\27\2\2\u1ac6\u1ad3\5\u02a6\u0154\2\u1ac7\u1ac8")
        buf.write("\7\u00ad\2\2\u1ac8\u1ac9\5\u02a6\u0154\2\u1ac9\u1acc\5")
        buf.write("\u02fe\u0180\2\u1aca\u1acb\7\u0220\2\2\u1acb\u1acd\5\u02a6")
        buf.write("\u0154\2\u1acc\u1aca\3\2\2\2\u1acc\u1acd\3\2\2\2\u1acd")
        buf.write("\u1ad0\3\2\2\2\u1ace\u1acf\7\u00a2\2\2\u1acf\u1ad1\5\u02a6")
        buf.write("\u0154\2\u1ad0\u1ace\3\2\2\2\u1ad0\u1ad1\3\2\2\2\u1ad1")
        buf.write("\u1ad3\3\2\2\2\u1ad2\u1ac5\3\2\2\2\u1ad2\u1ac7\3\2\2\2")
        buf.write("\u1ad3\u0361\3\2\2\2\u1ad4\u1ad5\5\u0412\u020a\2\u1ad5")
        buf.write("\u1ad7\5\u036e\u01b8\2\u1ad6\u1ad8\5\u0364\u01b3\2\u1ad7")
        buf.write("\u1ad6\3\2\2\2\u1ad7\u1ad8\3\2\2\2\u1ad8\u0363\3\2\2\2")
        buf.write("\u1ad9\u1ada\6\u01b3\u00b4\2\u1ada\u1add\5\u0366\u01b4")
        buf.write("\2\u1adb\u1add\5\u0378\u01bd\2\u1adc\u1ad9\3\2\2\2\u1adc")
        buf.write("\u1adb\3\2\2\2\u1add\u0365\3\2\2\2\u1ade\u1adf\7@\2\2")
        buf.write("\u1adf\u1ae0\5\u0304\u0183\2\u1ae0\u0367\3\2\2\2\u1ae1")
        buf.write("\u1ae3\7\u0175\2\2\u1ae2\u1ae1\3\2\2\2\u1ae2\u1ae3\3\2")
        buf.write("\2\2\u1ae3\u1ae4\3\2\2\2\u1ae4\u1ae5\7\u02dc\2\2\u1ae5")
        buf.write("\u0369\3\2\2\2\u1ae6\u1ae8\t(\2\2\u1ae7\u1ae9\5n8\2\u1ae8")
        buf.write("\u1ae7\3\2\2\2\u1ae8\u1ae9\3\2\2\2\u1ae9\u1aea\3\2\2\2")
        buf.write("\u1aea\u1aee\5\u0384\u01c3\2\u1aeb\u1aed\5\u0388\u01c5")
        buf.write("\2\u1aec\u1aeb\3\2\2\2\u1aed\u1af0\3\2\2\2\u1aee\u1aec")
        buf.write("\3\2\2\2\u1aee\u1aef\3\2\2\2\u1aef\u1b32\3\2\2\2\u1af0")
        buf.write("\u1aee\3\2\2\2\u1af1\u1af3\7\u00cf\2\2\u1af2\u1af4\5\u0198")
        buf.write("\u00cd\2\u1af3\u1af2\3\2\2\2\u1af3\u1af4\3\2\2\2\u1af4")
        buf.write("\u1af6\3\2\2\2\u1af5\u1af7\5\u041c\u020f\2\u1af6\u1af5")
        buf.write("\3\2\2\2\u1af6\u1af7\3\2\2\2\u1af7\u1af8\3\2\2\2\u1af8")
        buf.write("\u1afc\5\u0384\u01c3\2\u1af9\u1afb\5\u0390\u01c9\2\u1afa")
        buf.write("\u1af9\3\2\2\2\u1afb\u1afe\3\2\2\2\u1afc\u1afa\3\2\2\2")
        buf.write("\u1afc\u1afd\3\2\2\2\u1afd\u1b32\3\2\2\2\u1afe\u1afc\3")
        buf.write("\2\2\2\u1aff\u1b01\7\u020d\2\2\u1b00\u1b02\5\u0198\u00cd")
        buf.write("\2\u1b01\u1b00\3\2\2\2\u1b01\u1b02\3\2\2\2\u1b02\u1b04")
        buf.write("\3\2\2\2\u1b03\u1b05\5\u041c\u020f\2\u1b04\u1b03\3\2\2")
        buf.write("\2\u1b04\u1b05\3\2\2\2\u1b05\u1b06\3\2\2\2\u1b06\u1b0a")
        buf.write("\5\u0384\u01c3\2\u1b07\u1b09\5\u0392\u01ca\2\u1b08\u1b07")
        buf.write("\3\2\2\2\u1b09\u1b0c\3\2\2\2\u1b0a\u1b08\3\2\2\2\u1b0a")
        buf.write("\u1b0b\3\2\2\2\u1b0b\u1b32\3\2\2\2\u1b0c\u1b0a\3\2\2\2")
        buf.write("\u1b0d\u1b0f\5\u036c\u01b7\2\u1b0e\u1b0d\3\2\2\2\u1b0e")
        buf.write("\u1b0f\3\2\2\2\u1b0f\u1b2f\3\2\2\2\u1b10\u1b11\7\u01a6")
        buf.write("\2\2\u1b11\u1b17\7\u010b\2\2\u1b12\u1b14\7\u0263\2\2\u1b13")
        buf.write("\u1b15\5\u0198\u00cd\2\u1b14\u1b13\3\2\2\2\u1b14\u1b15")
        buf.write("\3\2\2\2\u1b15\u1b17\3\2\2\2\u1b16\u1b10\3\2\2\2\u1b16")
        buf.write("\u1b12\3\2\2\2\u1b17\u1b19\3\2\2\2\u1b18\u1b1a\5n8\2\u1b19")
        buf.write("\u1b18\3\2\2\2\u1b19\u1b1a\3\2\2\2\u1b1a\u1b1b\3\2\2\2")
        buf.write("\u1b1b\u1b1f\5\u0384\u01c3\2\u1b1c\u1b1e\5\u0388\u01c5")
        buf.write("\2\u1b1d\u1b1c\3\2\2\2\u1b1e\u1b21\3\2\2\2\u1b1f\u1b1d")
        buf.write("\3\2\2\2\u1b1f\u1b20\3\2\2\2\u1b20\u1b30\3\2\2\2\u1b21")
        buf.write("\u1b1f\3\2\2\2\u1b22\u1b23\7\u00c9\2\2\u1b23\u1b25\7\u010b")
        buf.write("\2\2\u1b24\u1b26\5\u041c\u020f\2\u1b25\u1b24\3\2\2\2\u1b25")
        buf.write("\u1b26\3\2\2\2\u1b26\u1b27\3\2\2\2\u1b27\u1b28\5\u037c")
        buf.write("\u01bf\2\u1b28\u1b29\5\u0378\u01bd\2\u1b29\u1b30\3\2\2")
        buf.write("\2\u1b2a\u1b2d\5\u0366\u01b4\2\u1b2b\u1b2c\6\u01b6\u00b5")
        buf.write("\2\u1b2c\u1b2e\5\u0368\u01b5\2\u1b2d\u1b2b\3\2\2\2\u1b2d")
        buf.write("\u1b2e\3\2\2\2\u1b2e\u1b30\3\2\2\2\u1b2f\u1b16\3\2\2\2")
        buf.write("\u1b2f\u1b22\3\2\2\2\u1b2f\u1b2a\3\2\2\2\u1b30\u1b32\3")
        buf.write("\2\2\2\u1b31\u1ae6\3\2\2\2\u1b31\u1af1\3\2\2\2\u1b31\u1aff")
        buf.write("\3\2\2\2\u1b31\u1b0e\3\2\2\2\u1b32\u036b\3\2\2\2\u1b33")
        buf.write("\u1b35\7X\2\2\u1b34\u1b36\5\u046a\u0236\2\u1b35\u1b34")
        buf.write("\3\2\2\2\u1b35\u1b36\3\2\2\2\u1b36\u036d\3\2\2\2\u1b37")
        buf.write("\u1b5b\5\u0396\u01cc\2\u1b38\u1b3a\5\u0370\u01b9\2\u1b39")
        buf.write("\u1b38\3\2\2\2\u1b3a\u1b3d\3\2\2\2\u1b3b\u1b39\3\2\2\2")
        buf.write("\u1b3b\u1b3c\3\2\2\2\u1b3c\u1b5c\3\2\2\2\u1b3d\u1b3b\3")
        buf.write("\2\2\2\u1b3e\u1b40\6\u01b8\u00b6\2\u1b3f\u1b41\5\u03dc")
        buf.write("\u01ef\2\u1b40\u1b3f\3\2\2\2\u1b40\u1b41\3\2\2\2\u1b41")
        buf.write("\u1b44\3\2\2\2\u1b42\u1b43\7\u00d3\2\2\u1b43\u1b45\7\16")
        buf.write("\2\2\u1b44\u1b42\3\2\2\2\u1b44\u1b45\3\2\2\2\u1b45\u1b46")
        buf.write("\3\2\2\2\u1b46\u1b47\7\23\2\2\u1b47\u1b49\5\u0304\u0183")
        buf.write("\2\u1b48\u1b4a\ti\2\2\u1b49\u1b48\3\2\2\2\u1b49\u1b4a")
        buf.write("\3\2\2\2\u1b4a\u1b59\3\2\2\2\u1b4b\u1b4f\6\u01b8\u00b7")
        buf.write("\2\u1b4c\u1b4e\5\u0376\u01bc\2\u1b4d\u1b4c\3\2\2\2\u1b4e")
        buf.write("\u1b51\3\2\2\2\u1b4f\u1b4d\3\2\2\2\u1b4f\u1b50\3\2\2\2")
        buf.write("\u1b50\u1b5a\3\2\2\2\u1b51\u1b4f\3\2\2\2\u1b52\u1b56\6")
        buf.write("\u01b8\u00b8\2\u1b53\u1b55\5\u0370\u01b9\2\u1b54\u1b53")
        buf.write("\3\2\2\2\u1b55\u1b58\3\2\2\2\u1b56\u1b54\3\2\2\2\u1b56")
        buf.write("\u1b57\3\2\2\2\u1b57\u1b5a\3\2\2\2\u1b58\u1b56\3\2\2\2")
        buf.write("\u1b59\u1b4b\3\2\2\2\u1b59\u1b52\3\2\2\2\u1b5a\u1b5c\3")
        buf.write("\2\2\2\u1b5b\u1b3b\3\2\2\2\u1b5b\u1b3e\3\2\2\2\u1b5c\u036f")
        buf.write("\3\2\2\2\u1b5d\u1b5f\7\u0175\2\2\u1b5e\u1b5d\3\2\2\2\u1b5e")
        buf.write("\u1b5f\3\2\2\2\u1b5f\u1b60\3\2\2\2\u1b60\u1b92\5\u0494")
        buf.write("\u024b\2\u1b61\u1b62\6\u01b9\u00b9\2\u1b62\u1b63\7\u0175")
        buf.write("\2\2\u1b63\u1b92\7\u02d2\2\2\u1b64\u1b6c\7\u0082\2\2\u1b65")
        buf.write("\u1b6d\5\u0480\u0241\2\u1b66\u1b68\7\u0176\2\2\u1b67\u1b69")
        buf.write("\5\u02d2\u016a\2\u1b68\u1b67\3\2\2\2\u1b68\u1b69\3\2\2")
        buf.write("\2\u1b69\u1b6d\3\2\2\2\u1b6a\u1b6b\6\u01b9\u00ba\2\u1b6b")
        buf.write("\u1b6d\5\u0304\u0183\2\u1b6c\u1b65\3\2\2\2\u1b6c\u1b66")
        buf.write("\3\2\2\2\u1b6c\u1b6a\3\2\2\2\u1b6d\u1b92\3\2\2\2\u1b6e")
        buf.write("\u1b6f\7\u0181\2\2\u1b6f\u1b70\7\u0268\2\2\u1b70\u1b72")
        buf.write("\7\u0176\2\2\u1b71\u1b73\5\u02d2\u016a\2\u1b72\u1b71\3")
        buf.write("\2\2\2\u1b72\u1b73\3\2\2\2\u1b73\u1b92\3\2\2\2\u1b74\u1b92")
        buf.write("\7\32\2\2\u1b75\u1b76\7\u01f7\2\2\u1b76\u1b77\7\u0082")
        buf.write("\2\2\u1b77\u1b92\7\u0275\2\2\u1b78\u1b7a\7\u01a6\2\2\u1b79")
        buf.write("\u1b78\3\2\2\2\u1b79\u1b7a\3\2\2\2\u1b7a\u1b7b\3\2\2\2")
        buf.write("\u1b7b\u1b92\7\u010b\2\2\u1b7c\u1b7e\7\u0263\2\2\u1b7d")
        buf.write("\u1b7f\7\u010b\2\2\u1b7e\u1b7d\3\2\2\2\u1b7e\u1b7f\3\2")
        buf.write("\2\2\u1b7f\u1b92\3\2\2\2\u1b80\u1b81\7M\2\2\u1b81\u1b92")
        buf.write("\5\u048a\u0246\2\u1b82\u1b92\5\u03dc\u01ef\2\u1b83\u1b84")
        buf.write("\7L\2\2\u1b84\u1b92\5\u0372\u01ba\2\u1b85\u1b86\7\u022b")
        buf.write("\2\2\u1b86\u1b92\5\u0374\u01bb\2\u1b87\u1b88\6\u01b9\u00bb")
        buf.write("\2\u1b88\u1b89\7\u02c5\2\2\u1b89\u1b92\5\u047c\u023f\2")
        buf.write("\u1b8a\u1b8c\6\u01b9\u00bc\2\u1b8b\u1b8d\5\u036c\u01b7")
        buf.write("\2\u1b8c\u1b8b\3\2\2\2\u1b8c\u1b8d\3\2\2\2\u1b8d\u1b8e")
        buf.write("\3\2\2\2\u1b8e\u1b92\5\u0366\u01b4\2\u1b8f\u1b90\6\u01b9")
        buf.write("\u00bd\2\u1b90\u1b92\5\u0368\u01b5\2\u1b91\u1b5e\3\2\2")
        buf.write("\2\u1b91\u1b61\3\2\2\2\u1b91\u1b64\3\2\2\2\u1b91\u1b6e")
        buf.write("\3\2\2\2\u1b91\u1b74\3\2\2\2\u1b91\u1b75\3\2\2\2\u1b91")
        buf.write("\u1b79\3\2\2\2\u1b91\u1b7c\3\2\2\2\u1b91\u1b80\3\2\2\2")
        buf.write("\u1b91\u1b82\3\2\2\2\u1b91\u1b83\3\2\2\2\u1b91\u1b85\3")
        buf.write("\2\2\2\u1b91\u1b87\3\2\2\2\u1b91\u1b8a\3\2\2\2\u1b91\u1b8f")
        buf.write("\3\2\2\2\u1b92\u0371\3\2\2\2\u1b93\u1b94\tj\2\2\u1b94")
        buf.write("\u0373\3\2\2\2\u1b95\u1b96\tk\2\2\u1b96\u0375\3\2\2\2")
        buf.write("\u1b97\u1b99\7\u0263\2\2\u1b98\u1b9a\7\u010b\2\2\u1b99")
        buf.write("\u1b98\3\2\2\2\u1b99\u1b9a\3\2\2\2\u1b9a\u1ba6\3\2\2\2")
        buf.write("\u1b9b\u1b9c\7M\2\2\u1b9c\u1ba6\5\u0486\u0244\2\u1b9d")
        buf.write("\u1b9f\5\u02fa\u017e\2\u1b9e\u1b9d\3\2\2\2\u1b9e\u1b9f")
        buf.write("\3\2\2\2\u1b9f\u1ba0\3\2\2\2\u1ba0\u1ba6\7\u017a\2\2\u1ba1")
        buf.write("\u1ba3\7\u01a6\2\2\u1ba2\u1ba1\3\2\2\2\u1ba2\u1ba3\3\2")
        buf.write("\2\2\u1ba3\u1ba4\3\2\2\2\u1ba4\u1ba6\7\u010b\2\2\u1ba5")
        buf.write("\u1b97\3\2\2\2\u1ba5\u1b9b\3\2\2\2\u1ba5\u1b9e\3\2\2\2")
        buf.write("\u1ba5\u1ba2\3\2\2\2\u1ba6\u0377\3\2\2\2\u1ba7\u1ba8\7")
        buf.write("\u01bd\2\2\u1ba8\u1baa\5\u0450\u0229\2\u1ba9\u1bab\5\u046e")
        buf.write("\u0238\2\u1baa\u1ba9\3\2\2\2\u1baa\u1bab\3\2\2\2\u1bab")
        buf.write("\u1bae\3\2\2\2\u1bac\u1bad\7\u0142\2\2\u1bad\u1baf\tl")
        buf.write("\2\2\u1bae\u1bac\3\2\2\2\u1bae\u1baf\3\2\2\2\u1baf\u1bc0")
        buf.write("\3\2\2\2\u1bb0\u1bb1\7\u0181\2\2\u1bb1\u1bb2\7\u0268\2")
        buf.write("\2\u1bb2\u1bb6\5\u037a\u01be\2\u1bb3\u1bb4\7\u0181\2\2")
        buf.write("\u1bb4\u1bb5\7\u0087\2\2\u1bb5\u1bb7\5\u037a\u01be\2\u1bb6")
        buf.write("\u1bb3\3\2\2\2\u1bb6\u1bb7\3\2\2\2\u1bb7\u1bc1\3\2\2\2")
        buf.write("\u1bb8\u1bb9\7\u0181\2\2\u1bb9\u1bba\7\u0087\2\2\u1bba")
        buf.write("\u1bbe\5\u037a\u01be\2\u1bbb\u1bbc\7\u0181\2\2\u1bbc\u1bbd")
        buf.write("\7\u0268\2\2\u1bbd\u1bbf\5\u037a\u01be\2\u1bbe\u1bbb\3")
        buf.write("\2\2\2\u1bbe\u1bbf\3\2\2\2\u1bbf\u1bc1\3\2\2\2\u1bc0\u1bb0")
        buf.write("\3\2\2\2\u1bc0\u1bb8\3\2\2\2\u1bc0\u1bc1\3\2\2\2\u1bc1")
        buf.write("\u0379\3\2\2\2\u1bc2\u1bc8\t\4\2\2\u1bc3\u1bc4\7\u01fc")
        buf.write("\2\2\u1bc4\u1bc8\5\u0494\u024b\2\u1bc5\u1bc6\7\u0177\2")
        buf.write("\2\u1bc6\u1bc8\7\5\2\2\u1bc7\u1bc2\3\2\2\2\u1bc7\u1bc3")
        buf.write("\3\2\2\2\u1bc7\u1bc5\3\2\2\2\u1bc8\u037b\3\2\2\2\u1bc9")
        buf.write("\u1bca\7\u030a\2\2\u1bca\u1bcf\5\u037e\u01c0\2\u1bcb\u1bcc")
        buf.write("\7\u0307\2\2\u1bcc\u1bce\5\u037e\u01c0\2\u1bcd\u1bcb\3")
        buf.write("\2\2\2\u1bce\u1bd1\3\2\2\2\u1bcf\u1bcd\3\2\2\2\u1bcf\u1bd0")
        buf.write("\3\2\2\2\u1bd0\u1bd2\3\2\2\2\u1bd1\u1bcf\3\2\2\2\u1bd2")
        buf.write("\u1bd3\7\u030b\2\2\u1bd3\u037d\3\2\2\2\u1bd4\u1bd6\5\u046a")
        buf.write("\u0236\2\u1bd5\u1bd7\5\u039c\u01cf\2\u1bd6\u1bd5\3\2\2")
        buf.write("\2\u1bd6\u1bd7\3\2\2\2\u1bd7\u1bd9\3\2\2\2\u1bd8\u1bda")
        buf.write("\5\u014c\u00a7\2\u1bd9\u1bd8\3\2\2\2\u1bd9\u1bda\3\2\2")
        buf.write("\2\u1bda\u037f\3\2\2\2\u1bdb\u1bdc\7\u030a\2\2\u1bdc\u1be1")
        buf.write("\5\u0382\u01c2\2\u1bdd\u1bde\7\u0307\2\2\u1bde\u1be0\5")
        buf.write("\u0382\u01c2\2\u1bdf\u1bdd\3\2\2\2\u1be0\u1be3\3\2\2\2")
        buf.write("\u1be1\u1bdf\3\2\2\2\u1be1\u1be2\3\2\2\2\u1be2\u1be4\3")
        buf.write("\2\2\2\u1be3\u1be1\3\2\2\2\u1be4\u1be5\7\u030b\2\2\u1be5")
        buf.write("\u0381\3\2\2\2\u1be6\u1bec\5\u037e\u01c0\2\u1be7\u1be9")
        buf.write("\5\u0304\u0183\2\u1be8\u1bea\5\u014c\u00a7\2\u1be9\u1be8")
        buf.write("\3\2\2\2\u1be9\u1bea\3\2\2\2\u1bea\u1bec\3\2\2\2\u1beb")
        buf.write("\u1be6\3\2\2\2\u1beb\u1be7\3\2\2\2\u1bec\u0383\3\2\2\2")
        buf.write("\u1bed\u1bee\6\u01c3\u00be\2\u1bee\u1bf2\5\u0380\u01c1")
        buf.write("\2\u1bef\u1bf0\6\u01c3\u00bf\2\u1bf0\u1bf2\5\u037c\u01bf")
        buf.write("\2\u1bf1\u1bed\3\2\2\2\u1bf1\u1bef\3\2\2\2\u1bf2\u0385")
        buf.write("\3\2\2\2\u1bf3\u1bf4\tm\2\2\u1bf4\u0387\3\2\2\2\u1bf5")
        buf.write("\u1bf8\5\u038a\u01c6\2\u1bf6\u1bf8\5\u038e\u01c8\2\u1bf7")
        buf.write("\u1bf5\3\2\2\2\u1bf7\u1bf6\3\2\2\2\u1bf8\u0389\3\2\2\2")
        buf.write("\u1bf9\u1bfb\7\u010a\2\2\u1bfa\u1bfc\7\u02f0\2\2\u1bfb")
        buf.write("\u1bfa\3\2\2\2\u1bfb\u1bfc\3\2\2\2\u1bfc\u1bfd\3\2\2\2")
        buf.write("\u1bfd\u1c03\5\u0476\u023c\2\u1bfe\u1bff\7M\2\2\u1bff")
        buf.write("\u1c03\5\u048a\u0246\2\u1c00\u1c01\6\u01c6\u00c0\2\u1c01")
        buf.write("\u1c03\5\u038c\u01c7\2\u1c02\u1bf9\3\2\2\2\u1c02\u1bfe")
        buf.write("\3\2\2\2\u1c02\u1c00\3\2\2\2\u1c03\u038b\3\2\2\2\u1c04")
        buf.write("\u1c05\tn\2\2\u1c05\u038d\3\2\2\2\u1c06\u1c07\to\2\2\u1c07")
        buf.write("\u1c08\5\u0386\u01c4\2\u1c08\u038f\3\2\2\2\u1c09\u1c0e")
        buf.write("\5\u038a\u01c6\2\u1c0a\u1c0b\7\u0287\2\2\u1c0b\u1c0c\7")
        buf.write("\u0193\2\2\u1c0c\u1c0e\5\u046a\u0236\2\u1c0d\u1c09\3\2")
        buf.write("\2\2\u1c0d\u1c0a\3\2\2\2\u1c0e\u0391\3\2\2\2\u1c0f\u1c10")
        buf.write("\5\u038a\u01c6\2\u1c10\u0393\3\2\2\2\u1c11\u1c12\5\u0396")
        buf.write("\u01cc\2\u1c12\u1c13\7\2\2\3\u1c13\u0395\3\2\2\2\u1c14")
        buf.write("\u1c16\tp\2\2\u1c15\u1c17\5\u039c\u01cf\2\u1c16\u1c15")
        buf.write("\3\2\2\2\u1c16\u1c17\3\2\2\2\u1c17\u1c19\3\2\2\2\u1c18")
        buf.write("\u1c1a\5\u039e\u01d0\2\u1c19\u1c18\3\2\2\2\u1c19\u1c1a")
        buf.write("\3\2\2\2\u1c1a\u1ca8\3\2\2\2\u1c1b\u1c21\7\u01b7\2\2\u1c1c")
        buf.write("\u1c1e\7\u0094\2\2\u1c1d\u1c1f\7\u01a2\2\2\u1c1e\u1c1d")
        buf.write("\3\2\2\2\u1c1e\u1c1f\3\2\2\2\u1c1f\u1c21\3\2\2\2\u1c20")
        buf.write("\u1c1b\3\2\2\2\u1c20\u1c1c\3\2\2\2\u1c21\u1c23\3\2\2\2")
        buf.write("\u1c22\u1c24\5\u049c\u024f\2\u1c23\u1c22\3\2\2\2\u1c23")
        buf.write("\u1c24\3\2\2\2\u1c24\u1c26\3\2\2\2\u1c25\u1c27\5\u039e")
        buf.write("\u01d0\2\u1c26\u1c25\3\2\2\2\u1c26\u1c27\3\2\2\2\u1c27")
        buf.write("\u1ca8\3\2\2\2\u1c28\u1c2a\tq\2\2\u1c29\u1c2b\5\u0498")
        buf.write("\u024d\2\u1c2a\u1c29\3\2\2\2\u1c2a\u1c2b\3\2\2\2\u1c2b")
        buf.write("\u1c2d\3\2\2\2\u1c2c\u1c2e\5\u039e\u01d0\2\u1c2d\u1c2c")
        buf.write("\3\2\2\2\u1c2d\u1c2e\3\2\2\2\u1c2e\u1ca8\3\2\2\2\u1c2f")
        buf.write("\u1c31\7\'\2\2\u1c30\u1c32\5\u039c\u01cf\2\u1c31\u1c30")
        buf.write("\3\2\2\2\u1c31\u1c32\3\2\2\2\u1c32\u1ca8\3\2\2\2\u1c33")
        buf.write("\u1ca8\tr\2\2\u1c34\u1c36\7>\2\2\u1c35\u1c37\5\u039c\u01cf")
        buf.write("\2\u1c36\u1c35\3\2\2\2\u1c36\u1c37\3\2\2\2\u1c37\u1c39")
        buf.write("\3\2\2\2\u1c38\u1c3a\5\u03a0\u01d1\2\u1c39\u1c38\3\2\2")
        buf.write("\2\u1c39\u1c3a\3\2\2\2\u1c3a\u1ca8\3\2\2\2\u1c3b\u1c3d")
        buf.write("\5\u0398\u01cd\2\u1c3c\u1c3e\5\u039c\u01cf\2\u1c3d\u1c3c")
        buf.write("\3\2\2\2\u1c3d\u1c3e\3\2\2\2\u1c3e\u1c40\3\2\2\2\u1c3f")
        buf.write("\u1c41\7\"\2\2\u1c40\u1c3f\3\2\2\2\u1c40\u1c41\3\2\2\2")
        buf.write("\u1c41\u1ca8\3\2\2\2\u1c42\u1c44\7\"\2\2\u1c43\u1c45\5")
        buf.write("\u039c\u01cf\2\u1c44\u1c43\3\2\2\2\u1c44\u1c45\3\2\2\2")
        buf.write("\u1c45\u1ca8\3\2\2\2\u1c46\u1c47\7>\2\2\u1c47\u1c4a\7")
        buf.write("\u027b\2\2\u1c48\u1c4a\7\u0277\2\2\u1c49\u1c46\3\2\2\2")
        buf.write("\u1c49\u1c48\3\2\2\2\u1c4a\u1c4b\3\2\2\2\u1c4b\u1c4d\5")
        buf.write("\u039c\u01cf\2\u1c4c\u1c4e\5\u03a0\u01d1\2\u1c4d\u1c4c")
        buf.write("\3\2\2\2\u1c4d\u1c4e\3\2\2\2\u1c4e\u1ca8\3\2\2\2\u1c4f")
        buf.write("\u1c50\7\u0168\2\2\u1c50\u1c5a\7\u0277\2\2\u1c51\u1c5a")
        buf.write("\7\u017d\2\2\u1c52\u1c53\7\u016b\2\2\u1c53\u1c5a\7\u0277")
        buf.write("\2\2\u1c54\u1c55\7\u0168\2\2\u1c55\u1c56\7>\2\2\u1c56")
        buf.write("\u1c5a\7\u027b\2\2\u1c57\u1c58\7\u016b\2\2\u1c58\u1c5a")
        buf.write("\7\u027b\2\2\u1c59\u1c4f\3\2\2\2\u1c59\u1c51\3\2\2\2\u1c59")
        buf.write("\u1c52\3\2\2\2\u1c59\u1c54\3\2\2\2\u1c59\u1c57\3\2\2\2")
        buf.write("\u1c5a\u1c5b\3\2\2\2\u1c5b\u1c5d\5\u039c\u01cf\2\u1c5c")
        buf.write("\u1c5e\7\"\2\2\u1c5d\u1c5c\3\2\2\2\u1c5d\u1c5e\3\2\2\2")
        buf.write("\u1c5e\u1ca8\3\2\2\2\u1c5f\u1c60\7\u0276\2\2\u1c60\u1ca8")
        buf.write("\5\u039c\u01cf\2\u1c61\u1c63\7\u0292\2\2\u1c62\u1c64\5")
        buf.write("\u039c\u01cf\2\u1c63\u1c62\3\2\2\2\u1c63\u1c64\3\2\2\2")
        buf.write("\u1c64\u1c66\3\2\2\2\u1c65\u1c67\5\u039e\u01d0\2\u1c66")
        buf.write("\u1c65\3\2\2\2\u1c66\u1c67\3\2\2\2\u1c67\u1ca8\3\2\2\2")
        buf.write("\u1c68\u1ca8\7v\2\2\u1c69\u1c6b\7\u024c\2\2\u1c6a\u1c6c")
        buf.write("\5\u03a8\u01d5\2\u1c6b\u1c6a\3\2\2\2\u1c6b\u1c6c\3\2\2")
        buf.write("\2\u1c6c\u1ca8\3\2\2\2\u1c6d\u1c6f\7\u0249\2\2\u1c6e\u1c70")
        buf.write("\5\u03a8\u01d5\2\u1c6f\u1c6e\3\2\2\2\u1c6f\u1c70\3\2\2")
        buf.write("\2\u1c70\u1ca8\3\2\2\2\u1c71\u1c73\7s\2\2\u1c72\u1c74")
        buf.write("\5\u03a8\u01d5\2\u1c73\u1c72\3\2\2\2\u1c73\u1c74\3\2\2")
        buf.write("\2\u1c74\u1ca8\3\2\2\2\u1c75\u1ca8\7\u024d\2\2\u1c76\u1c78")
        buf.write("\7)\2\2\u1c77\u1c79\5\u039c\u01cf\2\u1c78\u1c77\3\2\2")
        buf.write("\2\u1c78\u1c79\3\2\2\2\u1c79\u1ca8\3\2\2\2\u1c7a\u1ca8")
        buf.write("\ts\2\2\u1c7b\u1c7c\7\u0127\2\2\u1c7c\u1ca8\7\u0276\2")
        buf.write("\2\u1c7d\u1c81\7\u0127\2\2\u1c7e\u1c7f\7>\2\2\u1c7f\u1c82")
        buf.write("\7\u027b\2\2\u1c80\u1c82\7\u0277\2\2\u1c81\u1c7e\3\2\2")
        buf.write("\2\u1c81\u1c80\3\2\2\2\u1c81\u1c82\3\2\2\2\u1c82\u1c84")
        buf.write("\3\2\2\2\u1c83\u1c85\5\u03a0\u01d1\2\u1c84\u1c83\3\2\2")
        buf.write("\2\u1c84\u1c85\3\2\2\2\u1c85\u1ca8\3\2\2\2\u1c86\u1c88")
        buf.write("\7\u024f\2\2\u1c87\u1c89\5\u03a0\u01d1\2\u1c88\u1c87\3")
        buf.write("\2\2\2\u1c88\u1c89\3\2\2\2\u1c89\u1ca8\3\2\2\2\u1c8a\u1c8c")
        buf.write("\7\u0246\2\2\u1c8b\u1c8d\5\u039c\u01cf\2\u1c8c\u1c8b\3")
        buf.write("\2\2\2\u1c8c\u1c8d\3\2\2\2\u1c8d\u1c8f\3\2\2\2\u1c8e\u1c90")
        buf.write("\5\u03a0\u01d1\2\u1c8f\u1c8e\3\2\2\2\u1c8f\u1c90\3\2\2")
        buf.write("\2\u1c90\u1ca8\3\2\2\2\u1c91\u1c93\7\u014e\2\2\u1c92\u1c94")
        buf.write("\5\u03a0\u01d1\2\u1c93\u1c92\3\2\2\2\u1c93\u1c94\3\2\2")
        buf.write("\2\u1c94\u1ca8\3\2\2\2\u1c95\u1c97\7\u0125\2\2\u1c96\u1c98")
        buf.write("\5\u03a0\u01d1\2\u1c97\u1c96\3\2\2\2\u1c97\u1c98\3\2\2")
        buf.write("\2\u1c98\u1ca8\3\2\2\2\u1c99\u1c9a\7\u00a6\2\2\u1c9a\u1c9c")
        buf.write("\5\u0482\u0242\2\u1c9b\u1c9d\5\u03a0\u01d1\2\u1c9c\u1c9b")
        buf.write("\3\2\2\2\u1c9c\u1c9d\3\2\2\2\u1c9d\u1ca8\3\2\2\2\u1c9e")
        buf.write("\u1c9f\7\u01fc\2\2\u1c9f\u1ca1\5\u0482\u0242\2\u1ca0\u1ca2")
        buf.write("\5\u03a0\u01d1\2\u1ca1\u1ca0\3\2\2\2\u1ca1\u1ca2\3\2\2")
        buf.write("\2\u1ca2\u1ca8\3\2\2\2\u1ca3\u1ca8\7\u01f7\2\2\u1ca4\u1ca5")
        buf.write("\6\u01cc\u00c1\2\u1ca5\u1ca8\7\u0108\2\2\u1ca6\u1ca8\t")
        buf.write("t\2\2\u1ca7\u1c14\3\2\2\2\u1ca7\u1c20\3\2\2\2\u1ca7\u1c28")
        buf.write("\3\2\2\2\u1ca7\u1c2f\3\2\2\2\u1ca7\u1c33\3\2\2\2\u1ca7")
        buf.write("\u1c34\3\2\2\2\u1ca7\u1c3b\3\2\2\2\u1ca7\u1c42\3\2\2\2")
        buf.write("\u1ca7\u1c49\3\2\2\2\u1ca7\u1c59\3\2\2\2\u1ca7\u1c5f\3")
        buf.write("\2\2\2\u1ca7\u1c61\3\2\2\2\u1ca7\u1c68\3\2\2\2\u1ca7\u1c69")
        buf.write("\3\2\2\2\u1ca7\u1c6d\3\2\2\2\u1ca7\u1c71\3\2\2\2\u1ca7")
        buf.write("\u1c75\3\2\2\2\u1ca7\u1c76\3\2\2\2\u1ca7\u1c7a\3\2\2\2")
        buf.write("\u1ca7\u1c7b\3\2\2\2\u1ca7\u1c7d\3\2\2\2\u1ca7\u1c86\3")
        buf.write("\2\2\2\u1ca7\u1c8a\3\2\2\2\u1ca7\u1c91\3\2\2\2\u1ca7\u1c95")
        buf.write("\3\2\2\2\u1ca7\u1c99\3\2\2\2\u1ca7\u1c9e\3\2\2\2\u1ca7")
        buf.write("\u1ca3\3\2\2\2\u1ca7\u1ca4\3\2\2\2\u1ca7\u1ca6\3\2\2\2")
        buf.write("\u1ca8\u0397\3\2\2\2\u1ca9\u1cad\7\u016b\2\2\u1caa\u1cab")
        buf.write("\7\u0168\2\2\u1cab\u1cad\7>\2\2\u1cac\u1ca9\3\2\2\2\u1cac")
        buf.write("\u1caa\3\2\2\2\u1cad\u0399\3\2\2\2\u1cae\u1cb4\7\u01b7")
        buf.write("\2\2\u1caf\u1cb1\7\u0094\2\2\u1cb0\u1cb2\7\u01a2\2\2\u1cb1")
        buf.write("\u1cb0\3\2\2\2\u1cb1\u1cb2\3\2\2\2\u1cb2\u1cb4\3\2\2\2")
        buf.write("\u1cb3\u1cae\3\2\2\2\u1cb3\u1caf\3\2\2\2\u1cb4\u039b\3")
        buf.write("\2\2\2\u1cb5\u1cb8\7\u030a\2\2\u1cb6\u1cb9\5\u047c\u023f")
        buf.write("\2\u1cb7\u1cb9\7\u0318\2\2\u1cb8\u1cb6\3\2\2\2\u1cb8\u1cb7")
        buf.write("\3\2\2\2\u1cb9\u1cba\3\2\2\2\u1cba\u1cbb\7\u030b\2\2\u1cbb")
        buf.write("\u039d\3\2\2\2\u1cbc\u1cbe\tu\2\2\u1cbd\u1cbc\3\2\2\2")
        buf.write("\u1cbe\u1cbf\3\2\2\2\u1cbf\u1cbd\3\2\2\2\u1cbf\u1cc0\3")
        buf.write("\2\2\2\u1cc0\u039f\3\2\2\2\u1cc1\u1cd0\5\u03a2\u01d2\2")
        buf.write("\u1cc2\u1cd0\5\u03a4\u01d3\2\u1cc3\u1cd0\7\60\2\2\u1cc4")
        buf.write("\u1cc5\5\u02f8\u017d\2\u1cc5\u1cc7\5\u03aa\u01d6\2\u1cc6")
        buf.write("\u1cc8\7\"\2\2\u1cc7\u1cc6\3\2\2\2\u1cc7\u1cc8\3\2\2\2")
        buf.write("\u1cc8\u1cd0\3\2\2\2\u1cc9\u1ccd\7\"\2\2\u1cca\u1ccb\5")
        buf.write("\u02f8\u017d\2\u1ccb\u1ccc\5\u03aa\u01d6\2\u1ccc\u1cce")
        buf.write("\3\2\2\2\u1ccd\u1cca\3\2\2\2\u1ccd\u1cce\3\2\2\2\u1cce")
        buf.write("\u1cd0\3\2\2\2\u1ccf\u1cc1\3\2\2\2\u1ccf\u1cc2\3\2\2\2")
        buf.write("\u1ccf\u1cc3\3\2\2\2\u1ccf\u1cc4\3\2\2\2\u1ccf\u1cc9\3")
        buf.write("\2\2\2\u1cd0\u03a1\3\2\2\2\u1cd1\u1cd3\7\25\2\2\u1cd2")
        buf.write("\u1cd4\7\"\2\2\u1cd3\u1cd2\3\2\2\2\u1cd3\u1cd4\3\2\2\2")
        buf.write("\u1cd4\u1cd8\3\2\2\2\u1cd5\u1cd6\7\"\2\2\u1cd6\u1cd8\7")
        buf.write("\25\2\2\u1cd7\u1cd1\3\2\2\2\u1cd7\u1cd5\3\2\2\2\u1cd8")
        buf.write("\u03a3\3\2\2\2\u1cd9\u1cdb\7\u0260\2\2\u1cda\u1cdc\7\"")
        buf.write("\2\2\u1cdb\u1cda\3\2\2\2\u1cdb\u1cdc\3\2\2\2\u1cdc\u1ce0")
        buf.write("\3\2\2\2\u1cdd\u1cde\7\"\2\2\u1cde\u1ce0\7\u0260\2\2\u1cdf")
        buf.write("\u1cd9\3\2\2\2\u1cdf\u1cdd\3\2\2\2\u1ce0\u03a5\3\2\2\2")
        buf.write("\u1ce1\u1ce2\7\u030a\2\2\u1ce2\u1ce3\5\u0478\u023d\2\u1ce3")
        buf.write("\u1ce4\7\u030b\2\2\u1ce4\u03a7\3\2\2\2\u1ce5\u1ce6\7\u030a")
        buf.write("\2\2\u1ce6\u1ce7\7\u02ed\2\2\u1ce7\u1ce8\7\u030b\2\2\u1ce8")
        buf.write("\u03a9\3\2\2\2\u1ce9\u1cee\5\u049e\u0250\2\u1cea\u1cee")
        buf.write("\7\"\2\2\u1ceb\u1cec\6\u01d6\u00c2\2\u1cec\u1cee\7\u0082")
        buf.write("\2\2\u1ced\u1ce9\3\2\2\2\u1ced\u1cea\3\2\2\2\u1ced\u1ceb")
        buf.write("\3\2\2\2\u1cee\u03ab\3\2\2\2\u1cef\u1cf5\5\u049e\u0250")
        buf.write("\2\u1cf0\u1cf1\6\u01d7\u00c3\2\u1cf1\u1cf5\7\u0082\2\2")
        buf.write("\u1cf2\u1cf3\6\u01d7\u00c4\2\u1cf3\u1cf5\7\"\2\2\u1cf4")
        buf.write("\u1cef\3\2\2\2\u1cf4\u1cf0\3\2\2\2\u1cf4\u1cf2\3\2\2\2")
        buf.write("\u1cf5\u03ad\3\2\2\2\u1cf6\u1cfd\5\u03b2\u01da\2\u1cf7")
        buf.write("\u1cf9\7\u0307\2\2\u1cf8\u1cf7\3\2\2\2\u1cf8\u1cf9\3\2")
        buf.write("\2\2\u1cf9\u1cfa\3\2\2\2\u1cfa\u1cfc\5\u03b2\u01da\2\u1cfb")
        buf.write("\u1cf8\3\2\2\2\u1cfc\u1cff\3\2\2\2\u1cfd\u1cfb\3\2\2\2")
        buf.write("\u1cfd\u1cfe\3\2\2\2\u1cfe\u03af\3\2\2\2\u1cff\u1cfd\3")
        buf.write("\2\2\2\u1d00\u1d02\5\u03b2\u01da\2\u1d01\u1d00\3\2\2\2")
        buf.write("\u1d02\u1d03\3\2\2\2\u1d03\u1d01\3\2\2\2\u1d03\u1d04\3")
        buf.write("\2\2\2\u1d04\u03b1\3\2\2\2\u1d05\u1d07\7\u00a5\2\2\u1d06")
        buf.write("\u1d08\7\u02f0\2\2\u1d07\u1d06\3\2\2\2\u1d07\u1d08\3\2")
        buf.write("\2\2\u1d08\u1d09\3\2\2\2\u1d09\u1d87\5\u0448\u0225\2\u1d0a")
        buf.write("\u1d0b\6\u01da\u00c5\2\u1d0b\u1d0d\7\u02d3\2\2\u1d0c\u1d0e")
        buf.write("\5\u04a8\u0255\2\u1d0d\u1d0c\3\2\2\2\u1d0d\u1d0e\3\2\2")
        buf.write("\2\u1d0e\u1d11\3\2\2\2\u1d0f\u1d12\7\u017a\2\2\u1d10\u1d12")
        buf.write("\5\u049e\u0250\2\u1d11\u1d0f\3\2\2\2\u1d11\u1d10\3\2\2")
        buf.write("\2\u1d12\u1d87\3\2\2\2\u1d13\u1d15\7\u0145\2\2\u1d14\u1d16")
        buf.write("\7\u02f0\2\2\u1d15\u1d14\3\2\2\2\u1d15\u1d16\3\2\2\2\u1d16")
        buf.write("\u1d17\3\2\2\2\u1d17\u1d87\5\u047a\u023e\2\u1d18\u1d1a")
        buf.write("\7\u015a\2\2\u1d19\u1d1b\7\u02f0\2\2\u1d1a\u1d19\3\2\2")
        buf.write("\2\u1d1a\u1d1b\3\2\2\2\u1d1b\u1d1c\3\2\2\2\u1d1c\u1d87")
        buf.write("\5\u047a\u023e\2\u1d1d\u1d1f\7\33\2\2\u1d1e\u1d20\7\u02f0")
        buf.write("\2\2\u1d1f\u1d1e\3\2\2\2\u1d1f\u1d20\3\2\2\2\u1d20\u1d21")
        buf.write("\3\2\2\2\u1d21\u1d87\5\u0476\u023c\2\u1d22\u1d24\7\u0198")
        buf.write("\2\2\u1d23\u1d25\7\u02f0\2\2\u1d24\u1d23\3\2\2\2\u1d24")
        buf.write("\u1d25\3\2\2\2\u1d25\u1d26\3\2\2\2\u1d26\u1d87\5\u0484")
        buf.write("\u0243\2\u1d27\u1d29\7M\2\2\u1d28\u1d2a\7\u02f0\2\2\u1d29")
        buf.write("\u1d28\3\2\2\2\u1d29\u1d2a\3\2\2\2\u1d2a\u1d2b\3\2\2\2")
        buf.write("\u1d2b\u1d87\5\u0484\u0243\2\u1d2c\u1d2d\6\u01da\u00c6")
        buf.write("\2\u1d2d\u1d2f\7S\2\2\u1d2e\u1d30\7\u02f0\2\2\u1d2f\u1d2e")
        buf.write("\3\2\2\2\u1d2f\u1d30\3\2\2\2\u1d30\u1d31\3\2\2\2\u1d31")
        buf.write("\u1d87\5\u0486\u0244\2\u1d32\u1d33\6\u01da\u00c7\2\u1d33")
        buf.write("\u1d35\7\u00a0\2\2\u1d34\u1d36\7\u02f0\2\2\u1d35\u1d34")
        buf.write("\3\2\2\2\u1d35\u1d36\3\2\2\2\u1d36\u1d37\3\2\2\2\u1d37")
        buf.write("\u1d87\5\u0486\u0244\2\u1d38\u1d3a\7\32\2\2\u1d39\u1d3b")
        buf.write("\7\u02f0\2\2\u1d3a\u1d39\3\2\2\2\u1d3a\u1d3b\3\2\2\2\u1d3b")
        buf.write("\u1d3c\3\2\2\2\u1d3c\u1d87\5\u047a\u023e\2\u1d3d\u1d3f")
        buf.write("\7\u0191\2\2\u1d3e\u1d40\7\u02f0\2\2\u1d3f\u1d3e\3\2\2")
        buf.write("\2\u1d3f\u1d40\3\2\2\2\u1d40\u1d41\3\2\2\2\u1d41\u1d87")
        buf.write("\5\u03b4\u01db\2\u1d42\u1d44\tv\2\2\u1d43\u1d45\7\u02f0")
        buf.write("\2\2\u1d44\u1d43\3\2\2\2\u1d44\u1d45\3\2\2\2\u1d45\u1d46")
        buf.write("\3\2\2\2\u1d46\u1d87\5\u03b4\u01db\2\u1d47\u1d49\tw\2")
        buf.write("\2\u1d48\u1d4a\7\u02f0\2\2\u1d49\u1d48\3\2\2\2\u1d49\u1d4a")
        buf.write("\3\2\2\2\u1d4a\u1d4b\3\2\2\2\u1d4b\u1d87\5\u0476\u023c")
        buf.write("\2\u1d4c\u1d4e\7\u0086\2\2\u1d4d\u1d4f\7\u02f0\2\2\u1d4e")
        buf.write("\u1d4d\3\2\2\2\u1d4e\u1d4f\3\2\2\2\u1d4f\u1d50\3\2\2\2")
        buf.write("\u1d50\u1d87\5\u0476\u023c\2\u1d51\u1d53\7\u01e8\2\2\u1d52")
        buf.write("\u1d54\7\u02f0\2\2\u1d53\u1d52\3\2\2\2\u1d53\u1d54\3\2")
        buf.write("\2\2\u1d54\u1d55\3\2\2\2\u1d55\u1d87\tx\2\2\u1d56\u1d58")
        buf.write("\7\u0262\2\2\u1d57\u1d59\7\u02f0\2\2\u1d58\u1d57\3\2\2")
        buf.write("\2\u1d58\u1d59\3\2\2\2\u1d59\u1d5a\3\2\2\2\u1d5a\u1d5b")
        buf.write("\7\u030a\2\2\u1d5b\u1d5c\5\u0452\u022a\2\u1d5c\u1d5d\7")
        buf.write("\u030b\2\2\u1d5d\u1d87\3\2\2\2\u1d5e\u1d87\5\u03ba\u01de")
        buf.write("\2\u1d5f\u1d87\5\u03b6\u01dc\2\u1d60\u1d62\7\u00f5\2\2")
        buf.write("\u1d61\u1d63\7\u02f0\2\2\u1d62\u1d61\3\2\2\2\u1d62\u1d63")
        buf.write("\3\2\2\2\u1d63\u1d64\3\2\2\2\u1d64\u1d87\ty\2\2\u1d65")
        buf.write("\u1d66\7r\2\2\u1d66\u1d68\7\u008d\2\2\u1d67\u1d69\7\u02f0")
        buf.write("\2\2\u1d68\u1d67\3\2\2\2\u1d68\u1d69\3\2\2\2\u1d69\u1d6a")
        buf.write("\3\2\2\2\u1d6a\u1d87\5\u0486\u0244\2\u1d6b\u1d6c\7\u00ee")
        buf.write("\2\2\u1d6c\u1d6e\7\u008d\2\2\u1d6d\u1d6f\7\u02f0\2\2\u1d6e")
        buf.write("\u1d6d\3\2\2\2\u1d6e\u1d6f\3\2\2\2\u1d6f\u1d70\3\2\2\2")
        buf.write("\u1d70\u1d87\5\u0486\u0244\2\u1d71\u1d77\7\u023e\2\2\u1d72")
        buf.write("\u1d74\6\u01da\u00c8\2\u1d73\u1d75\7\u02f0\2\2\u1d74\u1d73")
        buf.write("\3\2\2\2\u1d74\u1d75\3\2\2\2\u1d75\u1d78\3\2\2\2\u1d76")
        buf.write("\u1d78\3\2\2\2\u1d77\u1d72\3\2\2\2\u1d77\u1d76\3\2\2\2")
        buf.write("\u1d78\u1d79\3\2\2\2\u1d79\u1d87\5\u046a\u0236\2\u1d7a")
        buf.write("\u1d7b\7\u022b\2\2\u1d7b\u1d87\tz\2\2\u1d7c\u1d7e\7V\2")
        buf.write("\2\u1d7d\u1d7f\7\u02f0\2\2\u1d7e\u1d7d\3\2\2\2\u1d7e\u1d7f")
        buf.write("\3\2\2\2\u1d7f\u1d80\3\2\2\2\u1d80\u1d87\5\u0486\u0244")
        buf.write("\2\u1d81\u1d83\7\u010a\2\2\u1d82\u1d84\7\u02f0\2\2\u1d83")
        buf.write("\u1d82\3\2\2\2\u1d83\u1d84\3\2\2\2\u1d84\u1d85\3\2\2\2")
        buf.write("\u1d85\u1d87\5\u0476\u023c\2\u1d86\u1d05\3\2\2\2\u1d86")
        buf.write("\u1d0a\3\2\2\2\u1d86\u1d13\3\2\2\2\u1d86\u1d18\3\2\2\2")
        buf.write("\u1d86\u1d1d\3\2\2\2\u1d86\u1d22\3\2\2\2\u1d86\u1d27\3")
        buf.write("\2\2\2\u1d86\u1d2c\3\2\2\2\u1d86\u1d32\3\2\2\2\u1d86\u1d38")
        buf.write("\3\2\2\2\u1d86\u1d3d\3\2\2\2\u1d86\u1d42\3\2\2\2\u1d86")
        buf.write("\u1d47\3\2\2\2\u1d86\u1d4c\3\2\2\2\u1d86\u1d51\3\2\2\2")
        buf.write("\u1d86\u1d56\3\2\2\2\u1d86\u1d5e\3\2\2\2\u1d86\u1d5f\3")
        buf.write("\2\2\2\u1d86\u1d60\3\2\2\2\u1d86\u1d65\3\2\2\2\u1d86\u1d6b")
        buf.write("\3\2\2\2\u1d86\u1d71\3\2\2\2\u1d86\u1d7a\3\2\2\2\u1d86")
        buf.write("\u1d7c\3\2\2\2\u1d86\u1d81\3\2\2\2\u1d87\u03b3\3\2\2\2")
        buf.write("\u1d88\u1d8b\5\u0476\u023c\2\u1d89\u1d8b\7\u0082\2\2\u1d8a")
        buf.write("\u1d88\3\2\2\2\u1d8a\u1d89\3\2\2\2\u1d8b\u03b5\3\2\2\2")
        buf.write("\u1d8c\u1d8e\7\u0082\2\2\u1d8d\u1d8c\3\2\2\2\u1d8d\u1d8e")
        buf.write("\3\2\2\2\u1d8e\u1d8f\3\2\2\2\u1d8f\u1d91\7G\2\2\u1d90")
        buf.write("\u1d92\7\u02f0\2\2\u1d91\u1d90\3\2\2\2\u1d91\u1d92\3\2")
        buf.write("\2\2\u1d92\u1d93\3\2\2\2\u1d93\u1d94\5\u03ac\u01d7\2\u1d94")
        buf.write("\u03b7\3\2\2\2\u1d95\u1d97\7\u0082\2\2\u1d96\u1d95\3\2")
        buf.write("\2\2\u1d96\u1d97\3\2\2\2\u1d97\u1d98\3\2\2\2\u1d98\u1d9a")
        buf.write("\7\u00a0\2\2\u1d99\u1d9b\7\u02f0\2\2\u1d9a\u1d99\3\2\2")
        buf.write("\2\u1d9a\u1d9b\3\2\2\2\u1d9b\u1d9c\3\2\2\2\u1d9c\u1d9d")
        buf.write("\5\u0484\u0243\2\u1d9d\u03b9\3\2\2\2\u1d9e\u1da0\7\u0082")
        buf.write("\2\2\u1d9f\u1d9e\3\2\2\2\u1d9f\u1da0\3\2\2\2\u1da0\u1da1")
        buf.write("\3\2\2\2\u1da1\u1da3\5\u02f8\u017d\2\u1da2\u1da4\7\u02f0")
        buf.write("\2\2\u1da3\u1da2\3\2\2\2\u1da3\u1da4\3\2\2\2\u1da4\u1da5")
        buf.write("\3\2\2\2\u1da5\u1da6\5\u03aa\u01d6\2\u1da6\u03bb\3\2\2")
        buf.write("\2\u1da7\u1da8\7\u0197\2\2\u1da8\u1da9\7/\2\2\u1da9\u1dac")
        buf.write("\5\u03be\u01e0\2\u1daa\u1dab\7\u0196\2\2\u1dab\u1dad\5")
        buf.write("\u0478\u023d\2\u1dac\u1daa\3\2\2\2\u1dac\u1dad\3\2\2\2")
        buf.write("\u1dad\u1daf\3\2\2\2\u1dae\u1db0\5\u03c0\u01e1\2\u1daf")
        buf.write("\u1dae\3\2\2\2\u1daf\u1db0\3\2\2\2\u1db0\u1db2\3\2\2\2")
        buf.write("\u1db1\u1db3\5\u03c4\u01e3\2\u1db2\u1db1\3\2\2\2\u1db2")
        buf.write("\u1db3\3\2\2\2\u1db3\u03bd\3\2\2\2\u1db4\u1db6\7\u0117")
        buf.write("\2\2\u1db5\u1db4\3\2\2\2\u1db5\u1db6\3\2\2\2\u1db6\u1db7")
        buf.write("\3\2\2\2\u1db7\u1db9\7\u010b\2\2\u1db8\u1dba\5\u03c2\u01e2")
        buf.write("\2\u1db9\u1db8\3\2\2\2\u1db9\u1dba\3\2\2\2\u1dba\u1dbb")
        buf.write("\3\2\2\2\u1dbb\u1dbd\7\u030a\2\2\u1dbc\u1dbe\5\u046c\u0237")
        buf.write("\2\u1dbd\u1dbc\3\2\2\2\u1dbd\u1dbe\3\2\2\2\u1dbe\u1dbf")
        buf.write("\3\2\2\2\u1dbf\u1dd6\7\u030b\2\2\u1dc0\u1dc2\7\u0117\2")
        buf.write("\2\u1dc1\u1dc0\3\2\2\2\u1dc1\u1dc2\3\2\2\2\u1dc2\u1dc3")
        buf.write("\3\2\2\2\u1dc3\u1dc4\7\u00de\2\2\u1dc4\u1dc5\7\u030a\2")
        buf.write("\2\u1dc5\u1dc6\5\u02b0\u0159\2\u1dc6\u1dc7\7\u030b\2\2")
        buf.write("\u1dc7\u1dd6\3\2\2\2\u1dc8\u1dd3\t{\2\2\u1dc9\u1dca\7")
        buf.write("\u030a\2\2\u1dca\u1dcb\5\u02b0\u0159\2\u1dcb\u1dcc\7\u030b")
        buf.write("\2\2\u1dcc\u1dd4\3\2\2\2\u1dcd\u1dce\7I\2\2\u1dce\u1dd0")
        buf.write("\7\u030a\2\2\u1dcf\u1dd1\5\u046c\u0237\2\u1dd0\u1dcf\3")
        buf.write("\2\2\2\u1dd0\u1dd1\3\2\2\2\u1dd1\u1dd2\3\2\2\2\u1dd2\u1dd4")
        buf.write("\7\u030b\2\2\u1dd3\u1dc9\3\2\2\2\u1dd3\u1dcd\3\2\2\2\u1dd4")
        buf.write("\u1dd6\3\2\2\2\u1dd5\u1db5\3\2\2\2\u1dd5\u1dc1\3\2\2\2")
        buf.write("\u1dd5\u1dc8\3\2\2\2\u1dd6\u03bf\3\2\2\2\u1dd7\u1dd8\7")
        buf.write("\u0233\2\2\u1dd8\u1dda\7/\2\2\u1dd9\u1ddb\7\u0117\2\2")
        buf.write("\u1dda\u1dd9\3\2\2\2\u1dda\u1ddb\3\2\2\2\u1ddb\u1de6\3")
        buf.write("\2\2\2\u1ddc\u1ddd\7\u00de\2\2\u1ddd\u1dde\7\u030a\2\2")
        buf.write("\u1dde\u1ddf\5\u02b0\u0159\2\u1ddf\u1de0\7\u030b\2\2\u1de0")
        buf.write("\u1de7\3\2\2\2\u1de1\u1de3\7\u010b\2\2\u1de2\u1de4\5\u03c2")
        buf.write("\u01e2\2\u1de3\u1de2\3\2\2\2\u1de3\u1de4\3\2\2\2\u1de4")
        buf.write("\u1de5\3\2\2\2\u1de5\u1de7\5\u046e\u0238\2\u1de6\u1ddc")
        buf.write("\3\2\2\2\u1de6\u1de1\3\2\2\2\u1de7\u1dea\3\2\2\2\u1de8")
        buf.write("\u1de9\7\u0232\2\2\u1de9\u1deb\5\u0478\u023d\2\u1dea\u1de8")
        buf.write("\3\2\2\2\u1dea\u1deb\3\2\2\2\u1deb\u03c1\3\2\2\2\u1dec")
        buf.write("\u1ded\6\u01e2\u00c9\2\u1ded\u1dee\7\13\2\2\u1dee\u1def")
        buf.write("\7\u02f0\2\2\u1def\u1df0\5\u0478\u023d\2\u1df0\u03c3\3")
        buf.write("\2\2\2\u1df1\u1df2\7\u030a\2\2\u1df2\u1df7\5\u03c6\u01e4")
        buf.write("\2\u1df3\u1df4\7\u0307\2\2\u1df4\u1df6\5\u03c6\u01e4\2")
        buf.write("\u1df5\u1df3\3\2\2\2\u1df6\u1df9\3\2\2\2\u1df7\u1df5\3")
        buf.write("\2\2\2\u1df7\u1df8\3\2\2\2\u1df8\u1dfa\3\2\2\2\u1df9\u1df7")
        buf.write("\3\2\2\2\u1dfa\u1dfb\7\u030b\2\2\u1dfb\u03c5\3\2\2\2\u1dfc")
        buf.write("\u1dfd\7\u0197\2\2\u1dfd\u1e08\5\u046a\u0236\2\u1dfe\u1dff")
        buf.write("\7\u0274\2\2\u1dff\u1e00\7\u0113\2\2\u1e00\u1e03\7\u0247")
        buf.write("\2\2\u1e01\u1e04\5\u03ce\u01e8\2\u1e02\u1e04\7\u014b\2")
        buf.write("\2\u1e03\u1e01\3\2\2\2\u1e03\u1e02\3\2\2\2\u1e04\u1e09")
        buf.write("\3\2\2\2\u1e05\u1e06\7\u0274\2\2\u1e06\u1e07\7\u00fd\2")
        buf.write("\2\u1e07\u1e09\5\u03c8\u01e5\2\u1e08\u1dfe\3\2\2\2\u1e08")
        buf.write("\u1e05\3\2\2\2\u1e08\u1e09\3\2\2\2\u1e09\u1e0d\3\2\2\2")
        buf.write("\u1e0a\u1e0c\5\u03ca\u01e6\2\u1e0b\u1e0a\3\2\2\2\u1e0c")
        buf.write("\u1e0f\3\2\2\2\u1e0d\u1e0b\3\2\2\2\u1e0d\u1e0e\3\2\2\2")
        buf.write("\u1e0e\u1e1b\3\2\2\2\u1e0f\u1e0d\3\2\2\2\u1e10\u1e11\7")
        buf.write("\u030a\2\2\u1e11\u1e16\5\u03cc\u01e7\2\u1e12\u1e13\7\u0307")
        buf.write("\2\2\u1e13\u1e15\5\u03cc\u01e7\2\u1e14\u1e12\3\2\2\2\u1e15")
        buf.write("\u1e18\3\2\2\2\u1e16\u1e14\3\2\2\2\u1e16\u1e17\3\2\2\2")
        buf.write("\u1e17\u1e19\3\2\2\2\u1e18\u1e16\3\2\2\2\u1e19\u1e1a\7")
        buf.write("\u030b\2\2\u1e1a\u1e1c\3\2\2\2\u1e1b\u1e10\3\2\2\2\u1e1b")
        buf.write("\u1e1c\3\2\2\2\u1e1c\u03c7\3\2\2\2\u1e1d\u1e2a\5\u03ce")
        buf.write("\u01e8\2\u1e1e\u1e1f\7\u030a\2\2\u1e1f\u1e24\5\u03ce\u01e8")
        buf.write("\2\u1e20\u1e21\7\u0307\2\2\u1e21\u1e23\5\u03ce\u01e8\2")
        buf.write("\u1e22\u1e20\3\2\2\2\u1e23\u1e26\3\2\2\2\u1e24\u1e22\3")
        buf.write("\2\2\2\u1e24\u1e25\3\2\2\2\u1e25\u1e27\3\2\2\2\u1e26\u1e24")
        buf.write("\3\2\2\2\u1e27\u1e28\7\u030b\2\2\u1e28\u1e2a\3\2\2\2\u1e29")
        buf.write("\u1e1d\3\2\2\2\u1e29\u1e1e\3\2\2\2\u1e2a\u03c9\3\2\2\2")
        buf.write("\u1e2b\u1e2d\7\u023e\2\2\u1e2c\u1e2e\7\u02f0\2\2\u1e2d")
        buf.write("\u1e2c\3\2\2\2\u1e2d\u1e2e\3\2\2\2\u1e2e\u1e2f\3\2\2\2")
        buf.write("\u1e2f\u1e4e\5\u046a\u0236\2\u1e30\u1e32\7\u022b\2\2\u1e31")
        buf.write("\u1e30\3\2\2\2\u1e31\u1e32\3\2\2\2\u1e32\u1e33\3\2\2\2")
        buf.write("\u1e33\u1e35\7\u00a5\2\2\u1e34\u1e36\7\u02f0\2\2\u1e35")
        buf.write("\u1e34\3\2\2\2\u1e35\u1e36\3\2\2\2\u1e36\u1e37\3\2\2\2")
        buf.write("\u1e37\u1e4e\5\u0448\u0225\2\u1e38\u1e3a\7\u0172\2\2\u1e39")
        buf.write("\u1e3b\7\u02f0\2\2\u1e3a\u1e39\3\2\2\2\u1e3a\u1e3b\3\2")
        buf.write("\2\2\u1e3b\u1e3c\3\2\2\2\u1e3c\u1e4e\5\u0478\u023d\2\u1e3d")
        buf.write("\u1e3f\t|\2\2\u1e3e\u1e40\7\u02f0\2\2\u1e3f\u1e3e\3\2")
        buf.write("\2\2\u1e3f\u1e40\3\2\2\2\u1e40\u1e41\3\2\2\2\u1e41\u1e4e")
        buf.write("\5\u0478\u023d\2\u1e42\u1e43\t}\2\2\u1e43\u1e45\7\u008d")
        buf.write("\2\2\u1e44\u1e46\7\u02f0\2\2\u1e45\u1e44\3\2\2\2\u1e45")
        buf.write("\u1e46\3\2\2\2\u1e46\u1e47\3\2\2\2\u1e47\u1e4e\5\u048a")
        buf.write("\u0246\2\u1e48\u1e4a\7M\2\2\u1e49\u1e4b\7\u02f0\2\2\u1e4a")
        buf.write("\u1e49\3\2\2\2\u1e4a\u1e4b\3\2\2\2\u1e4b\u1e4c\3\2\2\2")
        buf.write("\u1e4c\u1e4e\5\u048a\u0246\2\u1e4d\u1e2b\3\2\2\2\u1e4d")
        buf.write("\u1e31\3\2\2\2\u1e4d\u1e38\3\2\2\2\u1e4d\u1e3d\3\2\2\2")
        buf.write("\u1e4d\u1e42\3\2\2\2\u1e4d\u1e48\3\2\2\2\u1e4e\u03cb\3")
        buf.write("\2\2\2\u1e4f\u1e50\7\u0233\2\2\u1e50\u1e54\5\u049e\u0250")
        buf.write("\2\u1e51\u1e53\5\u03ca\u01e6\2\u1e52\u1e51\3\2\2\2\u1e53")
        buf.write("\u1e56\3\2\2\2\u1e54\u1e52\3\2\2\2\u1e54\u1e55\3\2\2\2")
        buf.write("\u1e55\u03cd\3\2\2\2\u1e56\u1e54\3\2\2\2\u1e57\u1e58\7")
        buf.write("\u030a\2\2\u1e58\u1e5d\5\u03d0\u01e9\2\u1e59\u1e5a\7\u0307")
        buf.write("\2\2\u1e5a\u1e5c\5\u03d0\u01e9\2\u1e5b\u1e59\3\2\2\2\u1e5c")
        buf.write("\u1e5f\3\2\2\2\u1e5d\u1e5b\3\2\2\2\u1e5d\u1e5e\3\2\2\2")
        buf.write("\u1e5e\u1e60\3\2\2\2\u1e5f\u1e5d\3\2\2\2\u1e60\u1e61\7")
        buf.write("\u030b\2\2\u1e61\u03cf\3\2\2\2\u1e62\u1e65\5\u02b0\u0159")
        buf.write("\2\u1e63\u1e65\7\u014b\2\2\u1e64\u1e62\3\2\2\2\u1e64\u1e63")
        buf.write("\3\2\2\2\u1e65\u03d1\3\2\2\2\u1e66\u1e67\7\u0084\2\2\u1e67")
        buf.write("\u1e68\7\u02f0\2\2\u1e68\u1e69\5\u0404\u0203\2\u1e69\u03d3")
        buf.write("\3\2\2\2\u1e6a\u1e6b\7\u00e9\2\2\u1e6b\u1e6c\7\u00b0\2")
        buf.write("\2\u1e6c\u03d5\3\2\2\2\u1e6d\u1e6e\7\u00e9\2\2\u1e6e\u1e6f")
        buf.write("\5\u02fa\u017e\2\u1e6f\u1e70\7\u00b0\2\2\u1e70\u03d7\3")
        buf.write("\2\2\2\u1e71\u1e73\t~\2\2\u1e72\u1e71\3\2\2\2\u1e72\u1e73")
        buf.write("\3\2\2\2\u1e73\u1e74\3\2\2\2\u1e74\u1e75\5\u03da\u01ee")
        buf.write("\2\u1e75\u03d9\3\2\2\2\u1e76\u1e77\5\u0456\u022c\2\u1e77")
        buf.write("\u1e78\5\u03de\u01f0\2\u1e78\u03db\3\2\2\2\u1e79\u1e7a")
        buf.write("\7G\2\2\u1e7a\u1e7b\5\u03ac\u01d7\2\u1e7b\u03dd\3\2\2")
        buf.write("\2\u1e7c\u1e7e\5\u0396\u01cc\2\u1e7d\u1e7f\5\u03dc\u01ef")
        buf.write("\2\u1e7e\u1e7d\3\2\2\2\u1e7e\u1e7f\3\2\2\2\u1e7f\u03df")
        buf.write("\3\2\2\2\u1e80\u1e81\7\u030a\2\2\u1e81\u1e82\5\u0424\u0213")
        buf.write("\2\u1e82\u1e83\7\u0307\2\2\u1e83\u1e84\5\u0424\u0213\2")
        buf.write("\u1e84\u1e85\7\u030b\2\2\u1e85\u03e1\3\2\2\2\u1e86\u1e8b")
        buf.write("\5\u0434\u021b\2\u1e87\u1e88\7\u0307\2\2\u1e88\u1e8a\5")
        buf.write("\u0434\u021b\2\u1e89\u1e87\3\2\2\2\u1e8a\u1e8d\3\2\2\2")
        buf.write("\u1e8b\u1e89\3\2\2\2\u1e8b\u1e8c\3\2\2\2\u1e8c\u03e3\3")
        buf.write("\2\2\2\u1e8d\u1e8b\3\2\2\2\u1e8e\u1e93\5\u03e6\u01f4\2")
        buf.write("\u1e8f\u1e90\7\u0307\2\2\u1e90\u1e92\5\u03e6\u01f4\2\u1e91")
        buf.write("\u1e8f\3\2\2\2\u1e92\u1e95\3\2\2\2\u1e93\u1e91\3\2\2\2")
        buf.write("\u1e93\u1e94\3\2\2\2\u1e94\u03e5\3\2\2\2\u1e95\u1e93\3")
        buf.write("\2\2\2\u1e96\u1e97\5\u0418\u020d\2\u1e97\u1e9a\7\u02f0")
        buf.write("\2\2\u1e98\u1e9b\5\u02a6\u0154\2\u1e99\u1e9b\7\u0082\2")
        buf.write("\2\u1e9a\u1e98\3\2\2\2\u1e9a\u1e99\3\2\2\2\u1e9b\u03e7")
        buf.write("\3\2\2\2\u1e9c\u1e9d\5\u02f8\u017d\2\u1e9d\u1e9e\5\u03aa")
        buf.write("\u01d6\2\u1e9e\u03e9\3\2\2\2\u1e9f\u1ea1\7I\2\2\u1ea0")
        buf.write("\u1ea2\5\u03ec\u01f7\2\u1ea1\u1ea0\3\2\2\2\u1ea2\u1ea3")
        buf.write("\3\2\2\2\u1ea3\u1ea1\3\2\2\2\u1ea3\u1ea4\3\2\2\2\u1ea4")
        buf.write("\u03eb\3\2\2\2\u1ea5\u1ea6\7\u0245\2\2\u1ea6\u1ea7\7/")
        buf.write("\2\2\u1ea7\u1eb2\5\u0486\u0244\2\u1ea8\u1eaa\7\u018a\2")
        buf.write("\2\u1ea9\u1ea8\3\2\2\2\u1ea9\u1eaa\3\2\2\2\u1eaa\u1eab")
        buf.write("\3\2\2\2\u1eab\u1eac\7\u009f\2\2\u1eac\u1ead\7/\2\2\u1ead")
        buf.write("\u1eb2\5\u0486\u0244\2\u1eae\u1eaf\7\u00a9\2\2\u1eaf\u1eb0")
        buf.write("\7/\2\2\u1eb0\u1eb2\5\u0486\u0244\2\u1eb1\u1ea5\3\2\2")
        buf.write("\2\u1eb1\u1ea9\3\2\2\2\u1eb1\u1eae\3\2\2\2\u1eb2\u03ed")
        buf.write("\3\2\2\2\u1eb3\u1eb5\7\u0118\2\2\u1eb4\u1eb6\5\u03f0\u01f9")
        buf.write("\2\u1eb5\u1eb4\3\2\2\2\u1eb6\u1eb7\3\2\2\2\u1eb7\u1eb5")
        buf.write("\3\2\2\2\u1eb7\u1eb8\3\2\2\2\u1eb8\u03ef\3\2\2\2\u1eb9")
        buf.write("\u1eba\t\177\2\2\u1eba\u1ebb\7/\2\2\u1ebb\u1ebc\5\u0486")
        buf.write("\u0244\2\u1ebc\u03f1\3\2\2\2\u1ebd\u1ec2\5\u0404\u0203")
        buf.write("\2\u1ebe\u1ebf\7\u0307\2\2\u1ebf\u1ec1\5\u0404\u0203\2")
        buf.write("\u1ec0\u1ebe\3\2\2\2\u1ec1\u1ec4\3\2\2\2\u1ec2\u1ec0\3")
        buf.write("\2\2\2\u1ec2\u1ec3\3\2\2\2\u1ec3\u03f3\3\2\2\2\u1ec4\u1ec2")
        buf.write("\3\2\2\2\u1ec5\u1eca\5\u03f8\u01fd\2\u1ec6\u1ec7\7\u0307")
        buf.write("\2\2\u1ec7\u1ec9\5\u03f8\u01fd\2\u1ec8\u1ec6\3\2\2\2\u1ec9")
        buf.write("\u1ecc\3\2\2\2\u1eca\u1ec8\3\2\2\2\u1eca\u1ecb\3\2\2\2")
        buf.write("\u1ecb\u03f5\3\2\2\2\u1ecc\u1eca\3\2\2\2\u1ecd\u1ed2\5")
        buf.write("\u03fa\u01fe\2\u1ece\u1ecf\7\u0307\2\2\u1ecf\u1ed1\5\u03fa")
        buf.write("\u01fe\2\u1ed0\u1ece\3\2\2\2\u1ed1\u1ed4\3\2\2\2\u1ed2")
        buf.write("\u1ed0\3\2\2\2\u1ed2\u1ed3\3\2\2\2\u1ed3\u03f7\3\2\2\2")
        buf.write("\u1ed4\u1ed2\3\2\2\2\u1ed5\u1ef0\5\u0404\u0203\2\u1ed6")
        buf.write("\u1eee\7\u00e8\2\2\u1ed7\u1eda\7/\2\2\u1ed8\u1ed9\6\u01fd")
        buf.write("\u00ca\2\u1ed9\u1edb\7\u0198\2\2\u1eda\u1ed8\3\2\2\2\u1eda")
        buf.write("\u1edb\3\2\2\2\u1edb\u1edc\3\2\2\2\u1edc\u1eef\5\u0486")
        buf.write("\u0244\2\u1edd\u1ede\7\u0287\2\2\u1ede\u1ee4\5\u049e\u0250")
        buf.write("\2\u1edf\u1ee0\7\23\2\2\u1ee0\u1ee5\5\u0488\u0245\2\u1ee1")
        buf.write("\u1ee2\6\u01fd\u00cb\2\u1ee2\u1ee3\7/\2\2\u1ee3\u1ee5")
        buf.write("\5\u0486\u0244\2\u1ee4\u1edf\3\2\2\2\u1ee4\u1ee1\3\2\2")
        buf.write("\2\u1ee4\u1ee5\3\2\2\2\u1ee5\u1eef\3\2\2\2\u1ee6\u1ee9")
        buf.write("\6\u01fd\u00cc\2\u1ee7\u1ee8\7\u0287\2\2\u1ee8\u1eea\5")
        buf.write("\u049e\u0250\2\u1ee9\u1ee7\3\2\2\2\u1ee9\u1eea\3\2\2\2")
        buf.write("\u1eea\u1eeb\3\2\2\2\u1eeb\u1eec\7/\2\2\u1eec\u1eed\7")
        buf.write("\u02e0\2\2\u1eed\u1eef\7\u0198\2\2\u1eee\u1ed7\3\2\2\2")
        buf.write("\u1eee\u1edd\3\2\2\2\u1eee\u1ee6\3\2\2\2\u1eef\u1ef1\3")
        buf.write("\2\2\2\u1ef0\u1ed6\3\2\2\2\u1ef0\u1ef1\3\2\2\2\u1ef1\u03f9")
        buf.write("\3\2\2\2\u1ef2\u1f0f\5\u0404\u0203\2\u1ef3\u1f0a\7\u00e8")
        buf.write("\2\2\u1ef4\u1ef5\7\u0287\2\2\u1ef5\u1ef7\5\u049e\u0250")
        buf.write("\2\u1ef6\u1ef4\3\2\2\2\u1ef6\u1ef7\3\2\2\2\u1ef7\u1ef8")
        buf.write("\3\2\2\2\u1ef8\u1ef9\7/\2\2\u1ef9\u1efc\5\u0486\u0244")
        buf.write("\2\u1efa\u1efb\7\u01cc\2\2\u1efb\u1efd\5\u0486\u0244\2")
        buf.write("\u1efc\u1efa\3\2\2\2\u1efc\u1efd\3\2\2\2\u1efd\u1eff\3")
        buf.write("\2\2\2\u1efe\u1f00\5\u03fc\u01ff\2\u1eff\u1efe\3\2\2\2")
        buf.write("\u1eff\u1f00\3\2\2\2\u1f00\u1f0b\3\2\2\2\u1f01\u1f02\7")
        buf.write("\u0287\2\2\u1f02\u1f08\5\u049e\u0250\2\u1f03\u1f04\7\23")
        buf.write("\2\2\u1f04\u1f06\5\u0488\u0245\2\u1f05\u1f07\5\u03fc\u01ff")
        buf.write("\2\u1f06\u1f05\3\2\2\2\u1f06\u1f07\3\2\2\2\u1f07\u1f09")
        buf.write("\3\2\2\2\u1f08\u1f03\3\2\2\2\u1f08\u1f09\3\2\2\2\u1f09")
        buf.write("\u1f0b\3\2\2\2\u1f0a\u1ef6\3\2\2\2\u1f0a\u1f01\3\2\2\2")
        buf.write("\u1f0a\u1f0b\3\2\2\2\u1f0b\u1f10\3\2\2\2\u1f0c\u1f0e\5")
        buf.write("\u03fe\u0200\2\u1f0d\u1f0c\3\2\2\2\u1f0d\u1f0e\3\2\2\2")
        buf.write("\u1f0e\u1f10\3\2\2\2\u1f0f\u1ef3\3\2\2\2\u1f0f\u1f0d\3")
        buf.write("\2\2\2\u1f10\u03fb\3\2\2\2\u1f11\u1f12\7\u02d9\2\2\u1f12")
        buf.write("\u1f13\7g\2\2\u1f13\u1f14\7\u0198\2\2\u1f14\u03fd\3\2")
        buf.write("\2\2\u1f15\u1f16\7\u008f\2\2\u1f16\u1f17\7\u02da\2\2\u1f17")
        buf.write("\u1f18\7\u0198\2\2\u1f18\u03ff\3\2\2\2\u1f19\u1f1a\7\u01cc")
        buf.write("\2\2\u1f1a\u1f1b\5\u0486\u0244\2\u1f1b\u0401\3\2\2\2\u1f1c")
        buf.write("\u1f20\5\u049e\u0250\2\u1f1d\u1f1e\7\u0311\2\2\u1f1e\u1f21")
        buf.write("\5\u049e\u0250\2\u1f1f\u1f21\7\u0312\2\2\u1f20\u1f1d\3")
        buf.write("\2\2\2\u1f20\u1f1f\3\2\2\2\u1f20\u1f21\3\2\2\2\u1f21\u0403")
        buf.write("\3\2\2\2\u1f22\u1f28\5\u0402\u0202\2\u1f23\u1f25\7k\2")
        buf.write("\2\u1f24\u1f26\5\u04a6\u0254\2\u1f25\u1f24\3\2\2\2\u1f25")
        buf.write("\u1f26\3\2\2\2\u1f26\u1f28\3\2\2\2\u1f27\u1f22\3\2\2\2")
        buf.write("\u1f27\u1f23\3\2\2\2\u1f28\u0405\3\2\2\2\u1f29\u1f2a\7")
        buf.write("\u0115\2\2\u1f2a\u1f2b\5\u0484\u0243\2\u1f2b\u0407\3\2")
        buf.write("\2\2\u1f2c\u1f2f\5\u0406\u0204\2\u1f2d\u1f2f\5\u0168\u00b5")
        buf.write("\2\u1f2e\u1f2c\3\2\2\2\u1f2e\u1f2d\3\2\2\2\u1f2f\u0409")
        buf.write("\3\2\2\2\u1f30\u1f31\t\u0080\2\2\u1f31\u040b\3\2\2\2\u1f32")
        buf.write("\u1f33\t\u0081\2\2\u1f33\u040d\3\2\2\2\u1f34\u1f35\6\u0208")
        buf.write("\u00cd\2\u1f35\u1f36\7\u0197\2\2\u1f36\u1f37\5\u046e\u0238")
        buf.write("\2\u1f37\u040f\3\2\2\2\u1f38\u1f3e\5\u0474\u023b\2\u1f39")
        buf.write("\u1f3b\5\u0470\u0239\2\u1f3a\u1f3c\5\u0474\u023b\2\u1f3b")
        buf.write("\u1f3a\3\2\2\2\u1f3b\u1f3c\3\2\2\2\u1f3c\u1f3e\3\2\2\2")
        buf.write("\u1f3d\u1f38\3\2\2\2\u1f3d\u1f39\3\2\2\2\u1f3e\u0411\3")
        buf.write("\2\2\2\u1f3f\u1f40\6\u020a\u00ce\2\u1f40\u1f44\5\u046a")
        buf.write("\u0236\2\u1f41\u1f42\6\u020a\u00cf\2\u1f42\u1f44\5\u0410")
        buf.write("\u0209\2\u1f43\u1f3f\3\2\2\2\u1f43\u1f41\3\2\2\2\u1f44")
        buf.write("\u0413\3\2\2\2\u1f45\u1f46\5\u046a\u0236\2\u1f46\u0415")
        buf.write("\3\2\2\2\u1f47\u1f48\7\u030a\2\2\u1f48\u1f4d\5\u0414\u020b")
        buf.write("\2\u1f49\u1f4a\7\u0307\2\2\u1f4a\u1f4c\5\u0414\u020b\2")
        buf.write("\u1f4b\u1f49\3\2\2\2\u1f4c\u1f4f\3\2\2\2\u1f4d\u1f4b\3")
        buf.write("\2\2\2\u1f4d\u1f4e\3\2\2\2\u1f4e\u1f50\3\2\2\2\u1f4f\u1f4d")
        buf.write("\3\2\2\2\u1f50\u1f51\7\u030b\2\2\u1f51\u0417\3\2\2\2\u1f52")
        buf.write("\u1f53\5\u0410\u0209\2\u1f53\u0419\3\2\2\2\u1f54\u1f57")
        buf.write("\5\u0418\u020d\2\u1f55\u1f57\5\u0420\u0211\2\u1f56\u1f54")
        buf.write("\3\2\2\2\u1f56\u1f55\3\2\2\2\u1f57\u041b\3\2\2\2\u1f58")
        buf.write("\u1f59\5\u046a\u0236\2\u1f59\u041d\3\2\2\2\u1f5a\u1f5b")
        buf.write("\5\u0410\u0209\2\u1f5b\u041f\3\2\2\2\u1f5c\u1f5d\5\u046a")
        buf.write("\u0236\2\u1f5d\u1f61\7\u0306\2\2\u1f5e\u1f5f\5\u046a\u0236")
        buf.write("\2\u1f5f\u1f60\7\u0306\2\2\u1f60\u1f62\3\2\2\2\u1f61\u1f5e")
        buf.write("\3\2\2\2\u1f61\u1f62\3\2\2\2\u1f62\u1f63\3\2\2\2\u1f63")
        buf.write("\u1f64\7\u02fa\2\2\u1f64\u0421\3\2\2\2\u1f65\u1f66\5\u046a")
        buf.write("\u0236\2\u1f66\u0423\3\2\2\2\u1f67\u1f68\5\u046a\u0236")
        buf.write("\2\u1f68\u0425\3\2\2\2\u1f69\u1f6a\5\u0470\u0239\2\u1f6a")
        buf.write("\u0427\3\2\2\2\u1f6b\u1f6c\5\u0470\u0239\2\u1f6c\u0429")
        buf.write("\3\2\2\2\u1f6d\u1f6e\5\u0470\u0239\2\u1f6e\u042b\3\2\2")
        buf.write("\2\u1f6f\u1f70\5\u0470\u0239\2\u1f70\u042d\3\2\2\2\u1f71")
        buf.write("\u1f72\5\u0470\u0239\2\u1f72\u042f\3\2\2\2\u1f73\u1f74")
        buf.write("\5\u0470\u0239\2\u1f74\u0431\3\2\2\2\u1f75\u1f78\5\u0470")
        buf.write("\u0239\2\u1f76\u1f78\5\u0474\u023b\2\u1f77\u1f75\3\2\2")
        buf.write("\2\u1f77\u1f76\3\2\2\2\u1f78\u0433\3\2\2\2\u1f79\u1f7c")
        buf.write("\5\u0470\u0239\2\u1f7a\u1f7c\5\u0474\u023b\2\u1f7b\u1f79")
        buf.write("\3\2\2\2\u1f7b\u1f7a\3\2\2\2\u1f7c\u0435\3\2\2\2\u1f7d")
        buf.write("\u1f7e\5\u046a\u0236\2\u1f7e\u0437\3\2\2\2\u1f7f\u1f80")
        buf.write("\5\u046a\u0236\2\u1f80\u0439\3\2\2\2\u1f81\u1f82\5\u046a")
        buf.write("\u0236\2\u1f82\u043b\3\2\2\2\u1f83\u1f84\5\u046a\u0236")
        buf.write("\2\u1f84\u043d\3\2\2\2\u1f85\u1f86\5\u0470\u0239\2\u1f86")
        buf.write("\u043f\3\2\2\2\u1f87\u1f88\5\u0470\u0239\2\u1f88\u0441")
        buf.write("\3\2\2\2\u1f89\u1f8a\5\u046a\u0236\2\u1f8a\u0443\3\2\2")
        buf.write("\2\u1f8b\u1f8c\5\u049e\u0250\2\u1f8c\u0445\3\2\2\2\u1f8d")
        buf.write("\u1f8e\5\u049e\u0250\2\u1f8e\u0447\3\2\2\2\u1f8f\u1f90")
        buf.write("\5\u049e\u0250\2\u1f90\u0449\3\2\2\2\u1f91\u1f94\5\u0470")
        buf.write("\u0239\2\u1f92\u1f94\5\u0474\u023b\2\u1f93\u1f91\3\2\2")
        buf.write("\2\u1f93\u1f92\3\2\2\2\u1f94\u044b\3\2\2\2\u1f95\u1f96")
        buf.write("\5\u0424\u0213\2\u1f96\u1f97\5\u0474\u023b\2\u1f97\u044d")
        buf.write("\3\2\2\2\u1f98\u1fa0\5\u046a\u0236\2\u1f99\u1f9a\7\u0306")
        buf.write("\2\2\u1f9a\u1fa1\7\u02fa\2\2\u1f9b\u1f9e\5\u0474\u023b")
        buf.write("\2\u1f9c\u1f9d\7\u0306\2\2\u1f9d\u1f9f\7\u02fa\2\2\u1f9e")
        buf.write("\u1f9c\3\2\2\2\u1f9e\u1f9f\3\2\2\2\u1f9f\u1fa1\3\2\2\2")
        buf.write("\u1fa0\u1f99\3\2\2\2\u1fa0\u1f9b\3\2\2\2\u1fa0\u1fa1\3")
        buf.write("\2\2\2\u1fa1\u044f\3\2\2\2\u1fa2\u1fa5\5\u0470\u0239\2")
        buf.write("\u1fa3\u1fa5\5\u0474\u023b\2\u1fa4\u1fa2\3\2\2\2\u1fa4")
        buf.write("\u1fa3\3\2\2\2\u1fa5\u0451\3\2\2\2\u1fa6\u1fab\5\u0450")
        buf.write("\u0229\2\u1fa7\u1fa8\7\u0307\2\2\u1fa8\u1faa\5\u0450\u0229")
        buf.write("\2\u1fa9\u1fa7\3\2\2\2\u1faa\u1fad\3\2\2\2\u1fab\u1fa9")
        buf.write("\3\2\2\2\u1fab\u1fac\3\2\2\2\u1fac\u0453\3\2\2\2\u1fad")
        buf.write("\u1fab\3\2\2\2\u1fae\u1fb3\5\u044e\u0228\2\u1faf\u1fb0")
        buf.write("\7\u0307\2\2\u1fb0\u1fb2\5\u044e\u0228\2\u1fb1\u1faf\3")
        buf.write("\2\2\2\u1fb2\u1fb5\3\2\2\2\u1fb3\u1fb1\3\2\2\2\u1fb3\u1fb4")
        buf.write("\3\2\2\2\u1fb4\u0455\3\2\2\2\u1fb5\u1fb3\3\2\2\2\u1fb6")
        buf.write("\u1fb7\5\u046a\u0236\2\u1fb7\u0457\3\2\2\2\u1fb8\u1fbb")
        buf.write("\5\u0468\u0235\2\u1fb9\u1fbb\5\u04b6\u025c\2\u1fba\u1fb8")
        buf.write("\3\2\2\2\u1fba\u1fb9\3\2\2\2\u1fbb\u0459\3\2\2\2\u1fbc")
        buf.write("\u1fbd\5\u0458\u022d\2\u1fbd\u045b\3\2\2\2\u1fbe\u1fc1")
        buf.write("\5\u0468\u0235\2\u1fbf\u1fc1\5\u04bc\u025f\2\u1fc0\u1fbe")
        buf.write("\3\2\2\2\u1fc0\u1fbf\3\2\2\2\u1fc1\u045d\3\2\2\2\u1fc2")
        buf.write("\u1fc3\5\u045c\u022f\2\u1fc3\u045f\3\2\2\2\u1fc4\u1fc5")
        buf.write("\5\u046a\u0236\2\u1fc5\u0461\3\2\2\2\u1fc6\u1fc7\5\u0484")
        buf.write("\u0243\2\u1fc7\u0463\3\2\2\2\u1fc8\u1fc9\5\u046a\u0236")
        buf.write("\2\u1fc9\u0465\3\2\2\2\u1fca\u1fcb\5\u046a\u0236\2\u1fcb")
        buf.write("\u0467\3\2\2\2\u1fcc\u1fd0\t\u0082\2\2\u1fcd\u1fce\6\u0235")
        buf.write("\u00d0\2\u1fce\u1fd0\7\u0320\2\2\u1fcf\u1fcc\3\2\2\2\u1fcf")
        buf.write("\u1fcd\3\2\2\2\u1fd0\u0469\3\2\2\2\u1fd1\u1fd4\5\u0468")
        buf.write("\u0235\2\u1fd2\u1fd4\5\u04b0\u0259\2\u1fd3\u1fd1\3\2\2")
        buf.write("\2\u1fd3\u1fd2\3\2\2\2\u1fd4\u046b\3\2\2\2\u1fd5\u1fda")
        buf.write("\5\u046a\u0236\2\u1fd6\u1fd7\7\u0307\2\2\u1fd7\u1fd9\5")
        buf.write("\u046a\u0236\2\u1fd8\u1fd6\3\2\2\2\u1fd9\u1fdc\3\2\2\2")
        buf.write("\u1fda\u1fd8\3\2\2\2\u1fda\u1fdb\3\2\2\2\u1fdb\u046d\3")
        buf.write("\2\2\2\u1fdc\u1fda\3\2\2\2\u1fdd\u1fde\7\u030a\2\2\u1fde")
        buf.write("\u1fdf\5\u046c\u0237\2\u1fdf\u1fe0\7\u030b\2\2\u1fe0\u046f")
        buf.write("\3\2\2\2\u1fe1\u1fe3\5\u046a\u0236\2\u1fe2\u1fe4\5\u0474")
        buf.write("\u023b\2\u1fe3\u1fe2\3\2\2\2\u1fe3\u1fe4\3\2\2\2\u1fe4")
        buf.write("\u0471\3\2\2\2\u1fe5\u1fea\5\u046a\u0236\2\u1fe6\u1fe8")
        buf.write("\5\u0474\u023b\2\u1fe7\u1fe9\5\u0474\u023b\2\u1fe8\u1fe7")
        buf.write("\3\2\2\2\u1fe8\u1fe9\3\2\2\2\u1fe9\u1feb\3\2\2\2\u1fea")
        buf.write("\u1fe6\3\2\2\2\u1fea\u1feb\3\2\2\2\u1feb\u1ff1\3\2\2\2")
        buf.write("\u1fec\u1fed\6\u023a\u00d1\2\u1fed\u1fee\5\u0474\u023b")
        buf.write("\2\u1fee\u1fef\5\u0474\u023b\2\u1fef\u1ff1\3\2\2\2\u1ff0")
        buf.write("\u1fe5\3\2\2\2\u1ff0\u1fec\3\2\2\2\u1ff1\u0473\3\2\2\2")
        buf.write("\u1ff2\u1ff3\7\u0306\2\2\u1ff3\u1ff4\5\u046a\u0236\2\u1ff4")
        buf.write("\u0475\3\2\2\2\u1ff5\u1ff6\t\u0083\2\2\u1ff6\u0477\3\2")
        buf.write("\2\2\u1ff7\u1ff8\t\u0084\2\2\u1ff8\u0479\3\2\2\2\u1ff9")
        buf.write("\u1ffa\t\u0085\2\2\u1ffa\u047b\3\2\2\2\u1ffb\u2001\7\u02ed")
        buf.write("\2\2\u1ffc\u1ffd\6\u023f\u00d2\2\u1ffd\u2001\7\u0316\2")
        buf.write("\2\u1ffe\u2001\7\u02ef\2\2\u1fff\u2001\7\u02ee\2\2\u2000")
        buf.write("\u1ffb\3\2\2\2\u2000\u1ffc\3\2\2\2\u2000\u1ffe\3\2\2\2")
        buf.write("\u2000\u1fff\3\2\2\2\u2001\u047d\3\2\2\2\u2002\u200c\5")
        buf.write("\u048a\u0246\2\u2003\u200c\5\u0490\u0249\2\u2004\u200c")
        buf.write("\5\u0496\u024c\2\u2005\u200c\5\u0494\u024b\2\u2006\u200c")
        buf.write("\5\u0492\u024a\2\u2007\u2009\7\u031c\2\2\u2008\u2007\3")
        buf.write("\2\2\2\u2008\u2009\3\2\2\2\u2009\u200a\3\2\2\2\u200a\u200c")
        buf.write("\t\u0086\2\2\u200b\u2002\3\2\2\2\u200b\u2003\3\2\2\2\u200b")
        buf.write("\u2004\3\2\2\2\u200b\u2005\3\2\2\2\u200b\u2006\3\2\2\2")
        buf.write("\u200b\u2008\3\2\2\2\u200c\u047f\3\2\2\2\u200d\u2013\5")
        buf.write("\u047e\u0240\2\u200e\u200f\7\u02f8\2\2\u200f\u2013\5\u0476")
        buf.write("\u023c\2\u2010\u2011\7\u02f9\2\2\u2011\u2013\5\u0476\u023c")
        buf.write("\2\u2012\u200d\3\2\2\2\u2012\u200e\3\2\2\2\u2012\u2010")
        buf.write("\3\2\2\2\u2013\u0481\3\2\2\2\u2014\u2015\7\u030a\2\2\u2015")
        buf.write("\u201a\5\u0486\u0244\2\u2016\u2017\7\u0307\2\2\u2017\u2019")
        buf.write("\5\u0486\u0244\2\u2018\u2016\3\2\2\2\u2019\u201c\3\2\2")
        buf.write("\2\u201a\u2018\3\2\2\2\u201a\u201b\3\2\2\2\u201b\u201d")
        buf.write("\3\2\2\2\u201c\u201a\3\2\2\2\u201d\u201e\7\u030b\2\2\u201e")
        buf.write("\u0483\3\2\2\2\u201f\u2023\7\u0321\2\2\u2020\u2021\6\u0243")
        buf.write("\u00d3\2\u2021\u2023\7\u0320\2\2\u2022\u201f\3\2\2\2\u2022")
        buf.write("\u2020\3\2\2\2\u2023\u0485\3\2\2\2\u2024\u2028\5\u0484")
        buf.write("\u0243\2\u2025\u2028\7\u0316\2\2\u2026\u2028\7\u0317\2")
        buf.write("\2\u2027\u2024\3\2\2\2\u2027\u2025\3\2\2\2\u2027\u2026")
        buf.write("\3\2\2\2\u2028\u0487\3\2\2\2\u2029\u202d\5\u0484\u0243")
        buf.write("\2\u202a\u202b\6\u0245\u00d4\2\u202b\u202d\7\u0316\2\2")
        buf.write("\u202c\u2029\3\2\2\2\u202c\u202a\3\2\2\2\u202d\u0489\3")
        buf.write("\2\2\2\u202e\u2030\7\u031c\2\2\u202f\u202e\3\2\2\2\u202f")
        buf.write("\u2030\3\2\2\2\u2030\u2031\3\2\2\2\u2031\u2034\5\u0484")
        buf.write("\u0243\2\u2032\u2034\7\u031e\2\2\u2033\u202f\3\2\2\2\u2033")
        buf.write("\u2032\3\2\2\2\u2034\u2038\3\2\2\2\u2035\u2037\5\u0484")
        buf.write("\u0243\2\u2036\u2035\3\2\2\2\u2037\u203a\3\2\2\2\u2038")
        buf.write("\u2036\3\2\2\2\u2038\u2039\3\2\2\2\u2039\u048b\3\2\2\2")
        buf.write("\u203a\u2038\3\2\2\2\u203b\u203c\5\u0484\u0243\2\u203c")
        buf.write("\u048d\3\2\2\2\u203d\u2042\5\u0484\u0243\2\u203e\u203f")
        buf.write("\7\u0307\2\2\u203f\u2041\5\u0484\u0243\2\u2040\u203e\3")
        buf.write("\2\2\2\u2041\u2044\3\2\2\2\u2042\u2040\3\2\2\2\u2042\u2043")
        buf.write("\3\2\2\2\u2043\u048f\3\2\2\2\u2044\u2042\3\2\2\2\u2045")
        buf.write("\u2046\t\u0085\2\2\u2046\u0491\3\2\2\2\u2047\u2048\t\u0087")
        buf.write("\2\2\u2048\u0493\3\2\2\2\u2049\u204a\t\u0088\2\2\u204a")
        buf.write("\u0495\3\2\2\2\u204b\u204c\7v\2\2\u204c\u2052\7\u0321")
        buf.write("\2\2\u204d\u204e\7\u024c\2\2\u204e\u2052\7\u0321\2\2\u204f")
        buf.write("\u2050\7\u0249\2\2\u2050\u2052\7\u0321\2\2\u2051\u204b")
        buf.write("\3\2\2\2\u2051\u204d\3\2\2\2\u2051\u204f\3\2\2\2\u2052")
        buf.write("\u0497\3\2\2\2\u2053\u2056\5\u039c\u01cf\2\u2054\u2056")
        buf.write("\5\u049c\u024f\2\u2055\u2053\3\2\2\2\u2055\u2054\3\2\2")
        buf.write("\2\u2056\u0499\3\2\2\2\u2057\u2058\5\u049c\u024f\2\u2058")
        buf.write("\u049b\3\2\2\2\u2059\u205a\7\u030a\2\2\u205a\u205b\7\u02ed")
        buf.write("\2\2\u205b\u205c\7\u0307\2\2\u205c\u205d\7\u02ed\2\2\u205d")
        buf.write("\u205e\7\u030b\2\2\u205e\u049d\3\2\2\2\u205f\u2062\5\u046a")
        buf.write("\u0236\2\u2060\u2062\5\u0484\u0243\2\u2061\u205f\3\2\2")
        buf.write("\2\u2061\u2060\3\2\2\2\u2062\u049f\3\2\2\2\u2063\u2066")
        buf.write("\5\u0468\u0235\2\u2064\u2066\5\u04be\u0260\2\u2065\u2063")
        buf.write("\3\2\2\2\u2065\u2064\3\2\2\2\u2066\u04a1\3\2\2\2\u2067")
        buf.write("\u206a\5\u045c\u022f\2\u2068\u206a\5\u0484\u0243\2\u2069")
        buf.write("\u2067\3\2\2\2\u2069\u2068\3\2\2\2\u206a\u04a3\3\2\2\2")
        buf.write("\u206b\u206e\5\u047c\u023f\2\u206c\u206e\5\u0468\u0235")
        buf.write("\2\u206d\u206b\3\2\2\2\u206d\u206c\3\2\2\2\u206e\u04a5")
        buf.write("\3\2\2\2\u206f\u2070\7\u030a\2\2\u2070\u2071\7\u030b\2")
        buf.write("\2\u2071\u04a7\3\2\2\2\u2072\u2073\t\u0089\2\2\u2073\u04a9")
        buf.write("\3\2\2\2\u2074\u2075\t\u008a\2\2\u2075\u04ab\3\2\2\2\u2076")
        buf.write("\u2077\7\u00d8\2\2\u2077\u207d\7\u0306\2\2\u2078\u2079")
        buf.write("\7\u011e\2\2\u2079\u207d\7\u0306\2\2\u207a\u207b\7\u01f8")
        buf.write("\2\2\u207b\u207d\7\u0306\2\2\u207c\u2076\3\2\2\2\u207c")
        buf.write("\u2078\3\2\2\2\u207c\u207a\3\2\2\2\u207d\u04ad\3\2\2\2")
        buf.write("\u207e\u207f\7\u0294\2\2\u207f\u2089\7\u0306\2\2\u2080")
        buf.write("\u2081\7\u02a3\2\2\u2081\u2089\7\u0306\2\2\u2082\u2083")
        buf.write("\7\u00d8\2\2\u2083\u2089\7\u0306\2\2\u2084\u2085\7\u011e")
        buf.write("\2\2\u2085\u2089\7\u0306\2\2\u2086\u2087\7\u01f8\2\2\u2087")
        buf.write("\u2089\7\u0306\2\2\u2088\u207e\3\2\2\2\u2088\u2080\3\2")
        buf.write("\2\2\u2088\u2082\3\2\2\2\u2088\u2084\3\2\2\2\u2088\u2086")
        buf.write("\3\2\2\2\u2089\u04af\3\2\2\2\u208a\u2092\6\u0259\u00d5")
        buf.write("\2\u208b\u2093\5\u04b6\u025c\2\u208c\u2093\5\u04c2\u0262")
        buf.write("\2\u208d\u2093\7\u00af\2\2\u208e\u208f\6\u0259\u00d6\2")
        buf.write("\u208f\u2093\7\u0200\2\2\u2090\u2091\6\u0259\u00d7\2\u2091")
        buf.write("\u2093\7\u02cc\2\2\u2092\u208b\3\2\2\2\u2092\u208c\3\2")
        buf.write("\2\2\u2092\u208d\3\2\2\2\u2092\u208e\3\2\2\2\u2092\u2090")
        buf.write("\3\2\2\2\u2093\u209c\3\2\2\2\u2094\u209a\5\u04ba\u025e")
        buf.write("\2\u2095\u209a\5\u04b2\u025a\2\u2096\u209a\5\u04b4\u025b")
        buf.write("\2\u2097\u209a\5\u04b8\u025d\2\u2098\u209a\5\u04c0\u0261")
        buf.write("\2\u2099\u2094\3\2\2\2\u2099\u2095\3\2\2\2\u2099\u2096")
        buf.write("\3\2\2\2\u2099\u2097\3\2\2\2\u2099\u2098\3\2\2\2\u209a")
        buf.write("\u209c\3\2\2\2\u209b\u208a\3\2\2\2\u209b\u2099\3\2\2\2")
        buf.write("\u209c\u04b1\3\2\2\2\u209d\u209e\t\u008b\2\2\u209e\u04b3")
        buf.write("\3\2\2\2\u209f\u20a0\t\u008c\2\2\u20a0\u04b5\3\2\2\2\u20a1")
        buf.write("\u20ac\6\u025c\u00d8\2\u20a2\u20ad\5\u04c4\u0263\2\u20a3")
        buf.write("\u20ad\7\u00ac\2\2\u20a4\u20ad\7\u00be\2\2\u20a5\u20ad")
        buf.write("\7\u0173\2\2\u20a6\u20ad\7\u01a9\2\2\u20a7\u20ad\7\u01ad")
        buf.write("\2\2\u20a8\u20ad\7\u01c5\2\2\u20a9\u20ad\7\u01cd\2\2\u20aa")
        buf.write("\u20ad\7\u02c7\2\2\u20ab\u20ad\7\u0237\2\2\u20ac\u20a2")
        buf.write("\3\2\2\2\u20ac\u20a3\3\2\2\2\u20ac\u20a4\3\2\2\2\u20ac")
        buf.write("\u20a5\3\2\2\2\u20ac\u20a6\3\2\2\2\u20ac\u20a7\3\2\2\2")
        buf.write("\u20ac\u20a8\3\2\2\2\u20ac\u20a9\3\2\2\2\u20ac\u20aa\3")
        buf.write("\2\2\2\u20ac\u20ab\3\2\2\2\u20ad\u20b4\3\2\2\2\u20ae\u20b2")
        buf.write("\5\u04ba\u025e\2\u20af\u20b2\5\u04b8\u025d\2\u20b0\u20b2")
        buf.write("\5\u04c0\u0261\2\u20b1\u20ae\3\2\2\2\u20b1\u20af\3\2\2")
        buf.write("\2\u20b1\u20b0\3\2\2\2\u20b2\u20b4\3\2\2\2\u20b3\u20a1")
        buf.write("\3\2\2\2\u20b3\u20b1\3\2\2\2\u20b4\u04b7\3\2\2\2\u20b5")
        buf.write("\u20b6\t\u008d\2\2\u20b6\u04b9\3\2\2\2\u20b7\u20bb\t\u008e")
        buf.write("\2\2\u20b8\u20b9\6\u025e\u00d9\2\u20b9\u20bb\t\u008f\2")
        buf.write("\2\u20ba\u20b7\3\2\2\2\u20ba\u20b8\3\2\2\2\u20bb\u04bb")
        buf.write("\3\2\2\2\u20bc\u20bf\6\u025f\u00da\2\u20bd\u20c0\5\u04c4")
        buf.write("\u0263\2\u20be\u20c0\5\u04c2\u0262\2\u20bf\u20bd\3\2\2")
        buf.write("\2\u20bf\u20be\3\2\2\2\u20c0\u20c7\3\2\2\2\u20c1\u20c5")
        buf.write("\5\u04ba\u025e\2\u20c2\u20c5\5\u04b4\u025b\2\u20c3\u20c5")
        buf.write("\5\u04c0\u0261\2\u20c4\u20c1\3\2\2\2\u20c4\u20c2\3\2\2")
        buf.write("\2\u20c4\u20c3\3\2\2\2\u20c5\u20c7\3\2\2\2\u20c6\u20bc")
        buf.write("\3\2\2\2\u20c6\u20c4\3\2\2\2\u20c7\u04bd\3\2\2\2\u20c8")
        buf.write("\u20cd\5\u04ba\u025e\2\u20c9\u20cd\5\u04b2\u025a\2\u20ca")
        buf.write("\u20cd\5\u04b4\u025b\2\u20cb\u20cd\5\u04b8\u025d\2\u20cc")
        buf.write("\u20c8\3\2\2\2\u20cc\u20c9\3\2\2\2\u20cc\u20ca\3\2\2\2")
        buf.write("\u20cc\u20cb\3\2\2\2\u20cd\u04bf\3\2\2\2\u20ce\u20cf\t")
        buf.write("\u008a\2\2\u20cf\u04c1\3\2\2\2\u20d0\u20d6\t\u0090\2\2")
        buf.write("\u20d1\u20d2\6\u0262\u00db\2\u20d2\u20d6\7\u0200\2\2\u20d3")
        buf.write("\u20d4\6\u0262\u00dc\2\u20d4\u20d6\7\u00ec\2\2\u20d5\u20d0")
        buf.write("\3\2\2\2\u20d5\u20d1\3\2\2\2\u20d5\u20d3\3\2\2\2\u20d6")
        buf.write("\u04c3\3\2\2\2\u20d7\u20e1\t\u0091\2\2\u20d8\u20d9\6\u0263")
        buf.write("\u00dd\2\u20d9\u20e1\7\u0200\2\2\u20da\u20db\6\u0263\u00de")
        buf.write("\2\u20db\u20e1\t\u0092\2\2\u20dc\u20dd\6\u0263\u00df\2")
        buf.write("\u20dd\u20e1\t\u0093\2\2\u20de\u20df\6\u0263\u00e0\2\u20df")
        buf.write("\u20e1\7\u0296\2\2\u20e0\u20d7\3\2\2\2\u20e0\u20d8\3\2")
        buf.write("\2\2\u20e0\u20da\3\2\2\2\u20e0\u20dc\3\2\2\2\u20e0\u20de")
        buf.write("\3\2\2\2\u20e1\u04c5\3\2\2\2\u0465\u04c9\u04cd\u04d0\u04d2")
        buf.write("\u04f6\u04fe\u0503\u0513\u051a\u0521\u0524\u052b\u0530")
        buf.write("\u0533\u0538\u053e\u0540\u0544\u0548\u0551\u0555\u055a")
        buf.write("\u0560\u0567\u056b\u0570\u0575\u057c\u057f\u0585\u0588")
        buf.write("\u058f\u0599\u059e\u05a3\u05ab\u05b1\u05b5\u05ba\u05c3")
        buf.write("\u05c9\u05cf\u05d5\u05de\u05e4\u05ed\u05fb\u05ff\u0605")
        buf.write("\u0609\u060f\u0613\u0618\u061b\u0621\u0627\u062d\u0631")
        buf.write("\u0636\u063a\u063e\u0646\u0648\u0655\u065d\u0665\u0669")
        buf.write("\u0686\u0696\u0699\u06a2\u06a7\u06ad\u06b2\u06b6\u06bb")
        buf.write("\u06bf\u06c3\u06c7\u06cb\u06cf\u06d1\u06dc\u06e4\u06ed")
        buf.write("\u06f2\u06f5\u06fa\u0701\u0709\u070d\u0712\u0719\u071e")
        buf.write("\u0723\u072b\u072f\u0734\u0737\u073a\u073d\u0744\u074b")
        buf.write("\u074f\u0767\u076b\u0771\u0778\u077b\u077f\u0786\u0789")
        buf.write("\u078c\u078f\u0798\u079f\u07a4\u07a7\u07aa\u07b0\u07b6")
        buf.write("\u07b9\u07be\u07c8\u07cb\u07d1\u07d7\u07e1\u07e4\u07ec")
        buf.write("\u07f2\u07fd\u0800\u0805\u0818\u081b\u081e\u0824\u0827")
        buf.write("\u0829\u082f\u0839\u0843\u0846\u0849\u084e\u0854\u0861")
        buf.write("\u0865\u086a\u0873\u0884\u0897\u08a0\u08a3\u08ab\u08b0")
        buf.write("\u08b4\u08bb\u08c0\u08cf\u08d3\u08d9\u08df\u08e5\u08eb")
        buf.write("\u08f1\u08f6\u08fa\u0902\u0908\u090e\u0913\u0916\u0919")
        buf.write("\u0922\u0925\u0930\u093c\u0945\u0949\u0952\u0955\u095b")
        buf.write("\u095d\u0961\u0968\u0975\u097c\u0982\u0985\u0996\u09aa")
        buf.write("\u09ae\u09b4\u09ba\u09c0\u09c5\u09cc\u09d3\u09d8\u09db")
        buf.write("\u09df\u09e3\u09e8\u09ec\u09f0\u09f6\u09fb\u09fe\u0a02")
        buf.write("\u0a08\u0a0c\u0a10\u0a18\u0a20\u0a29\u0a32\u0a3f\u0a42")
        buf.write("\u0a46\u0a4c\u0a54\u0a59\u0a5c\u0a5f\u0a62\u0a65\u0a67")
        buf.write("\u0a6d\u0a6f\u0a7e\u0a84\u0a8b\u0a8e\u0a90\u0a92\u0a9c")
        buf.write("\u0a9e\u0aa2\u0aa5\u0aa8\u0aac\u0ab1\u0ab7\u0aba\u0abd")
        buf.write("\u0ac3\u0ac6\u0acf\u0ad8\u0adc\u0ae0\u0ae6\u0aeb\u0af0")
        buf.write("\u0af5\u0af9\u0aff\u0b0a\u0b0d\u0b12\u0b18\u0b1b\u0b1e")
        buf.write("\u0b21\u0b24\u0b32\u0b35\u0b39\u0b3d\u0b43\u0b48\u0b4c")
        buf.write("\u0b51\u0b54\u0b58\u0b5e\u0b62\u0b66\u0b6f\u0b74\u0b78")
        buf.write("\u0b7c\u0b7f\u0b83\u0b86\u0b88\u0b8c\u0b92\u0b96\u0b98")
        buf.write("\u0b9c\u0ba0\u0ba4\u0bab\u0bad\u0bb6\u0bbc\u0bc1\u0bc4")
        buf.write("\u0bc7\u0bca\u0bcd\u0bd1\u0be0\u0be4\u0bea\u0bed\u0bf0")
        buf.write("\u0bf6\u0bfb\u0bff\u0c02\u0c0a\u0c0c\u0c19\u0c25\u0c2a")
        buf.write("\u0c2d\u0c30\u0c35\u0c3b\u0c4b\u0c5f\u0c68\u0c6c\u0c73")
        buf.write("\u0c78\u0c81\u0c88\u0c93\u0c9a\u0ca3\u0cac\u0cb8\u0cbd")
        buf.write("\u0cc4\u0cc8\u0cce\u0cd3\u0cd8\u0cdc\u0ce2\u0ce8\u0cea")
        buf.write("\u0ced\u0cf1\u0cfb\u0d00\u0d05\u0d0c\u0d15\u0d1d\u0d22")
        buf.write("\u0d26\u0d2c\u0d2f\u0d32\u0d36\u0d3a\u0d44\u0d48\u0d4b")
        buf.write("\u0d4e\u0d53\u0d59\u0d5d\u0d63\u0d66\u0d68\u0d6d\u0d79")
        buf.write("\u0d82\u0d8f\u0d92\u0d97\u0d9e\u0da2\u0da6\u0da8\u0db6")
        buf.write("\u0dbd\u0dc6\u0dcc\u0dd5\u0dd9\u0ddd\u0de7\u0de9\u0df1")
        buf.write("\u0df8\u0dfd\u0e01\u0e05\u0e08\u0e0e\u0e11\u0e14\u0e1a")
        buf.write("\u0e21\u0e26\u0e2a\u0e2d\u0e30\u0e33\u0e35\u0e39\u0e41")
        buf.write("\u0e47\u0e4b\u0e50\u0e53\u0e56\u0e59\u0e5b\u0e60\u0e69")
        buf.write("\u0e76\u0e78\u0e7c\u0e82\u0e85\u0e88\u0e8e\u0e95\u0e97")
        buf.write("\u0e9f\u0ea5\u0eaa\u0ead\u0eb4\u0eb6\u0ebf\u0ec8\u0ed1")
        buf.write("\u0ed9\u0edd\u0ee4\u0ee7\u0ee9\u0ef1\u0ef7\u0f01\u0f08")
        buf.write("\u0f66\u0f6a\u0f70\u0f7e\u0f86\u0f89\u0f95\u0f9a\u0fa0")
        buf.write("\u0fa7\u0fae\u0fb5\u0fbc\u0fc3\u0fca\u0fcd\u0fd4\u0fdc")
        buf.write("\u0fe4\u0fee\u0ff4\u0ff8\u0ffc\u1001\u1004\u1006\u100f")
        buf.write("\u1015\u101c\u1021\u1026\u102b\u102e\u1035\u1042\u1048")
        buf.write("\u104e\u1055\u105d\u1063\u106f\u1071\u1077\u107b\u107d")
        buf.write("\u1081\u108e\u1094\u109c\u10a7\u10ab\u10b8\u10bf\u10c5")
        buf.write("\u10cc\u10ce\u10d8\u10e0\u10e3\u10e8\u10ec\u10f2\u10f5")
        buf.write("\u10fa\u1105\u1107\u1113\u1118\u1120\u1126\u1128\u112a")
        buf.write("\u1130\u113c\u1141\u1143\u1147\u114d\u1150\u1153\u115d")
        buf.write("\u115f\u1165\u116c\u1172\u117c\u1180\u1185\u1196\u11a6")
        buf.write("\u11ab\u11b3\u11bb\u11c0\u11c6\u11c9\u11cb\u11d4\u11da")
        buf.write("\u11e0\u11e2\u11e6\u11f1\u11fb\u1200\u1205\u120a\u1212")
        buf.write("\u1216\u121b\u1224\u1230\u123e\u1247\u1249\u1250\u1257")
        buf.write("\u125b\u1261\u1269\u1270\u1274\u127a\u1281\u1284\u128d")
        buf.write("\u1293\u1298\u12af\u12b2\u12c2\u12c7\u12ca\u12ce\u12d1")
        buf.write("\u12df\u12e5\u12ea\u12ed\u12ef\u12f3\u12f8\u12fa\u1306")
        buf.write("\u130c\u1322\u1326\u1328\u1330\u1334\u133d\u1347\u134e")
        buf.write("\u1351\u1355\u1358\u135b\u135f\u1362\u1366\u1369\u136e")
        buf.write("\u1371\u1376\u1379\u137f\u1383\u1389\u138c\u1395\u1397")
        buf.write("\u139d\u13a1\u13a4\u13a7\u13ab\u13b1\u13b4\u13b7\u13c1")
        buf.write("\u13c5\u13ce\u13d1\u13d6\u13d9\u13dc\u13e0\u13e3\u13e8")
        buf.write("\u13ec\u13f4\u1401\u1413\u1418\u141d\u1425\u142b\u142d")
        buf.write("\u1431\u1434\u1442\u144c\u1450\u1458\u145b\u145f\u1469")
        buf.write("\u146d\u1474\u1479\u1481\u1486\u148c\u1493\u1498\u149e")
        buf.write("\u14a5\u14af\u14b1\u14b9\u14be\u14c2\u14c5\u14cc\u14d1")
        buf.write("\u14d5\u14e0\u14e8\u14ec\u14ef\u14f2\u14f6\u14fa\u14ff")
        buf.write("\u1505\u1509\u1514\u1517\u151a\u151d\u1525\u1529\u152e")
        buf.write("\u1536\u153e\u1544\u1556\u1560\u1566\u1574\u1577\u157b")
        buf.write("\u1586\u1588\u1591\u159d\u159f\u15a6\u15ac\u15b2\u15ba")
        buf.write("\u15c5\u15c9\u15e6\u15e8\u15f0\u15f4\u1605\u160c\u161a")
        buf.write("\u1626\u162c\u1633\u1636\u1658\u1660\u1662\u166e\u1673")
        buf.write("\u1679\u1681\u1688\u168e\u1693\u1699\u169e\u16a3\u16a9")
        buf.write("\u16ae\u16b4\u16bc\u16c4\u16cc\u16d4\u16d9\u16df\u16e4")
        buf.write("\u16e8\u16ec\u16f1\u16f3\u1706\u170a\u1711\u171d\u1720")
        buf.write("\u1724\u1729\u172e\u1732\u173c\u1745\u1747\u174a\u1753")
        buf.write("\u175a\u1767\u176c\u1773\u1779\u1793\u17b2\u17c6\u17cc")
        buf.write("\u17d0\u17eb\u17f7\u1804\u1808\u180c\u1828\u1860\u186a")
        buf.write("\u186e\u187a\u187f\u188c\u18a0\u18a4\u18b5\u18b8\u18bd")
        buf.write("\u18c0\u18c9\u18cd\u18d3\u18d9\u18dd\u18e8\u18ee\u18f0")
        buf.write("\u18f7\u18fe\u1902\u1909\u190e\u1912\u1917\u191b\u191f")
        buf.write("\u1924\u1929\u192b\u192f\u193c\u1940\u1943\u1947\u194b")
        buf.write("\u194f\u1954\u1958\u195c\u1965\u1967\u196e\u1974\u197c")
        buf.write("\u1991\u1996\u199d\u19b4\u19c4\u19ce\u19d2\u19d9\u19dc")
        buf.write("\u19e7\u19f0\u19f3\u19fa\u19ff\u1a19\u1a1f\u1a25\u1a29")
        buf.write("\u1a33\u1a37\u1a44\u1a50\u1a62\u1a6a\u1a74\u1a77\u1a7c")
        buf.write("\u1a80\u1a87\u1a8c\u1a93\u1a9b\u1a9e\u1aa3\u1aab\u1aae")
        buf.write("\u1abc\u1abf\u1acc\u1ad0\u1ad2\u1ad7\u1adc\u1ae2\u1ae8")
        buf.write("\u1aee\u1af3\u1af6\u1afc\u1b01\u1b04\u1b0a\u1b0e\u1b14")
        buf.write("\u1b16\u1b19\u1b1f\u1b25\u1b2d\u1b2f\u1b31\u1b35\u1b3b")
        buf.write("\u1b40\u1b44\u1b49\u1b4f\u1b56\u1b59\u1b5b\u1b5e\u1b68")
        buf.write("\u1b6c\u1b72\u1b79\u1b7e\u1b8c\u1b91\u1b99\u1b9e\u1ba2")
        buf.write("\u1ba5\u1baa\u1bae\u1bb6\u1bbe\u1bc0\u1bc7\u1bcf\u1bd6")
        buf.write("\u1bd9\u1be1\u1be9\u1beb\u1bf1\u1bf7\u1bfb\u1c02\u1c0d")
        buf.write("\u1c16\u1c19\u1c1e\u1c20\u1c23\u1c26\u1c2a\u1c2d\u1c31")
        buf.write("\u1c36\u1c39\u1c3d\u1c40\u1c44\u1c49\u1c4d\u1c59\u1c5d")
        buf.write("\u1c63\u1c66\u1c6b\u1c6f\u1c73\u1c78\u1c81\u1c84\u1c88")
        buf.write("\u1c8c\u1c8f\u1c93\u1c97\u1c9c\u1ca1\u1ca7\u1cac\u1cb1")
        buf.write("\u1cb3\u1cb8\u1cbf\u1cc7\u1ccd\u1ccf\u1cd3\u1cd7\u1cdb")
        buf.write("\u1cdf\u1ced\u1cf4\u1cf8\u1cfd\u1d03\u1d07\u1d0d\u1d11")
        buf.write("\u1d15\u1d1a\u1d1f\u1d24\u1d29\u1d2f\u1d35\u1d3a\u1d3f")
        buf.write("\u1d44\u1d49\u1d4e\u1d53\u1d58\u1d62\u1d68\u1d6e\u1d74")
        buf.write("\u1d77\u1d7e\u1d83\u1d86\u1d8a\u1d8d\u1d91\u1d96\u1d9a")
        buf.write("\u1d9f\u1da3\u1dac\u1daf\u1db2\u1db5\u1db9\u1dbd\u1dc1")
        buf.write("\u1dd0\u1dd3\u1dd5\u1dda\u1de3\u1de6\u1dea\u1df7\u1e03")
        buf.write("\u1e08\u1e0d\u1e16\u1e1b\u1e24\u1e29\u1e2d\u1e31\u1e35")
        buf.write("\u1e3a\u1e3f\u1e45\u1e4a\u1e4d\u1e54\u1e5d\u1e64\u1e72")
        buf.write("\u1e7e\u1e8b\u1e93\u1e9a\u1ea3\u1ea9\u1eb1\u1eb7\u1ec2")
        buf.write("\u1eca\u1ed2\u1eda\u1ee4\u1ee9\u1eee\u1ef0\u1ef6\u1efc")
        buf.write("\u1eff\u1f06\u1f08\u1f0a\u1f0d\u1f0f\u1f20\u1f25\u1f27")
        buf.write("\u1f2e\u1f3b\u1f3d\u1f43\u1f4d\u1f56\u1f61\u1f77\u1f7b")
        buf.write("\u1f93\u1f9e\u1fa0\u1fa4\u1fab\u1fb3\u1fba\u1fc0\u1fcf")
        buf.write("\u1fd3\u1fda\u1fe3\u1fe8\u1fea\u1ff0\u2000\u2008\u200b")
        buf.write("\u2012\u201a\u2022\u2027\u202c\u202f\u2033\u2038\u2042")
        buf.write("\u2051\u2055\u2061\u2065\u2069\u206d\u207c\u2088\u2092")
        buf.write("\u2099\u209b\u20ac\u20b1\u20b3\u20ba\u20bf\u20c4\u20c6")
        buf.write("\u20cc\u20d5\u20e0")
        return buf.getvalue()


class MySQLParser ( MySQLBaseRecognizer ):

    grammarFileName = "MySQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'='", "':='", "'<=>'", "'>='", 
                     "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", 
                     "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", "':'", 
                     "'('", "')'", "'{'", "'}'", "'_'", "'->'", "'->>'", 
                     "'@'", "<INVALID>", "'@@'", "'\\N'", "'?'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "ACCESSIBLE_SYMBOL", "ACCOUNT_SYMBOL", 
                      "ACTION_SYMBOL", "ADD_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL", 
                      "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", "ALGORITHM_SYMBOL", 
                      "ALL_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", "ANALYSE_SYMBOL", 
                      "ANALYZE_SYMBOL", "AND_SYMBOL", "ANY_SYMBOL", "AS_SYMBOL", 
                      "ASC_SYMBOL", "ASCII_SYMBOL", "ASENSITIVE_SYMBOL", 
                      "AT_SYMBOL", "AUTHORS_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", 
                      "AUTO_INCREMENT_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", 
                      "AVG_SYMBOL", "BACKUP_SYMBOL", "BEFORE_SYMBOL", "BEGIN_SYMBOL", 
                      "BETWEEN_SYMBOL", "BIGINT_SYMBOL", "BINARY_SYMBOL", 
                      "BINLOG_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", 
                      "BIT_OR_SYMBOL", "BIT_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", 
                      "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", "BOOL_SYMBOL", "BOTH_SYMBOL", 
                      "BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", 
                      "CALL_SYMBOL", "CASCADE_SYMBOL", "CASCADED_SYMBOL", 
                      "CASE_SYMBOL", "CAST_SYMBOL", "CATALOG_NAME_SYMBOL", 
                      "CHAIN_SYMBOL", "CHANGE_SYMBOL", "CHANGED_SYMBOL", 
                      "CHANNEL_SYMBOL", "CHARSET_SYMBOL", "CHARACTER_SYMBOL", 
                      "CHAR_SYMBOL", "CHECKSUM_SYMBOL", "CHECK_SYMBOL", 
                      "CIPHER_SYMBOL", "CLASS_ORIGIN_SYMBOL", "CLIENT_SYMBOL", 
                      "CLOSE_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", 
                      "COLLATE_SYMBOL", "COLLATION_SYMBOL", "COLUMNS_SYMBOL", 
                      "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", 
                      "COMMENT_SYMBOL", "COMMITTED_SYMBOL", "COMMIT_SYMBOL", 
                      "COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", 
                      "COMPRESSION_SYMBOL", "CONCURRENT_SYMBOL", "CONDITION_SYMBOL", 
                      "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", "CONSTRAINT_SYMBOL", 
                      "CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
                      "CONSTRAINT_SCHEMA_SYMBOL", "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", 
                      "CONTINUE_SYMBOL", "CONTRIBUTORS_SYMBOL", "CONVERT_SYMBOL", 
                      "COUNT_SYMBOL", "CPU_SYMBOL", "CREATE_SYMBOL", "CROSS_SYMBOL", 
                      "CUBE_SYMBOL", "CURDATE_SYMBOL", "CURRENT_SYMBOL", 
                      "CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", "CURRENT_TIMESTAMP_SYMBOL", 
                      "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", 
                      "CURTIME_SYMBOL", "DATABASE_SYMBOL", "DATABASES_SYMBOL", 
                      "DATAFILE_SYMBOL", "DATA_SYMBOL", "DATETIME_SYMBOL", 
                      "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DATE_SYMBOL", 
                      "DAYOFMONTH_SYMBOL", "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", 
                      "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", "DAY_SYMBOL", 
                      "DEALLOCATE_SYMBOL", "DEC_SYMBOL", "DECIMAL_NUM_SYMBOL", 
                      "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
                      "DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", "DELAYED_SYMBOL", 
                      "DELAY_KEY_WRITE_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", 
                      "DESCRIBE_SYMBOL", "DES_KEY_FILE_SYMBOL", "DETERMINISTIC_SYMBOL", 
                      "DIAGNOSTICS_SYMBOL", "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", 
                      "DISCARD_SYMBOL", "DISK_SYMBOL", "DISTINCT_SYMBOL", 
                      "DISTINCTROW_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", 
                      "DO_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", "DUMPFILE_SYMBOL", 
                      "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "EACH_SYMBOL", 
                      "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL", "ENCLOSED_SYMBOL", 
                      "ENCRYPTION_SYMBOL", "END_SYMBOL", "ENDS_SYMBOL", 
                      "END_OF_INPUT_SYMBOL", "ENGINES_SYMBOL", "ENGINE_SYMBOL", 
                      "ENUM_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", "ESCAPED_SYMBOL", 
                      "ESCAPE_SYMBOL", "EVENTS_SYMBOL", "EVENT_SYMBOL", 
                      "EVERY_SYMBOL", "EXCHANGE_SYMBOL", "EXECUTE_SYMBOL", 
                      "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPANSION_SYMBOL", 
                      "EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", "EXPORT_SYMBOL", 
                      "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "EXTRACT_SYMBOL", 
                      "FALSE_SYMBOL", "FAST_SYMBOL", "FAULTS_SYMBOL", "FETCH_SYMBOL", 
                      "FIELDS_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL", 
                      "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT4_SYMBOL", 
                      "FLOAT8_SYMBOL", "FLOAT_SYMBOL", "FLUSH_SYMBOL", "FOLLOWS_SYMBOL", 
                      "FORCE_SYMBOL", "FOREIGN_SYMBOL", "FOR_SYMBOL", "FORMAT_SYMBOL", 
                      "FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", "FULLTEXT_SYMBOL", 
                      "FUNCTION_SYMBOL", "GET_SYMBOL", "GENERAL_SYMBOL", 
                      "GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", 
                      "GEOMETRY_SYMBOL", "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL", 
                      "GRANT_SYMBOL", "GRANTS_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", 
                      "HANDLER_SYMBOL", "HASH_SYMBOL", "HAVING_SYMBOL", 
                      "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOST_SYMBOL", 
                      "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
                      "HOUR_SECOND_SYMBOL", "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", 
                      "IF_SYMBOL", "IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", 
                      "IMPORT_SYMBOL", "INDEXES_SYMBOL", "INDEX_SYMBOL", 
                      "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", 
                      "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", 
                      "INSERT_METHOD_SYMBOL", "INSTANCE_SYMBOL", "INSTALL_SYMBOL", 
                      "INTEGER_SYMBOL", "INTERVAL_SYMBOL", "INTO_SYMBOL", 
                      "INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
                      "IO_BEFORE_GTIDS_SYMBOL", "IO_THREAD_SYMBOL", "IO_SYMBOL", 
                      "IPC_SYMBOL", "IS_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", 
                      "ITERATE_SYMBOL", "JOIN_SYMBOL", "JSON_SYMBOL", "KEYS_SYMBOL", 
                      "KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", 
                      "LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEADING_SYMBOL", 
                      "LEAVES_SYMBOL", "LEAVE_SYMBOL", "LEFT_SYMBOL", "LESS_SYMBOL", 
                      "LEVEL_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", 
                      "LINES_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", 
                      "LOAD_SYMBOL", "LOCALTIME_SYMBOL", "LOCALTIMESTAMP_SYMBOL", 
                      "LOCAL_SYMBOL", "LOCATOR_SYMBOL", "LOCKS_SYMBOL", 
                      "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "LONGBLOB_SYMBOL", 
                      "LONGTEXT_SYMBOL", "LONG_NUM_SYMBOL", "LONG_SYMBOL", 
                      "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", 
                      "MASTER_BIND_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
                      "MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_LOG_FILE_SYMBOL", 
                      "MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", 
                      "MASTER_PORT_SYMBOL", "MASTER_RETRY_COUNT_SYMBOL", 
                      "MASTER_SERVER_ID_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", 
                      "MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CERT_SYMBOL", 
                      "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
                      "MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", 
                      "MASTER_SSL_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", 
                      "MASTER_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", "MASTER_USER_SYMBOL", 
                      "MASTER_HEARTBEAT_PERIOD_SYMBOL", "MATCH_SYMBOL", 
                      "MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", 
                      "MAX_ROWS_SYMBOL", "MAX_SIZE_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", 
                      "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL", 
                      "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", 
                      "MEDIUMTEXT_SYMBOL", "MEDIUM_SYMBOL", "MEMORY_SYMBOL", 
                      "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", 
                      "MID_SYMBOL", "MIDDLEINT_SYMBOL", "MIGRATE_SYMBOL", 
                      "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
                      "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL", 
                      "MODE_SYMBOL", "MODIFIES_SYMBOL", "MODIFY_SYMBOL", 
                      "MOD_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", 
                      "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", 
                      "MYSQL_ERRNO_SYMBOL", "NAMES_SYMBOL", "NAME_SYMBOL", 
                      "NATIONAL_SYMBOL", "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", 
                      "NCHAR_SYMBOL", "NDB_SYMBOL", "NDBCLUSTER_SYMBOL", 
                      "NEG_SYMBOL", "NEVER_SYMBOL", "NEW_SYMBOL", "NEXT_SYMBOL", 
                      "NODEGROUP_SYMBOL", "NONE_SYMBOL", "NONBLOCKING_SYMBOL", 
                      "NOT_SYMBOL", "NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", 
                      "NO_WRITE_TO_BINLOG_SYMBOL", "NULL_SYMBOL", "NUMBER_SYMBOL", 
                      "NUMERIC_SYMBOL", "NVARCHAR_SYMBOL", "OFFLINE_SYMBOL", 
                      "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", "ON_SYMBOL", 
                      "ONE_SYMBOL", "ONLINE_SYMBOL", "ONLY_SYMBOL", "OPEN_SYMBOL", 
                      "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTIONS_SYMBOL", 
                      "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", "ORDER_SYMBOL", 
                      "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", "OUT_SYMBOL", 
                      "OWNER_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", 
                      "PARSER_SYMBOL", "PARTIAL_SYMBOL", "PARTITIONING_SYMBOL", 
                      "PARTITIONS_SYMBOL", "PARTITION_SYMBOL", "PASSWORD_SYMBOL", 
                      "PHASE_SYMBOL", "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", 
                      "PLUGIN_SYMBOL", "POINT_SYMBOL", "POLYGON_SYMBOL", 
                      "PORT_SYMBOL", "POSITION_SYMBOL", "PRECEDES_SYMBOL", 
                      "PRECISION_SYMBOL", "PREPARE_SYMBOL", "PRESERVE_SYMBOL", 
                      "PREV_SYMBOL", "PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", 
                      "PROCEDURE_SYMBOL", "PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", 
                      "PROFILE_SYMBOL", "PROFILES_SYMBOL", "PROXY_SYMBOL", 
                      "PURGE_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", 
                      "QUICK_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", "READ_ONLY_SYMBOL", 
                      "READ_SYMBOL", "READ_WRITE_SYMBOL", "REAL_SYMBOL", 
                      "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDOFILE_SYMBOL", 
                      "REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", "REFERENCES_SYMBOL", 
                      "REGEXP_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", 
                      "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", 
                      "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", 
                      "RENAME_SYMBOL", "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", 
                      "REPEATABLE_SYMBOL", "REPEAT_SYMBOL", "REPLACE_SYMBOL", 
                      "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", "REPLICATE_IGNORE_DB_SYMBOL", 
                      "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
                      "REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
                      "REPLICATE_REWRITE_DB_SYMBOL", "REQUIRE_SYMBOL", "RESET_SYMBOL", 
                      "RESIGNAL_SYMBOL", "RESTORE_SYMBOL", "RESTRICT_SYMBOL", 
                      "RESUME_SYMBOL", "RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", 
                      "RETURN_SYMBOL", "REVERSE_SYMBOL", "REVOKE_SYMBOL", 
                      "RIGHT_SYMBOL", "RLIKE_SYMBOL", "ROLLBACK_SYMBOL", 
                      "ROLLUP_SYMBOL", "ROTATE_SYMBOL", "ROUTINE_SYMBOL", 
                      "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", 
                      "ROW_SYMBOL", "RTREE_SYMBOL", "SAVEPOINT_SYMBOL", 
                      "SCHEDULE_SYMBOL", "SCHEMA_SYMBOL", "SCHEMA_NAME_SYMBOL", 
                      "SCHEMAS_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SECOND_SYMBOL", 
                      "SECURITY_SYMBOL", "SELECT_SYMBOL", "SENSITIVE_SYMBOL", 
                      "SEPARATOR_SYMBOL", "SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL", 
                      "SESSION_SYMBOL", "SERVER_SYMBOL", "SERVER_OPTIONS_SYMBOL", 
                      "SESSION_USER_SYMBOL", "SET_SYMBOL", "SET_VAR_SYMBOL", 
                      "SHARE_SYMBOL", "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", 
                      "SIGNAL_SYMBOL", "SIGNED_SYMBOL", "SIMPLE_SYMBOL", 
                      "SLAVE_SYMBOL", "SLOW_SYMBOL", "SMALLINT_SYMBOL", 
                      "SNAPSHOT_SYMBOL", "SOME_SYMBOL", "SOCKET_SYMBOL", 
                      "SONAME_SYMBOL", "SOUNDS_SYMBOL", "SOURCE_SYMBOL", 
                      "SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", 
                      "SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", 
                      "SQL_AFTER_MTS_GAPS_SYMBOL", "SQL_BEFORE_GTIDS_SYMBOL", 
                      "SQL_BIG_RESULT_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
                      "SQL_CACHE_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", 
                      "SQL_NO_CACHE_SYMBOL", "SQL_SMALL_RESULT_SYMBOL", 
                      "SQL_SYMBOL", "SQL_THREAD_SYMBOL", "SSL_SYMBOL", "STACKED_SYMBOL", 
                      "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL", 
                      "STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", 
                      "STATS_SAMPLE_PAGES_SYMBOL", "STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", 
                      "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", "STD_SYMBOL", 
                      "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", 
                      "STRAIGHT_JOIN_SYMBOL", "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
                      "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITIONS_SYMBOL", 
                      "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
                      "SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", 
                      "SWITCHES_SYMBOL", "SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", 
                      "TABLES_SYMBOL", "TABLESPACE_SYMBOL", "TABLE_REF_PRIORITY_SYMBOL", 
                      "TABLE_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLE_NAME_SYMBOL", 
                      "TEMPORARY_SYMBOL", "TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", 
                      "TEXT_SYMBOL", "THAN_SYMBOL", "THEN_SYMBOL", "TIMESTAMP_SYMBOL", 
                      "TIMESTAMP_ADD_SYMBOL", "TIMESTAMP_DIFF_SYMBOL", "TIME_SYMBOL", 
                      "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", "TINYTEXT_SYMBOL", 
                      "TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", 
                      "TRIGGERS_SYMBOL", "TRIGGER_SYMBOL", "TRIM_SYMBOL", 
                      "TRUE_SYMBOL", "TRUNCATE_SYMBOL", "TYPES_SYMBOL", 
                      "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", 
                      "UNDEFINED_SYMBOL", "UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", 
                      "UNDO_SYMBOL", "UNICODE_SYMBOL", "UNINSTALL_SYMBOL", 
                      "UNION_SYMBOL", "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", 
                      "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UNTIL_SYMBOL", 
                      "UPDATE_SYMBOL", "UPGRADE_SYMBOL", "USAGE_SYMBOL", 
                      "USER_RESOURCES_SYMBOL", "USER_SYMBOL", "USE_FRM_SYMBOL", 
                      "USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", 
                      "UTC_TIME_SYMBOL", "VALIDATION_SYMBOL", "VALUES_SYMBOL", 
                      "VALUE_SYMBOL", "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", 
                      "VARCHARACTER_SYMBOL", "VARIABLES_SYMBOL", "VARIANCE_SYMBOL", 
                      "VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", 
                      "VIEW_SYMBOL", "VIRTUAL_SYMBOL", "WAIT_SYMBOL", "WARNINGS_SYMBOL", 
                      "WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL", "WHEN_SYMBOL", 
                      "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL", 
                      "WORK_SYMBOL", "WRAPPER_SYMBOL", "WRITE_SYMBOL", "X509_SYMBOL", 
                      "XA_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", "XOR_SYMBOL", 
                      "YEAR_MONTH_SYMBOL", "YEAR_SYMBOL", "ZEROFILL_SYMBOL", 
                      "PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", 
                      "VISIBLE_SYMBOL", "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", 
                      "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", 
                      "OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", "NOWAIT_SYMBOL", 
                      "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", 
                      "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL", 
                      "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", 
                      "FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", 
                      "LAG_SYMBOL", "LAST_VALUE_SYMBOL", "LEAD_SYMBOL", 
                      "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", 
                      "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", 
                      "PRECEDING_SYMBOL", "RANK_SYMBOL", "RESPECT_SYMBOL", 
                      "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", "UNBOUNDED_SYMBOL", 
                      "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", 
                      "NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", 
                      "HISTORY_SYMBOL", "REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", 
                      "RESOURCE_SYMBOL", "SYSTEM_SYMBOL", "VCPU_SYMBOL", 
                      "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
                      "RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", 
                      "ORGANIZATION_SYMBOL", "REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", 
                      "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", "SECONDARY_LOAD_SYMBOL", 
                      "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", 
                      "LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
                      "ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", 
                      "RANDOM_SYMBOL", "MASTER_COMPRESSION_ALGORITHM_SYMBOL", 
                      "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", "PRIVILEGE_CHECKS_USER_SYMBOL", 
                      "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", 
                      "PASSWORD_LOCK_TIME_SYMBOL", "FAILED_LOGIN_ATTEMPTS_SYMBOL", 
                      "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", "STREAM_SYMBOL", 
                      "OFF_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", 
                      "INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", 
                      "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", "INVALID_INPUT", 
                      "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", 
                      "BACK_TICK_QUOTED_ID", "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", 
                      "VERSION_COMMENT_START", "MYSQL_COMMENT_START", "VERSION_COMMENT_END", 
                      "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
                      "NOT_EQUAL2_OPERATOR" ]

    RULE_query = 0
    RULE_simpleStatement = 1
    RULE_alterStatement = 2
    RULE_alterDatabase = 3
    RULE_alterEvent = 4
    RULE_alterLogfileGroup = 5
    RULE_alterLogfileGroupOptions = 6
    RULE_alterLogfileGroupOption = 7
    RULE_alterServer = 8
    RULE_alterTable = 9
    RULE_alterTableActions = 10
    RULE_alterCommandList = 11
    RULE_alterCommandsModifierList = 12
    RULE_standaloneAlterCommands = 13
    RULE_alterPartition = 14
    RULE_alterList = 15
    RULE_alterCommandsModifier = 16
    RULE_alterListItem = 17
    RULE_place = 18
    RULE_restrict = 19
    RULE_alterOrderList = 20
    RULE_alterAlgorithmOption = 21
    RULE_alterLockOption = 22
    RULE_indexLockAndAlgorithm = 23
    RULE_withValidation = 24
    RULE_removePartitioning = 25
    RULE_allOrPartitionNameList = 26
    RULE_alterTablespace = 27
    RULE_alterUndoTablespace = 28
    RULE_undoTableSpaceOptions = 29
    RULE_undoTableSpaceOption = 30
    RULE_alterTablespaceOptions = 31
    RULE_alterTablespaceOption = 32
    RULE_changeTablespaceOption = 33
    RULE_alterView = 34
    RULE_viewTail = 35
    RULE_viewSelect = 36
    RULE_viewCheckOption = 37
    RULE_createStatement = 38
    RULE_createDatabase = 39
    RULE_createDatabaseOption = 40
    RULE_createTable = 41
    RULE_tableElementList = 42
    RULE_tableElement = 43
    RULE_duplicateAsQueryExpression = 44
    RULE_queryExpressionOrParens = 45
    RULE_createRoutine = 46
    RULE_createProcedure = 47
    RULE_createFunction = 48
    RULE_createUdf = 49
    RULE_routineCreateOption = 50
    RULE_routineAlterOptions = 51
    RULE_routineOption = 52
    RULE_createIndex = 53
    RULE_indexNameAndType = 54
    RULE_createIndexTarget = 55
    RULE_createLogfileGroup = 56
    RULE_logfileGroupOptions = 57
    RULE_logfileGroupOption = 58
    RULE_createServer = 59
    RULE_serverOptions = 60
    RULE_serverOption = 61
    RULE_createTablespace = 62
    RULE_createUndoTablespace = 63
    RULE_tsDataFileName = 64
    RULE_tsDataFile = 65
    RULE_tablespaceOptions = 66
    RULE_tablespaceOption = 67
    RULE_tsOptionInitialSize = 68
    RULE_tsOptionUndoRedoBufferSize = 69
    RULE_tsOptionAutoextendSize = 70
    RULE_tsOptionMaxSize = 71
    RULE_tsOptionExtentSize = 72
    RULE_tsOptionNodegroup = 73
    RULE_tsOptionEngine = 74
    RULE_tsOptionWait = 75
    RULE_tsOptionComment = 76
    RULE_tsOptionFileblockSize = 77
    RULE_tsOptionEncryption = 78
    RULE_createView = 79
    RULE_viewReplaceOrAlgorithm = 80
    RULE_viewAlgorithm = 81
    RULE_viewSuid = 82
    RULE_createTrigger = 83
    RULE_triggerFollowsPrecedesClause = 84
    RULE_createEvent = 85
    RULE_createRole = 86
    RULE_createSpatialReference = 87
    RULE_srsAttribute = 88
    RULE_dropStatement = 89
    RULE_dropDatabase = 90
    RULE_dropEvent = 91
    RULE_dropFunction = 92
    RULE_dropProcedure = 93
    RULE_dropIndex = 94
    RULE_dropLogfileGroup = 95
    RULE_dropLogfileGroupOption = 96
    RULE_dropServer = 97
    RULE_dropTable = 98
    RULE_dropTableSpace = 99
    RULE_dropTrigger = 100
    RULE_dropView = 101
    RULE_dropRole = 102
    RULE_dropSpatialReference = 103
    RULE_dropUndoTablespace = 104
    RULE_renameTableStatement = 105
    RULE_renamePair = 106
    RULE_truncateTableStatement = 107
    RULE_importStatement = 108
    RULE_callStatement = 109
    RULE_deleteStatement = 110
    RULE_partitionDelete = 111
    RULE_deleteStatementOption = 112
    RULE_doStatement = 113
    RULE_handlerStatement = 114
    RULE_handlerReadOrScan = 115
    RULE_insertStatement = 116
    RULE_insertLockOption = 117
    RULE_insertFromConstructor = 118
    RULE_fields = 119
    RULE_insertValues = 120
    RULE_insertQueryExpression = 121
    RULE_valueList = 122
    RULE_values = 123
    RULE_valuesReference = 124
    RULE_insertUpdateList = 125
    RULE_loadStatement = 126
    RULE_dataOrXml = 127
    RULE_xmlRowsIdentifiedBy = 128
    RULE_loadDataFileTail = 129
    RULE_loadDataFileTargetList = 130
    RULE_fieldOrVariableList = 131
    RULE_replaceStatement = 132
    RULE_selectStatement = 133
    RULE_selectStatementWithInto = 134
    RULE_queryExpression = 135
    RULE_queryExpressionBody = 136
    RULE_queryExpressionParens = 137
    RULE_queryPrimary = 138
    RULE_querySpecification = 139
    RULE_subquery = 140
    RULE_querySpecOption = 141
    RULE_limitClause = 142
    RULE_simpleLimitClause = 143
    RULE_limitOptions = 144
    RULE_limitOption = 145
    RULE_intoClause = 146
    RULE_procedureAnalyseClause = 147
    RULE_havingClause = 148
    RULE_windowClause = 149
    RULE_windowDefinition = 150
    RULE_windowSpec = 151
    RULE_windowSpecDetails = 152
    RULE_windowFrameClause = 153
    RULE_windowFrameUnits = 154
    RULE_windowFrameExtent = 155
    RULE_windowFrameStart = 156
    RULE_windowFrameBetween = 157
    RULE_windowFrameBound = 158
    RULE_windowFrameExclusion = 159
    RULE_withClause = 160
    RULE_commonTableExpression = 161
    RULE_groupByClause = 162
    RULE_olapOption = 163
    RULE_orderClause = 164
    RULE_direction = 165
    RULE_fromClause = 166
    RULE_tableReferenceList = 167
    RULE_tableValueConstructor = 168
    RULE_explicitTable = 169
    RULE_rowValueExplicit = 170
    RULE_selectOption = 171
    RULE_lockingClauseList = 172
    RULE_lockingClause = 173
    RULE_lockStrengh = 174
    RULE_lockedRowAction = 175
    RULE_selectItemList = 176
    RULE_selectItem = 177
    RULE_selectAlias = 178
    RULE_whereClause = 179
    RULE_tableReference = 180
    RULE_escapedTableReference = 181
    RULE_joinedTable = 182
    RULE_naturalJoinType = 183
    RULE_innerJoinType = 184
    RULE_outerJoinType = 185
    RULE_tableFactor = 186
    RULE_singleTable = 187
    RULE_singleTableParens = 188
    RULE_derivedTable = 189
    RULE_tableReferenceListParens = 190
    RULE_tableFunction = 191
    RULE_columnsClause = 192
    RULE_jtColumn = 193
    RULE_onEmptyOrError = 194
    RULE_onEmpty = 195
    RULE_onError = 196
    RULE_jtOnResponse = 197
    RULE_unionOption = 198
    RULE_tableAlias = 199
    RULE_indexHintList = 200
    RULE_indexHint = 201
    RULE_indexHintType = 202
    RULE_keyOrIndex = 203
    RULE_constraintKeyType = 204
    RULE_indexHintClause = 205
    RULE_indexList = 206
    RULE_indexListElement = 207
    RULE_updateStatement = 208
    RULE_transactionOrLockingStatement = 209
    RULE_transactionStatement = 210
    RULE_beginWork = 211
    RULE_transactionCharacteristic = 212
    RULE_savepointStatement = 213
    RULE_lockStatement = 214
    RULE_lockItem = 215
    RULE_lockOption = 216
    RULE_xaStatement = 217
    RULE_xaConvert = 218
    RULE_xid = 219
    RULE_replicationStatement = 220
    RULE_resetOption = 221
    RULE_masterResetOptions = 222
    RULE_replicationLoad = 223
    RULE_changeMaster = 224
    RULE_changeMasterOptions = 225
    RULE_masterOption = 226
    RULE_privilegeCheckDef = 227
    RULE_tablePrimaryKeyCheckDef = 228
    RULE_masterTlsCiphersuitesDef = 229
    RULE_masterFileDef = 230
    RULE_serverIdList = 231
    RULE_changeReplication = 232
    RULE_filterDefinition = 233
    RULE_filterDbList = 234
    RULE_filterTableList = 235
    RULE_filterStringList = 236
    RULE_filterWildDbTableString = 237
    RULE_filterDbPairList = 238
    RULE_slave = 239
    RULE_slaveUntilOptions = 240
    RULE_slaveConnectionOptions = 241
    RULE_slaveThreadOptions = 242
    RULE_slaveThreadOption = 243
    RULE_groupReplication = 244
    RULE_preparedStatement = 245
    RULE_executeStatement = 246
    RULE_executeVarList = 247
    RULE_cloneStatement = 248
    RULE_dataDirSSL = 249
    RULE_ssl = 250
    RULE_accountManagementStatement = 251
    RULE_alterUser = 252
    RULE_alterUserTail = 253
    RULE_userFunction = 254
    RULE_createUser = 255
    RULE_createUserTail = 256
    RULE_defaultRoleClause = 257
    RULE_requireClause = 258
    RULE_connectOptions = 259
    RULE_accountLockPasswordExpireOptions = 260
    RULE_dropUser = 261
    RULE_grant = 262
    RULE_grantTargetList = 263
    RULE_grantOptions = 264
    RULE_exceptRoleList = 265
    RULE_withRoles = 266
    RULE_grantAs = 267
    RULE_versionedRequireClause = 268
    RULE_renameUser = 269
    RULE_revoke = 270
    RULE_onTypeTo = 271
    RULE_aclType = 272
    RULE_roleOrPrivilegesList = 273
    RULE_roleOrPrivilege = 274
    RULE_grantIdentifier = 275
    RULE_requireList = 276
    RULE_requireListElement = 277
    RULE_grantOption = 278
    RULE_setRole = 279
    RULE_roleList = 280
    RULE_role = 281
    RULE_tableAdministrationStatement = 282
    RULE_histogram = 283
    RULE_checkOption = 284
    RULE_repairType = 285
    RULE_installUninstallStatment = 286
    RULE_setStatement = 287
    RULE_startOptionValueList = 288
    RULE_transactionCharacteristics = 289
    RULE_transactionAccessMode = 290
    RULE_isolationLevel = 291
    RULE_optionValueListContinued = 292
    RULE_optionValueNoOptionType = 293
    RULE_optionValue = 294
    RULE_setSystemVariable = 295
    RULE_startOptionValueListFollowingOptionType = 296
    RULE_optionValueFollowingOptionType = 297
    RULE_setExprOrDefault = 298
    RULE_showStatement = 299
    RULE_showCommandType = 300
    RULE_nonBlocking = 301
    RULE_fromOrIn = 302
    RULE_inDb = 303
    RULE_profileType = 304
    RULE_otherAdministrativeStatement = 305
    RULE_keyCacheListOrParts = 306
    RULE_keyCacheList = 307
    RULE_assignToKeycache = 308
    RULE_assignToKeycachePartition = 309
    RULE_cacheKeyList = 310
    RULE_keyUsageElement = 311
    RULE_keyUsageList = 312
    RULE_flushOption = 313
    RULE_logType = 314
    RULE_flushTables = 315
    RULE_flushTablesOptions = 316
    RULE_preloadTail = 317
    RULE_preloadList = 318
    RULE_preloadKeys = 319
    RULE_adminPartition = 320
    RULE_resourceGroupManagement = 321
    RULE_createResourceGroup = 322
    RULE_resourceGroupVcpuList = 323
    RULE_vcpuNumOrRange = 324
    RULE_resourceGroupPriority = 325
    RULE_resourceGroupEnableDisable = 326
    RULE_alterResourceGroup = 327
    RULE_setResourceGroup = 328
    RULE_threadIdList = 329
    RULE_dropResourceGroup = 330
    RULE_utilityStatement = 331
    RULE_describeStatement = 332
    RULE_explainStatement = 333
    RULE_explainableStatement = 334
    RULE_helpCommand = 335
    RULE_useCommand = 336
    RULE_restartServer = 337
    RULE_expr = 338
    RULE_boolPri = 339
    RULE_compOp = 340
    RULE_predicate = 341
    RULE_predicateOperations = 342
    RULE_bitExpr = 343
    RULE_simpleExpr = 344
    RULE_arrayCast = 345
    RULE_jsonOperator = 346
    RULE_sumExpr = 347
    RULE_groupingOperation = 348
    RULE_windowFunctionCall = 349
    RULE_windowingClause = 350
    RULE_leadLagInfo = 351
    RULE_nullTreatment = 352
    RULE_jsonFunction = 353
    RULE_inSumExpr = 354
    RULE_identListArg = 355
    RULE_identList = 356
    RULE_fulltextOptions = 357
    RULE_runtimeFunctionCall = 358
    RULE_geometryFunction = 359
    RULE_timeFunctionParameters = 360
    RULE_fractionalPrecision = 361
    RULE_weightStringLevels = 362
    RULE_weightStringLevelListItem = 363
    RULE_dateTimeTtype = 364
    RULE_trimFunction = 365
    RULE_substringFunction = 366
    RULE_functionCall = 367
    RULE_udfExprList = 368
    RULE_udfExpr = 369
    RULE_variable = 370
    RULE_userVariable = 371
    RULE_systemVariable = 372
    RULE_internalVariableName = 373
    RULE_whenExpression = 374
    RULE_thenExpression = 375
    RULE_elseExpression = 376
    RULE_castType = 377
    RULE_exprList = 378
    RULE_charset = 379
    RULE_notRule = 380
    RULE_not2Rule = 381
    RULE_interval = 382
    RULE_intervalTimeStamp = 383
    RULE_exprListWithParentheses = 384
    RULE_exprWithParentheses = 385
    RULE_simpleExprWithParentheses = 386
    RULE_orderList = 387
    RULE_orderExpression = 388
    RULE_groupList = 389
    RULE_groupingExpression = 390
    RULE_channel = 391
    RULE_compoundStatement = 392
    RULE_returnStatement = 393
    RULE_ifStatement = 394
    RULE_ifBody = 395
    RULE_thenStatement = 396
    RULE_compoundStatementList = 397
    RULE_caseStatement = 398
    RULE_elseStatement = 399
    RULE_labeledBlock = 400
    RULE_unlabeledBlock = 401
    RULE_label = 402
    RULE_beginEndBlock = 403
    RULE_labeledControl = 404
    RULE_unlabeledControl = 405
    RULE_loopBlock = 406
    RULE_whileDoBlock = 407
    RULE_repeatUntilBlock = 408
    RULE_spDeclarations = 409
    RULE_spDeclaration = 410
    RULE_variableDeclaration = 411
    RULE_conditionDeclaration = 412
    RULE_spCondition = 413
    RULE_sqlstate = 414
    RULE_handlerDeclaration = 415
    RULE_handlerCondition = 416
    RULE_cursorDeclaration = 417
    RULE_iterateStatement = 418
    RULE_leaveStatement = 419
    RULE_getDiagnostics = 420
    RULE_signalAllowedExpr = 421
    RULE_statementInformationItem = 422
    RULE_conditionInformationItem = 423
    RULE_signalInformationItemName = 424
    RULE_signalStatement = 425
    RULE_resignalStatement = 426
    RULE_signalInformationItem = 427
    RULE_cursorOpen = 428
    RULE_cursorClose = 429
    RULE_cursorFetch = 430
    RULE_schedule = 431
    RULE_columnDefinition = 432
    RULE_checkOrReferences = 433
    RULE_checkConstraint = 434
    RULE_constraintEnforcement = 435
    RULE_tableConstraintDef = 436
    RULE_constraintName = 437
    RULE_fieldDefinition = 438
    RULE_columnAttribute = 439
    RULE_columnFormat = 440
    RULE_storageMedia = 441
    RULE_gcolAttribute = 442
    RULE_references = 443
    RULE_deleteOption = 444
    RULE_keyList = 445
    RULE_keyPart = 446
    RULE_keyListWithExpression = 447
    RULE_keyPartOrExpression = 448
    RULE_keyListVariants = 449
    RULE_indexType = 450
    RULE_indexOption = 451
    RULE_commonIndexOption = 452
    RULE_visibility = 453
    RULE_indexTypeClause = 454
    RULE_fulltextIndexOption = 455
    RULE_spatialIndexOption = 456
    RULE_dataTypeDefinition = 457
    RULE_dataType = 458
    RULE_nchar = 459
    RULE_realType = 460
    RULE_fieldLength = 461
    RULE_fieldOptions = 462
    RULE_charsetWithOptBinary = 463
    RULE_ascii = 464
    RULE_unicode_data = 465
    RULE_wsNumCodepoints = 466
    RULE_typeDatetimePrecision = 467
    RULE_charsetName = 468
    RULE_collationName = 469
    RULE_createTableOptions = 470
    RULE_createTableOptionsSpaceSeparated = 471
    RULE_createTableOption = 472
    RULE_ternaryOption = 473
    RULE_defaultCollation = 474
    RULE_defaultEncryption = 475
    RULE_defaultCharset = 476
    RULE_partitionClause = 477
    RULE_partitionTypeDef = 478
    RULE_subPartitions = 479
    RULE_partitionKeyAlgorithm = 480
    RULE_partitionDefinitions = 481
    RULE_partitionDefinition = 482
    RULE_partitionValuesIn = 483
    RULE_partitionOption = 484
    RULE_subpartitionDefinition = 485
    RULE_partitionValueItemListParen = 486
    RULE_partitionValueItem = 487
    RULE_definerClause = 488
    RULE_ifExists = 489
    RULE_ifNotExists = 490
    RULE_procedureParameter = 491
    RULE_functionParameter = 492
    RULE_collate = 493
    RULE_typeWithOptCollate = 494
    RULE_schemaIdentifierPair = 495
    RULE_viewRefList = 496
    RULE_updateList = 497
    RULE_updateElement = 498
    RULE_charsetClause = 499
    RULE_fieldsClause = 500
    RULE_fieldTerm = 501
    RULE_linesClause = 502
    RULE_lineTerm = 503
    RULE_userList = 504
    RULE_createUserList = 505
    RULE_alterUserList = 506
    RULE_createUserEntry = 507
    RULE_alterUserEntry = 508
    RULE_retainCurrentPassword = 509
    RULE_discardOldPassword = 510
    RULE_replacePassword = 511
    RULE_userIdentifierOrText = 512
    RULE_user = 513
    RULE_likeClause = 514
    RULE_likeOrWhere = 515
    RULE_onlineOption = 516
    RULE_noWriteToBinLog = 517
    RULE_usePartition = 518
    RULE_fieldIdentifier = 519
    RULE_columnName = 520
    RULE_columnInternalRef = 521
    RULE_columnInternalRefList = 522
    RULE_columnRef = 523
    RULE_insertIdentifier = 524
    RULE_indexName = 525
    RULE_indexRef = 526
    RULE_tableWild = 527
    RULE_schemaName = 528
    RULE_schemaRef = 529
    RULE_procedureName = 530
    RULE_procedureRef = 531
    RULE_functionName = 532
    RULE_functionRef = 533
    RULE_triggerName = 534
    RULE_triggerRef = 535
    RULE_viewName = 536
    RULE_viewRef = 537
    RULE_tablespaceName = 538
    RULE_tablespaceRef = 539
    RULE_logfileGroupName = 540
    RULE_logfileGroupRef = 541
    RULE_eventName = 542
    RULE_eventRef = 543
    RULE_udfName = 544
    RULE_serverName = 545
    RULE_serverRef = 546
    RULE_engineRef = 547
    RULE_tableName = 548
    RULE_filterTableRef = 549
    RULE_tableRefWithWildcard = 550
    RULE_tableRef = 551
    RULE_tableRefList = 552
    RULE_tableAliasRefList = 553
    RULE_parameterName = 554
    RULE_labelIdentifier = 555
    RULE_labelRef = 556
    RULE_roleIdentifier = 557
    RULE_roleRef = 558
    RULE_pluginRef = 559
    RULE_componentRef = 560
    RULE_resourceGroupRef = 561
    RULE_windowName = 562
    RULE_pureIdentifier = 563
    RULE_identifier = 564
    RULE_identifierList = 565
    RULE_identifierListWithParentheses = 566
    RULE_qualifiedIdentifier = 567
    RULE_simpleIdentifier = 568
    RULE_dotIdentifier = 569
    RULE_ulong_number = 570
    RULE_real_ulong_number = 571
    RULE_ulonglong_number = 572
    RULE_real_ulonglong_number = 573
    RULE_literal = 574
    RULE_signedLiteral = 575
    RULE_stringList = 576
    RULE_textStringLiteral = 577
    RULE_textString = 578
    RULE_textStringHash = 579
    RULE_textLiteral = 580
    RULE_textStringNoLinebreak = 581
    RULE_textStringLiteralList = 582
    RULE_numLiteral = 583
    RULE_boolLiteral = 584
    RULE_nullLiteral = 585
    RULE_temporalLiteral = 586
    RULE_floatOptions = 587
    RULE_standardFloatOptions = 588
    RULE_precision = 589
    RULE_textOrIdentifier = 590
    RULE_lValueIdentifier = 591
    RULE_roleIdentifierOrText = 592
    RULE_sizeNumber = 593
    RULE_parentheses = 594
    RULE_equal = 595
    RULE_optionType = 596
    RULE_varIdentType = 597
    RULE_setVarIdentType = 598
    RULE_identifierKeyword = 599
    RULE_identifierKeywordsAmbiguous1RolesAndLabels = 600
    RULE_identifierKeywordsAmbiguous2Labels = 601
    RULE_labelKeyword = 602
    RULE_identifierKeywordsAmbiguous3Roles = 603
    RULE_identifierKeywordsUnambiguous = 604
    RULE_roleKeyword = 605
    RULE_lValueKeyword = 606
    RULE_identifierKeywordsAmbiguous4SystemVariables = 607
    RULE_roleOrIdentifierKeyword = 608
    RULE_roleOrLabelKeyword = 609

    ruleNames =  [ "query", "simpleStatement", "alterStatement", "alterDatabase", 
                   "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", 
                   "alterLogfileGroupOption", "alterServer", "alterTable", 
                   "alterTableActions", "alterCommandList", "alterCommandsModifierList", 
                   "standaloneAlterCommands", "alterPartition", "alterList", 
                   "alterCommandsModifier", "alterListItem", "place", "restrict", 
                   "alterOrderList", "alterAlgorithmOption", "alterLockOption", 
                   "indexLockAndAlgorithm", "withValidation", "removePartitioning", 
                   "allOrPartitionNameList", "alterTablespace", "alterUndoTablespace", 
                   "undoTableSpaceOptions", "undoTableSpaceOption", "alterTablespaceOptions", 
                   "alterTablespaceOption", "changeTablespaceOption", "alterView", 
                   "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
                   "createDatabase", "createDatabaseOption", "createTable", 
                   "tableElementList", "tableElement", "duplicateAsQueryExpression", 
                   "queryExpressionOrParens", "createRoutine", "createProcedure", 
                   "createFunction", "createUdf", "routineCreateOption", 
                   "routineAlterOptions", "routineOption", "createIndex", 
                   "indexNameAndType", "createIndexTarget", "createLogfileGroup", 
                   "logfileGroupOptions", "logfileGroupOption", "createServer", 
                   "serverOptions", "serverOption", "createTablespace", 
                   "createUndoTablespace", "tsDataFileName", "tsDataFile", 
                   "tablespaceOptions", "tablespaceOption", "tsOptionInitialSize", 
                   "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", 
                   "tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", 
                   "tsOptionEngine", "tsOptionWait", "tsOptionComment", 
                   "tsOptionFileblockSize", "tsOptionEncryption", "createView", 
                   "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", 
                   "createTrigger", "triggerFollowsPrecedesClause", "createEvent", 
                   "createRole", "createSpatialReference", "srsAttribute", 
                   "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
                   "dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
                   "dropServer", "dropTable", "dropTableSpace", "dropTrigger", 
                   "dropView", "dropRole", "dropSpatialReference", "dropUndoTablespace", 
                   "renameTableStatement", "renamePair", "truncateTableStatement", 
                   "importStatement", "callStatement", "deleteStatement", 
                   "partitionDelete", "deleteStatementOption", "doStatement", 
                   "handlerStatement", "handlerReadOrScan", "insertStatement", 
                   "insertLockOption", "insertFromConstructor", "fields", 
                   "insertValues", "insertQueryExpression", "valueList", 
                   "values", "valuesReference", "insertUpdateList", "loadStatement", 
                   "dataOrXml", "xmlRowsIdentifiedBy", "loadDataFileTail", 
                   "loadDataFileTargetList", "fieldOrVariableList", "replaceStatement", 
                   "selectStatement", "selectStatementWithInto", "queryExpression", 
                   "queryExpressionBody", "queryExpressionParens", "queryPrimary", 
                   "querySpecification", "subquery", "querySpecOption", 
                   "limitClause", "simpleLimitClause", "limitOptions", "limitOption", 
                   "intoClause", "procedureAnalyseClause", "havingClause", 
                   "windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
                   "windowFrameClause", "windowFrameUnits", "windowFrameExtent", 
                   "windowFrameStart", "windowFrameBetween", "windowFrameBound", 
                   "windowFrameExclusion", "withClause", "commonTableExpression", 
                   "groupByClause", "olapOption", "orderClause", "direction", 
                   "fromClause", "tableReferenceList", "tableValueConstructor", 
                   "explicitTable", "rowValueExplicit", "selectOption", 
                   "lockingClauseList", "lockingClause", "lockStrengh", 
                   "lockedRowAction", "selectItemList", "selectItem", "selectAlias", 
                   "whereClause", "tableReference", "escapedTableReference", 
                   "joinedTable", "naturalJoinType", "innerJoinType", "outerJoinType", 
                   "tableFactor", "singleTable", "singleTableParens", "derivedTable", 
                   "tableReferenceListParens", "tableFunction", "columnsClause", 
                   "jtColumn", "onEmptyOrError", "onEmpty", "onError", "jtOnResponse", 
                   "unionOption", "tableAlias", "indexHintList", "indexHint", 
                   "indexHintType", "keyOrIndex", "constraintKeyType", "indexHintClause", 
                   "indexList", "indexListElement", "updateStatement", "transactionOrLockingStatement", 
                   "transactionStatement", "beginWork", "transactionCharacteristic", 
                   "savepointStatement", "lockStatement", "lockItem", "lockOption", 
                   "xaStatement", "xaConvert", "xid", "replicationStatement", 
                   "resetOption", "masterResetOptions", "replicationLoad", 
                   "changeMaster", "changeMasterOptions", "masterOption", 
                   "privilegeCheckDef", "tablePrimaryKeyCheckDef", "masterTlsCiphersuitesDef", 
                   "masterFileDef", "serverIdList", "changeReplication", 
                   "filterDefinition", "filterDbList", "filterTableList", 
                   "filterStringList", "filterWildDbTableString", "filterDbPairList", 
                   "slave", "slaveUntilOptions", "slaveConnectionOptions", 
                   "slaveThreadOptions", "slaveThreadOption", "groupReplication", 
                   "preparedStatement", "executeStatement", "executeVarList", 
                   "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement", 
                   "alterUser", "alterUserTail", "userFunction", "createUser", 
                   "createUserTail", "defaultRoleClause", "requireClause", 
                   "connectOptions", "accountLockPasswordExpireOptions", 
                   "dropUser", "grant", "grantTargetList", "grantOptions", 
                   "exceptRoleList", "withRoles", "grantAs", "versionedRequireClause", 
                   "renameUser", "revoke", "onTypeTo", "aclType", "roleOrPrivilegesList", 
                   "roleOrPrivilege", "grantIdentifier", "requireList", 
                   "requireListElement", "grantOption", "setRole", "roleList", 
                   "role", "tableAdministrationStatement", "histogram", 
                   "checkOption", "repairType", "installUninstallStatment", 
                   "setStatement", "startOptionValueList", "transactionCharacteristics", 
                   "transactionAccessMode", "isolationLevel", "optionValueListContinued", 
                   "optionValueNoOptionType", "optionValue", "setSystemVariable", 
                   "startOptionValueListFollowingOptionType", "optionValueFollowingOptionType", 
                   "setExprOrDefault", "showStatement", "showCommandType", 
                   "nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement", 
                   "keyCacheListOrParts", "keyCacheList", "assignToKeycache", 
                   "assignToKeycachePartition", "cacheKeyList", "keyUsageElement", 
                   "keyUsageList", "flushOption", "logType", "flushTables", 
                   "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
                   "adminPartition", "resourceGroupManagement", "createResourceGroup", 
                   "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority", 
                   "resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup", 
                   "threadIdList", "dropResourceGroup", "utilityStatement", 
                   "describeStatement", "explainStatement", "explainableStatement", 
                   "helpCommand", "useCommand", "restartServer", "expr", 
                   "boolPri", "compOp", "predicate", "predicateOperations", 
                   "bitExpr", "simpleExpr", "arrayCast", "jsonOperator", 
                   "sumExpr", "groupingOperation", "windowFunctionCall", 
                   "windowingClause", "leadLagInfo", "nullTreatment", "jsonFunction", 
                   "inSumExpr", "identListArg", "identList", "fulltextOptions", 
                   "runtimeFunctionCall", "geometryFunction", "timeFunctionParameters", 
                   "fractionalPrecision", "weightStringLevels", "weightStringLevelListItem", 
                   "dateTimeTtype", "trimFunction", "substringFunction", 
                   "functionCall", "udfExprList", "udfExpr", "variable", 
                   "userVariable", "systemVariable", "internalVariableName", 
                   "whenExpression", "thenExpression", "elseExpression", 
                   "castType", "exprList", "charset", "notRule", "not2Rule", 
                   "interval", "intervalTimeStamp", "exprListWithParentheses", 
                   "exprWithParentheses", "simpleExprWithParentheses", "orderList", 
                   "orderExpression", "groupList", "groupingExpression", 
                   "channel", "compoundStatement", "returnStatement", "ifStatement", 
                   "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
                   "elseStatement", "labeledBlock", "unlabeledBlock", "label", 
                   "beginEndBlock", "labeledControl", "unlabeledControl", 
                   "loopBlock", "whileDoBlock", "repeatUntilBlock", "spDeclarations", 
                   "spDeclaration", "variableDeclaration", "conditionDeclaration", 
                   "spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", 
                   "cursorDeclaration", "iterateStatement", "leaveStatement", 
                   "getDiagnostics", "signalAllowedExpr", "statementInformationItem", 
                   "conditionInformationItem", "signalInformationItemName", 
                   "signalStatement", "resignalStatement", "signalInformationItem", 
                   "cursorOpen", "cursorClose", "cursorFetch", "schedule", 
                   "columnDefinition", "checkOrReferences", "checkConstraint", 
                   "constraintEnforcement", "tableConstraintDef", "constraintName", 
                   "fieldDefinition", "columnAttribute", "columnFormat", 
                   "storageMedia", "gcolAttribute", "references", "deleteOption", 
                   "keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression", 
                   "keyListVariants", "indexType", "indexOption", "commonIndexOption", 
                   "visibility", "indexTypeClause", "fulltextIndexOption", 
                   "spatialIndexOption", "dataTypeDefinition", "dataType", 
                   "nchar", "realType", "fieldLength", "fieldOptions", "charsetWithOptBinary", 
                   "ascii", "unicode_data", "wsNumCodepoints", "typeDatetimePrecision", 
                   "charsetName", "collationName", "createTableOptions", 
                   "createTableOptionsSpaceSeparated", "createTableOption", 
                   "ternaryOption", "defaultCollation", "defaultEncryption", 
                   "defaultCharset", "partitionClause", "partitionTypeDef", 
                   "subPartitions", "partitionKeyAlgorithm", "partitionDefinitions", 
                   "partitionDefinition", "partitionValuesIn", "partitionOption", 
                   "subpartitionDefinition", "partitionValueItemListParen", 
                   "partitionValueItem", "definerClause", "ifExists", "ifNotExists", 
                   "procedureParameter", "functionParameter", "collate", 
                   "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
                   "updateList", "updateElement", "charsetClause", "fieldsClause", 
                   "fieldTerm", "linesClause", "lineTerm", "userList", "createUserList", 
                   "alterUserList", "createUserEntry", "alterUserEntry", 
                   "retainCurrentPassword", "discardOldPassword", "replacePassword", 
                   "userIdentifierOrText", "user", "likeClause", "likeOrWhere", 
                   "onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier", 
                   "columnName", "columnInternalRef", "columnInternalRefList", 
                   "columnRef", "insertIdentifier", "indexName", "indexRef", 
                   "tableWild", "schemaName", "schemaRef", "procedureName", 
                   "procedureRef", "functionName", "functionRef", "triggerName", 
                   "triggerRef", "viewName", "viewRef", "tablespaceName", 
                   "tablespaceRef", "logfileGroupName", "logfileGroupRef", 
                   "eventName", "eventRef", "udfName", "serverName", "serverRef", 
                   "engineRef", "tableName", "filterTableRef", "tableRefWithWildcard", 
                   "tableRef", "tableRefList", "tableAliasRefList", "parameterName", 
                   "labelIdentifier", "labelRef", "roleIdentifier", "roleRef", 
                   "pluginRef", "componentRef", "resourceGroupRef", "windowName", 
                   "pureIdentifier", "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier", 
                   "ulong_number", "real_ulong_number", "ulonglong_number", 
                   "real_ulonglong_number", "literal", "signedLiteral", 
                   "stringList", "textStringLiteral", "textString", "textStringHash", 
                   "textLiteral", "textStringNoLinebreak", "textStringLiteralList", 
                   "numLiteral", "boolLiteral", "nullLiteral", "temporalLiteral", 
                   "floatOptions", "standardFloatOptions", "precision", 
                   "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
                   "sizeNumber", "parentheses", "equal", "optionType", "varIdentType", 
                   "setVarIdentType", "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", 
                   "identifierKeywordsAmbiguous2Labels", "labelKeyword", 
                   "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
                   "roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
                   "roleOrIdentifierKeyword", "roleOrLabelKeyword" ]

    EOF = Token.EOF
    ACCESSIBLE_SYMBOL=1
    ACCOUNT_SYMBOL=2
    ACTION_SYMBOL=3
    ADD_SYMBOL=4
    ADDDATE_SYMBOL=5
    AFTER_SYMBOL=6
    AGAINST_SYMBOL=7
    AGGREGATE_SYMBOL=8
    ALGORITHM_SYMBOL=9
    ALL_SYMBOL=10
    ALTER_SYMBOL=11
    ALWAYS_SYMBOL=12
    ANALYSE_SYMBOL=13
    ANALYZE_SYMBOL=14
    AND_SYMBOL=15
    ANY_SYMBOL=16
    AS_SYMBOL=17
    ASC_SYMBOL=18
    ASCII_SYMBOL=19
    ASENSITIVE_SYMBOL=20
    AT_SYMBOL=21
    AUTHORS_SYMBOL=22
    AUTOEXTEND_SIZE_SYMBOL=23
    AUTO_INCREMENT_SYMBOL=24
    AVG_ROW_LENGTH_SYMBOL=25
    AVG_SYMBOL=26
    BACKUP_SYMBOL=27
    BEFORE_SYMBOL=28
    BEGIN_SYMBOL=29
    BETWEEN_SYMBOL=30
    BIGINT_SYMBOL=31
    BINARY_SYMBOL=32
    BINLOG_SYMBOL=33
    BIN_NUM_SYMBOL=34
    BIT_AND_SYMBOL=35
    BIT_OR_SYMBOL=36
    BIT_SYMBOL=37
    BIT_XOR_SYMBOL=38
    BLOB_SYMBOL=39
    BLOCK_SYMBOL=40
    BOOLEAN_SYMBOL=41
    BOOL_SYMBOL=42
    BOTH_SYMBOL=43
    BTREE_SYMBOL=44
    BY_SYMBOL=45
    BYTE_SYMBOL=46
    CACHE_SYMBOL=47
    CALL_SYMBOL=48
    CASCADE_SYMBOL=49
    CASCADED_SYMBOL=50
    CASE_SYMBOL=51
    CAST_SYMBOL=52
    CATALOG_NAME_SYMBOL=53
    CHAIN_SYMBOL=54
    CHANGE_SYMBOL=55
    CHANGED_SYMBOL=56
    CHANNEL_SYMBOL=57
    CHARSET_SYMBOL=58
    CHARACTER_SYMBOL=59
    CHAR_SYMBOL=60
    CHECKSUM_SYMBOL=61
    CHECK_SYMBOL=62
    CIPHER_SYMBOL=63
    CLASS_ORIGIN_SYMBOL=64
    CLIENT_SYMBOL=65
    CLOSE_SYMBOL=66
    COALESCE_SYMBOL=67
    CODE_SYMBOL=68
    COLLATE_SYMBOL=69
    COLLATION_SYMBOL=70
    COLUMNS_SYMBOL=71
    COLUMN_SYMBOL=72
    COLUMN_NAME_SYMBOL=73
    COLUMN_FORMAT_SYMBOL=74
    COMMENT_SYMBOL=75
    COMMITTED_SYMBOL=76
    COMMIT_SYMBOL=77
    COMPACT_SYMBOL=78
    COMPLETION_SYMBOL=79
    COMPRESSED_SYMBOL=80
    COMPRESSION_SYMBOL=81
    CONCURRENT_SYMBOL=82
    CONDITION_SYMBOL=83
    CONNECTION_SYMBOL=84
    CONSISTENT_SYMBOL=85
    CONSTRAINT_SYMBOL=86
    CONSTRAINT_CATALOG_SYMBOL=87
    CONSTRAINT_NAME_SYMBOL=88
    CONSTRAINT_SCHEMA_SYMBOL=89
    CONTAINS_SYMBOL=90
    CONTEXT_SYMBOL=91
    CONTINUE_SYMBOL=92
    CONTRIBUTORS_SYMBOL=93
    CONVERT_SYMBOL=94
    COUNT_SYMBOL=95
    CPU_SYMBOL=96
    CREATE_SYMBOL=97
    CROSS_SYMBOL=98
    CUBE_SYMBOL=99
    CURDATE_SYMBOL=100
    CURRENT_SYMBOL=101
    CURRENT_DATE_SYMBOL=102
    CURRENT_TIME_SYMBOL=103
    CURRENT_TIMESTAMP_SYMBOL=104
    CURRENT_USER_SYMBOL=105
    CURSOR_SYMBOL=106
    CURSOR_NAME_SYMBOL=107
    CURTIME_SYMBOL=108
    DATABASE_SYMBOL=109
    DATABASES_SYMBOL=110
    DATAFILE_SYMBOL=111
    DATA_SYMBOL=112
    DATETIME_SYMBOL=113
    DATE_ADD_SYMBOL=114
    DATE_SUB_SYMBOL=115
    DATE_SYMBOL=116
    DAYOFMONTH_SYMBOL=117
    DAY_HOUR_SYMBOL=118
    DAY_MICROSECOND_SYMBOL=119
    DAY_MINUTE_SYMBOL=120
    DAY_SECOND_SYMBOL=121
    DAY_SYMBOL=122
    DEALLOCATE_SYMBOL=123
    DEC_SYMBOL=124
    DECIMAL_NUM_SYMBOL=125
    DECIMAL_SYMBOL=126
    DECLARE_SYMBOL=127
    DEFAULT_SYMBOL=128
    DEFAULT_AUTH_SYMBOL=129
    DEFINER_SYMBOL=130
    DELAYED_SYMBOL=131
    DELAY_KEY_WRITE_SYMBOL=132
    DELETE_SYMBOL=133
    DESC_SYMBOL=134
    DESCRIBE_SYMBOL=135
    DES_KEY_FILE_SYMBOL=136
    DETERMINISTIC_SYMBOL=137
    DIAGNOSTICS_SYMBOL=138
    DIRECTORY_SYMBOL=139
    DISABLE_SYMBOL=140
    DISCARD_SYMBOL=141
    DISK_SYMBOL=142
    DISTINCT_SYMBOL=143
    DISTINCTROW_SYMBOL=144
    DIV_SYMBOL=145
    DOUBLE_SYMBOL=146
    DO_SYMBOL=147
    DROP_SYMBOL=148
    DUAL_SYMBOL=149
    DUMPFILE_SYMBOL=150
    DUPLICATE_SYMBOL=151
    DYNAMIC_SYMBOL=152
    EACH_SYMBOL=153
    ELSE_SYMBOL=154
    ELSEIF_SYMBOL=155
    ENABLE_SYMBOL=156
    ENCLOSED_SYMBOL=157
    ENCRYPTION_SYMBOL=158
    END_SYMBOL=159
    ENDS_SYMBOL=160
    END_OF_INPUT_SYMBOL=161
    ENGINES_SYMBOL=162
    ENGINE_SYMBOL=163
    ENUM_SYMBOL=164
    ERROR_SYMBOL=165
    ERRORS_SYMBOL=166
    ESCAPED_SYMBOL=167
    ESCAPE_SYMBOL=168
    EVENTS_SYMBOL=169
    EVENT_SYMBOL=170
    EVERY_SYMBOL=171
    EXCHANGE_SYMBOL=172
    EXECUTE_SYMBOL=173
    EXISTS_SYMBOL=174
    EXIT_SYMBOL=175
    EXPANSION_SYMBOL=176
    EXPIRE_SYMBOL=177
    EXPLAIN_SYMBOL=178
    EXPORT_SYMBOL=179
    EXTENDED_SYMBOL=180
    EXTENT_SIZE_SYMBOL=181
    EXTRACT_SYMBOL=182
    FALSE_SYMBOL=183
    FAST_SYMBOL=184
    FAULTS_SYMBOL=185
    FETCH_SYMBOL=186
    FIELDS_SYMBOL=187
    FILE_SYMBOL=188
    FILE_BLOCK_SIZE_SYMBOL=189
    FILTER_SYMBOL=190
    FIRST_SYMBOL=191
    FIXED_SYMBOL=192
    FLOAT4_SYMBOL=193
    FLOAT8_SYMBOL=194
    FLOAT_SYMBOL=195
    FLUSH_SYMBOL=196
    FOLLOWS_SYMBOL=197
    FORCE_SYMBOL=198
    FOREIGN_SYMBOL=199
    FOR_SYMBOL=200
    FORMAT_SYMBOL=201
    FOUND_SYMBOL=202
    FROM_SYMBOL=203
    FULL_SYMBOL=204
    FULLTEXT_SYMBOL=205
    FUNCTION_SYMBOL=206
    GET_SYMBOL=207
    GENERAL_SYMBOL=208
    GENERATED_SYMBOL=209
    GROUP_REPLICATION_SYMBOL=210
    GEOMETRYCOLLECTION_SYMBOL=211
    GEOMETRY_SYMBOL=212
    GET_FORMAT_SYMBOL=213
    GLOBAL_SYMBOL=214
    GRANT_SYMBOL=215
    GRANTS_SYMBOL=216
    GROUP_SYMBOL=217
    GROUP_CONCAT_SYMBOL=218
    HANDLER_SYMBOL=219
    HASH_SYMBOL=220
    HAVING_SYMBOL=221
    HELP_SYMBOL=222
    HIGH_PRIORITY_SYMBOL=223
    HOST_SYMBOL=224
    HOSTS_SYMBOL=225
    HOUR_MICROSECOND_SYMBOL=226
    HOUR_MINUTE_SYMBOL=227
    HOUR_SECOND_SYMBOL=228
    HOUR_SYMBOL=229
    IDENTIFIED_SYMBOL=230
    IF_SYMBOL=231
    IGNORE_SYMBOL=232
    IGNORE_SERVER_IDS_SYMBOL=233
    IMPORT_SYMBOL=234
    INDEXES_SYMBOL=235
    INDEX_SYMBOL=236
    INFILE_SYMBOL=237
    INITIAL_SIZE_SYMBOL=238
    INNER_SYMBOL=239
    INOUT_SYMBOL=240
    INSENSITIVE_SYMBOL=241
    INSERT_SYMBOL=242
    INSERT_METHOD_SYMBOL=243
    INSTANCE_SYMBOL=244
    INSTALL_SYMBOL=245
    INTEGER_SYMBOL=246
    INTERVAL_SYMBOL=247
    INTO_SYMBOL=248
    INT_SYMBOL=249
    INVOKER_SYMBOL=250
    IN_SYMBOL=251
    IO_AFTER_GTIDS_SYMBOL=252
    IO_BEFORE_GTIDS_SYMBOL=253
    IO_THREAD_SYMBOL=254
    IO_SYMBOL=255
    IPC_SYMBOL=256
    IS_SYMBOL=257
    ISOLATION_SYMBOL=258
    ISSUER_SYMBOL=259
    ITERATE_SYMBOL=260
    JOIN_SYMBOL=261
    JSON_SYMBOL=262
    KEYS_SYMBOL=263
    KEY_BLOCK_SIZE_SYMBOL=264
    KEY_SYMBOL=265
    KILL_SYMBOL=266
    LANGUAGE_SYMBOL=267
    LAST_SYMBOL=268
    LEADING_SYMBOL=269
    LEAVES_SYMBOL=270
    LEAVE_SYMBOL=271
    LEFT_SYMBOL=272
    LESS_SYMBOL=273
    LEVEL_SYMBOL=274
    LIKE_SYMBOL=275
    LIMIT_SYMBOL=276
    LINEAR_SYMBOL=277
    LINES_SYMBOL=278
    LINESTRING_SYMBOL=279
    LIST_SYMBOL=280
    LOAD_SYMBOL=281
    LOCALTIME_SYMBOL=282
    LOCALTIMESTAMP_SYMBOL=283
    LOCAL_SYMBOL=284
    LOCATOR_SYMBOL=285
    LOCKS_SYMBOL=286
    LOCK_SYMBOL=287
    LOGFILE_SYMBOL=288
    LOGS_SYMBOL=289
    LONGBLOB_SYMBOL=290
    LONGTEXT_SYMBOL=291
    LONG_NUM_SYMBOL=292
    LONG_SYMBOL=293
    LOOP_SYMBOL=294
    LOW_PRIORITY_SYMBOL=295
    MASTER_AUTO_POSITION_SYMBOL=296
    MASTER_BIND_SYMBOL=297
    MASTER_CONNECT_RETRY_SYMBOL=298
    MASTER_DELAY_SYMBOL=299
    MASTER_HOST_SYMBOL=300
    MASTER_LOG_FILE_SYMBOL=301
    MASTER_LOG_POS_SYMBOL=302
    MASTER_PASSWORD_SYMBOL=303
    MASTER_PORT_SYMBOL=304
    MASTER_RETRY_COUNT_SYMBOL=305
    MASTER_SERVER_ID_SYMBOL=306
    MASTER_SSL_CAPATH_SYMBOL=307
    MASTER_SSL_CA_SYMBOL=308
    MASTER_SSL_CERT_SYMBOL=309
    MASTER_SSL_CIPHER_SYMBOL=310
    MASTER_SSL_CRL_SYMBOL=311
    MASTER_SSL_CRLPATH_SYMBOL=312
    MASTER_SSL_KEY_SYMBOL=313
    MASTER_SSL_SYMBOL=314
    MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=315
    MASTER_SYMBOL=316
    MASTER_TLS_VERSION_SYMBOL=317
    MASTER_USER_SYMBOL=318
    MASTER_HEARTBEAT_PERIOD_SYMBOL=319
    MATCH_SYMBOL=320
    MAX_CONNECTIONS_PER_HOUR_SYMBOL=321
    MAX_QUERIES_PER_HOUR_SYMBOL=322
    MAX_ROWS_SYMBOL=323
    MAX_SIZE_SYMBOL=324
    MAX_STATEMENT_TIME_SYMBOL=325
    MAX_SYMBOL=326
    MAX_UPDATES_PER_HOUR_SYMBOL=327
    MAX_USER_CONNECTIONS_SYMBOL=328
    MAXVALUE_SYMBOL=329
    MEDIUMBLOB_SYMBOL=330
    MEDIUMINT_SYMBOL=331
    MEDIUMTEXT_SYMBOL=332
    MEDIUM_SYMBOL=333
    MEMORY_SYMBOL=334
    MERGE_SYMBOL=335
    MESSAGE_TEXT_SYMBOL=336
    MICROSECOND_SYMBOL=337
    MID_SYMBOL=338
    MIDDLEINT_SYMBOL=339
    MIGRATE_SYMBOL=340
    MINUTE_MICROSECOND_SYMBOL=341
    MINUTE_SECOND_SYMBOL=342
    MINUTE_SYMBOL=343
    MIN_ROWS_SYMBOL=344
    MIN_SYMBOL=345
    MODE_SYMBOL=346
    MODIFIES_SYMBOL=347
    MODIFY_SYMBOL=348
    MOD_SYMBOL=349
    MONTH_SYMBOL=350
    MULTILINESTRING_SYMBOL=351
    MULTIPOINT_SYMBOL=352
    MULTIPOLYGON_SYMBOL=353
    MUTEX_SYMBOL=354
    MYSQL_ERRNO_SYMBOL=355
    NAMES_SYMBOL=356
    NAME_SYMBOL=357
    NATIONAL_SYMBOL=358
    NATURAL_SYMBOL=359
    NCHAR_STRING_SYMBOL=360
    NCHAR_SYMBOL=361
    NDB_SYMBOL=362
    NDBCLUSTER_SYMBOL=363
    NEG_SYMBOL=364
    NEVER_SYMBOL=365
    NEW_SYMBOL=366
    NEXT_SYMBOL=367
    NODEGROUP_SYMBOL=368
    NONE_SYMBOL=369
    NONBLOCKING_SYMBOL=370
    NOT_SYMBOL=371
    NOW_SYMBOL=372
    NO_SYMBOL=373
    NO_WAIT_SYMBOL=374
    NO_WRITE_TO_BINLOG_SYMBOL=375
    NULL_SYMBOL=376
    NUMBER_SYMBOL=377
    NUMERIC_SYMBOL=378
    NVARCHAR_SYMBOL=379
    OFFLINE_SYMBOL=380
    OFFSET_SYMBOL=381
    OLD_PASSWORD_SYMBOL=382
    ON_SYMBOL=383
    ONE_SYMBOL=384
    ONLINE_SYMBOL=385
    ONLY_SYMBOL=386
    OPEN_SYMBOL=387
    OPTIMIZE_SYMBOL=388
    OPTIMIZER_COSTS_SYMBOL=389
    OPTIONS_SYMBOL=390
    OPTION_SYMBOL=391
    OPTIONALLY_SYMBOL=392
    ORDER_SYMBOL=393
    OR_SYMBOL=394
    OUTER_SYMBOL=395
    OUTFILE_SYMBOL=396
    OUT_SYMBOL=397
    OWNER_SYMBOL=398
    PACK_KEYS_SYMBOL=399
    PAGE_SYMBOL=400
    PARSER_SYMBOL=401
    PARTIAL_SYMBOL=402
    PARTITIONING_SYMBOL=403
    PARTITIONS_SYMBOL=404
    PARTITION_SYMBOL=405
    PASSWORD_SYMBOL=406
    PHASE_SYMBOL=407
    PLUGINS_SYMBOL=408
    PLUGIN_DIR_SYMBOL=409
    PLUGIN_SYMBOL=410
    POINT_SYMBOL=411
    POLYGON_SYMBOL=412
    PORT_SYMBOL=413
    POSITION_SYMBOL=414
    PRECEDES_SYMBOL=415
    PRECISION_SYMBOL=416
    PREPARE_SYMBOL=417
    PRESERVE_SYMBOL=418
    PREV_SYMBOL=419
    PRIMARY_SYMBOL=420
    PRIVILEGES_SYMBOL=421
    PROCEDURE_SYMBOL=422
    PROCESS_SYMBOL=423
    PROCESSLIST_SYMBOL=424
    PROFILE_SYMBOL=425
    PROFILES_SYMBOL=426
    PROXY_SYMBOL=427
    PURGE_SYMBOL=428
    QUARTER_SYMBOL=429
    QUERY_SYMBOL=430
    QUICK_SYMBOL=431
    RANGE_SYMBOL=432
    READS_SYMBOL=433
    READ_ONLY_SYMBOL=434
    READ_SYMBOL=435
    READ_WRITE_SYMBOL=436
    REAL_SYMBOL=437
    REBUILD_SYMBOL=438
    RECOVER_SYMBOL=439
    REDOFILE_SYMBOL=440
    REDO_BUFFER_SIZE_SYMBOL=441
    REDUNDANT_SYMBOL=442
    REFERENCES_SYMBOL=443
    REGEXP_SYMBOL=444
    RELAY_SYMBOL=445
    RELAYLOG_SYMBOL=446
    RELAY_LOG_FILE_SYMBOL=447
    RELAY_LOG_POS_SYMBOL=448
    RELAY_THREAD_SYMBOL=449
    RELEASE_SYMBOL=450
    RELOAD_SYMBOL=451
    REMOVE_SYMBOL=452
    RENAME_SYMBOL=453
    REORGANIZE_SYMBOL=454
    REPAIR_SYMBOL=455
    REPEATABLE_SYMBOL=456
    REPEAT_SYMBOL=457
    REPLACE_SYMBOL=458
    REPLICATION_SYMBOL=459
    REPLICATE_DO_DB_SYMBOL=460
    REPLICATE_IGNORE_DB_SYMBOL=461
    REPLICATE_DO_TABLE_SYMBOL=462
    REPLICATE_IGNORE_TABLE_SYMBOL=463
    REPLICATE_WILD_DO_TABLE_SYMBOL=464
    REPLICATE_WILD_IGNORE_TABLE_SYMBOL=465
    REPLICATE_REWRITE_DB_SYMBOL=466
    REQUIRE_SYMBOL=467
    RESET_SYMBOL=468
    RESIGNAL_SYMBOL=469
    RESTORE_SYMBOL=470
    RESTRICT_SYMBOL=471
    RESUME_SYMBOL=472
    RETURNED_SQLSTATE_SYMBOL=473
    RETURNS_SYMBOL=474
    RETURN_SYMBOL=475
    REVERSE_SYMBOL=476
    REVOKE_SYMBOL=477
    RIGHT_SYMBOL=478
    RLIKE_SYMBOL=479
    ROLLBACK_SYMBOL=480
    ROLLUP_SYMBOL=481
    ROTATE_SYMBOL=482
    ROUTINE_SYMBOL=483
    ROWS_SYMBOL=484
    ROW_COUNT_SYMBOL=485
    ROW_FORMAT_SYMBOL=486
    ROW_SYMBOL=487
    RTREE_SYMBOL=488
    SAVEPOINT_SYMBOL=489
    SCHEDULE_SYMBOL=490
    SCHEMA_SYMBOL=491
    SCHEMA_NAME_SYMBOL=492
    SCHEMAS_SYMBOL=493
    SECOND_MICROSECOND_SYMBOL=494
    SECOND_SYMBOL=495
    SECURITY_SYMBOL=496
    SELECT_SYMBOL=497
    SENSITIVE_SYMBOL=498
    SEPARATOR_SYMBOL=499
    SERIALIZABLE_SYMBOL=500
    SERIAL_SYMBOL=501
    SESSION_SYMBOL=502
    SERVER_SYMBOL=503
    SERVER_OPTIONS_SYMBOL=504
    SESSION_USER_SYMBOL=505
    SET_SYMBOL=506
    SET_VAR_SYMBOL=507
    SHARE_SYMBOL=508
    SHOW_SYMBOL=509
    SHUTDOWN_SYMBOL=510
    SIGNAL_SYMBOL=511
    SIGNED_SYMBOL=512
    SIMPLE_SYMBOL=513
    SLAVE_SYMBOL=514
    SLOW_SYMBOL=515
    SMALLINT_SYMBOL=516
    SNAPSHOT_SYMBOL=517
    SOME_SYMBOL=518
    SOCKET_SYMBOL=519
    SONAME_SYMBOL=520
    SOUNDS_SYMBOL=521
    SOURCE_SYMBOL=522
    SPATIAL_SYMBOL=523
    SPECIFIC_SYMBOL=524
    SQLEXCEPTION_SYMBOL=525
    SQLSTATE_SYMBOL=526
    SQLWARNING_SYMBOL=527
    SQL_AFTER_GTIDS_SYMBOL=528
    SQL_AFTER_MTS_GAPS_SYMBOL=529
    SQL_BEFORE_GTIDS_SYMBOL=530
    SQL_BIG_RESULT_SYMBOL=531
    SQL_BUFFER_RESULT_SYMBOL=532
    SQL_CACHE_SYMBOL=533
    SQL_CALC_FOUND_ROWS_SYMBOL=534
    SQL_NO_CACHE_SYMBOL=535
    SQL_SMALL_RESULT_SYMBOL=536
    SQL_SYMBOL=537
    SQL_THREAD_SYMBOL=538
    SSL_SYMBOL=539
    STACKED_SYMBOL=540
    STARTING_SYMBOL=541
    STARTS_SYMBOL=542
    START_SYMBOL=543
    STATS_AUTO_RECALC_SYMBOL=544
    STATS_PERSISTENT_SYMBOL=545
    STATS_SAMPLE_PAGES_SYMBOL=546
    STATUS_SYMBOL=547
    STDDEV_SAMP_SYMBOL=548
    STDDEV_SYMBOL=549
    STDDEV_POP_SYMBOL=550
    STD_SYMBOL=551
    STOP_SYMBOL=552
    STORAGE_SYMBOL=553
    STORED_SYMBOL=554
    STRAIGHT_JOIN_SYMBOL=555
    STRING_SYMBOL=556
    SUBCLASS_ORIGIN_SYMBOL=557
    SUBDATE_SYMBOL=558
    SUBJECT_SYMBOL=559
    SUBPARTITIONS_SYMBOL=560
    SUBPARTITION_SYMBOL=561
    SUBSTR_SYMBOL=562
    SUBSTRING_SYMBOL=563
    SUM_SYMBOL=564
    SUPER_SYMBOL=565
    SUSPEND_SYMBOL=566
    SWAPS_SYMBOL=567
    SWITCHES_SYMBOL=568
    SYSDATE_SYMBOL=569
    SYSTEM_USER_SYMBOL=570
    TABLES_SYMBOL=571
    TABLESPACE_SYMBOL=572
    TABLE_REF_PRIORITY_SYMBOL=573
    TABLE_SYMBOL=574
    TABLE_CHECKSUM_SYMBOL=575
    TABLE_NAME_SYMBOL=576
    TEMPORARY_SYMBOL=577
    TEMPTABLE_SYMBOL=578
    TERMINATED_SYMBOL=579
    TEXT_SYMBOL=580
    THAN_SYMBOL=581
    THEN_SYMBOL=582
    TIMESTAMP_SYMBOL=583
    TIMESTAMP_ADD_SYMBOL=584
    TIMESTAMP_DIFF_SYMBOL=585
    TIME_SYMBOL=586
    TINYBLOB_SYMBOL=587
    TINYINT_SYMBOL=588
    TINYTEXT_SYMBOL=589
    TO_SYMBOL=590
    TRAILING_SYMBOL=591
    TRANSACTION_SYMBOL=592
    TRIGGERS_SYMBOL=593
    TRIGGER_SYMBOL=594
    TRIM_SYMBOL=595
    TRUE_SYMBOL=596
    TRUNCATE_SYMBOL=597
    TYPES_SYMBOL=598
    TYPE_SYMBOL=599
    UDF_RETURNS_SYMBOL=600
    UNCOMMITTED_SYMBOL=601
    UNDEFINED_SYMBOL=602
    UNDOFILE_SYMBOL=603
    UNDO_BUFFER_SIZE_SYMBOL=604
    UNDO_SYMBOL=605
    UNICODE_SYMBOL=606
    UNINSTALL_SYMBOL=607
    UNION_SYMBOL=608
    UNIQUE_SYMBOL=609
    UNKNOWN_SYMBOL=610
    UNLOCK_SYMBOL=611
    UNSIGNED_SYMBOL=612
    UNTIL_SYMBOL=613
    UPDATE_SYMBOL=614
    UPGRADE_SYMBOL=615
    USAGE_SYMBOL=616
    USER_RESOURCES_SYMBOL=617
    USER_SYMBOL=618
    USE_FRM_SYMBOL=619
    USE_SYMBOL=620
    USING_SYMBOL=621
    UTC_DATE_SYMBOL=622
    UTC_TIMESTAMP_SYMBOL=623
    UTC_TIME_SYMBOL=624
    VALIDATION_SYMBOL=625
    VALUES_SYMBOL=626
    VALUE_SYMBOL=627
    VARBINARY_SYMBOL=628
    VARCHAR_SYMBOL=629
    VARCHARACTER_SYMBOL=630
    VARIABLES_SYMBOL=631
    VARIANCE_SYMBOL=632
    VARYING_SYMBOL=633
    VAR_POP_SYMBOL=634
    VAR_SAMP_SYMBOL=635
    VIEW_SYMBOL=636
    VIRTUAL_SYMBOL=637
    WAIT_SYMBOL=638
    WARNINGS_SYMBOL=639
    WEEK_SYMBOL=640
    WEIGHT_STRING_SYMBOL=641
    WHEN_SYMBOL=642
    WHERE_SYMBOL=643
    WHILE_SYMBOL=644
    WITH_SYMBOL=645
    WITHOUT_SYMBOL=646
    WORK_SYMBOL=647
    WRAPPER_SYMBOL=648
    WRITE_SYMBOL=649
    X509_SYMBOL=650
    XA_SYMBOL=651
    XID_SYMBOL=652
    XML_SYMBOL=653
    XOR_SYMBOL=654
    YEAR_MONTH_SYMBOL=655
    YEAR_SYMBOL=656
    ZEROFILL_SYMBOL=657
    PERSIST_SYMBOL=658
    ROLE_SYMBOL=659
    ADMIN_SYMBOL=660
    INVISIBLE_SYMBOL=661
    VISIBLE_SYMBOL=662
    EXCEPT_SYMBOL=663
    COMPONENT_SYMBOL=664
    RECURSIVE_SYMBOL=665
    JSON_OBJECTAGG_SYMBOL=666
    JSON_ARRAYAGG_SYMBOL=667
    OF_SYMBOL=668
    SKIP_SYMBOL=669
    LOCKED_SYMBOL=670
    NOWAIT_SYMBOL=671
    GROUPING_SYMBOL=672
    PERSIST_ONLY_SYMBOL=673
    HISTOGRAM_SYMBOL=674
    BUCKETS_SYMBOL=675
    REMOTE_SYMBOL=676
    CLONE_SYMBOL=677
    CUME_DIST_SYMBOL=678
    DENSE_RANK_SYMBOL=679
    EXCLUDE_SYMBOL=680
    FIRST_VALUE_SYMBOL=681
    FOLLOWING_SYMBOL=682
    GROUPS_SYMBOL=683
    LAG_SYMBOL=684
    LAST_VALUE_SYMBOL=685
    LEAD_SYMBOL=686
    NTH_VALUE_SYMBOL=687
    NTILE_SYMBOL=688
    NULLS_SYMBOL=689
    OTHERS_SYMBOL=690
    OVER_SYMBOL=691
    PERCENT_RANK_SYMBOL=692
    PRECEDING_SYMBOL=693
    RANK_SYMBOL=694
    RESPECT_SYMBOL=695
    ROW_NUMBER_SYMBOL=696
    TIES_SYMBOL=697
    UNBOUNDED_SYMBOL=698
    WINDOW_SYMBOL=699
    EMPTY_SYMBOL=700
    JSON_TABLE_SYMBOL=701
    NESTED_SYMBOL=702
    ORDINALITY_SYMBOL=703
    PATH_SYMBOL=704
    HISTORY_SYMBOL=705
    REUSE_SYMBOL=706
    SRID_SYMBOL=707
    THREAD_PRIORITY_SYMBOL=708
    RESOURCE_SYMBOL=709
    SYSTEM_SYMBOL=710
    VCPU_SYMBOL=711
    MASTER_PUBLIC_KEY_PATH_SYMBOL=712
    GET_MASTER_PUBLIC_KEY_SYMBOL=713
    RESTART_SYMBOL=714
    DEFINITION_SYMBOL=715
    DESCRIPTION_SYMBOL=716
    ORGANIZATION_SYMBOL=717
    REFERENCE_SYMBOL=718
    OPTIONAL_SYMBOL=719
    SECONDARY_SYMBOL=720
    SECONDARY_ENGINE_SYMBOL=721
    SECONDARY_LOAD_SYMBOL=722
    SECONDARY_UNLOAD_SYMBOL=723
    ACTIVE_SYMBOL=724
    INACTIVE_SYMBOL=725
    LATERAL_SYMBOL=726
    RETAIN_SYMBOL=727
    OLD_SYMBOL=728
    NETWORK_NAMESPACE_SYMBOL=729
    ENFORCED_SYMBOL=730
    ARRAY_SYMBOL=731
    OJ_SYMBOL=732
    MEMBER_SYMBOL=733
    RANDOM_SYMBOL=734
    MASTER_COMPRESSION_ALGORITHM_SYMBOL=735
    MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL=736
    PRIVILEGE_CHECKS_USER_SYMBOL=737
    MASTER_TLS_CIPHERSUITES_SYMBOL=738
    REQUIRE_ROW_FORMAT_SYMBOL=739
    PASSWORD_LOCK_TIME_SYMBOL=740
    FAILED_LOGIN_ATTEMPTS_SYMBOL=741
    REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL=742
    STREAM_SYMBOL=743
    OFF_SYMBOL=744
    NOT2_SYMBOL=745
    CONCAT_PIPES_SYMBOL=746
    INT_NUMBER=747
    LONG_NUMBER=748
    ULONGLONG_NUMBER=749
    EQUAL_OPERATOR=750
    ASSIGN_OPERATOR=751
    NULL_SAFE_EQUAL_OPERATOR=752
    GREATER_OR_EQUAL_OPERATOR=753
    GREATER_THAN_OPERATOR=754
    LESS_OR_EQUAL_OPERATOR=755
    LESS_THAN_OPERATOR=756
    NOT_EQUAL_OPERATOR=757
    PLUS_OPERATOR=758
    MINUS_OPERATOR=759
    MULT_OPERATOR=760
    DIV_OPERATOR=761
    MOD_OPERATOR=762
    LOGICAL_NOT_OPERATOR=763
    BITWISE_NOT_OPERATOR=764
    SHIFT_LEFT_OPERATOR=765
    SHIFT_RIGHT_OPERATOR=766
    LOGICAL_AND_OPERATOR=767
    BITWISE_AND_OPERATOR=768
    BITWISE_XOR_OPERATOR=769
    LOGICAL_OR_OPERATOR=770
    BITWISE_OR_OPERATOR=771
    DOT_SYMBOL=772
    COMMA_SYMBOL=773
    SEMICOLON_SYMBOL=774
    COLON_SYMBOL=775
    OPEN_PAR_SYMBOL=776
    CLOSE_PAR_SYMBOL=777
    OPEN_CURLY_SYMBOL=778
    CLOSE_CURLY_SYMBOL=779
    UNDERLINE_SYMBOL=780
    JSON_SEPARATOR_SYMBOL=781
    JSON_UNQUOTED_SEPARATOR_SYMBOL=782
    AT_SIGN_SYMBOL=783
    AT_TEXT_SUFFIX=784
    AT_AT_SIGN_SYMBOL=785
    NULL2_SYMBOL=786
    PARAM_MARKER=787
    HEX_NUMBER=788
    BIN_NUMBER=789
    DECIMAL_NUMBER=790
    FLOAT_NUMBER=791
    WHITESPACE=792
    INVALID_INPUT=793
    UNDERSCORE_CHARSET=794
    IDENTIFIER=795
    NCHAR_TEXT=796
    BACK_TICK_QUOTED_ID=797
    DOUBLE_QUOTED_TEXT=798
    SINGLE_QUOTED_TEXT=799
    VERSION_COMMENT_START=800
    MYSQL_COMMENT_START=801
    VERSION_COMMENT_END=802
    BLOCK_COMMENT=803
    POUND_COMMENT=804
    DASHDASH_COMMENT=805
    NOT_EQUAL2_OPERATOR=806

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MySQLParser.EOF, 0)

        def simpleStatement(self):
            return self.getTypedRuleContext(MySQLParser.SimpleStatementContext,0)


        def beginWork(self):
            return self.getTypedRuleContext(MySQLParser.BeginWorkContext,0)


        def SEMICOLON_SYMBOL(self):
            return self.getToken(MySQLParser.SEMICOLON_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = MySQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_query)
        try:
            self.state = 1232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1220
                self.match(MySQLParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 1221
                    self.simpleStatement()
                    pass

                elif la_ == 2:
                    self.state = 1222
                    self.beginWork()
                    pass


                self.state = 1230
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.SEMICOLON_SYMBOL]:
                    self.state = 1225
                    self.match(MySQLParser.SEMICOLON_SYMBOL)
                    self.state = 1227
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                    if la_ == 1:
                        self.state = 1226
                        self.match(MySQLParser.EOF)


                    pass
                elif token in [MySQLParser.EOF]:
                    self.state = 1229
                    self.match(MySQLParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterStatement(self):
            return self.getTypedRuleContext(MySQLParser.AlterStatementContext,0)


        def createStatement(self):
            return self.getTypedRuleContext(MySQLParser.CreateStatementContext,0)


        def dropStatement(self):
            return self.getTypedRuleContext(MySQLParser.DropStatementContext,0)


        def renameTableStatement(self):
            return self.getTypedRuleContext(MySQLParser.RenameTableStatementContext,0)


        def truncateTableStatement(self):
            return self.getTypedRuleContext(MySQLParser.TruncateTableStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(MySQLParser.ImportStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(MySQLParser.CallStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(MySQLParser.DeleteStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(MySQLParser.DoStatementContext,0)


        def handlerStatement(self):
            return self.getTypedRuleContext(MySQLParser.HandlerStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(MySQLParser.InsertStatementContext,0)


        def loadStatement(self):
            return self.getTypedRuleContext(MySQLParser.LoadStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(MySQLParser.ReplaceStatementContext,0)


        def selectStatement(self):
            return self.getTypedRuleContext(MySQLParser.SelectStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(MySQLParser.UpdateStatementContext,0)


        def transactionOrLockingStatement(self):
            return self.getTypedRuleContext(MySQLParser.TransactionOrLockingStatementContext,0)


        def replicationStatement(self):
            return self.getTypedRuleContext(MySQLParser.ReplicationStatementContext,0)


        def preparedStatement(self):
            return self.getTypedRuleContext(MySQLParser.PreparedStatementContext,0)


        def cloneStatement(self):
            return self.getTypedRuleContext(MySQLParser.CloneStatementContext,0)


        def accountManagementStatement(self):
            return self.getTypedRuleContext(MySQLParser.AccountManagementStatementContext,0)


        def tableAdministrationStatement(self):
            return self.getTypedRuleContext(MySQLParser.TableAdministrationStatementContext,0)


        def installUninstallStatment(self):
            return self.getTypedRuleContext(MySQLParser.InstallUninstallStatmentContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(MySQLParser.SetStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(MySQLParser.ShowStatementContext,0)


        def resourceGroupManagement(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupManagementContext,0)


        def otherAdministrativeStatement(self):
            return self.getTypedRuleContext(MySQLParser.OtherAdministrativeStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(MySQLParser.UtilityStatementContext,0)


        def getDiagnostics(self):
            return self.getTypedRuleContext(MySQLParser.GetDiagnosticsContext,0)


        def signalStatement(self):
            return self.getTypedRuleContext(MySQLParser.SignalStatementContext,0)


        def resignalStatement(self):
            return self.getTypedRuleContext(MySQLParser.ResignalStatementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = MySQLParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_simpleStatement)
        try:
            self.state = 1268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1234
                self.alterStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1235
                self.createStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1236
                self.dropStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1237
                self.renameTableStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1238
                self.truncateTableStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1239
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1240
                self.importStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1241
                self.callStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1242
                self.deleteStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1243
                self.doStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1244
                self.handlerStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1245
                self.insertStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1246
                self.loadStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1247
                self.replaceStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1248
                self.selectStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1249
                self.updateStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1250
                self.transactionOrLockingStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1251
                self.replicationStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1252
                self.preparedStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1253
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1254
                self.cloneStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1255
                self.accountManagementStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1256
                self.tableAdministrationStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1257
                self.installUninstallStatment()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1258
                self.setStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1259
                self.showStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1260
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1261
                self.resourceGroupManagement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1262
                self.otherAdministrativeStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1263
                self.utilityStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1264
                if not serverVersion >= 50604:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50604")
                self.state = 1265
                self.getDiagnostics()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1266
                self.signalStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1267
                self.resignalStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MySQLParser.ALTER_SYMBOL, 0)

        def alterTable(self):
            return self.getTypedRuleContext(MySQLParser.AlterTableContext,0)


        def alterDatabase(self):
            return self.getTypedRuleContext(MySQLParser.AlterDatabaseContext,0)


        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureRefContext,0)


        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def functionRef(self):
            return self.getTypedRuleContext(MySQLParser.FunctionRefContext,0)


        def alterView(self):
            return self.getTypedRuleContext(MySQLParser.AlterViewContext,0)


        def alterEvent(self):
            return self.getTypedRuleContext(MySQLParser.AlterEventContext,0)


        def alterTablespace(self):
            return self.getTypedRuleContext(MySQLParser.AlterTablespaceContext,0)


        def alterUndoTablespace(self):
            return self.getTypedRuleContext(MySQLParser.AlterUndoTablespaceContext,0)


        def alterLogfileGroup(self):
            return self.getTypedRuleContext(MySQLParser.AlterLogfileGroupContext,0)


        def alterServer(self):
            return self.getTypedRuleContext(MySQLParser.AlterServerContext,0)


        def INSTANCE_SYMBOL(self):
            return self.getToken(MySQLParser.INSTANCE_SYMBOL, 0)

        def ROTATE_SYMBOL(self):
            return self.getToken(MySQLParser.ROTATE_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def routineAlterOptions(self):
            return self.getTypedRuleContext(MySQLParser.RoutineAlterOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatement" ):
                listener.enterAlterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatement" ):
                listener.exitAlterStatement(self)




    def alterStatement(self):

        localctx = MySQLParser.AlterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_alterStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(MySQLParser.ALTER_SYMBOL)
            self.state = 1297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 1271
                self.alterTable()
                pass

            elif la_ == 2:
                self.state = 1272
                self.alterDatabase()
                pass

            elif la_ == 3:
                self.state = 1273
                self.match(MySQLParser.PROCEDURE_SYMBOL)
                self.state = 1274
                self.procedureRef()
                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (MySQLParser.COMMENT_SYMBOL - 75)) | (1 << (MySQLParser.CONTAINS_SYMBOL - 75)) | (1 << (MySQLParser.DETERMINISTIC_SYMBOL - 75)))) != 0) or _la==MySQLParser.LANGUAGE_SYMBOL or ((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & ((1 << (MySQLParser.MODIFIES_SYMBOL - 347)) | (1 << (MySQLParser.NOT_SYMBOL - 347)) | (1 << (MySQLParser.NO_SYMBOL - 347)))) != 0) or _la==MySQLParser.READS_SYMBOL or _la==MySQLParser.SQL_SYMBOL:
                    self.state = 1275
                    self.routineAlterOptions()


                pass

            elif la_ == 4:
                self.state = 1278
                self.match(MySQLParser.FUNCTION_SYMBOL)
                self.state = 1279
                self.functionRef()
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (MySQLParser.COMMENT_SYMBOL - 75)) | (1 << (MySQLParser.CONTAINS_SYMBOL - 75)) | (1 << (MySQLParser.DETERMINISTIC_SYMBOL - 75)))) != 0) or _la==MySQLParser.LANGUAGE_SYMBOL or ((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & ((1 << (MySQLParser.MODIFIES_SYMBOL - 347)) | (1 << (MySQLParser.NOT_SYMBOL - 347)) | (1 << (MySQLParser.NO_SYMBOL - 347)))) != 0) or _la==MySQLParser.READS_SYMBOL or _la==MySQLParser.SQL_SYMBOL:
                    self.state = 1280
                    self.routineAlterOptions()


                pass

            elif la_ == 5:
                self.state = 1283
                self.alterView()
                pass

            elif la_ == 6:
                self.state = 1284
                self.alterEvent()
                pass

            elif la_ == 7:
                self.state = 1285
                self.alterTablespace()
                pass

            elif la_ == 8:
                self.state = 1286
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 1287
                self.alterUndoTablespace()
                pass

            elif la_ == 9:
                self.state = 1288
                self.alterLogfileGroup()
                pass

            elif la_ == 10:
                self.state = 1289
                self.alterServer()
                pass

            elif la_ == 11:
                self.state = 1290
                if not serverVersion >= 50713:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50713")
                self.state = 1291
                self.match(MySQLParser.INSTANCE_SYMBOL)
                self.state = 1292
                self.match(MySQLParser.ROTATE_SYMBOL)
                self.state = 1293
                self.textOrIdentifier()
                self.state = 1294
                self.match(MySQLParser.MASTER_SYMBOL)
                self.state = 1295
                self.match(MySQLParser.KEY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(MySQLParser.SchemaRefContext,0)


        def UPGRADE_SYMBOL(self):
            return self.getToken(MySQLParser.UPGRADE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MySQLParser.NAME_SYMBOL, 0)

        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabase" ):
                listener.enterAlterDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabase" ):
                listener.exitAlterDatabase(self)




    def alterDatabase(self):

        localctx = MySQLParser.AlterDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_alterDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.match(MySQLParser.DATABASE_SYMBOL)
            self.state = 1300
            self.schemaRef()
            self.state = 1311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 1302 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1301
                        self.createDatabaseOption()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1304 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1306
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 1307
                self.match(MySQLParser.UPGRADE_SYMBOL)
                self.state = 1308
                self.match(MySQLParser.DATA_SYMBOL)
                self.state = 1309
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 1310
                self.match(MySQLParser.NAME_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterEventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def eventRef(self):
            return self.getTypedRuleContext(MySQLParser.EventRefContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def ON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ON_SYMBOL)
            else:
                return self.getToken(MySQLParser.ON_SYMBOL, i)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEDULE_SYMBOL, 0)

        def schedule(self):
            return self.getTypedRuleContext(MySQLParser.ScheduleContext,0)


        def COMPLETION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPLETION_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(MySQLParser.PRESERVE_SYMBOL, 0)

        def RENAME_SYMBOL(self):
            return self.getToken(MySQLParser.RENAME_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterEvent" ):
                listener.enterAlterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterEvent" ):
                listener.exitAlterEvent(self)




    def alterEvent(self):

        localctx = MySQLParser.AlterEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alterEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DEFINER_SYMBOL:
                self.state = 1313
                self.definerClause()


            self.state = 1316
            self.match(MySQLParser.EVENT_SYMBOL)
            self.state = 1317
            self.eventRef()
            self.state = 1321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 1318
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 1319
                self.match(MySQLParser.SCHEDULE_SYMBOL)
                self.state = 1320
                self.schedule()


            self.state = 1329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ON_SYMBOL:
                self.state = 1323
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 1324
                self.match(MySQLParser.COMPLETION_SYMBOL)
                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NOT_SYMBOL:
                    self.state = 1325
                    self.match(MySQLParser.NOT_SYMBOL)


                self.state = 1328
                self.match(MySQLParser.PRESERVE_SYMBOL)


            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.RENAME_SYMBOL:
                self.state = 1331
                self.match(MySQLParser.RENAME_SYMBOL)
                self.state = 1332
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 1333
                self.identifier()


            self.state = 1342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.ENABLE_SYMBOL]:
                self.state = 1336
                self.match(MySQLParser.ENABLE_SYMBOL)
                pass
            elif token in [MySQLParser.DISABLE_SYMBOL]:
                self.state = 1337
                self.match(MySQLParser.DISABLE_SYMBOL)
                self.state = 1340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ON_SYMBOL:
                    self.state = 1338
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 1339
                    self.match(MySQLParser.SLAVE_SYMBOL)


                pass
            elif token in [MySQLParser.EOF, MySQLParser.COMMENT_SYMBOL, MySQLParser.DO_SYMBOL, MySQLParser.SEMICOLON_SYMBOL]:
                pass
            else:
                pass
            self.state = 1346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.COMMENT_SYMBOL:
                self.state = 1344
                self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 1345
                self.textLiteral()


            self.state = 1350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DO_SYMBOL:
                self.state = 1348
                self.match(MySQLParser.DO_SYMBOL)
                self.state = 1349
                self.compoundStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def logfileGroupRef(self):
            return self.getTypedRuleContext(MySQLParser.LogfileGroupRefContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def UNDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDOFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def alterLogfileGroupOptions(self):
            return self.getTypedRuleContext(MySQLParser.AlterLogfileGroupOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroup" ):
                listener.enterAlterLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroup" ):
                listener.exitAlterLogfileGroup(self)




    def alterLogfileGroup(self):

        localctx = MySQLParser.AlterLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_alterLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(MySQLParser.LOGFILE_SYMBOL)
            self.state = 1353
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 1354
            self.logfileGroupRef()
            self.state = 1355
            self.match(MySQLParser.ADD_SYMBOL)
            self.state = 1356
            self.match(MySQLParser.UNDOFILE_SYMBOL)
            self.state = 1357
            self.textLiteral()
            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.INITIAL_SIZE_SYMBOL or _la==MySQLParser.NO_WAIT_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.WAIT_SYMBOL:
                self.state = 1358
                self.alterLogfileGroupOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterLogfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterLogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterLogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterLogfileGroupOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroupOptions" ):
                listener.enterAlterLogfileGroupOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroupOptions" ):
                listener.exitAlterLogfileGroupOptions(self)




    def alterLogfileGroupOptions(self):

        localctx = MySQLParser.AlterLogfileGroupOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_alterLogfileGroupOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.alterLogfileGroupOption()
            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.INITIAL_SIZE_SYMBOL or _la==MySQLParser.NO_WAIT_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.WAIT_SYMBOL or _la==MySQLParser.COMMA_SYMBOL:
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 1362
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 1365
                self.alterLogfileGroupOption()
                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionInitialSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionInitialSizeContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionWaitContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterLogfileGroupOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroupOption" ):
                listener.enterAlterLogfileGroupOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroupOption" ):
                listener.exitAlterLogfileGroupOption(self)




    def alterLogfileGroupOption(self):

        localctx = MySQLParser.AlterLogfileGroupOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_alterLogfileGroupOption)
        try:
            self.state = 1374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.INITIAL_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1371
                self.tsOptionInitialSize()
                pass
            elif token in [MySQLParser.ENGINE_SYMBOL, MySQLParser.STORAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1372
                self.tsOptionEngine()
                pass
            elif token in [MySQLParser.NO_WAIT_SYMBOL, MySQLParser.WAIT_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1373
                self.tsOptionWait()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterServerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER_SYMBOL(self):
            return self.getToken(MySQLParser.SERVER_SYMBOL, 0)

        def serverRef(self):
            return self.getTypedRuleContext(MySQLParser.ServerRefContext,0)


        def serverOptions(self):
            return self.getTypedRuleContext(MySQLParser.ServerOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterServer" ):
                listener.enterAlterServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterServer" ):
                listener.exitAlterServer(self)




    def alterServer(self):

        localctx = MySQLParser.AlterServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_alterServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(MySQLParser.SERVER_SYMBOL)
            self.state = 1377
            self.serverRef()
            self.state = 1378
            self.serverOptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def onlineOption(self):
            return self.getTypedRuleContext(MySQLParser.OnlineOptionContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def alterTableActions(self):
            return self.getTypedRuleContext(MySQLParser.AlterTableActionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTable" ):
                listener.enterAlterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTable" ):
                listener.exitAlterTable(self)




    def alterTable(self):

        localctx = MySQLParser.AlterTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_alterTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 1380
                self.onlineOption()


            self.state = 1385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 1383
                if not serverVersion < 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50700")
                self.state = 1384
                self.match(MySQLParser.IGNORE_SYMBOL)


            self.state = 1387
            self.match(MySQLParser.TABLE_SYMBOL)
            self.state = 1388
            self.tableRef()
            self.state = 1390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 1389
                self.alterTableActions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableActionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterCommandList(self):
            return self.getTypedRuleContext(MySQLParser.AlterCommandListContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(MySQLParser.PartitionClauseContext,0)


        def removePartitioning(self):
            return self.getTypedRuleContext(MySQLParser.RemovePartitioningContext,0)


        def standaloneAlterCommands(self):
            return self.getTypedRuleContext(MySQLParser.StandaloneAlterCommandsContext,0)


        def alterCommandsModifierList(self):
            return self.getTypedRuleContext(MySQLParser.AlterCommandsModifierListContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterTableActions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableActions" ):
                listener.enterAlterTableActions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableActions" ):
                listener.exitAlterTableActions(self)




    def alterTableActions(self):

        localctx = MySQLParser.AlterTableActionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_alterTableActions)
        try:
            self.state = 1405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1392
                self.alterCommandList()
                self.state = 1395
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.PARTITION_SYMBOL]:
                    self.state = 1393
                    self.partitionClause()
                    pass
                elif token in [MySQLParser.REMOVE_SYMBOL]:
                    self.state = 1394
                    self.removePartitioning()
                    pass
                elif token in [MySQLParser.EOF, MySQLParser.SEMICOLON_SYMBOL]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.partitionClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1398
                self.removePartitioning()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1402
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 1399
                    self.alterCommandsModifierList()
                    self.state = 1400
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 1404
                self.standaloneAlterCommands()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCommandListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterCommandsModifierList(self):
            return self.getTypedRuleContext(MySQLParser.AlterCommandsModifierListContext,0)


        def alterList(self):
            return self.getTypedRuleContext(MySQLParser.AlterListContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterCommandList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCommandList" ):
                listener.enterAlterCommandList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCommandList" ):
                listener.exitAlterCommandList(self)




    def alterCommandList(self):

        localctx = MySQLParser.AlterCommandListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_alterCommandList)
        try:
            self.state = 1414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1407
                self.alterCommandsModifierList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 1408
                    self.alterCommandsModifierList()
                    self.state = 1409
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 1413
                self.alterList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCommandsModifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterCommandsModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterCommandsModifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterCommandsModifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterCommandsModifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCommandsModifierList" ):
                listener.enterAlterCommandsModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCommandsModifierList" ):
                listener.exitAlterCommandsModifierList(self)




    def alterCommandsModifierList(self):

        localctx = MySQLParser.AlterCommandsModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_alterCommandsModifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.alterCommandsModifier()
            self.state = 1421
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1417
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 1418
                    self.alterCommandsModifier() 
                self.state = 1423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneAlterCommandsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD_SYMBOL(self):
            return self.getToken(MySQLParser.DISCARD_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def alterPartition(self):
            return self.getTypedRuleContext(MySQLParser.AlterPartitionContext,0)


        def SECONDARY_LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0)

        def SECONDARY_UNLOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_standaloneAlterCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneAlterCommands" ):
                listener.enterStandaloneAlterCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneAlterCommands" ):
                listener.exitStandaloneAlterCommands(self)




    def standaloneAlterCommands(self):

        localctx = MySQLParser.StandaloneAlterCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_standaloneAlterCommands)
        self._la = 0 # Token type
        try:
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1424
                self.match(MySQLParser.DISCARD_SYMBOL)
                self.state = 1425
                self.match(MySQLParser.TABLESPACE_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1426
                self.match(MySQLParser.IMPORT_SYMBOL)
                self.state = 1427
                self.match(MySQLParser.TABLESPACE_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1428
                self.alterPartition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1429
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 1430
                _la = self._input.LA(1)
                if not(_la==MySQLParser.SECONDARY_LOAD_SYMBOL or _la==MySQLParser.SECONDARY_UNLOAD_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterPartitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySQLParser.PartitionDefinitionsContext,0)


        def PARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def noWriteToBinLog(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.NoWriteToBinLogContext)
            else:
                return self.getTypedRuleContext(MySQLParser.NoWriteToBinLogContext,i)


        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def REBUILD_SYMBOL(self):
            return self.getToken(MySQLParser.REBUILD_SYMBOL, 0)

        def allOrPartitionNameList(self):
            return self.getTypedRuleContext(MySQLParser.AllOrPartitionNameListContext,0)


        def OPTIMIZE_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0)

        def ANALYZE_SYMBOL(self):
            return self.getToken(MySQLParser.ANALYZE_SYMBOL, 0)

        def CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.CHECK_SYMBOL, 0)

        def checkOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CheckOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CheckOptionContext,i)


        def REPAIR_SYMBOL(self):
            return self.getToken(MySQLParser.REPAIR_SYMBOL, 0)

        def repairType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RepairTypeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RepairTypeContext,i)


        def COALESCE_SYMBOL(self):
            return self.getToken(MySQLParser.COALESCE_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUNCATE_SYMBOL, 0)

        def REORGANIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REORGANIZE_SYMBOL, 0)

        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def EXCHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCHANGE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def withValidation(self):
            return self.getTypedRuleContext(MySQLParser.WithValidationContext,0)


        def DISCARD_SYMBOL(self):
            return self.getToken(MySQLParser.DISCARD_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterPartition" ):
                listener.enterAlterPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterPartition" ):
                listener.exitAlterPartition(self)




    def alterPartition(self):

        localctx = MySQLParser.AlterPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_alterPartition)
        self._la = 0 # Token type
        try:
            self.state = 1529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1433
                self.match(MySQLParser.ADD_SYMBOL)
                self.state = 1434
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LOCAL_SYMBOL or _la==MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 1435
                    self.noWriteToBinLog()


                self.state = 1441
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.OPEN_PAR_SYMBOL]:
                    self.state = 1438
                    self.partitionDefinitions()
                    pass
                elif token in [MySQLParser.PARTITIONS_SYMBOL]:
                    self.state = 1439
                    self.match(MySQLParser.PARTITIONS_SYMBOL)
                    self.state = 1440
                    self.real_ulong_number()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1443
                self.match(MySQLParser.DROP_SYMBOL)
                self.state = 1444
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1445
                self.identifierList()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1446
                self.match(MySQLParser.REBUILD_SYMBOL)
                self.state = 1447
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 1448
                    self.noWriteToBinLog()


                self.state = 1451
                self.allOrPartitionNameList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1452
                self.match(MySQLParser.OPTIMIZE_SYMBOL)
                self.state = 1453
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 1454
                    self.noWriteToBinLog()


                self.state = 1457
                self.allOrPartitionNameList()
                self.state = 1459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LOCAL_SYMBOL or _la==MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 1458
                    self.noWriteToBinLog()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1461
                self.match(MySQLParser.ANALYZE_SYMBOL)
                self.state = 1462
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1464
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 1463
                    self.noWriteToBinLog()


                self.state = 1466
                self.allOrPartitionNameList()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1467
                self.match(MySQLParser.CHECK_SYMBOL)
                self.state = 1468
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1469
                self.allOrPartitionNameList()
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.CHANGED_SYMBOL or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySQLParser.EXTENDED_SYMBOL - 180)) | (1 << (MySQLParser.FAST_SYMBOL - 180)) | (1 << (MySQLParser.FOR_SYMBOL - 180)))) != 0) or _la==MySQLParser.MEDIUM_SYMBOL or _la==MySQLParser.QUICK_SYMBOL:
                    self.state = 1470
                    self.checkOption()
                    self.state = 1475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1476
                self.match(MySQLParser.REPAIR_SYMBOL)
                self.state = 1477
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 1478
                    self.noWriteToBinLog()


                self.state = 1481
                self.allOrPartitionNameList()
                self.state = 1485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.EXTENDED_SYMBOL or _la==MySQLParser.QUICK_SYMBOL or _la==MySQLParser.USE_FRM_SYMBOL:
                    self.state = 1482
                    self.repairType()
                    self.state = 1487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1488
                self.match(MySQLParser.COALESCE_SYMBOL)
                self.state = 1489
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LOCAL_SYMBOL or _la==MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 1490
                    self.noWriteToBinLog()


                self.state = 1493
                self.real_ulong_number()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1494
                self.match(MySQLParser.TRUNCATE_SYMBOL)
                self.state = 1495
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1496
                self.allOrPartitionNameList()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1497
                self.match(MySQLParser.REORGANIZE_SYMBOL)
                self.state = 1498
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 1499
                    self.noWriteToBinLog()


                self.state = 1506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 1502
                    self.identifierList()
                    self.state = 1503
                    self.match(MySQLParser.INTO_SYMBOL)
                    self.state = 1504
                    self.partitionDefinitions()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1508
                self.match(MySQLParser.EXCHANGE_SYMBOL)
                self.state = 1509
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1510
                self.identifier()
                self.state = 1511
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 1512
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 1513
                self.tableRef()
                self.state = 1515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 1514
                    self.withValidation()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1517
                if not serverVersion >= 50704:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50704")
                self.state = 1518
                self.match(MySQLParser.DISCARD_SYMBOL)
                self.state = 1519
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1520
                self.allOrPartitionNameList()
                self.state = 1521
                self.match(MySQLParser.TABLESPACE_SYMBOL)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1523
                if not serverVersion >= 50704:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50704")
                self.state = 1524
                self.match(MySQLParser.IMPORT_SYMBOL)
                self.state = 1525
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1526
                self.allOrPartitionNameList()
                self.state = 1527
                self.match(MySQLParser.TABLESPACE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterListItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterListItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterListItemContext,i)


        def createTableOptionsSpaceSeparated(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateTableOptionsSpaceSeparatedContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateTableOptionsSpaceSeparatedContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def alterCommandsModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterCommandsModifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterCommandsModifierContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterList" ):
                listener.enterAlterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterList" ):
                listener.exitAlterList(self)




    def alterList(self):

        localctx = MySQLParser.AlterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_alterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 1531
                self.alterListItem()
                pass

            elif la_ == 2:
                self.state = 1532
                self.createTableOptionsSpaceSeparated()
                pass


            self.state = 1543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 1535
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 1539
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 1536
                    self.alterListItem()
                    pass

                elif la_ == 2:
                    self.state = 1537
                    self.alterCommandsModifier()
                    pass

                elif la_ == 3:
                    self.state = 1538
                    self.createTableOptionsSpaceSeparated()
                    pass


                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCommandsModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterAlgorithmOption(self):
            return self.getTypedRuleContext(MySQLParser.AlterAlgorithmOptionContext,0)


        def alterLockOption(self):
            return self.getTypedRuleContext(MySQLParser.AlterLockOptionContext,0)


        def withValidation(self):
            return self.getTypedRuleContext(MySQLParser.WithValidationContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterCommandsModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCommandsModifier" ):
                listener.enterAlterCommandsModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCommandsModifier" ):
                listener.exitAlterCommandsModifier(self)




    def alterCommandsModifier(self):

        localctx = MySQLParser.AlterCommandsModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_alterCommandsModifier)
        try:
            self.state = 1549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1546
                self.alterAlgorithmOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1547
                self.alterLockOption()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1548
                self.withValidation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterListItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def fieldDefinition(self):
            return self.getTypedRuleContext(MySQLParser.FieldDefinitionContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def tableElementList(self):
            return self.getTypedRuleContext(MySQLParser.TableElementListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COLUMN_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_SYMBOL, 0)

        def checkOrReferences(self):
            return self.getTypedRuleContext(MySQLParser.CheckOrReferencesContext,0)


        def place(self):
            return self.getTypedRuleContext(MySQLParser.PlaceContext,0)


        def tableConstraintDef(self):
            return self.getTypedRuleContext(MySQLParser.TableConstraintDefContext,0)


        def CHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGE_SYMBOL, 0)

        def columnInternalRef(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefContext,0)


        def MODIFY_SYMBOL(self):
            return self.getToken(MySQLParser.MODIFY_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def FOREIGN_SYMBOL(self):
            return self.getToken(MySQLParser.FOREIGN_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def keyOrIndex(self):
            return self.getTypedRuleContext(MySQLParser.KeyOrIndexContext,0)


        def indexRef(self):
            return self.getTypedRuleContext(MySQLParser.IndexRefContext,0)


        def CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.CHECK_SYMBOL, 0)

        def CONSTRAINT_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0)

        def restrict(self):
            return self.getTypedRuleContext(MySQLParser.RestrictContext,0)


        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def KEYS_SYMBOL(self):
            return self.getToken(MySQLParser.KEYS_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def ALTER_SYMBOL(self):
            return self.getToken(MySQLParser.ALTER_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def signedLiteral(self):
            return self.getTypedRuleContext(MySQLParser.SignedLiteralContext,0)


        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def visibility(self):
            return self.getTypedRuleContext(MySQLParser.VisibilityContext,0)


        def constraintEnforcement(self):
            return self.getTypedRuleContext(MySQLParser.ConstraintEnforcementContext,0)


        def RENAME_SYMBOL(self):
            return self.getToken(MySQLParser.RENAME_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySQLParser.TableNameContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def indexName(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameContext,0)


        def CONVERT_SYMBOL(self):
            return self.getToken(MySQLParser.CONVERT_SYMBOL, 0)

        def charset(self):
            return self.getTypedRuleContext(MySQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(MySQLParser.FORCE_SYMBOL, 0)

        def ORDER_SYMBOL(self):
            return self.getToken(MySQLParser.ORDER_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def alterOrderList(self):
            return self.getTypedRuleContext(MySQLParser.AlterOrderListContext,0)


        def UPGRADE_SYMBOL(self):
            return self.getToken(MySQLParser.UPGRADE_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONING_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterListItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterListItem" ):
                listener.enterAlterListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterListItem" ):
                listener.exitAlterListItem(self)




    def alterListItem(self):

        localctx = MySQLParser.AlterListItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_alterListItem)
        self._la = 0 # Token type
        try:
            self.state = 1696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1551
                self.match(MySQLParser.ADD_SYMBOL)
                self.state = 1553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 1552
                    self.match(MySQLParser.COLUMN_SYMBOL)


                self.state = 1567
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 1555
                    self.identifier()
                    self.state = 1556
                    self.fieldDefinition()
                    self.state = 1558
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                    if la_ == 1:
                        self.state = 1557
                        self.checkOrReferences()


                    self.state = 1561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.AFTER_SYMBOL or _la==MySQLParser.FIRST_SYMBOL:
                        self.state = 1560
                        self.place()


                    pass

                elif la_ == 2:
                    self.state = 1563
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 1564
                    self.tableElementList()
                    self.state = 1565
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                self.match(MySQLParser.ADD_SYMBOL)
                self.state = 1570
                self.tableConstraintDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1571
                self.match(MySQLParser.CHANGE_SYMBOL)
                self.state = 1573
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 1572
                    self.match(MySQLParser.COLUMN_SYMBOL)


                self.state = 1575
                self.columnInternalRef()
                self.state = 1576
                self.identifier()
                self.state = 1577
                self.fieldDefinition()
                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.AFTER_SYMBOL or _la==MySQLParser.FIRST_SYMBOL:
                    self.state = 1578
                    self.place()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1581
                self.match(MySQLParser.MODIFY_SYMBOL)
                self.state = 1583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 1582
                    self.match(MySQLParser.COLUMN_SYMBOL)


                self.state = 1585
                self.columnInternalRef()
                self.state = 1586
                self.fieldDefinition()
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.AFTER_SYMBOL or _la==MySQLParser.FIRST_SYMBOL:
                    self.state = 1587
                    self.place()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1590
                self.match(MySQLParser.DROP_SYMBOL)
                self.state = 1619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 1592
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        self.state = 1591
                        self.match(MySQLParser.COLUMN_SYMBOL)


                    self.state = 1594
                    self.columnInternalRef()
                    self.state = 1596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.CASCADE_SYMBOL or _la==MySQLParser.RESTRICT_SYMBOL:
                        self.state = 1595
                        self.restrict()


                    pass

                elif la_ == 2:
                    self.state = 1598
                    self.match(MySQLParser.FOREIGN_SYMBOL)
                    self.state = 1599
                    self.match(MySQLParser.KEY_SYMBOL)
                    self.state = 1606
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                    if la_ == 1:
                        self.state = 1600
                        if not serverVersion >= 50700:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion >= 50700")
                        self.state = 1601
                        self.columnInternalRef()
                        pass

                    elif la_ == 2:
                        self.state = 1602
                        if not serverVersion < 50700:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion < 50700")
                        self.state = 1604
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                        if la_ == 1:
                            self.state = 1603
                            self.columnInternalRef()


                        pass


                    pass

                elif la_ == 3:
                    self.state = 1608
                    self.match(MySQLParser.PRIMARY_SYMBOL)
                    self.state = 1609
                    self.match(MySQLParser.KEY_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 1610
                    self.keyOrIndex()
                    self.state = 1611
                    self.indexRef()
                    pass

                elif la_ == 5:
                    self.state = 1613
                    if not serverVersion >= 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80017")
                    self.state = 1614
                    self.match(MySQLParser.CHECK_SYMBOL)
                    self.state = 1615
                    self.identifier()
                    pass

                elif la_ == 6:
                    self.state = 1616
                    if not serverVersion >= 80019:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80019")
                    self.state = 1617
                    self.match(MySQLParser.CONSTRAINT_SYMBOL)
                    self.state = 1618
                    self.identifier()
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1621
                self.match(MySQLParser.DISABLE_SYMBOL)
                self.state = 1622
                self.match(MySQLParser.KEYS_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1623
                self.match(MySQLParser.ENABLE_SYMBOL)
                self.state = 1624
                self.match(MySQLParser.KEYS_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1625
                self.match(MySQLParser.ALTER_SYMBOL)
                self.state = 1627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 1626
                    self.match(MySQLParser.COLUMN_SYMBOL)


                self.state = 1629
                self.columnInternalRef()
                self.state = 1639
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.SET_SYMBOL]:
                    self.state = 1630
                    self.match(MySQLParser.SET_SYMBOL)
                    self.state = 1631
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    self.state = 1635
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        self.state = 1632
                        if not serverVersion >= 80014:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion >= 80014")
                        self.state = 1633
                        self.exprWithParentheses()
                        pass

                    elif la_ == 2:
                        self.state = 1634
                        self.signedLiteral()
                        pass


                    pass
                elif token in [MySQLParser.DROP_SYMBOL]:
                    self.state = 1637
                    self.match(MySQLParser.DROP_SYMBOL)
                    self.state = 1638
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1641
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1642
                self.match(MySQLParser.ALTER_SYMBOL)
                self.state = 1643
                self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 1644
                self.indexRef()
                self.state = 1645
                self.visibility()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1647
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 1648
                self.match(MySQLParser.ALTER_SYMBOL)
                self.state = 1649
                self.match(MySQLParser.CHECK_SYMBOL)
                self.state = 1650
                self.identifier()
                self.state = 1651
                self.constraintEnforcement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1653
                if not serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80019")
                self.state = 1654
                self.match(MySQLParser.ALTER_SYMBOL)
                self.state = 1655
                self.match(MySQLParser.CONSTRAINT_SYMBOL)
                self.state = 1656
                self.identifier()
                self.state = 1657
                self.constraintEnforcement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1659
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1660
                self.match(MySQLParser.RENAME_SYMBOL)
                self.state = 1661
                self.match(MySQLParser.COLUMN_SYMBOL)
                self.state = 1662
                self.columnInternalRef()
                self.state = 1663
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 1664
                self.identifier()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1666
                self.match(MySQLParser.RENAME_SYMBOL)
                self.state = 1668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 1667
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.AS_SYMBOL or _la==MySQLParser.TO_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1670
                self.tableName()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1671
                if not serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50700")
                self.state = 1672
                self.match(MySQLParser.RENAME_SYMBOL)
                self.state = 1673
                self.keyOrIndex()
                self.state = 1674
                self.indexRef()
                self.state = 1675
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 1676
                self.indexName()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1678
                self.match(MySQLParser.CONVERT_SYMBOL)
                self.state = 1679
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 1680
                self.charset()
                self.state = 1684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 1681
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 1682
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 1683
                    self.charsetName()
                    pass


                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COLLATE_SYMBOL:
                    self.state = 1686
                    self.collate()


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1689
                self.match(MySQLParser.FORCE_SYMBOL)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1690
                self.match(MySQLParser.ORDER_SYMBOL)
                self.state = 1691
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 1692
                self.alterOrderList()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1693
                if not serverVersion >= 50708 && serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50708 && serverVersion < 80000")
                self.state = 1694
                self.match(MySQLParser.UPGRADE_SYMBOL)
                self.state = 1695
                self.match(MySQLParser.PARTITIONING_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER_SYMBOL(self):
            return self.getToken(MySQLParser.AFTER_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)




    def place(self):

        localctx = MySQLParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_place)
        try:
            self.state = 1701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.AFTER_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1698
                self.match(MySQLParser.AFTER_SYMBOL)
                self.state = 1699
                self.identifier()
                pass
            elif token in [MySQLParser.FIRST_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1700
                self.match(MySQLParser.FIRST_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT_SYMBOL(self):
            return self.getToken(MySQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_restrict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrict" ):
                listener.enterRestrict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrict" ):
                listener.exitRestrict(self)




    def restrict(self):

        localctx = MySQLParser.RestrictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_restrict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1703
            _la = self._input.LA(1)
            if not(_la==MySQLParser.CASCADE_SYMBOL or _la==MySQLParser.RESTRICT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterOrderListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IdentifierContext,i)


        def direction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DirectionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DirectionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterOrderList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterOrderList" ):
                listener.enterAlterOrderList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterOrderList" ):
                listener.exitAlterOrderList(self)




    def alterOrderList(self):

        localctx = MySQLParser.AlterOrderListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_alterOrderList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self.identifier()
            self.state = 1707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ASC_SYMBOL or _la==MySQLParser.DESC_SYMBOL:
                self.state = 1706
                self.direction()


            self.state = 1716
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1709
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 1710
                    self.identifier()
                    self.state = 1712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.ASC_SYMBOL or _la==MySQLParser.DESC_SYMBOL:
                        self.state = 1711
                        self.direction()

             
                self.state = 1718
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterAlgorithmOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterAlgorithmOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterAlgorithmOption" ):
                listener.enterAlterAlgorithmOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterAlgorithmOption" ):
                listener.exitAlterAlgorithmOption(self)




    def alterAlgorithmOption(self):

        localctx = MySQLParser.AlterAlgorithmOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_alterAlgorithmOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self.match(MySQLParser.ALGORITHM_SYMBOL)
            self.state = 1721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 1720
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 1725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 1723
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 1724
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLockOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLockOption" ):
                listener.enterAlterLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLockOption" ):
                listener.exitAlterLockOption(self)




    def alterLockOption(self):

        localctx = MySQLParser.AlterLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_alterLockOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.match(MySQLParser.LOCK_SYMBOL)
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 1728
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 1733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 1731
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 1732
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexLockAndAlgorithmContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterAlgorithmOption(self):
            return self.getTypedRuleContext(MySQLParser.AlterAlgorithmOptionContext,0)


        def alterLockOption(self):
            return self.getTypedRuleContext(MySQLParser.AlterLockOptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_indexLockAndAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexLockAndAlgorithm" ):
                listener.enterIndexLockAndAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexLockAndAlgorithm" ):
                listener.exitIndexLockAndAlgorithm(self)




    def indexLockAndAlgorithm(self):

        localctx = MySQLParser.IndexLockAndAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_indexLockAndAlgorithm)
        self._la = 0 # Token type
        try:
            self.state = 1743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.ALGORITHM_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1735
                self.alterAlgorithmOption()
                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LOCK_SYMBOL:
                    self.state = 1736
                    self.alterLockOption()


                pass
            elif token in [MySQLParser.LOCK_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1739
                self.alterLockOption()
                self.state = 1741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ALGORITHM_SYMBOL:
                    self.state = 1740
                    self.alterAlgorithmOption()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithValidationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MySQLParser.VALIDATION_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def WITHOUT_SYMBOL(self):
            return self.getToken(MySQLParser.WITHOUT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_withValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithValidation" ):
                listener.enterWithValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithValidation" ):
                listener.exitWithValidation(self)




    def withValidation(self):

        localctx = MySQLParser.WithValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_withValidation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            if not serverVersion >= 50706:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50706")
            self.state = 1746
            _la = self._input.LA(1)
            if not(_la==MySQLParser.WITH_SYMBOL or _la==MySQLParser.WITHOUT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1747
            self.match(MySQLParser.VALIDATION_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemovePartitioningContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE_SYMBOL(self):
            return self.getToken(MySQLParser.REMOVE_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONING_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_removePartitioning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemovePartitioning" ):
                listener.enterRemovePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemovePartitioning" ):
                listener.exitRemovePartitioning(self)




    def removePartitioning(self):

        localctx = MySQLParser.RemovePartitioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_removePartitioning)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1749
            self.match(MySQLParser.REMOVE_SYMBOL)
            self.state = 1750
            self.match(MySQLParser.PARTITIONING_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllOrPartitionNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_allOrPartitionNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllOrPartitionNameList" ):
                listener.enterAllOrPartitionNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllOrPartitionNameList" ):
                listener.exitAllOrPartitionNameList(self)




    def allOrPartitionNameList(self):

        localctx = MySQLParser.AllOrPartitionNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_allOrPartitionNameList)
        try:
            self.state = 1754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1752
                self.match(MySQLParser.ALL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1753
                self.identifierList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceRefContext,0)


        def DATAFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DATAFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def RENAME_SYMBOL(self):
            return self.getToken(MySQLParser.RENAME_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def alterTablespaceOptions(self):
            return self.getTypedRuleContext(MySQLParser.AlterTablespaceOptionsContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def CHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGE_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def ACCESSIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.ACCESSIBLE_SYMBOL, 0)

        def READ_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.READ_ONLY_SYMBOL, 0)

        def READ_WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.READ_WRITE_SYMBOL, 0)

        def changeTablespaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ChangeTablespaceOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ChangeTablespaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespace" ):
                listener.enterAlterTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespace" ):
                listener.exitAlterTablespace(self)




    def alterTablespace(self):

        localctx = MySQLParser.AlterTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_alterTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 1757
            self.tablespaceRef()
            self.state = 1791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1758
                _la = self._input.LA(1)
                if not(_la==MySQLParser.ADD_SYMBOL or _la==MySQLParser.DROP_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1759
                self.match(MySQLParser.DATAFILE_SYMBOL)
                self.state = 1760
                self.textLiteral()
                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.AUTOEXTEND_SIZE_SYMBOL or _la==MySQLParser.ENCRYPTION_SYMBOL or _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.INITIAL_SIZE_SYMBOL or _la==MySQLParser.MAX_SIZE_SYMBOL or _la==MySQLParser.NO_WAIT_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.WAIT_SYMBOL:
                    self.state = 1761
                    self.alterTablespaceOptions()


                pass

            elif la_ == 2:
                self.state = 1764
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 1784
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.EOF, MySQLParser.SEMICOLON_SYMBOL]:
                    pass
                elif token in [MySQLParser.CHANGE_SYMBOL]:
                    self.state = 1766
                    self.match(MySQLParser.CHANGE_SYMBOL)
                    self.state = 1767
                    self.match(MySQLParser.DATAFILE_SYMBOL)
                    self.state = 1768
                    self.textLiteral()
                    self.state = 1779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.AUTOEXTEND_SIZE_SYMBOL or _la==MySQLParser.INITIAL_SIZE_SYMBOL or _la==MySQLParser.MAX_SIZE_SYMBOL:
                        self.state = 1769
                        self.changeTablespaceOption()
                        self.state = 1776
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==MySQLParser.AUTOEXTEND_SIZE_SYMBOL or _la==MySQLParser.INITIAL_SIZE_SYMBOL or _la==MySQLParser.MAX_SIZE_SYMBOL or _la==MySQLParser.COMMA_SYMBOL:
                            self.state = 1771
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySQLParser.COMMA_SYMBOL:
                                self.state = 1770
                                self.match(MySQLParser.COMMA_SYMBOL)


                            self.state = 1773
                            self.changeTablespaceOption()
                            self.state = 1778
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                elif token in [MySQLParser.READ_ONLY_SYMBOL, MySQLParser.READ_WRITE_SYMBOL]:
                    self.state = 1781
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.READ_ONLY_SYMBOL or _la==MySQLParser.READ_WRITE_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [MySQLParser.NOT_SYMBOL]:
                    self.state = 1782
                    self.match(MySQLParser.NOT_SYMBOL)
                    self.state = 1783
                    self.match(MySQLParser.ACCESSIBLE_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.state = 1786
                self.match(MySQLParser.RENAME_SYMBOL)
                self.state = 1787
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 1788
                self.identifier()
                pass

            elif la_ == 4:
                self.state = 1789
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 1790
                self.alterTablespaceOptions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUndoTablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDO_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceRefContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def ACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.ACTIVE_SYMBOL, 0)

        def INACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.INACTIVE_SYMBOL, 0)

        def undoTableSpaceOptions(self):
            return self.getTypedRuleContext(MySQLParser.UndoTableSpaceOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterUndoTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUndoTablespace" ):
                listener.enterAlterUndoTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUndoTablespace" ):
                listener.exitAlterUndoTablespace(self)




    def alterUndoTablespace(self):

        localctx = MySQLParser.AlterUndoTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_alterUndoTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1793
            self.match(MySQLParser.UNDO_SYMBOL)
            self.state = 1794
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 1795
            self.tablespaceRef()
            self.state = 1796
            self.match(MySQLParser.SET_SYMBOL)
            self.state = 1797
            _la = self._input.LA(1)
            if not(_la==MySQLParser.ACTIVE_SYMBOL or _la==MySQLParser.INACTIVE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL:
                self.state = 1798
                self.undoTableSpaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UndoTableSpaceOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def undoTableSpaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UndoTableSpaceOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UndoTableSpaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_undoTableSpaceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndoTableSpaceOptions" ):
                listener.enterUndoTableSpaceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndoTableSpaceOptions" ):
                listener.exitUndoTableSpaceOptions(self)




    def undoTableSpaceOptions(self):

        localctx = MySQLParser.UndoTableSpaceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_undoTableSpaceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.undoTableSpaceOption()
            self.state = 1808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.COMMA_SYMBOL:
                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 1802
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 1805
                self.undoTableSpaceOption()
                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UndoTableSpaceOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_undoTableSpaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndoTableSpaceOption" ):
                listener.enterUndoTableSpaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndoTableSpaceOption" ):
                listener.exitUndoTableSpaceOption(self)




    def undoTableSpaceOption(self):

        localctx = MySQLParser.UndoTableSpaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_undoTableSpaceOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.tsOptionEngine()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterTablespaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterTablespaceOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterTablespaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterTablespaceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespaceOptions" ):
                listener.enterAlterTablespaceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespaceOptions" ):
                listener.exitAlterTablespaceOptions(self)




    def alterTablespaceOptions(self):

        localctx = MySQLParser.AlterTablespaceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_alterTablespaceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.alterTablespaceOption()
            self.state = 1820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.AUTOEXTEND_SIZE_SYMBOL or _la==MySQLParser.ENCRYPTION_SYMBOL or _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.INITIAL_SIZE_SYMBOL or _la==MySQLParser.MAX_SIZE_SYMBOL or _la==MySQLParser.NO_WAIT_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.WAIT_SYMBOL or _la==MySQLParser.COMMA_SYMBOL:
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 1814
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 1817
                self.alterTablespaceOption()
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def tsOptionAutoextendSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionAutoextendSizeContext,0)


        def tsOptionMaxSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionMaxSizeContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionWaitContext,0)


        def tsOptionEncryption(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEncryptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterTablespaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespaceOption" ):
                listener.enterAlterTablespaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespaceOption" ):
                listener.exitAlterTablespaceOption(self)




    def alterTablespaceOption(self):

        localctx = MySQLParser.AlterTablespaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_alterTablespaceOption)
        try:
            self.state = 1833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.INITIAL_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1823
                self.match(MySQLParser.INITIAL_SIZE_SYMBOL)
                self.state = 1825
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 1824
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 1827
                self.sizeNumber()
                pass
            elif token in [MySQLParser.AUTOEXTEND_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1828
                self.tsOptionAutoextendSize()
                pass
            elif token in [MySQLParser.MAX_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1829
                self.tsOptionMaxSize()
                pass
            elif token in [MySQLParser.ENGINE_SYMBOL, MySQLParser.STORAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1830
                self.tsOptionEngine()
                pass
            elif token in [MySQLParser.NO_WAIT_SYMBOL, MySQLParser.WAIT_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1831
                self.tsOptionWait()
                pass
            elif token in [MySQLParser.ENCRYPTION_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1832
                self.tsOptionEncryption()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeTablespaceOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def tsOptionAutoextendSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionAutoextendSizeContext,0)


        def tsOptionMaxSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionMaxSizeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_changeTablespaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeTablespaceOption" ):
                listener.enterChangeTablespaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeTablespaceOption" ):
                listener.exitChangeTablespaceOption(self)




    def changeTablespaceOption(self):

        localctx = MySQLParser.ChangeTablespaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_changeTablespaceOption)
        try:
            self.state = 1842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.INITIAL_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1835
                self.match(MySQLParser.INITIAL_SIZE_SYMBOL)
                self.state = 1837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 1836
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 1839
                self.sizeNumber()
                pass
            elif token in [MySQLParser.AUTOEXTEND_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1840
                self.tsOptionAutoextendSize()
                pass
            elif token in [MySQLParser.MAX_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1841
                self.tsOptionMaxSize()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def viewRef(self):
            return self.getTypedRuleContext(MySQLParser.ViewRefContext,0)


        def viewTail(self):
            return self.getTypedRuleContext(MySQLParser.ViewTailContext,0)


        def viewAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.ViewAlgorithmContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def viewSuid(self):
            return self.getTypedRuleContext(MySQLParser.ViewSuidContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterView" ):
                listener.enterAlterView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterView" ):
                listener.exitAlterView(self)




    def alterView(self):

        localctx = MySQLParser.AlterViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_alterView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ALGORITHM_SYMBOL:
                self.state = 1844
                self.viewAlgorithm()


            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DEFINER_SYMBOL:
                self.state = 1847
                self.definerClause()


            self.state = 1851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.SQL_SYMBOL:
                self.state = 1850
                self.viewSuid()


            self.state = 1853
            self.match(MySQLParser.VIEW_SYMBOL)
            self.state = 1854
            self.viewRef()
            self.state = 1855
            self.viewTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def viewSelect(self):
            return self.getTypedRuleContext(MySQLParser.ViewSelectContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_viewTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewTail" ):
                listener.enterViewTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewTail" ):
                listener.exitViewTail(self)




    def viewTail(self):

        localctx = MySQLParser.ViewTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_viewTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OPEN_PAR_SYMBOL:
                self.state = 1857
                self.columnInternalRefList()


            self.state = 1860
            self.match(MySQLParser.AS_SYMBOL)
            self.state = 1861
            self.viewSelect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewSelectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionOrParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionOrParensContext,0)


        def viewCheckOption(self):
            return self.getTypedRuleContext(MySQLParser.ViewCheckOptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_viewSelect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewSelect" ):
                listener.enterViewSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewSelect" ):
                listener.exitViewSelect(self)




    def viewSelect(self):

        localctx = MySQLParser.ViewSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_viewSelect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self.queryExpressionOrParens()
            self.state = 1865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.WITH_SYMBOL:
                self.state = 1864
                self.viewCheckOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewCheckOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.CHECK_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def CASCADED_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADED_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_viewCheckOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewCheckOption" ):
                listener.enterViewCheckOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewCheckOption" ):
                listener.exitViewCheckOption(self)




    def viewCheckOption(self):

        localctx = MySQLParser.ViewCheckOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_viewCheckOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1867
            self.match(MySQLParser.WITH_SYMBOL)
            self.state = 1869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.CASCADED_SYMBOL or _la==MySQLParser.LOCAL_SYMBOL:
                self.state = 1868
                _la = self._input.LA(1)
                if not(_la==MySQLParser.CASCADED_SYMBOL or _la==MySQLParser.LOCAL_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1871
            self.match(MySQLParser.CHECK_SYMBOL)
            self.state = 1872
            self.match(MySQLParser.OPTION_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def createDatabase(self):
            return self.getTypedRuleContext(MySQLParser.CreateDatabaseContext,0)


        def createTable(self):
            return self.getTypedRuleContext(MySQLParser.CreateTableContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(MySQLParser.CreateFunctionContext,0)


        def createProcedure(self):
            return self.getTypedRuleContext(MySQLParser.CreateProcedureContext,0)


        def createUdf(self):
            return self.getTypedRuleContext(MySQLParser.CreateUdfContext,0)


        def createLogfileGroup(self):
            return self.getTypedRuleContext(MySQLParser.CreateLogfileGroupContext,0)


        def createView(self):
            return self.getTypedRuleContext(MySQLParser.CreateViewContext,0)


        def createTrigger(self):
            return self.getTypedRuleContext(MySQLParser.CreateTriggerContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(MySQLParser.CreateIndexContext,0)


        def createServer(self):
            return self.getTypedRuleContext(MySQLParser.CreateServerContext,0)


        def createTablespace(self):
            return self.getTypedRuleContext(MySQLParser.CreateTablespaceContext,0)


        def createEvent(self):
            return self.getTypedRuleContext(MySQLParser.CreateEventContext,0)


        def createRole(self):
            return self.getTypedRuleContext(MySQLParser.CreateRoleContext,0)


        def createSpatialReference(self):
            return self.getTypedRuleContext(MySQLParser.CreateSpatialReferenceContext,0)


        def createUndoTablespace(self):
            return self.getTypedRuleContext(MySQLParser.CreateUndoTablespaceContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateStatement" ):
                listener.enterCreateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateStatement" ):
                listener.exitCreateStatement(self)




    def createStatement(self):

        localctx = MySQLParser.CreateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_createStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1874
            self.match(MySQLParser.CREATE_SYMBOL)
            self.state = 1893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 1875
                self.createDatabase()
                pass

            elif la_ == 2:
                self.state = 1876
                self.createTable()
                pass

            elif la_ == 3:
                self.state = 1877
                self.createFunction()
                pass

            elif la_ == 4:
                self.state = 1878
                self.createProcedure()
                pass

            elif la_ == 5:
                self.state = 1879
                self.createUdf()
                pass

            elif la_ == 6:
                self.state = 1880
                self.createLogfileGroup()
                pass

            elif la_ == 7:
                self.state = 1881
                self.createView()
                pass

            elif la_ == 8:
                self.state = 1882
                self.createTrigger()
                pass

            elif la_ == 9:
                self.state = 1883
                self.createIndex()
                pass

            elif la_ == 10:
                self.state = 1884
                self.createServer()
                pass

            elif la_ == 11:
                self.state = 1885
                self.createTablespace()
                pass

            elif la_ == 12:
                self.state = 1886
                self.createEvent()
                pass

            elif la_ == 13:
                self.state = 1887
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1888
                self.createRole()
                pass

            elif la_ == 14:
                self.state = 1889
                if not serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80011")
                self.state = 1890
                self.createSpatialReference()
                pass

            elif la_ == 15:
                self.state = 1891
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 1892
                self.createUndoTablespace()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MySQLParser.SchemaNameContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)




    def createDatabase(self):

        localctx = MySQLParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_createDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1895
            self.match(MySQLParser.DATABASE_SYMBOL)
            self.state = 1897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 1896
                self.ifNotExists()


            self.state = 1899
            self.schemaName()
            self.state = 1903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1900
                    self.createDatabaseOption() 
                self.state = 1905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defaultCharset(self):
            return self.getTypedRuleContext(MySQLParser.DefaultCharsetContext,0)


        def defaultCollation(self):
            return self.getTypedRuleContext(MySQLParser.DefaultCollationContext,0)


        def defaultEncryption(self):
            return self.getTypedRuleContext(MySQLParser.DefaultEncryptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createDatabaseOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseOption" ):
                listener.enterCreateDatabaseOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseOption" ):
                listener.exitCreateDatabaseOption(self)




    def createDatabaseOption(self):

        localctx = MySQLParser.CreateDatabaseOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_createDatabaseOption)
        try:
            self.state = 1910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1906
                self.defaultCharset()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1907
                self.defaultCollation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1908
                if not serverVersion >= 80016:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80016")
                self.state = 1909
                self.defaultEncryption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySQLParser.TableNameContext,0)


        def LIKE_SYMBOL(self):
            return self.getToken(MySQLParser.LIKE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPORARY_SYMBOL, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def tableElementList(self):
            return self.getTypedRuleContext(MySQLParser.TableElementListContext,0)


        def createTableOptions(self):
            return self.getTypedRuleContext(MySQLParser.CreateTableOptionsContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(MySQLParser.PartitionClauseContext,0)


        def duplicateAsQueryExpression(self):
            return self.getTypedRuleContext(MySQLParser.DuplicateAsQueryExpressionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)




    def createTable(self):

        localctx = MySQLParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.TEMPORARY_SYMBOL:
                self.state = 1912
                self.match(MySQLParser.TEMPORARY_SYMBOL)


            self.state = 1915
            self.match(MySQLParser.TABLE_SYMBOL)
            self.state = 1917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1916
                self.ifNotExists()


            self.state = 1919
            self.tableName()
            self.state = 1942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1924
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1920
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 1921
                    self.tableElementList()
                    self.state = 1922
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)


                self.state = 1927
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1926
                    self.createTableOptions()


                self.state = 1930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1929
                    self.partitionClause()


                self.state = 1933
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1932
                    self.duplicateAsQueryExpression()


                pass

            elif la_ == 2:
                self.state = 1935
                self.match(MySQLParser.LIKE_SYMBOL)
                self.state = 1936
                self.tableRef()
                pass

            elif la_ == 3:
                self.state = 1937
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 1938
                self.match(MySQLParser.LIKE_SYMBOL)
                self.state = 1939
                self.tableRef()
                self.state = 1940
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TableElementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TableElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableElementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElementList" ):
                listener.enterTableElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElementList" ):
                listener.exitTableElementList(self)




    def tableElementList(self):

        localctx = MySQLParser.TableElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_tableElementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1944
            self.tableElement()
            self.state = 1949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 1945
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 1946
                self.tableElement()
                self.state = 1951
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnDefinition(self):
            return self.getTypedRuleContext(MySQLParser.ColumnDefinitionContext,0)


        def tableConstraintDef(self):
            return self.getTypedRuleContext(MySQLParser.TableConstraintDefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElement" ):
                listener.enterTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElement" ):
                listener.exitTableElement(self)




    def tableElement(self):

        localctx = MySQLParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_tableElement)
        try:
            self.state = 1954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1952
                self.columnDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1953
                self.tableConstraintDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DuplicateAsQueryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionOrParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionOrParensContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_duplicateAsQueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDuplicateAsQueryExpression" ):
                listener.enterDuplicateAsQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDuplicateAsQueryExpression" ):
                listener.exitDuplicateAsQueryExpression(self)




    def duplicateAsQueryExpression(self):

        localctx = MySQLParser.DuplicateAsQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_duplicateAsQueryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1956
                _la = self._input.LA(1)
                if not(_la==MySQLParser.IGNORE_SYMBOL or _la==MySQLParser.REPLACE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1959
                self.match(MySQLParser.AS_SYMBOL)


            self.state = 1962
            self.queryExpressionOrParens()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionOrParensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpression(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionContext,0)


        def queryExpressionParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_queryExpressionOrParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionOrParens" ):
                listener.enterQueryExpressionOrParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionOrParens" ):
                listener.exitQueryExpressionOrParens(self)




    def queryExpressionOrParens(self):

        localctx = MySQLParser.QueryExpressionOrParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_queryExpressionOrParens)
        try:
            self.state = 1966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1964
                self.queryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1965
                self.queryExpressionParens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def EOF(self):
            return self.getToken(MySQLParser.EOF, 0)

        def createProcedure(self):
            return self.getTypedRuleContext(MySQLParser.CreateProcedureContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(MySQLParser.CreateFunctionContext,0)


        def createUdf(self):
            return self.getTypedRuleContext(MySQLParser.CreateUdfContext,0)


        def SEMICOLON_SYMBOL(self):
            return self.getToken(MySQLParser.SEMICOLON_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_createRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRoutine" ):
                listener.enterCreateRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRoutine" ):
                listener.exitCreateRoutine(self)




    def createRoutine(self):

        localctx = MySQLParser.CreateRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_createRoutine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1968
            self.match(MySQLParser.CREATE_SYMBOL)
            self.state = 1972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1969
                self.createProcedure()
                pass

            elif la_ == 2:
                self.state = 1970
                self.createFunction()
                pass

            elif la_ == 3:
                self.state = 1971
                self.createUdf()
                pass


            self.state = 1975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.SEMICOLON_SYMBOL:
                self.state = 1974
                self.match(MySQLParser.SEMICOLON_SYMBOL)


            self.state = 1977
            self.match(MySQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def procedureName(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureNameContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def procedureParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ProcedureParameterContext,i)


        def routineCreateOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoutineCreateOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoutineCreateOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_createProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateProcedure" ):
                listener.enterCreateProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateProcedure" ):
                listener.exitCreateProcedure(self)




    def createProcedure(self):

        localctx = MySQLParser.CreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_createProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DEFINER_SYMBOL:
                self.state = 1979
                self.definerClause()


            self.state = 1982
            self.match(MySQLParser.PROCEDURE_SYMBOL)
            self.state = 1983
            self.procedureName()
            self.state = 1984
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 1993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1985
                self.procedureParameter()
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 1986
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 1987
                    self.procedureParameter()
                    self.state = 1992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1995
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
            self.state = 1999
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1996
                    self.routineCreateOption() 
                self.state = 2001
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 2002
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def functionName(self):
            return self.getTypedRuleContext(MySQLParser.FunctionNameContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def RETURNS_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNS_SYMBOL, 0)

        def typeWithOptCollate(self):
            return self.getTypedRuleContext(MySQLParser.TypeWithOptCollateContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FunctionParameterContext,i)


        def routineCreateOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoutineCreateOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoutineCreateOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_createFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)




    def createFunction(self):

        localctx = MySQLParser.CreateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_createFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DEFINER_SYMBOL:
                self.state = 2004
                self.definerClause()


            self.state = 2007
            self.match(MySQLParser.FUNCTION_SYMBOL)
            self.state = 2008
            self.functionName()
            self.state = 2009
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 2010
                self.functionParameter()
                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 2011
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 2012
                    self.functionParameter()
                    self.state = 2017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2020
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
            self.state = 2021
            self.match(MySQLParser.RETURNS_SYMBOL)
            self.state = 2022
            self.typeWithOptCollate()
            self.state = 2026
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2023
                    self.routineCreateOption() 
                self.state = 2028
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 2029
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def udfName(self):
            return self.getTypedRuleContext(MySQLParser.UdfNameContext,0)


        def RETURNS_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNS_SYMBOL, 0)

        def SONAME_SYMBOL(self):
            return self.getToken(MySQLParser.SONAME_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def STRING_SYMBOL(self):
            return self.getToken(MySQLParser.STRING_SYMBOL, 0)

        def INT_SYMBOL(self):
            return self.getToken(MySQLParser.INT_SYMBOL, 0)

        def REAL_SYMBOL(self):
            return self.getToken(MySQLParser.REAL_SYMBOL, 0)

        def DECIMAL_SYMBOL(self):
            return self.getToken(MySQLParser.DECIMAL_SYMBOL, 0)

        def AGGREGATE_SYMBOL(self):
            return self.getToken(MySQLParser.AGGREGATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_createUdf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdf" ):
                listener.enterCreateUdf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdf" ):
                listener.exitCreateUdf(self)




    def createUdf(self):

        localctx = MySQLParser.CreateUdfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_createUdf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.AGGREGATE_SYMBOL:
                self.state = 2031
                self.match(MySQLParser.AGGREGATE_SYMBOL)


            self.state = 2034
            self.match(MySQLParser.FUNCTION_SYMBOL)
            self.state = 2035
            self.udfName()
            self.state = 2036
            self.match(MySQLParser.RETURNS_SYMBOL)
            self.state = 2037
            localctx.type_expression = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySQLParser.DECIMAL_SYMBOL or _la==MySQLParser.INT_SYMBOL or _la==MySQLParser.REAL_SYMBOL or _la==MySQLParser.STRING_SYMBOL):
                localctx.type_expression = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2038
            self.match(MySQLParser.SONAME_SYMBOL)
            self.state = 2039
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineCreateOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routineOption(self):
            return self.getTypedRuleContext(MySQLParser.RoutineOptionContext,0)


        def DETERMINISTIC_SYMBOL(self):
            return self.getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_routineCreateOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineCreateOption" ):
                listener.enterRoutineCreateOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineCreateOption" ):
                listener.exitRoutineCreateOption(self)




    def routineCreateOption(self):

        localctx = MySQLParser.RoutineCreateOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_routineCreateOption)
        self._la = 0 # Token type
        try:
            self.state = 2046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.COMMENT_SYMBOL, MySQLParser.CONTAINS_SYMBOL, MySQLParser.LANGUAGE_SYMBOL, MySQLParser.MODIFIES_SYMBOL, MySQLParser.NO_SYMBOL, MySQLParser.READS_SYMBOL, MySQLParser.SQL_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2041
                self.routineOption()
                pass
            elif token in [MySQLParser.DETERMINISTIC_SYMBOL, MySQLParser.NOT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NOT_SYMBOL:
                    self.state = 2042
                    self.match(MySQLParser.NOT_SYMBOL)


                self.state = 2045
                self.match(MySQLParser.DETERMINISTIC_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineAlterOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routineCreateOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoutineCreateOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoutineCreateOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_routineAlterOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineAlterOptions" ):
                listener.enterRoutineAlterOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineAlterOptions" ):
                listener.exitRoutineAlterOptions(self)




    def routineAlterOptions(self):

        localctx = MySQLParser.RoutineAlterOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_routineAlterOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2048
                self.routineCreateOption()
                self.state = 2051 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (MySQLParser.COMMENT_SYMBOL - 75)) | (1 << (MySQLParser.CONTAINS_SYMBOL - 75)) | (1 << (MySQLParser.DETERMINISTIC_SYMBOL - 75)))) != 0) or _la==MySQLParser.LANGUAGE_SYMBOL or ((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & ((1 << (MySQLParser.MODIFIES_SYMBOL - 347)) | (1 << (MySQLParser.NOT_SYMBOL - 347)) | (1 << (MySQLParser.NO_SYMBOL - 347)))) != 0) or _la==MySQLParser.READS_SYMBOL or _la==MySQLParser.SQL_SYMBOL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token
            self.security = None # Token

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def SQL_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(MySQLParser.LANGUAGE_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTAINS_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def READS_SYMBOL(self):
            return self.getToken(MySQLParser.READS_SYMBOL, 0)

        def MODIFIES_SYMBOL(self):
            return self.getToken(MySQLParser.MODIFIES_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(MySQLParser.SECURITY_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINER_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(MySQLParser.INVOKER_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_routineOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineOption" ):
                listener.enterRoutineOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineOption" ):
                listener.exitRoutineOption(self)




    def routineOption(self):

        localctx = MySQLParser.RoutineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_routineOption)
        self._la = 0 # Token type
        try:
            self.state = 2070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.COMMENT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2053
                localctx.option = self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 2054
                self.textLiteral()
                pass
            elif token in [MySQLParser.LANGUAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2055
                localctx.option = self.match(MySQLParser.LANGUAGE_SYMBOL)
                self.state = 2056
                self.match(MySQLParser.SQL_SYMBOL)
                pass
            elif token in [MySQLParser.NO_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2057
                localctx.option = self.match(MySQLParser.NO_SYMBOL)
                self.state = 2058
                self.match(MySQLParser.SQL_SYMBOL)
                pass
            elif token in [MySQLParser.CONTAINS_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2059
                localctx.option = self.match(MySQLParser.CONTAINS_SYMBOL)
                self.state = 2060
                self.match(MySQLParser.SQL_SYMBOL)
                pass
            elif token in [MySQLParser.READS_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2061
                localctx.option = self.match(MySQLParser.READS_SYMBOL)
                self.state = 2062
                self.match(MySQLParser.SQL_SYMBOL)
                self.state = 2063
                self.match(MySQLParser.DATA_SYMBOL)
                pass
            elif token in [MySQLParser.MODIFIES_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2064
                localctx.option = self.match(MySQLParser.MODIFIES_SYMBOL)
                self.state = 2065
                self.match(MySQLParser.SQL_SYMBOL)
                self.state = 2066
                self.match(MySQLParser.DATA_SYMBOL)
                pass
            elif token in [MySQLParser.SQL_SYMBOL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2067
                localctx.option = self.match(MySQLParser.SQL_SYMBOL)
                self.state = 2068
                self.match(MySQLParser.SECURITY_SYMBOL)
                self.state = 2069
                localctx.security = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.DEFINER_SYMBOL or _la==MySQLParser.INVOKER_SYMBOL):
                    localctx.security = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def createIndexTarget(self):
            return self.getTypedRuleContext(MySQLParser.CreateIndexTargetContext,0)


        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def indexName(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameContext,0)


        def onlineOption(self):
            return self.getTypedRuleContext(MySQLParser.OnlineOptionContext,0)


        def FULLTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.FULLTEXT_SYMBOL, 0)

        def SPATIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SPATIAL_SYMBOL, 0)

        def indexLockAndAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.IndexLockAndAlgorithmContext,0)


        def UNIQUE_SYMBOL(self):
            return self.getToken(MySQLParser.UNIQUE_SYMBOL, 0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IndexOptionContext,i)


        def fulltextIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FulltextIndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FulltextIndexOptionContext,i)


        def spatialIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SpatialIndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SpatialIndexOptionContext,i)


        def indexTypeClause(self):
            return self.getTypedRuleContext(MySQLParser.IndexTypeClauseContext,0)


        def indexNameAndType(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameAndTypeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)




    def createIndex(self):

        localctx = MySQLParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OFFLINE_SYMBOL or _la==MySQLParser.ONLINE_SYMBOL:
                self.state = 2072
                self.onlineOption()


            self.state = 2116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.INDEX_SYMBOL, MySQLParser.UNIQUE_SYMBOL]:
                self.state = 2076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.UNIQUE_SYMBOL:
                    self.state = 2075
                    self.match(MySQLParser.UNIQUE_SYMBOL)


                self.state = 2078
                localctx.type_expression = self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 2087
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 2079
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 2080
                    self.indexName()
                    self.state = 2082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.TYPE_SYMBOL or _la==MySQLParser.USING_SYMBOL:
                        self.state = 2081
                        self.indexTypeClause()


                    pass

                elif la_ == 2:
                    self.state = 2085
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                    if la_ == 1:
                        self.state = 2084
                        self.indexNameAndType()


                    pass


                self.state = 2089
                self.createIndexTarget()
                self.state = 2093
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2090
                        self.indexOption() 
                    self.state = 2095
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                pass
            elif token in [MySQLParser.FULLTEXT_SYMBOL]:
                self.state = 2096
                localctx.type_expression = self.match(MySQLParser.FULLTEXT_SYMBOL)
                self.state = 2097
                self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 2098
                self.indexName()
                self.state = 2099
                self.createIndexTarget()
                self.state = 2103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2100
                        self.fulltextIndexOption() 
                    self.state = 2105
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                pass
            elif token in [MySQLParser.SPATIAL_SYMBOL]:
                self.state = 2106
                localctx.type_expression = self.match(MySQLParser.SPATIAL_SYMBOL)
                self.state = 2107
                self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 2108
                self.indexName()
                self.state = 2109
                self.createIndexTarget()
                self.state = 2113
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2110
                        self.spatialIndexOption() 
                    self.state = 2115
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ALGORITHM_SYMBOL or _la==MySQLParser.LOCK_SYMBOL:
                self.state = 2118
                self.indexLockAndAlgorithm()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexNameAndTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexName(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameContext,0)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def indexType(self):
            return self.getTypedRuleContext(MySQLParser.IndexTypeContext,0)


        def TYPE_SYMBOL(self):
            return self.getToken(MySQLParser.TYPE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexNameAndType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexNameAndType" ):
                listener.enterIndexNameAndType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexNameAndType" ):
                listener.exitIndexNameAndType(self)




    def indexNameAndType(self):

        localctx = MySQLParser.IndexNameAndTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_indexNameAndType)
        try:
            self.state = 2130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2121
                self.indexName()
                self.state = 2124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 2122
                    self.match(MySQLParser.USING_SYMBOL)
                    self.state = 2123
                    self.indexType()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2126
                self.indexName()
                self.state = 2127
                self.match(MySQLParser.TYPE_SYMBOL)
                self.state = 2128
                self.indexType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexTargetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def keyListVariants(self):
            return self.getTypedRuleContext(MySQLParser.KeyListVariantsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createIndexTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndexTarget" ):
                listener.enterCreateIndexTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndexTarget" ):
                listener.exitCreateIndexTarget(self)




    def createIndexTarget(self):

        localctx = MySQLParser.CreateIndexTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_createIndexTarget)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 2133
            self.tableRef()
            self.state = 2134
            self.keyListVariants()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def logfileGroupName(self):
            return self.getTypedRuleContext(MySQLParser.LogfileGroupNameContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def UNDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDOFILE_SYMBOL, 0)

        def REDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.REDOFILE_SYMBOL, 0)

        def logfileGroupOptions(self):
            return self.getTypedRuleContext(MySQLParser.LogfileGroupOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateLogfileGroup" ):
                listener.enterCreateLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateLogfileGroup" ):
                listener.exitCreateLogfileGroup(self)




    def createLogfileGroup(self):

        localctx = MySQLParser.CreateLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_createLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            self.match(MySQLParser.LOGFILE_SYMBOL)
            self.state = 2137
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 2138
            self.logfileGroupName()
            self.state = 2139
            self.match(MySQLParser.ADD_SYMBOL)
            self.state = 2140
            _la = self._input.LA(1)
            if not(_la==MySQLParser.REDOFILE_SYMBOL or _la==MySQLParser.UNDOFILE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2141
            self.textLiteral()
            self.state = 2143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.COMMENT_SYMBOL or _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.INITIAL_SIZE_SYMBOL or _la==MySQLParser.NODEGROUP_SYMBOL or _la==MySQLParser.NO_WAIT_SYMBOL or _la==MySQLParser.REDO_BUFFER_SIZE_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.UNDO_BUFFER_SIZE_SYMBOL or _la==MySQLParser.WAIT_SYMBOL:
                self.state = 2142
                self.logfileGroupOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.LogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.LogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_logfileGroupOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupOptions" ):
                listener.enterLogfileGroupOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupOptions" ):
                listener.exitLogfileGroupOptions(self)




    def logfileGroupOptions(self):

        localctx = MySQLParser.LogfileGroupOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_logfileGroupOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2145
            self.logfileGroupOption()
            self.state = 2152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMENT_SYMBOL or _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.INITIAL_SIZE_SYMBOL or _la==MySQLParser.NODEGROUP_SYMBOL or _la==MySQLParser.NO_WAIT_SYMBOL or _la==MySQLParser.REDO_BUFFER_SIZE_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.UNDO_BUFFER_SIZE_SYMBOL or _la==MySQLParser.WAIT_SYMBOL or _la==MySQLParser.COMMA_SYMBOL:
                self.state = 2147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 2146
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 2149
                self.logfileGroupOption()
                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionInitialSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionInitialSizeContext,0)


        def tsOptionUndoRedoBufferSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionUndoRedoBufferSizeContext,0)


        def tsOptionNodegroup(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionNodegroupContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionWaitContext,0)


        def tsOptionComment(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionCommentContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_logfileGroupOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupOption" ):
                listener.enterLogfileGroupOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupOption" ):
                listener.exitLogfileGroupOption(self)




    def logfileGroupOption(self):

        localctx = MySQLParser.LogfileGroupOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_logfileGroupOption)
        try:
            self.state = 2161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.INITIAL_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2155
                self.tsOptionInitialSize()
                pass
            elif token in [MySQLParser.REDO_BUFFER_SIZE_SYMBOL, MySQLParser.UNDO_BUFFER_SIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2156
                self.tsOptionUndoRedoBufferSize()
                pass
            elif token in [MySQLParser.NODEGROUP_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2157
                self.tsOptionNodegroup()
                pass
            elif token in [MySQLParser.ENGINE_SYMBOL, MySQLParser.STORAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2158
                self.tsOptionEngine()
                pass
            elif token in [MySQLParser.NO_WAIT_SYMBOL, MySQLParser.WAIT_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2159
                self.tsOptionWait()
                pass
            elif token in [MySQLParser.COMMENT_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2160
                self.tsOptionComment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateServerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER_SYMBOL(self):
            return self.getToken(MySQLParser.SERVER_SYMBOL, 0)

        def serverName(self):
            return self.getTypedRuleContext(MySQLParser.ServerNameContext,0)


        def FOREIGN_SYMBOL(self):
            return self.getToken(MySQLParser.FOREIGN_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def WRAPPER_SYMBOL(self):
            return self.getToken(MySQLParser.WRAPPER_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def serverOptions(self):
            return self.getTypedRuleContext(MySQLParser.ServerOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateServer" ):
                listener.enterCreateServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateServer" ):
                listener.exitCreateServer(self)




    def createServer(self):

        localctx = MySQLParser.CreateServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_createServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2163
            self.match(MySQLParser.SERVER_SYMBOL)
            self.state = 2164
            self.serverName()
            self.state = 2165
            self.match(MySQLParser.FOREIGN_SYMBOL)
            self.state = 2166
            self.match(MySQLParser.DATA_SYMBOL)
            self.state = 2167
            self.match(MySQLParser.WRAPPER_SYMBOL)
            self.state = 2168
            self.textOrIdentifier()
            self.state = 2169
            self.serverOptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONS_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ServerOptionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_serverOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOptions" ):
                listener.enterServerOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOptions" ):
                listener.exitServerOptions(self)




    def serverOptions(self):

        localctx = MySQLParser.ServerOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_serverOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.match(MySQLParser.OPTIONS_SYMBOL)
            self.state = 2172
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2173
            self.serverOption()
            self.state = 2178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 2174
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 2175
                self.serverOption()
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2181
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def HOST_SYMBOL(self):
            return self.getToken(MySQLParser.HOST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def SOCKET_SYMBOL(self):
            return self.getToken(MySQLParser.SOCKET_SYMBOL, 0)

        def OWNER_SYMBOL(self):
            return self.getToken(MySQLParser.OWNER_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def PORT_SYMBOL(self):
            return self.getToken(MySQLParser.PORT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_serverOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOption" ):
                listener.enterServerOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOption" ):
                listener.exitServerOption(self)




    def serverOption(self):

        localctx = MySQLParser.ServerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_serverOption)
        try:
            self.state = 2197
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.HOST_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2183
                localctx.option = self.match(MySQLParser.HOST_SYMBOL)
                self.state = 2184
                self.textLiteral()
                pass
            elif token in [MySQLParser.DATABASE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2185
                localctx.option = self.match(MySQLParser.DATABASE_SYMBOL)
                self.state = 2186
                self.textLiteral()
                pass
            elif token in [MySQLParser.USER_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2187
                localctx.option = self.match(MySQLParser.USER_SYMBOL)
                self.state = 2188
                self.textLiteral()
                pass
            elif token in [MySQLParser.PASSWORD_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2189
                localctx.option = self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 2190
                self.textLiteral()
                pass
            elif token in [MySQLParser.SOCKET_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2191
                localctx.option = self.match(MySQLParser.SOCKET_SYMBOL)
                self.state = 2192
                self.textLiteral()
                pass
            elif token in [MySQLParser.OWNER_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2193
                localctx.option = self.match(MySQLParser.OWNER_SYMBOL)
                self.state = 2194
                self.textLiteral()
                pass
            elif token in [MySQLParser.PORT_SYMBOL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2195
                localctx.option = self.match(MySQLParser.PORT_SYMBOL)
                self.state = 2196
                self.ulong_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceName(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceNameContext,0)


        def tsDataFileName(self):
            return self.getTypedRuleContext(MySQLParser.TsDataFileNameContext,0)


        def USE_SYMBOL(self):
            return self.getToken(MySQLParser.USE_SYMBOL, 0)

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def logfileGroupRef(self):
            return self.getTypedRuleContext(MySQLParser.LogfileGroupRefContext,0)


        def tablespaceOptions(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespace" ):
                listener.enterCreateTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespace" ):
                listener.exitCreateTablespace(self)




    def createTablespace(self):

        localctx = MySQLParser.CreateTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_createTablespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2199
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 2200
            self.tablespaceName()
            self.state = 2201
            self.tsDataFileName()
            self.state = 2206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 2202
                self.match(MySQLParser.USE_SYMBOL)
                self.state = 2203
                self.match(MySQLParser.LOGFILE_SYMBOL)
                self.state = 2204
                self.match(MySQLParser.GROUP_SYMBOL)
                self.state = 2205
                self.logfileGroupRef()


            self.state = 2209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 2208
                self.tablespaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUndoTablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDO_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceName(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceNameContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def tsDataFile(self):
            return self.getTypedRuleContext(MySQLParser.TsDataFileContext,0)


        def undoTableSpaceOptions(self):
            return self.getTypedRuleContext(MySQLParser.UndoTableSpaceOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createUndoTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUndoTablespace" ):
                listener.enterCreateUndoTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUndoTablespace" ):
                listener.exitCreateUndoTablespace(self)




    def createUndoTablespace(self):

        localctx = MySQLParser.CreateUndoTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_createUndoTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            self.match(MySQLParser.UNDO_SYMBOL)
            self.state = 2212
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 2213
            self.tablespaceName()
            self.state = 2214
            self.match(MySQLParser.ADD_SYMBOL)
            self.state = 2215
            self.tsDataFile()
            self.state = 2217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL:
                self.state = 2216
                self.undoTableSpaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsDataFileNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def tsDataFile(self):
            return self.getTypedRuleContext(MySQLParser.TsDataFileContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tsDataFileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsDataFileName" ):
                listener.enterTsDataFileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsDataFileName" ):
                listener.exitTsDataFileName(self)




    def tsDataFileName(self):

        localctx = MySQLParser.TsDataFileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_tsDataFileName)
        try:
            self.state = 2226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2219
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 2222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 2220
                    self.match(MySQLParser.ADD_SYMBOL)
                    self.state = 2221
                    self.tsDataFile()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2224
                self.match(MySQLParser.ADD_SYMBOL)
                self.state = 2225
                self.tsDataFile()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsDataFileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATAFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DATAFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tsDataFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsDataFile" ):
                listener.enterTsDataFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsDataFile" ):
                listener.exitTsDataFile(self)




    def tsDataFile(self):

        localctx = MySQLParser.TsDataFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_tsDataFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2228
            self.match(MySQLParser.DATAFILE_SYMBOL)
            self.state = 2229
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tablespaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TablespaceOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TablespaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tablespaceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceOptions" ):
                listener.enterTablespaceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceOptions" ):
                listener.exitTablespaceOptions(self)




    def tablespaceOptions(self):

        localctx = MySQLParser.TablespaceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tablespaceOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2231
            self.tablespaceOption()
            self.state = 2238
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2233
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 2232
                        self.match(MySQLParser.COMMA_SYMBOL)


                    self.state = 2235
                    self.tablespaceOption() 
                self.state = 2240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionInitialSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionInitialSizeContext,0)


        def tsOptionAutoextendSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionAutoextendSizeContext,0)


        def tsOptionMaxSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionMaxSizeContext,0)


        def tsOptionExtentSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionExtentSizeContext,0)


        def tsOptionNodegroup(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionNodegroupContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionWaitContext,0)


        def tsOptionComment(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionCommentContext,0)


        def tsOptionFileblockSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionFileblockSizeContext,0)


        def tsOptionEncryption(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEncryptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tablespaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceOption" ):
                listener.enterTablespaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceOption" ):
                listener.exitTablespaceOption(self)




    def tablespaceOption(self):

        localctx = MySQLParser.TablespaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_tablespaceOption)
        try:
            self.state = 2253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2241
                self.tsOptionInitialSize()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2242
                self.tsOptionAutoextendSize()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2243
                self.tsOptionMaxSize()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2244
                self.tsOptionExtentSize()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2245
                self.tsOptionNodegroup()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2246
                self.tsOptionEngine()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2247
                self.tsOptionWait()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2248
                self.tsOptionComment()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2249
                if not serverVersion >= 50707:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50707")
                self.state = 2250
                self.tsOptionFileblockSize()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2251
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 2252
                self.tsOptionEncryption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionInitialSizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionInitialSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionInitialSize" ):
                listener.enterTsOptionInitialSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionInitialSize" ):
                listener.exitTsOptionInitialSize(self)




    def tsOptionInitialSize(self):

        localctx = MySQLParser.TsOptionInitialSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_tsOptionInitialSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            self.match(MySQLParser.INITIAL_SIZE_SYMBOL)
            self.state = 2257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 2256
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2259
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionUndoRedoBufferSizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def UNDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0)

        def REDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionUndoRedoBufferSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionUndoRedoBufferSize" ):
                listener.enterTsOptionUndoRedoBufferSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionUndoRedoBufferSize" ):
                listener.exitTsOptionUndoRedoBufferSize(self)




    def tsOptionUndoRedoBufferSize(self):

        localctx = MySQLParser.TsOptionUndoRedoBufferSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_tsOptionUndoRedoBufferSize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2261
            _la = self._input.LA(1)
            if not(_la==MySQLParser.REDO_BUFFER_SIZE_SYMBOL or _la==MySQLParser.UNDO_BUFFER_SIZE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 2262
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2265
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionAutoextendSizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTOEXTEND_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionAutoextendSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionAutoextendSize" ):
                listener.enterTsOptionAutoextendSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionAutoextendSize" ):
                listener.exitTsOptionAutoextendSize(self)




    def tsOptionAutoextendSize(self):

        localctx = MySQLParser.TsOptionAutoextendSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_tsOptionAutoextendSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2267
            self.match(MySQLParser.AUTOEXTEND_SIZE_SYMBOL)
            self.state = 2269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 2268
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2271
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionMaxSizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionMaxSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionMaxSize" ):
                listener.enterTsOptionMaxSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionMaxSize" ):
                listener.exitTsOptionMaxSize(self)




    def tsOptionMaxSize(self):

        localctx = MySQLParser.TsOptionMaxSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_tsOptionMaxSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2273
            self.match(MySQLParser.MAX_SIZE_SYMBOL)
            self.state = 2275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 2274
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2277
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionExtentSizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENT_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionExtentSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionExtentSize" ):
                listener.enterTsOptionExtentSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionExtentSize" ):
                listener.exitTsOptionExtentSize(self)




    def tsOptionExtentSize(self):

        localctx = MySQLParser.TsOptionExtentSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_tsOptionExtentSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2279
            self.match(MySQLParser.EXTENT_SIZE_SYMBOL)
            self.state = 2281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 2280
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2283
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionNodegroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODEGROUP_SYMBOL(self):
            return self.getToken(MySQLParser.NODEGROUP_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionNodegroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionNodegroup" ):
                listener.enterTsOptionNodegroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionNodegroup" ):
                listener.exitTsOptionNodegroup(self)




    def tsOptionNodegroup(self):

        localctx = MySQLParser.TsOptionNodegroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_tsOptionNodegroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2285
            self.match(MySQLParser.NODEGROUP_SYMBOL)
            self.state = 2287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.EQUAL_OPERATOR:
                self.state = 2286
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2289
            self.real_ulong_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionEngineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def engineRef(self):
            return self.getTypedRuleContext(MySQLParser.EngineRefContext,0)


        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionEngine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionEngine" ):
                listener.enterTsOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionEngine" ):
                listener.exitTsOptionEngine(self)




    def tsOptionEngine(self):

        localctx = MySQLParser.TsOptionEngineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_tsOptionEngine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.STORAGE_SYMBOL:
                self.state = 2291
                self.match(MySQLParser.STORAGE_SYMBOL)


            self.state = 2294
            self.match(MySQLParser.ENGINE_SYMBOL)
            self.state = 2296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 2295
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2298
            self.engineRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionWaitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.WAIT_SYMBOL, 0)

        def NO_WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NO_WAIT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionWait

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionWait" ):
                listener.enterTsOptionWait(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionWait" ):
                listener.exitTsOptionWait(self)




    def tsOptionWait(self):

        localctx = MySQLParser.TsOptionWaitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_tsOptionWait)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2300
            _la = self._input.LA(1)
            if not(_la==MySQLParser.NO_WAIT_SYMBOL or _la==MySQLParser.WAIT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionCommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionComment" ):
                listener.enterTsOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionComment" ):
                listener.exitTsOptionComment(self)




    def tsOptionComment(self):

        localctx = MySQLParser.TsOptionCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_tsOptionComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2302
            self.match(MySQLParser.COMMENT_SYMBOL)
            self.state = 2304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 2303
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2306
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionFileblockSizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionFileblockSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionFileblockSize" ):
                listener.enterTsOptionFileblockSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionFileblockSize" ):
                listener.exitTsOptionFileblockSize(self)




    def tsOptionFileblockSize(self):

        localctx = MySQLParser.TsOptionFileblockSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_tsOptionFileblockSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2308
            self.match(MySQLParser.FILE_BLOCK_SIZE_SYMBOL)
            self.state = 2310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 2309
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2312
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionEncryptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionEncryption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionEncryption" ):
                listener.enterTsOptionEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionEncryption" ):
                listener.exitTsOptionEncryption(self)




    def tsOptionEncryption(self):

        localctx = MySQLParser.TsOptionEncryptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_tsOptionEncryption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self.match(MySQLParser.ENCRYPTION_SYMBOL)
            self.state = 2316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 2315
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2318
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def viewName(self):
            return self.getTypedRuleContext(MySQLParser.ViewNameContext,0)


        def viewTail(self):
            return self.getTypedRuleContext(MySQLParser.ViewTailContext,0)


        def viewReplaceOrAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.ViewReplaceOrAlgorithmContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def viewSuid(self):
            return self.getTypedRuleContext(MySQLParser.ViewSuidContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)




    def createView(self):

        localctx = MySQLParser.CreateViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_createView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ALGORITHM_SYMBOL or _la==MySQLParser.OR_SYMBOL:
                self.state = 2320
                self.viewReplaceOrAlgorithm()


            self.state = 2324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DEFINER_SYMBOL:
                self.state = 2323
                self.definerClause()


            self.state = 2327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.SQL_SYMBOL:
                self.state = 2326
                self.viewSuid()


            self.state = 2329
            self.match(MySQLParser.VIEW_SYMBOL)
            self.state = 2330
            self.viewName()
            self.state = 2331
            self.viewTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewReplaceOrAlgorithmContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR_SYMBOL(self):
            return self.getToken(MySQLParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def viewAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.ViewAlgorithmContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_viewReplaceOrAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewReplaceOrAlgorithm" ):
                listener.enterViewReplaceOrAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewReplaceOrAlgorithm" ):
                listener.exitViewReplaceOrAlgorithm(self)




    def viewReplaceOrAlgorithm(self):

        localctx = MySQLParser.ViewReplaceOrAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_viewReplaceOrAlgorithm)
        self._la = 0 # Token type
        try:
            self.state = 2339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.OR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2333
                self.match(MySQLParser.OR_SYMBOL)
                self.state = 2334
                self.match(MySQLParser.REPLACE_SYMBOL)
                self.state = 2336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ALGORITHM_SYMBOL:
                    self.state = 2335
                    self.viewAlgorithm()


                pass
            elif token in [MySQLParser.ALGORITHM_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2338
                self.viewAlgorithm()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewAlgorithmContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algorithm = None # Token

        def ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def UNDEFINED_SYMBOL(self):
            return self.getToken(MySQLParser.UNDEFINED_SYMBOL, 0)

        def MERGE_SYMBOL(self):
            return self.getToken(MySQLParser.MERGE_SYMBOL, 0)

        def TEMPTABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_viewAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewAlgorithm" ):
                listener.enterViewAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewAlgorithm" ):
                listener.exitViewAlgorithm(self)




    def viewAlgorithm(self):

        localctx = MySQLParser.ViewAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_viewAlgorithm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self.match(MySQLParser.ALGORITHM_SYMBOL)
            self.state = 2342
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 2343
            localctx.algorithm = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySQLParser.MERGE_SYMBOL or _la==MySQLParser.TEMPTABLE_SYMBOL or _la==MySQLParser.UNDEFINED_SYMBOL):
                localctx.algorithm = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewSuidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(MySQLParser.SECURITY_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINER_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(MySQLParser.INVOKER_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_viewSuid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewSuid" ):
                listener.enterViewSuid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewSuid" ):
                listener.exitViewSuid(self)




    def viewSuid(self):

        localctx = MySQLParser.ViewSuidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_viewSuid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2345
            self.match(MySQLParser.SQL_SYMBOL)
            self.state = 2346
            self.match(MySQLParser.SECURITY_SYMBOL)
            self.state = 2347
            _la = self._input.LA(1)
            if not(_la==MySQLParser.DEFINER_SYMBOL or _la==MySQLParser.INVOKER_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTriggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.timing = None # Token
            self.event = None # Token

        def TRIGGER_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGER_SYMBOL, 0)

        def triggerName(self):
            return self.getTypedRuleContext(MySQLParser.TriggerNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def EACH_SYMBOL(self):
            return self.getToken(MySQLParser.EACH_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def BEFORE_SYMBOL(self):
            return self.getToken(MySQLParser.BEFORE_SYMBOL, 0)

        def AFTER_SYMBOL(self):
            return self.getToken(MySQLParser.AFTER_SYMBOL, 0)

        def INSERT_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MySQLParser.DELETE_SYMBOL, 0)

        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def triggerFollowsPrecedesClause(self):
            return self.getTypedRuleContext(MySQLParser.TriggerFollowsPrecedesClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTrigger" ):
                listener.enterCreateTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTrigger" ):
                listener.exitCreateTrigger(self)




    def createTrigger(self):

        localctx = MySQLParser.CreateTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_createTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DEFINER_SYMBOL:
                self.state = 2349
                self.definerClause()


            self.state = 2352
            self.match(MySQLParser.TRIGGER_SYMBOL)
            self.state = 2353
            self.triggerName()
            self.state = 2354
            localctx.timing = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySQLParser.AFTER_SYMBOL or _la==MySQLParser.BEFORE_SYMBOL):
                localctx.timing = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2355
            localctx.event = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySQLParser.DELETE_SYMBOL or _la==MySQLParser.INSERT_SYMBOL or _la==MySQLParser.UPDATE_SYMBOL):
                localctx.event = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2356
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 2357
            self.tableRef()
            self.state = 2358
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 2359
            self.match(MySQLParser.EACH_SYMBOL)
            self.state = 2360
            self.match(MySQLParser.ROW_SYMBOL)
            self.state = 2362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 2361
                self.triggerFollowsPrecedesClause()


            self.state = 2364
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerFollowsPrecedesClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def FOLLOWS_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWS_SYMBOL, 0)

        def PRECEDES_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDES_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_triggerFollowsPrecedesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerFollowsPrecedesClause" ):
                listener.enterTriggerFollowsPrecedesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerFollowsPrecedesClause" ):
                listener.exitTriggerFollowsPrecedesClause(self)




    def triggerFollowsPrecedesClause(self):

        localctx = MySQLParser.TriggerFollowsPrecedesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_triggerFollowsPrecedesClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            if not serverVersion >= 50700:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50700")
            self.state = 2367
            localctx.ordering = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySQLParser.FOLLOWS_SYMBOL or _la==MySQLParser.PRECEDES_SYMBOL):
                localctx.ordering = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2368
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateEventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def eventName(self):
            return self.getTypedRuleContext(MySQLParser.EventNameContext,0)


        def ON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ON_SYMBOL)
            else:
                return self.getToken(MySQLParser.ON_SYMBOL, i)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEDULE_SYMBOL, 0)

        def schedule(self):
            return self.getTypedRuleContext(MySQLParser.ScheduleContext,0)


        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def COMPLETION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPLETION_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(MySQLParser.PRESERVE_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_createEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateEvent" ):
                listener.enterCreateEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateEvent" ):
                listener.exitCreateEvent(self)




    def createEvent(self):

        localctx = MySQLParser.CreateEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_createEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DEFINER_SYMBOL:
                self.state = 2370
                self.definerClause()


            self.state = 2373
            self.match(MySQLParser.EVENT_SYMBOL)
            self.state = 2375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 2374
                self.ifNotExists()


            self.state = 2377
            self.eventName()
            self.state = 2378
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 2379
            self.match(MySQLParser.SCHEDULE_SYMBOL)
            self.state = 2380
            self.schedule()
            self.state = 2387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ON_SYMBOL:
                self.state = 2381
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 2382
                self.match(MySQLParser.COMPLETION_SYMBOL)
                self.state = 2384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NOT_SYMBOL:
                    self.state = 2383
                    self.match(MySQLParser.NOT_SYMBOL)


                self.state = 2386
                self.match(MySQLParser.PRESERVE_SYMBOL)


            self.state = 2395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.ENABLE_SYMBOL]:
                self.state = 2389
                self.match(MySQLParser.ENABLE_SYMBOL)
                pass
            elif token in [MySQLParser.DISABLE_SYMBOL]:
                self.state = 2390
                self.match(MySQLParser.DISABLE_SYMBOL)
                self.state = 2393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ON_SYMBOL:
                    self.state = 2391
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 2392
                    self.match(MySQLParser.SLAVE_SYMBOL)


                pass
            elif token in [MySQLParser.COMMENT_SYMBOL, MySQLParser.DO_SYMBOL]:
                pass
            else:
                pass
            self.state = 2399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.COMMENT_SYMBOL:
                self.state = 2397
                self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 2398
                self.textLiteral()


            self.state = 2401
            self.match(MySQLParser.DO_SYMBOL)
            self.state = 2402
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)




    def createRole(self):

        localctx = MySQLParser.CreateRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_createRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2404
            self.match(MySQLParser.ROLE_SYMBOL)
            self.state = 2406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 2405
                self.ifNotExists()


            self.state = 2408
            self.roleList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateSpatialReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR_SYMBOL(self):
            return self.getToken(MySQLParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def SPATIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SPATIAL_SYMBOL, 0)

        def REFERENCE_SYMBOL(self):
            return self.getToken(MySQLParser.REFERENCE_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(MySQLParser.SYSTEM_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def srsAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SrsAttributeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SrsAttributeContext,i)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createSpatialReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSpatialReference" ):
                listener.enterCreateSpatialReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSpatialReference" ):
                listener.exitCreateSpatialReference(self)




    def createSpatialReference(self):

        localctx = MySQLParser.CreateSpatialReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_createSpatialReference)
        self._la = 0 # Token type
        try:
            self.state = 2435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.OR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2410
                self.match(MySQLParser.OR_SYMBOL)
                self.state = 2411
                self.match(MySQLParser.REPLACE_SYMBOL)
                self.state = 2412
                self.match(MySQLParser.SPATIAL_SYMBOL)
                self.state = 2413
                self.match(MySQLParser.REFERENCE_SYMBOL)
                self.state = 2414
                self.match(MySQLParser.SYSTEM_SYMBOL)
                self.state = 2415
                self.real_ulonglong_number()
                self.state = 2419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.NAME_SYMBOL or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySQLParser.DEFINITION_SYMBOL - 715)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 715)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 715)))) != 0):
                    self.state = 2416
                    self.srsAttribute()
                    self.state = 2421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySQLParser.SPATIAL_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2422
                self.match(MySQLParser.SPATIAL_SYMBOL)
                self.state = 2423
                self.match(MySQLParser.REFERENCE_SYMBOL)
                self.state = 2424
                self.match(MySQLParser.SYSTEM_SYMBOL)
                self.state = 2426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 2425
                    self.ifNotExists()


                self.state = 2428
                self.real_ulonglong_number()
                self.state = 2432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.NAME_SYMBOL or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySQLParser.DEFINITION_SYMBOL - 715)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 715)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 715)))) != 0):
                    self.state = 2429
                    self.srsAttribute()
                    self.state = 2434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SrsAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME_SYMBOL(self):
            return self.getToken(MySQLParser.NAME_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.TEXT_SYMBOL, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def DEFINITION_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINITION_SYMBOL, 0)

        def ORGANIZATION_SYMBOL(self):
            return self.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def DESCRIPTION_SYMBOL(self):
            return self.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_srsAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSrsAttribute" ):
                listener.enterSrsAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSrsAttribute" ):
                listener.exitSrsAttribute(self)




    def srsAttribute(self):

        localctx = MySQLParser.SrsAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_srsAttribute)
        try:
            self.state = 2452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.NAME_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2437
                self.match(MySQLParser.NAME_SYMBOL)
                self.state = 2438
                self.match(MySQLParser.TEXT_SYMBOL)
                self.state = 2439
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.DEFINITION_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2440
                self.match(MySQLParser.DEFINITION_SYMBOL)
                self.state = 2441
                self.match(MySQLParser.TEXT_SYMBOL)
                self.state = 2442
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.ORGANIZATION_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2443
                self.match(MySQLParser.ORGANIZATION_SYMBOL)
                self.state = 2444
                self.textStringNoLinebreak()
                self.state = 2445
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 2446
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 2447
                self.real_ulonglong_number()
                pass
            elif token in [MySQLParser.DESCRIPTION_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2449
                self.match(MySQLParser.DESCRIPTION_SYMBOL)
                self.state = 2450
                self.match(MySQLParser.TEXT_SYMBOL)
                self.state = 2451
                self.textStringNoLinebreak()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def dropDatabase(self):
            return self.getTypedRuleContext(MySQLParser.DropDatabaseContext,0)


        def dropEvent(self):
            return self.getTypedRuleContext(MySQLParser.DropEventContext,0)


        def dropFunction(self):
            return self.getTypedRuleContext(MySQLParser.DropFunctionContext,0)


        def dropProcedure(self):
            return self.getTypedRuleContext(MySQLParser.DropProcedureContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(MySQLParser.DropIndexContext,0)


        def dropLogfileGroup(self):
            return self.getTypedRuleContext(MySQLParser.DropLogfileGroupContext,0)


        def dropServer(self):
            return self.getTypedRuleContext(MySQLParser.DropServerContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(MySQLParser.DropTableContext,0)


        def dropTableSpace(self):
            return self.getTypedRuleContext(MySQLParser.DropTableSpaceContext,0)


        def dropTrigger(self):
            return self.getTypedRuleContext(MySQLParser.DropTriggerContext,0)


        def dropView(self):
            return self.getTypedRuleContext(MySQLParser.DropViewContext,0)


        def dropRole(self):
            return self.getTypedRuleContext(MySQLParser.DropRoleContext,0)


        def dropSpatialReference(self):
            return self.getTypedRuleContext(MySQLParser.DropSpatialReferenceContext,0)


        def dropUndoTablespace(self):
            return self.getTypedRuleContext(MySQLParser.DropUndoTablespaceContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropStatement" ):
                listener.enterDropStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropStatement" ):
                listener.exitDropStatement(self)




    def dropStatement(self):

        localctx = MySQLParser.DropStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_dropStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2454
            self.match(MySQLParser.DROP_SYMBOL)
            self.state = 2472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 2455
                self.dropDatabase()
                pass

            elif la_ == 2:
                self.state = 2456
                self.dropEvent()
                pass

            elif la_ == 3:
                self.state = 2457
                self.dropFunction()
                pass

            elif la_ == 4:
                self.state = 2458
                self.dropProcedure()
                pass

            elif la_ == 5:
                self.state = 2459
                self.dropIndex()
                pass

            elif la_ == 6:
                self.state = 2460
                self.dropLogfileGroup()
                pass

            elif la_ == 7:
                self.state = 2461
                self.dropServer()
                pass

            elif la_ == 8:
                self.state = 2462
                self.dropTable()
                pass

            elif la_ == 9:
                self.state = 2463
                self.dropTableSpace()
                pass

            elif la_ == 10:
                self.state = 2464
                self.dropTrigger()
                pass

            elif la_ == 11:
                self.state = 2465
                self.dropView()
                pass

            elif la_ == 12:
                self.state = 2466
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 2467
                self.dropRole()
                pass

            elif la_ == 13:
                self.state = 2468
                if not serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80011")
                self.state = 2469
                self.dropSpatialReference()
                pass

            elif la_ == 14:
                self.state = 2470
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 2471
                self.dropUndoTablespace()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(MySQLParser.SchemaRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)




    def dropDatabase(self):

        localctx = MySQLParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_dropDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2474
            self.match(MySQLParser.DATABASE_SYMBOL)
            self.state = 2476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 2475
                self.ifExists()


            self.state = 2478
            self.schemaRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropEventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def eventRef(self):
            return self.getTypedRuleContext(MySQLParser.EventRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropEvent" ):
                listener.enterDropEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropEvent" ):
                listener.exitDropEvent(self)




    def dropEvent(self):

        localctx = MySQLParser.DropEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_dropEvent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2480
            self.match(MySQLParser.EVENT_SYMBOL)
            self.state = 2482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 2481
                self.ifExists()


            self.state = 2484
            self.eventRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def functionRef(self):
            return self.getTypedRuleContext(MySQLParser.FunctionRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)




    def dropFunction(self):

        localctx = MySQLParser.DropFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_dropFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2486
            self.match(MySQLParser.FUNCTION_SYMBOL)
            self.state = 2488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 2487
                self.ifExists()


            self.state = 2490
            self.functionRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropProcedure" ):
                listener.enterDropProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropProcedure" ):
                listener.exitDropProcedure(self)




    def dropProcedure(self):

        localctx = MySQLParser.DropProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_dropProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2492
            self.match(MySQLParser.PROCEDURE_SYMBOL)
            self.state = 2494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 2493
                self.ifExists()


            self.state = 2496
            self.procedureRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def indexRef(self):
            return self.getTypedRuleContext(MySQLParser.IndexRefContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def onlineOption(self):
            return self.getTypedRuleContext(MySQLParser.OnlineOptionContext,0)


        def indexLockAndAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.IndexLockAndAlgorithmContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)




    def dropIndex(self):

        localctx = MySQLParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_dropIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OFFLINE_SYMBOL or _la==MySQLParser.ONLINE_SYMBOL:
                self.state = 2498
                self.onlineOption()


            self.state = 2501
            localctx.type_expression = self.match(MySQLParser.INDEX_SYMBOL)
            self.state = 2502
            self.indexRef()
            self.state = 2503
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 2504
            self.tableRef()
            self.state = 2506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ALGORITHM_SYMBOL or _la==MySQLParser.LOCK_SYMBOL:
                self.state = 2505
                self.indexLockAndAlgorithm()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def logfileGroupRef(self):
            return self.getTypedRuleContext(MySQLParser.LogfileGroupRefContext,0)


        def dropLogfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DropLogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DropLogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_dropLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroup" ):
                listener.enterDropLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroup" ):
                listener.exitDropLogfileGroup(self)




    def dropLogfileGroup(self):

        localctx = MySQLParser.DropLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_dropLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2508
            self.match(MySQLParser.LOGFILE_SYMBOL)
            self.state = 2509
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 2510
            self.logfileGroupRef()
            self.state = 2521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.NO_WAIT_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.WAIT_SYMBOL:
                self.state = 2511
                self.dropLogfileGroupOption()
                self.state = 2518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.NO_WAIT_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.WAIT_SYMBOL or _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 2513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.COMMA_SYMBOL:
                        self.state = 2512
                        self.match(MySQLParser.COMMA_SYMBOL)


                    self.state = 2515
                    self.dropLogfileGroupOption()
                    self.state = 2520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionWait(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionWaitContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropLogfileGroupOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroupOption" ):
                listener.enterDropLogfileGroupOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroupOption" ):
                listener.exitDropLogfileGroupOption(self)




    def dropLogfileGroupOption(self):

        localctx = MySQLParser.DropLogfileGroupOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_dropLogfileGroupOption)
        try:
            self.state = 2525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.NO_WAIT_SYMBOL, MySQLParser.WAIT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2523
                self.tsOptionWait()
                pass
            elif token in [MySQLParser.ENGINE_SYMBOL, MySQLParser.STORAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2524
                self.tsOptionEngine()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropServerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER_SYMBOL(self):
            return self.getToken(MySQLParser.SERVER_SYMBOL, 0)

        def serverRef(self):
            return self.getTypedRuleContext(MySQLParser.ServerRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropServer" ):
                listener.enterDropServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropServer" ):
                listener.exitDropServer(self)




    def dropServer(self):

        localctx = MySQLParser.DropServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_dropServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2527
            self.match(MySQLParser.SERVER_SYMBOL)
            self.state = 2529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 2528
                self.ifExists()


            self.state = 2531
            self.serverRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def tableRefList(self):
            return self.getTypedRuleContext(MySQLParser.TableRefListContext,0)


        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPORARY_SYMBOL, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def RESTRICT_SYMBOL(self):
            return self.getToken(MySQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)




    def dropTable(self):

        localctx = MySQLParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.TEMPORARY_SYMBOL:
                self.state = 2533
                self.match(MySQLParser.TEMPORARY_SYMBOL)


            self.state = 2536
            localctx.type_expression = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySQLParser.TABLES_SYMBOL or _la==MySQLParser.TABLE_SYMBOL):
                localctx.type_expression = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 2537
                self.ifExists()


            self.state = 2540
            self.tableRefList()
            self.state = 2542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.CASCADE_SYMBOL or _la==MySQLParser.RESTRICT_SYMBOL:
                self.state = 2541
                _la = self._input.LA(1)
                if not(_la==MySQLParser.CASCADE_SYMBOL or _la==MySQLParser.RESTRICT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableSpaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceRefContext,0)


        def dropLogfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DropLogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DropLogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_dropTableSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableSpace" ):
                listener.enterDropTableSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableSpace" ):
                listener.exitDropTableSpace(self)




    def dropTableSpace(self):

        localctx = MySQLParser.DropTableSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_dropTableSpace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2544
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 2545
            self.tablespaceRef()
            self.state = 2556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.NO_WAIT_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.WAIT_SYMBOL:
                self.state = 2546
                self.dropLogfileGroupOption()
                self.state = 2553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.NO_WAIT_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.WAIT_SYMBOL or _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 2548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.COMMA_SYMBOL:
                        self.state = 2547
                        self.match(MySQLParser.COMMA_SYMBOL)


                    self.state = 2550
                    self.dropLogfileGroupOption()
                    self.state = 2555
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTriggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIGGER_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGER_SYMBOL, 0)

        def triggerRef(self):
            return self.getTypedRuleContext(MySQLParser.TriggerRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTrigger" ):
                listener.enterDropTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTrigger" ):
                listener.exitDropTrigger(self)




    def dropTrigger(self):

        localctx = MySQLParser.DropTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_dropTrigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2558
            self.match(MySQLParser.TRIGGER_SYMBOL)
            self.state = 2560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 2559
                self.ifExists()


            self.state = 2562
            self.triggerRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def viewRefList(self):
            return self.getTypedRuleContext(MySQLParser.ViewRefListContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def RESTRICT_SYMBOL(self):
            return self.getToken(MySQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dropView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)




    def dropView(self):

        localctx = MySQLParser.DropViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_dropView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            self.match(MySQLParser.VIEW_SYMBOL)
            self.state = 2566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 2565
                self.ifExists()


            self.state = 2568
            self.viewRefList()
            self.state = 2570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.CASCADE_SYMBOL or _la==MySQLParser.RESTRICT_SYMBOL:
                self.state = 2569
                _la = self._input.LA(1)
                if not(_la==MySQLParser.CASCADE_SYMBOL or _la==MySQLParser.RESTRICT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRoleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)




    def dropRole(self):

        localctx = MySQLParser.DropRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_dropRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2572
            self.match(MySQLParser.ROLE_SYMBOL)
            self.state = 2574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 2573
                self.ifExists()


            self.state = 2576
            self.roleList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropSpatialReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPATIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SPATIAL_SYMBOL, 0)

        def REFERENCE_SYMBOL(self):
            return self.getToken(MySQLParser.REFERENCE_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(MySQLParser.SYSTEM_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropSpatialReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSpatialReference" ):
                listener.enterDropSpatialReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSpatialReference" ):
                listener.exitDropSpatialReference(self)




    def dropSpatialReference(self):

        localctx = MySQLParser.DropSpatialReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_dropSpatialReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2578
            self.match(MySQLParser.SPATIAL_SYMBOL)
            self.state = 2579
            self.match(MySQLParser.REFERENCE_SYMBOL)
            self.state = 2580
            self.match(MySQLParser.SYSTEM_SYMBOL)
            self.state = 2582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 2581
                self.ifExists()


            self.state = 2584
            self.real_ulonglong_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUndoTablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDO_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceRefContext,0)


        def undoTableSpaceOptions(self):
            return self.getTypedRuleContext(MySQLParser.UndoTableSpaceOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropUndoTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUndoTablespace" ):
                listener.enterDropUndoTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUndoTablespace" ):
                listener.exitDropUndoTablespace(self)




    def dropUndoTablespace(self):

        localctx = MySQLParser.DropUndoTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_dropUndoTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586
            self.match(MySQLParser.UNDO_SYMBOL)
            self.state = 2587
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 2588
            self.tablespaceRef()
            self.state = 2590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.STORAGE_SYMBOL:
                self.state = 2589
                self.undoTableSpaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME_SYMBOL(self):
            return self.getToken(MySQLParser.RENAME_SYMBOL, 0)

        def renamePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RenamePairContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RenamePairContext,i)


        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_renameTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableStatement" ):
                listener.enterRenameTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableStatement" ):
                listener.exitRenameTableStatement(self)




    def renameTableStatement(self):

        localctx = MySQLParser.RenameTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_renameTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2592
            self.match(MySQLParser.RENAME_SYMBOL)
            self.state = 2593
            _la = self._input.LA(1)
            if not(_la==MySQLParser.TABLES_SYMBOL or _la==MySQLParser.TABLE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2594
            self.renamePair()
            self.state = 2599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 2595
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 2596
                self.renamePair()
                self.state = 2601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenamePairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySQLParser.TableNameContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_renamePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenamePair" ):
                listener.enterRenamePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenamePair" ):
                listener.exitRenamePair(self)




    def renamePair(self):

        localctx = MySQLParser.RenamePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_renamePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2602
            self.tableRef()
            self.state = 2603
            self.match(MySQLParser.TO_SYMBOL)
            self.state = 2604
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUNCATE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_truncateTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTableStatement" ):
                listener.enterTruncateTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTableStatement" ):
                listener.exitTruncateTableStatement(self)




    def truncateTableStatement(self):

        localctx = MySQLParser.TruncateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_truncateTableStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self.match(MySQLParser.TRUNCATE_SYMBOL)
            self.state = 2608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 2607
                self.match(MySQLParser.TABLE_SYMBOL)


            self.state = 2610
            self.tableRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def textStringLiteralList(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)




    def importStatement(self):

        localctx = MySQLParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2612
            self.match(MySQLParser.IMPORT_SYMBOL)
            self.state = 2613
            self.match(MySQLParser.TABLE_SYMBOL)
            self.state = 2614
            self.match(MySQLParser.FROM_SYMBOL)
            self.state = 2615
            self.textStringLiteralList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL_SYMBOL(self):
            return self.getToken(MySQLParser.CALL_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureRefContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)




    def callStatement(self):

        localctx = MySQLParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_callStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2617
            self.match(MySQLParser.CALL_SYMBOL)
            self.state = 2618
            self.procedureRef()
            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OPEN_PAR_SYMBOL:
                self.state = 2619
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 2621
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 2620
                    self.exprList()


                self.state = 2623
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_SYMBOL(self):
            return self.getToken(MySQLParser.DELETE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def tableAliasRefList(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasRefListContext,0)


        def tableReferenceList(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListContext,0)


        def withClause(self):
            return self.getTypedRuleContext(MySQLParser.WithClauseContext,0)


        def deleteStatementOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DeleteStatementOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DeleteStatementOptionContext,i)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def partitionDelete(self):
            return self.getTypedRuleContext(MySQLParser.PartitionDeleteContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(MySQLParser.OrderClauseContext,0)


        def simpleLimitClause(self):
            return self.getTypedRuleContext(MySQLParser.SimpleLimitClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = MySQLParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_deleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 2626
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 2627
                self.withClause()


            self.state = 2630
            self.match(MySQLParser.DELETE_SYMBOL)
            self.state = 2634
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2631
                    self.deleteStatementOption() 
                self.state = 2636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

            self.state = 2669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 2637
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 2661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 2638
                    self.tableAliasRefList()
                    self.state = 2639
                    self.match(MySQLParser.USING_SYMBOL)
                    self.state = 2640
                    self.tableReferenceList()
                    self.state = 2642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.WHERE_SYMBOL:
                        self.state = 2641
                        self.whereClause()


                    pass

                elif la_ == 2:
                    self.state = 2644
                    self.tableRef()
                    self.state = 2647
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                    if la_ == 1:
                        self.state = 2645
                        if not serverVersion >= 80017:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion >= 80017")
                        self.state = 2646
                        self.tableAlias()


                    self.state = 2650
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                    if la_ == 1:
                        self.state = 2649
                        self.partitionDelete()


                    self.state = 2653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.WHERE_SYMBOL:
                        self.state = 2652
                        self.whereClause()


                    self.state = 2656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.ORDER_SYMBOL:
                        self.state = 2655
                        self.orderClause()


                    self.state = 2659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.LIMIT_SYMBOL:
                        self.state = 2658
                        self.simpleLimitClause()


                    pass


                pass

            elif la_ == 2:
                self.state = 2663
                self.tableAliasRefList()
                self.state = 2664
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 2665
                self.tableReferenceList()
                self.state = 2667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 2666
                    self.whereClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDeleteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionDelete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDelete" ):
                listener.enterPartitionDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDelete" ):
                listener.exitPartitionDelete(self)




    def partitionDelete(self):

        localctx = MySQLParser.PartitionDeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_partitionDelete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2671
            if not serverVersion >= 50602:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50602")
            self.state = 2672
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 2673
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2674
            self.identifierList()
            self.state = 2675
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_deleteStatementOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatementOption" ):
                listener.enterDeleteStatementOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatementOption" ):
                listener.exitDeleteStatementOption(self)




    def deleteStatementOption(self):

        localctx = MySQLParser.DeleteStatementOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_deleteStatementOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2677
            _la = self._input.LA(1)
            if not(_la==MySQLParser.IGNORE_SYMBOL or _la==MySQLParser.LOW_PRIORITY_SYMBOL or _la==MySQLParser.QUICK_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def selectItemList(self):
            return self.getTypedRuleContext(MySQLParser.SelectItemListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = MySQLParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2679
            self.match(MySQLParser.DO_SYMBOL)
            self.state = 2684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 2680
                if not serverVersion < 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50709")
                self.state = 2681
                self.exprList()
                pass

            elif la_ == 2:
                self.state = 2682
                if not serverVersion >= 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50709")
                self.state = 2683
                self.selectItemList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER_SYMBOL(self):
            return self.getToken(MySQLParser.HANDLER_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def OPEN_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def CLOSE_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def handlerReadOrScan(self):
            return self.getTypedRuleContext(MySQLParser.HandlerReadOrScanContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySQLParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_handlerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerStatement" ):
                listener.enterHandlerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerStatement" ):
                listener.exitHandlerStatement(self)




    def handlerStatement(self):

        localctx = MySQLParser.HandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_handlerStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2686
            self.match(MySQLParser.HANDLER_SYMBOL)
            self.state = 2704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 2687
                self.tableRef()
                self.state = 2688
                self.match(MySQLParser.OPEN_SYMBOL)
                self.state = 2690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 2689
                    self.tableAlias()


                pass

            elif la_ == 2:
                self.state = 2692
                self.identifier()
                self.state = 2702
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.CLOSE_SYMBOL]:
                    self.state = 2693
                    self.match(MySQLParser.CLOSE_SYMBOL)
                    pass
                elif token in [MySQLParser.READ_SYMBOL]:
                    self.state = 2694
                    self.match(MySQLParser.READ_SYMBOL)
                    self.state = 2695
                    self.handlerReadOrScan()
                    self.state = 2697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.WHERE_SYMBOL:
                        self.state = 2696
                        self.whereClause()


                    self.state = 2700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.LIMIT_SYMBOL:
                        self.state = 2699
                        self.limitClause()


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadOrScanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(MySQLParser.NEXT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def values(self):
            return self.getTypedRuleContext(MySQLParser.ValuesContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def PREV_SYMBOL(self):
            return self.getToken(MySQLParser.PREV_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def LESS_THAN_OPERATOR(self):
            return self.getToken(MySQLParser.LESS_THAN_OPERATOR, 0)

        def GREATER_THAN_OPERATOR(self):
            return self.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0)

        def LESS_OR_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0)

        def GREATER_OR_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_handlerReadOrScan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadOrScan" ):
                listener.enterHandlerReadOrScan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadOrScan" ):
                listener.exitHandlerReadOrScan(self)




    def handlerReadOrScan(self):

        localctx = MySQLParser.HandlerReadOrScanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_handlerReadOrScan)
        self._la = 0 # Token type
        try:
            self.state = 2716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2706
                _la = self._input.LA(1)
                if not(_la==MySQLParser.FIRST_SYMBOL or _la==MySQLParser.NEXT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2707
                self.identifier()
                self.state = 2714
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.FIRST_SYMBOL, MySQLParser.LAST_SYMBOL, MySQLParser.NEXT_SYMBOL, MySQLParser.PREV_SYMBOL]:
                    self.state = 2708
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.FIRST_SYMBOL or _la==MySQLParser.LAST_SYMBOL or _la==MySQLParser.NEXT_SYMBOL or _la==MySQLParser.PREV_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [MySQLParser.EQUAL_OPERATOR, MySQLParser.GREATER_OR_EQUAL_OPERATOR, MySQLParser.GREATER_THAN_OPERATOR, MySQLParser.LESS_OR_EQUAL_OPERATOR, MySQLParser.LESS_THAN_OPERATOR]:
                    self.state = 2709
                    _la = self._input.LA(1)
                    if not(((((_la - 750)) & ~0x3f) == 0 and ((1 << (_la - 750)) & ((1 << (MySQLParser.EQUAL_OPERATOR - 750)) | (1 << (MySQLParser.GREATER_OR_EQUAL_OPERATOR - 750)) | (1 << (MySQLParser.GREATER_THAN_OPERATOR - 750)) | (1 << (MySQLParser.LESS_OR_EQUAL_OPERATOR - 750)) | (1 << (MySQLParser.LESS_THAN_OPERATOR - 750)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2710
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 2711
                    self.values()
                    self.state = 2712
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def insertFromConstructor(self):
            return self.getTypedRuleContext(MySQLParser.InsertFromConstructorContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(MySQLParser.UpdateListContext,0)


        def insertQueryExpression(self):
            return self.getTypedRuleContext(MySQLParser.InsertQueryExpressionContext,0)


        def insertLockOption(self):
            return self.getTypedRuleContext(MySQLParser.InsertLockOptionContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def usePartition(self):
            return self.getTypedRuleContext(MySQLParser.UsePartitionContext,0)


        def insertUpdateList(self):
            return self.getTypedRuleContext(MySQLParser.InsertUpdateListContext,0)


        def valuesReference(self):
            return self.getTypedRuleContext(MySQLParser.ValuesReferenceContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = MySQLParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2718
            self.match(MySQLParser.INSERT_SYMBOL)
            self.state = 2720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 2719
                self.insertLockOption()


            self.state = 2723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 2722
                self.match(MySQLParser.IGNORE_SYMBOL)


            self.state = 2726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 2725
                self.match(MySQLParser.INTO_SYMBOL)


            self.state = 2728
            self.tableRef()
            self.state = 2730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 2729
                self.usePartition()


            self.state = 2744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 2732
                self.insertFromConstructor()
                self.state = 2735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 2733
                    if not  serverVersion >= 80018:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, " serverVersion >= 80018")
                    self.state = 2734
                    self.valuesReference()


                pass

            elif la_ == 2:
                self.state = 2737
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 2738
                self.updateList()
                self.state = 2741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                if la_ == 1:
                    self.state = 2739
                    if not  serverVersion >= 80018:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, " serverVersion >= 80018")
                    self.state = 2740
                    self.valuesReference()


                pass

            elif la_ == 3:
                self.state = 2743
                self.insertQueryExpression()
                pass


            self.state = 2747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ON_SYMBOL:
                self.state = 2746
                self.insertUpdateList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertLockOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def DELAYED_SYMBOL(self):
            return self.getToken(MySQLParser.DELAYED_SYMBOL, 0)

        def HIGH_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_insertLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertLockOption" ):
                listener.enterInsertLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertLockOption" ):
                listener.exitInsertLockOption(self)




    def insertLockOption(self):

        localctx = MySQLParser.InsertLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_insertLockOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2749
            _la = self._input.LA(1)
            if not(_la==MySQLParser.DELAYED_SYMBOL or _la==MySQLParser.HIGH_PRIORITY_SYMBOL or _la==MySQLParser.LOW_PRIORITY_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertFromConstructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertValues(self):
            return self.getTypedRuleContext(MySQLParser.InsertValuesContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def fields(self):
            return self.getTypedRuleContext(MySQLParser.FieldsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insertFromConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertFromConstructor" ):
                listener.enterInsertFromConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertFromConstructor" ):
                listener.exitInsertFromConstructor(self)




    def insertFromConstructor(self):

        localctx = MySQLParser.InsertFromConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_insertFromConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OPEN_PAR_SYMBOL:
                self.state = 2751
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 2753
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 2752
                    self.fields()


                self.state = 2755
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)


            self.state = 2758
            self.insertValues()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.InsertIdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.InsertIdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFields" ):
                listener.enterFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFields" ):
                listener.exitFields(self)




    def fields(self):

        localctx = MySQLParser.FieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_fields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2760
            self.insertIdentifier()
            self.state = 2765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 2761
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 2762
                self.insertIdentifier()
                self.state = 2767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertValuesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueList(self):
            return self.getTypedRuleContext(MySQLParser.ValueListContext,0)


        def VALUES_SYMBOL(self):
            return self.getToken(MySQLParser.VALUES_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.VALUE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_insertValues

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertValues" ):
                listener.enterInsertValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertValues" ):
                listener.exitInsertValues(self)




    def insertValues(self):

        localctx = MySQLParser.InsertValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_insertValues)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2768
            _la = self._input.LA(1)
            if not(_la==MySQLParser.VALUES_SYMBOL or _la==MySQLParser.VALUE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2769
            self.valueList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertQueryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionOrParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionOrParensContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def fields(self):
            return self.getTypedRuleContext(MySQLParser.FieldsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insertQueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertQueryExpression" ):
                listener.enterInsertQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertQueryExpression" ):
                listener.exitInsertQueryExpression(self)




    def insertQueryExpression(self):

        localctx = MySQLParser.InsertQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_insertQueryExpression)
        try:
            self.state = 2778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2771
                self.queryExpressionOrParens()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2772
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 2774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 2773
                    self.fields()


                self.state = 2776
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 2777
                self.queryExpressionOrParens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.OPEN_PAR_SYMBOL)
            else:
                return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, i)

        def CLOSE_PAR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.CLOSE_PAR_SYMBOL)
            else:
                return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, i)

        def values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ValuesContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ValuesContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_valueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueList" ):
                listener.enterValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueList" ):
                listener.exitValueList(self)




    def valueList(self):

        localctx = MySQLParser.ValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_valueList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2780
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 2781
                self.values()


            self.state = 2784
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
            self.state = 2793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2785
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 2786
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 2788
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                    if la_ == 1:
                        self.state = 2787
                        self.values()


                    self.state = 2790
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL) 
                self.state = 2795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def DEFAULT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.DEFAULT_SYMBOL)
            else:
                return self.getToken(MySQLParser.DEFAULT_SYMBOL, i)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues" ):
                listener.enterValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues" ):
                listener.exitValues(self)




    def values(self):

        localctx = MySQLParser.ValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_values)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 2796
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 2797
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass


            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 2800
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 2803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 2801
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2802
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    pass


                self.state = 2809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_valuesReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesReference" ):
                listener.enterValuesReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesReference" ):
                listener.exitValuesReference(self)




    def valuesReference(self):

        localctx = MySQLParser.ValuesReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_valuesReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2810
            self.match(MySQLParser.AS_SYMBOL)
            self.state = 2811
            self.identifier()
            self.state = 2813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OPEN_PAR_SYMBOL:
                self.state = 2812
                self.columnInternalRefList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertUpdateListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def DUPLICATE_SYMBOL(self):
            return self.getToken(MySQLParser.DUPLICATE_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(MySQLParser.UpdateListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insertUpdateList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertUpdateList" ):
                listener.enterInsertUpdateList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertUpdateList" ):
                listener.exitInsertUpdateList(self)




    def insertUpdateList(self):

        localctx = MySQLParser.InsertUpdateListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_insertUpdateList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2815
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 2816
            self.match(MySQLParser.DUPLICATE_SYMBOL)
            self.state = 2817
            self.match(MySQLParser.KEY_SYMBOL)
            self.state = 2818
            self.match(MySQLParser.UPDATE_SYMBOL)
            self.state = 2819
            self.updateList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.LOAD_SYMBOL, 0)

        def dataOrXml(self):
            return self.getTypedRuleContext(MySQLParser.DataOrXmlContext,0)


        def INFILE_SYMBOL(self):
            return self.getToken(MySQLParser.INFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def loadDataFileTail(self):
            return self.getTypedRuleContext(MySQLParser.LoadDataFileTailContext,0)


        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def usePartition(self):
            return self.getTypedRuleContext(MySQLParser.UsePartitionContext,0)


        def charsetClause(self):
            return self.getTypedRuleContext(MySQLParser.CharsetClauseContext,0)


        def xmlRowsIdentifiedBy(self):
            return self.getTypedRuleContext(MySQLParser.XmlRowsIdentifiedByContext,0)


        def fieldsClause(self):
            return self.getTypedRuleContext(MySQLParser.FieldsClauseContext,0)


        def linesClause(self):
            return self.getTypedRuleContext(MySQLParser.LinesClauseContext,0)


        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def CONCURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONCURRENT_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_loadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStatement" ):
                listener.enterLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStatement" ):
                listener.exitLoadStatement(self)




    def loadStatement(self):

        localctx = MySQLParser.LoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_loadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2821
            self.match(MySQLParser.LOAD_SYMBOL)
            self.state = 2822
            self.dataOrXml()
            self.state = 2824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.CONCURRENT_SYMBOL or _la==MySQLParser.LOW_PRIORITY_SYMBOL:
                self.state = 2823
                _la = self._input.LA(1)
                if not(_la==MySQLParser.CONCURRENT_SYMBOL or _la==MySQLParser.LOW_PRIORITY_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.LOCAL_SYMBOL:
                self.state = 2826
                self.match(MySQLParser.LOCAL_SYMBOL)


            self.state = 2829
            self.match(MySQLParser.INFILE_SYMBOL)
            self.state = 2830
            self.textLiteral()
            self.state = 2832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.IGNORE_SYMBOL or _la==MySQLParser.REPLACE_SYMBOL:
                self.state = 2831
                _la = self._input.LA(1)
                if not(_la==MySQLParser.IGNORE_SYMBOL or _la==MySQLParser.REPLACE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2834
            self.match(MySQLParser.INTO_SYMBOL)
            self.state = 2835
            self.match(MySQLParser.TABLE_SYMBOL)
            self.state = 2836
            self.tableRef()
            self.state = 2838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 2837
                self.usePartition()


            self.state = 2841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.CHARSET_SYMBOL or _la==MySQLParser.CHAR_SYMBOL:
                self.state = 2840
                self.charsetClause()


            self.state = 2844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ROWS_SYMBOL:
                self.state = 2843
                self.xmlRowsIdentifiedBy()


            self.state = 2847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.COLUMNS_SYMBOL:
                self.state = 2846
                self.fieldsClause()


            self.state = 2850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.LINES_SYMBOL:
                self.state = 2849
                self.linesClause()


            self.state = 2852
            self.loadDataFileTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataOrXmlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def XML_SYMBOL(self):
            return self.getToken(MySQLParser.XML_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dataOrXml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataOrXml" ):
                listener.enterDataOrXml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataOrXml" ):
                listener.exitDataOrXml(self)




    def dataOrXml(self):

        localctx = MySQLParser.DataOrXmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_dataOrXml)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2854
            _la = self._input.LA(1)
            if not(_la==MySQLParser.DATA_SYMBOL or _la==MySQLParser.XML_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XmlRowsIdentifiedByContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.ROWS_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_xmlRowsIdentifiedBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlRowsIdentifiedBy" ):
                listener.enterXmlRowsIdentifiedBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlRowsIdentifiedBy" ):
                listener.exitXmlRowsIdentifiedBy(self)




    def xmlRowsIdentifiedBy(self):

        localctx = MySQLParser.XmlRowsIdentifiedByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_xmlRowsIdentifiedBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2856
            self.match(MySQLParser.ROWS_SYMBOL)
            self.state = 2857
            self.match(MySQLParser.IDENTIFIED_SYMBOL)
            self.state = 2858
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 2859
            self.textString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataFileTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def loadDataFileTargetList(self):
            return self.getTypedRuleContext(MySQLParser.LoadDataFileTargetListContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(MySQLParser.UpdateListContext,0)


        def LINES_SYMBOL(self):
            return self.getToken(MySQLParser.LINES_SYMBOL, 0)

        def ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.ROWS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_loadDataFileTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataFileTail" ):
                listener.enterLoadDataFileTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataFileTail" ):
                listener.exitLoadDataFileTail(self)




    def loadDataFileTail(self):

        localctx = MySQLParser.LoadDataFileTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_loadDataFileTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.IGNORE_SYMBOL:
                self.state = 2861
                self.match(MySQLParser.IGNORE_SYMBOL)
                self.state = 2862
                self.match(MySQLParser.INT_NUMBER)
                self.state = 2863
                _la = self._input.LA(1)
                if not(_la==MySQLParser.LINES_SYMBOL or _la==MySQLParser.ROWS_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OPEN_PAR_SYMBOL:
                self.state = 2866
                self.loadDataFileTargetList()


            self.state = 2871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.SET_SYMBOL:
                self.state = 2869
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 2870
                self.updateList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataFileTargetListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def fieldOrVariableList(self):
            return self.getTypedRuleContext(MySQLParser.FieldOrVariableListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_loadDataFileTargetList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataFileTargetList" ):
                listener.enterLoadDataFileTargetList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataFileTargetList" ):
                listener.exitLoadDataFileTargetList(self)




    def loadDataFileTargetList(self):

        localctx = MySQLParser.LoadDataFileTargetListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_loadDataFileTargetList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2873
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 2874
                self.fieldOrVariableList()


            self.state = 2877
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldOrVariableListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ColumnRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ColumnRefContext,i)


        def userVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UserVariableContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UserVariableContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_fieldOrVariableList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldOrVariableList" ):
                listener.enterFieldOrVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldOrVariableList" ):
                listener.exitFieldOrVariableList(self)




    def fieldOrVariableList(self):

        localctx = MySQLParser.FieldOrVariableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_fieldOrVariableList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2879
                self.columnRef()
                pass

            elif la_ == 2:
                self.state = 2880
                self.userVariable()
                pass


            self.state = 2890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 2883
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 2886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 2884
                    self.columnRef()
                    pass

                elif la_ == 2:
                    self.state = 2885
                    self.userVariable()
                    pass


                self.state = 2892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def insertFromConstructor(self):
            return self.getTypedRuleContext(MySQLParser.InsertFromConstructorContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(MySQLParser.UpdateListContext,0)


        def insertQueryExpression(self):
            return self.getTypedRuleContext(MySQLParser.InsertQueryExpressionContext,0)


        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def usePartition(self):
            return self.getTypedRuleContext(MySQLParser.UsePartitionContext,0)


        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def DELAYED_SYMBOL(self):
            return self.getToken(MySQLParser.DELAYED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_replaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceStatement" ):
                listener.enterReplaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceStatement" ):
                listener.exitReplaceStatement(self)




    def replaceStatement(self):

        localctx = MySQLParser.ReplaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_replaceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2893
            self.match(MySQLParser.REPLACE_SYMBOL)
            self.state = 2895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.state = 2894
                _la = self._input.LA(1)
                if not(_la==MySQLParser.DELAYED_SYMBOL or _la==MySQLParser.LOW_PRIORITY_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 2897
                self.match(MySQLParser.INTO_SYMBOL)


            self.state = 2900
            self.tableRef()
            self.state = 2902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 2901
                self.usePartition()


            self.state = 2908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 2904
                self.insertFromConstructor()
                pass

            elif la_ == 2:
                self.state = 2905
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 2906
                self.updateList()
                pass

            elif la_ == 3:
                self.state = 2907
                self.insertQueryExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpression(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionContext,0)


        def lockingClauseList(self):
            return self.getTypedRuleContext(MySQLParser.LockingClauseListContext,0)


        def queryExpressionParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,0)


        def selectStatementWithInto(self):
            return self.getTypedRuleContext(MySQLParser.SelectStatementWithIntoContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_selectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatement" ):
                listener.enterSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatement" ):
                listener.exitSelectStatement(self)




    def selectStatement(self):

        localctx = MySQLParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 2916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2910
                self.queryExpression()
                self.state = 2912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FOR_SYMBOL or _la==MySQLParser.LOCK_SYMBOL:
                    self.state = 2911
                    self.lockingClauseList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2914
                self.queryExpressionParens()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2915
                self.selectStatementWithInto()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementWithIntoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def selectStatementWithInto(self):
            return self.getTypedRuleContext(MySQLParser.SelectStatementWithIntoContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionContext,0)


        def intoClause(self):
            return self.getTypedRuleContext(MySQLParser.IntoClauseContext,0)


        def lockingClauseList(self):
            return self.getTypedRuleContext(MySQLParser.LockingClauseListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_selectStatementWithInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatementWithInto" ):
                listener.enterSelectStatementWithInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatementWithInto" ):
                listener.exitSelectStatementWithInto(self)




    def selectStatementWithInto(self):

        localctx = MySQLParser.SelectStatementWithIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_selectStatementWithInto)
        self._la = 0 # Token type
        try:
            self.state = 2930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2918
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 2919
                self.selectStatementWithInto()
                self.state = 2920
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2922
                self.queryExpression()
                self.state = 2923
                self.intoClause()
                self.state = 2925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FOR_SYMBOL or _la==MySQLParser.LOCK_SYMBOL:
                    self.state = 2924
                    self.lockingClauseList()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2927
                self.lockingClauseList()
                self.state = 2928
                self.intoClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionBody(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionBodyContext,0)


        def queryExpressionParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,0)


        def withClause(self):
            return self.getTypedRuleContext(MySQLParser.WithClauseContext,0)


        def procedureAnalyseClause(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureAnalyseClauseContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(MySQLParser.OrderClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySQLParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)




    def queryExpression(self):

        localctx = MySQLParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_queryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 2932
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 2933
                self.withClause()


            self.state = 2950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 2936
                self.queryExpressionBody()
                self.state = 2938
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2937
                    self.orderClause()


                self.state = 2941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 2940
                    self.limitClause()


                pass

            elif la_ == 2:
                self.state = 2943
                self.queryExpressionParens()
                self.state = 2945
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 2944
                    self.orderClause()


                self.state = 2948
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                if la_ == 1:
                    self.state = 2947
                    self.limitClause()


                pass


            self.state = 2954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 2952
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 2953
                self.procedureAnalyseClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryPrimary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.QueryPrimaryContext)
            else:
                return self.getTypedRuleContext(MySQLParser.QueryPrimaryContext,i)


        def queryExpressionParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.QueryExpressionParensContext)
            else:
                return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,i)


        def UNION_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.UNION_SYMBOL)
            else:
                return self.getToken(MySQLParser.UNION_SYMBOL, i)

        def unionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UnionOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UnionOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_queryExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionBody" ):
                listener.enterQueryExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionBody" ):
                listener.exitQueryExpressionBody(self)




    def queryExpressionBody(self):

        localctx = MySQLParser.QueryExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_queryExpressionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2956
                self.queryPrimary()
                pass

            elif la_ == 2:
                self.state = 2957
                self.queryExpressionParens()
                self.state = 2958
                self.match(MySQLParser.UNION_SYMBOL)
                self.state = 2960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 2959
                    self.unionOption()


                self.state = 2964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 2962
                    self.queryPrimary()
                    pass

                elif la_ == 2:
                    self.state = 2963
                    self.queryExpressionParens()
                    pass


                pass


            self.state = 2978
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2968
                    self.match(MySQLParser.UNION_SYMBOL)
                    self.state = 2970
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                    if la_ == 1:
                        self.state = 2969
                        self.unionOption()


                    self.state = 2974
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
                    if la_ == 1:
                        self.state = 2972
                        self.queryPrimary()
                        pass

                    elif la_ == 2:
                        self.state = 2973
                        self.queryExpressionParens()
                        pass

             
                self.state = 2980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionParensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def queryExpressionParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,0)


        def queryExpression(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionContext,0)


        def lockingClauseList(self):
            return self.getTypedRuleContext(MySQLParser.LockingClauseListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_queryExpressionParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionParens" ):
                listener.enterQueryExpressionParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionParens" ):
                listener.exitQueryExpressionParens(self)




    def queryExpressionParens(self):

        localctx = MySQLParser.QueryExpressionParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_queryExpressionParens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2981
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2982
                self.queryExpressionParens()
                pass

            elif la_ == 2:
                self.state = 2983
                self.queryExpression()
                self.state = 2985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FOR_SYMBOL or _la==MySQLParser.LOCK_SYMBOL:
                    self.state = 2984
                    self.lockingClauseList()


                pass


            self.state = 2989
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(MySQLParser.QuerySpecificationContext,0)


        def tableValueConstructor(self):
            return self.getTypedRuleContext(MySQLParser.TableValueConstructorContext,0)


        def explicitTable(self):
            return self.getTypedRuleContext(MySQLParser.ExplicitTableContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_queryPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimary" ):
                listener.enterQueryPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimary" ):
                listener.exitQueryPrimary(self)




    def queryPrimary(self):

        localctx = MySQLParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_queryPrimary)
        try:
            self.state = 2996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2991
                self.querySpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2992
                if not serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80019")
                self.state = 2993
                self.tableValueConstructor()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2994
                if not serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80019")
                self.state = 2995
                self.explicitTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT_SYMBOL(self):
            return self.getToken(MySQLParser.SELECT_SYMBOL, 0)

        def selectItemList(self):
            return self.getTypedRuleContext(MySQLParser.SelectItemListContext,0)


        def selectOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SelectOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SelectOptionContext,i)


        def intoClause(self):
            return self.getTypedRuleContext(MySQLParser.IntoClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(MySQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(MySQLParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(MySQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(MySQLParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = MySQLParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2998
            self.match(MySQLParser.SELECT_SYMBOL)
            self.state = 3002
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2999
                    self.selectOption() 
                self.state = 3004
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

            self.state = 3005
            self.selectItemList()
            self.state = 3007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 3006
                self.intoClause()


            self.state = 3010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 3009
                self.fromClause()


            self.state = 3013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 3012
                self.whereClause()


            self.state = 3016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 3015
                self.groupByClause()


            self.state = 3019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.state = 3018
                self.havingClause()


            self.state = 3023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 3021
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 3022
                self.windowClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = MySQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3025
            self.queryExpressionParens()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def DISTINCT_SYMBOL(self):
            return self.getToken(MySQLParser.DISTINCT_SYMBOL, 0)

        def STRAIGHT_JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0)

        def HIGH_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0)

        def SQL_SMALL_RESULT_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0)

        def SQL_BIG_RESULT_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0)

        def SQL_BUFFER_RESULT_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0)

        def SQL_CALC_FOUND_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_querySpecOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecOption" ):
                listener.enterQuerySpecOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecOption" ):
                listener.exitQuerySpecOption(self)




    def querySpecOption(self):

        localctx = MySQLParser.QuerySpecOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_querySpecOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3027
            _la = self._input.LA(1)
            if not(_la==MySQLParser.ALL_SYMBOL or _la==MySQLParser.DISTINCT_SYMBOL or _la==MySQLParser.HIGH_PRIORITY_SYMBOL or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySQLParser.SQL_BIG_RESULT_SYMBOL - 531)) | (1 << (MySQLParser.SQL_BUFFER_RESULT_SYMBOL - 531)) | (1 << (MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL - 531)) | (1 << (MySQLParser.SQL_SMALL_RESULT_SYMBOL - 531)) | (1 << (MySQLParser.STRAIGHT_JOIN_SYMBOL - 531)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_SYMBOL(self):
            return self.getToken(MySQLParser.LIMIT_SYMBOL, 0)

        def limitOptions(self):
            return self.getTypedRuleContext(MySQLParser.LimitOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = MySQLParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3029
            self.match(MySQLParser.LIMIT_SYMBOL)
            self.state = 3030
            self.limitOptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleLimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_SYMBOL(self):
            return self.getToken(MySQLParser.LIMIT_SYMBOL, 0)

        def limitOption(self):
            return self.getTypedRuleContext(MySQLParser.LimitOptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_simpleLimitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleLimitClause" ):
                listener.enterSimpleLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleLimitClause" ):
                listener.exitSimpleLimitClause(self)




    def simpleLimitClause(self):

        localctx = MySQLParser.SimpleLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_simpleLimitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3032
            self.match(MySQLParser.LIMIT_SYMBOL)
            self.state = 3033
            self.limitOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def limitOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.LimitOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.LimitOptionContext,i)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def OFFSET_SYMBOL(self):
            return self.getToken(MySQLParser.OFFSET_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_limitOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitOptions" ):
                listener.enterLimitOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitOptions" ):
                listener.exitLimitOptions(self)




    def limitOptions(self):

        localctx = MySQLParser.LimitOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_limitOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3035
            self.limitOption()
            self.state = 3038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 3036
                _la = self._input.LA(1)
                if not(_la==MySQLParser.OFFSET_SYMBOL or _la==MySQLParser.COMMA_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3037
                self.limitOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def PARAM_MARKER(self):
            return self.getToken(MySQLParser.PARAM_MARKER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_limitOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitOption" ):
                listener.enterLimitOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitOption" ):
                listener.exitLimitOption(self)




    def limitOption(self):

        localctx = MySQLParser.LimitOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_limitOption)
        self._la = 0 # Token type
        try:
            self.state = 3042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3040
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3041
                _la = self._input.LA(1)
                if not(((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (MySQLParser.INT_NUMBER - 747)) | (1 << (MySQLParser.LONG_NUMBER - 747)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 747)) | (1 << (MySQLParser.PARAM_MARKER - 747)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntoClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def OUTFILE_SYMBOL(self):
            return self.getToken(MySQLParser.OUTFILE_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def DUMPFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DUMPFILE_SYMBOL, 0)

        def textOrIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextOrIdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,i)


        def userVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UserVariableContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UserVariableContext,i)


        def charsetClause(self):
            return self.getTypedRuleContext(MySQLParser.CharsetClauseContext,0)


        def fieldsClause(self):
            return self.getTypedRuleContext(MySQLParser.FieldsClauseContext,0)


        def linesClause(self):
            return self.getTypedRuleContext(MySQLParser.LinesClauseContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_intoClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntoClause" ):
                listener.enterIntoClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntoClause" ):
                listener.exitIntoClause(self)




    def intoClause(self):

        localctx = MySQLParser.IntoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_intoClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3044
            self.match(MySQLParser.INTO_SYMBOL)
            self.state = 3072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 3045
                self.match(MySQLParser.OUTFILE_SYMBOL)
                self.state = 3046
                self.textStringLiteral()
                self.state = 3048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                if la_ == 1:
                    self.state = 3047
                    self.charsetClause()


                self.state = 3051
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                if la_ == 1:
                    self.state = 3050
                    self.fieldsClause()


                self.state = 3054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                if la_ == 1:
                    self.state = 3053
                    self.linesClause()


                pass

            elif la_ == 2:
                self.state = 3056
                self.match(MySQLParser.DUMPFILE_SYMBOL)
                self.state = 3057
                self.textStringLiteral()
                pass

            elif la_ == 3:
                self.state = 3060
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
                if la_ == 1:
                    self.state = 3058
                    self.textOrIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 3059
                    self.userVariable()
                    pass


                self.state = 3069
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3062
                        self.match(MySQLParser.COMMA_SYMBOL)
                        self.state = 3065
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                        if la_ == 1:
                            self.state = 3063
                            self.textOrIdentifier()
                            pass

                        elif la_ == 2:
                            self.state = 3064
                            self.userVariable()
                            pass

                 
                    self.state = 3071
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureAnalyseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def ANALYSE_SYMBOL(self):
            return self.getToken(MySQLParser.ANALYSE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def INT_NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.INT_NUMBER)
            else:
                return self.getToken(MySQLParser.INT_NUMBER, i)

        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_procedureAnalyseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureAnalyseClause" ):
                listener.enterProcedureAnalyseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureAnalyseClause" ):
                listener.exitProcedureAnalyseClause(self)




    def procedureAnalyseClause(self):

        localctx = MySQLParser.ProcedureAnalyseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_procedureAnalyseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3074
            self.match(MySQLParser.PROCEDURE_SYMBOL)
            self.state = 3075
            self.match(MySQLParser.ANALYSE_SYMBOL)
            self.state = 3076
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.INT_NUMBER:
                self.state = 3077
                self.match(MySQLParser.INT_NUMBER)
                self.state = 3080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 3078
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3079
                    self.match(MySQLParser.INT_NUMBER)




            self.state = 3084
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING_SYMBOL(self):
            return self.getToken(MySQLParser.HAVING_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = MySQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3086
            self.match(MySQLParser.HAVING_SYMBOL)
            self.state = 3087
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW_SYMBOL(self):
            return self.getToken(MySQLParser.WINDOW_SYMBOL, 0)

        def windowDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.WindowDefinitionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.WindowDefinitionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)




    def windowClause(self):

        localctx = MySQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3089
            self.match(MySQLParser.WINDOW_SYMBOL)
            self.state = 3090
            self.windowDefinition()
            self.state = 3095
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3091
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3092
                    self.windowDefinition() 
                self.state = 3097
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowName(self):
            return self.getTypedRuleContext(MySQLParser.WindowNameContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(MySQLParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDefinition" ):
                listener.enterWindowDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDefinition" ):
                listener.exitWindowDefinition(self)




    def windowDefinition(self):

        localctx = MySQLParser.WindowDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_windowDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3098
            self.windowName()
            self.state = 3099
            self.match(MySQLParser.AS_SYMBOL)
            self.state = 3100
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def windowSpecDetails(self):
            return self.getTypedRuleContext(MySQLParser.WindowSpecDetailsContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpec" ):
                listener.enterWindowSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpec" ):
                listener.exitWindowSpec(self)




    def windowSpec(self):

        localctx = MySQLParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_windowSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3102
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3103
            self.windowSpecDetails()
            self.state = 3104
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecDetailsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowName(self):
            return self.getTypedRuleContext(MySQLParser.WindowNameContext,0)


        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def orderList(self):
            return self.getTypedRuleContext(MySQLParser.OrderListContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(MySQLParser.OrderClauseContext,0)


        def windowFrameClause(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowSpecDetails

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpecDetails" ):
                listener.enterWindowSpecDetails(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpecDetails" ):
                listener.exitWindowSpecDetails(self)




    def windowSpecDetails(self):

        localctx = MySQLParser.WindowSpecDetailsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_windowSpecDetails)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.state = 3106
                self.windowName()


            self.state = 3112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.PARTITION_SYMBOL:
                self.state = 3109
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 3110
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 3111
                self.orderList()


            self.state = 3115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ORDER_SYMBOL:
                self.state = 3114
                self.orderClause()


            self.state = 3118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.RANGE_SYMBOL or _la==MySQLParser.ROWS_SYMBOL or _la==MySQLParser.GROUPS_SYMBOL:
                self.state = 3117
                self.windowFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowFrameUnits(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameUnitsContext,0)


        def windowFrameExtent(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameExtentContext,0)


        def windowFrameExclusion(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameExclusionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameClause" ):
                listener.enterWindowFrameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameClause" ):
                listener.exitWindowFrameClause(self)




    def windowFrameClause(self):

        localctx = MySQLParser.WindowFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_windowFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3120
            self.windowFrameUnits()
            self.state = 3121
            self.windowFrameExtent()
            self.state = 3123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.EXCLUDE_SYMBOL:
                self.state = 3122
                self.windowFrameExclusion()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameUnitsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.ROWS_SYMBOL, 0)

        def RANGE_SYMBOL(self):
            return self.getToken(MySQLParser.RANGE_SYMBOL, 0)

        def GROUPS_SYMBOL(self):
            return self.getToken(MySQLParser.GROUPS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameUnits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameUnits" ):
                listener.enterWindowFrameUnits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameUnits" ):
                listener.exitWindowFrameUnits(self)




    def windowFrameUnits(self):

        localctx = MySQLParser.WindowFrameUnitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_windowFrameUnits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3125
            _la = self._input.LA(1)
            if not(_la==MySQLParser.RANGE_SYMBOL or _la==MySQLParser.ROWS_SYMBOL or _la==MySQLParser.GROUPS_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameExtentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowFrameStart(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameStartContext,0)


        def windowFrameBetween(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameBetweenContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameExtent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameExtent" ):
                listener.enterWindowFrameExtent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameExtent" ):
                listener.exitWindowFrameExtent(self)




    def windowFrameExtent(self):

        localctx = MySQLParser.WindowFrameExtentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_windowFrameExtent)
        try:
            self.state = 3129
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.CURRENT_SYMBOL, MySQLParser.INTERVAL_SYMBOL, MySQLParser.UNBOUNDED_SYMBOL, MySQLParser.INT_NUMBER, MySQLParser.LONG_NUMBER, MySQLParser.ULONGLONG_NUMBER, MySQLParser.PARAM_MARKER, MySQLParser.DECIMAL_NUMBER, MySQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3127
                self.windowFrameStart()
                pass
            elif token in [MySQLParser.BETWEEN_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3128
                self.windowFrameBetween()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameStartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0)

        def PRECEDING_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDING_SYMBOL, 0)

        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def PARAM_MARKER(self):
            return self.getToken(MySQLParser.PARAM_MARKER, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)


        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameStart" ):
                listener.enterWindowFrameStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameStart" ):
                listener.exitWindowFrameStart(self)




    def windowFrameStart(self):

        localctx = MySQLParser.WindowFrameStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_windowFrameStart)
        try:
            self.state = 3145
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.UNBOUNDED_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3131
                self.match(MySQLParser.UNBOUNDED_SYMBOL)
                self.state = 3132
                self.match(MySQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [MySQLParser.INT_NUMBER, MySQLParser.LONG_NUMBER, MySQLParser.ULONGLONG_NUMBER, MySQLParser.DECIMAL_NUMBER, MySQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3133
                self.ulonglong_number()
                self.state = 3134
                self.match(MySQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [MySQLParser.PARAM_MARKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3136
                self.match(MySQLParser.PARAM_MARKER)
                self.state = 3137
                self.match(MySQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [MySQLParser.INTERVAL_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3138
                self.match(MySQLParser.INTERVAL_SYMBOL)
                self.state = 3139
                self.expr(0)
                self.state = 3140
                self.interval()
                self.state = 3141
                self.match(MySQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [MySQLParser.CURRENT_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3143
                self.match(MySQLParser.CURRENT_SYMBOL)
                self.state = 3144
                self.match(MySQLParser.ROW_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameBetweenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN_SYMBOL(self):
            return self.getToken(MySQLParser.BETWEEN_SYMBOL, 0)

        def windowFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.WindowFrameBoundContext)
            else:
                return self.getTypedRuleContext(MySQLParser.WindowFrameBoundContext,i)


        def AND_SYMBOL(self):
            return self.getToken(MySQLParser.AND_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameBetween

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameBetween" ):
                listener.enterWindowFrameBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameBetween" ):
                listener.exitWindowFrameBetween(self)




    def windowFrameBetween(self):

        localctx = MySQLParser.WindowFrameBetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_windowFrameBetween)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3147
            self.match(MySQLParser.BETWEEN_SYMBOL)
            self.state = 3148
            self.windowFrameBound()
            self.state = 3149
            self.match(MySQLParser.AND_SYMBOL)
            self.state = 3150
            self.windowFrameBound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameBoundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowFrameStart(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameStartContext,0)


        def UNBOUNDED_SYMBOL(self):
            return self.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0)

        def FOLLOWING_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWING_SYMBOL, 0)

        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def PARAM_MARKER(self):
            return self.getToken(MySQLParser.PARAM_MARKER, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameBound" ):
                listener.enterWindowFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameBound" ):
                listener.exitWindowFrameBound(self)




    def windowFrameBound(self):

        localctx = MySQLParser.WindowFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_windowFrameBound)
        try:
            self.state = 3165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3152
                self.windowFrameStart()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3153
                self.match(MySQLParser.UNBOUNDED_SYMBOL)
                self.state = 3154
                self.match(MySQLParser.FOLLOWING_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3155
                self.ulonglong_number()
                self.state = 3156
                self.match(MySQLParser.FOLLOWING_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3158
                self.match(MySQLParser.PARAM_MARKER)
                self.state = 3159
                self.match(MySQLParser.FOLLOWING_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3160
                self.match(MySQLParser.INTERVAL_SYMBOL)
                self.state = 3161
                self.expr(0)
                self.state = 3162
                self.interval()
                self.state = 3163
                self.match(MySQLParser.FOLLOWING_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameExclusionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLUDE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCLUDE_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def TIES_SYMBOL(self):
            return self.getToken(MySQLParser.TIES_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def OTHERS_SYMBOL(self):
            return self.getToken(MySQLParser.OTHERS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameExclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameExclusion" ):
                listener.enterWindowFrameExclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameExclusion" ):
                listener.exitWindowFrameExclusion(self)




    def windowFrameExclusion(self):

        localctx = MySQLParser.WindowFrameExclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_windowFrameExclusion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3167
            self.match(MySQLParser.EXCLUDE_SYMBOL)
            self.state = 3174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.CURRENT_SYMBOL]:
                self.state = 3168
                self.match(MySQLParser.CURRENT_SYMBOL)
                self.state = 3169
                self.match(MySQLParser.ROW_SYMBOL)
                pass
            elif token in [MySQLParser.GROUP_SYMBOL]:
                self.state = 3170
                self.match(MySQLParser.GROUP_SYMBOL)
                pass
            elif token in [MySQLParser.TIES_SYMBOL]:
                self.state = 3171
                self.match(MySQLParser.TIES_SYMBOL)
                pass
            elif token in [MySQLParser.NO_SYMBOL]:
                self.state = 3172
                self.match(MySQLParser.NO_SYMBOL)
                self.state = 3173
                self.match(MySQLParser.OTHERS_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def commonTableExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CommonTableExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CommonTableExpressionContext,i)


        def RECURSIVE_SYMBOL(self):
            return self.getToken(MySQLParser.RECURSIVE_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)




    def withClause(self):

        localctx = MySQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3176
            self.match(MySQLParser.WITH_SYMBOL)
            self.state = 3178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 3177
                self.match(MySQLParser.RECURSIVE_SYMBOL)


            self.state = 3180
            self.commonTableExpression()
            self.state = 3185
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,327,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3181
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3182
                    self.commonTableExpression() 
                self.state = 3187
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,327,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonTableExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_commonTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonTableExpression" ):
                listener.enterCommonTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonTableExpression" ):
                listener.exitCommonTableExpression(self)




    def commonTableExpression(self):

        localctx = MySQLParser.CommonTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_commonTableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3188
            self.identifier()
            self.state = 3190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OPEN_PAR_SYMBOL:
                self.state = 3189
                self.columnInternalRefList()


            self.state = 3192
            self.match(MySQLParser.AS_SYMBOL)
            self.state = 3193
            self.subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def orderList(self):
            return self.getTypedRuleContext(MySQLParser.OrderListContext,0)


        def olapOption(self):
            return self.getTypedRuleContext(MySQLParser.OlapOptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)




    def groupByClause(self):

        localctx = MySQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_groupByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3195
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 3196
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 3197
            self.orderList()
            self.state = 3199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.state = 3198
                self.olapOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OlapOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def ROLLUP_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLUP_SYMBOL, 0)

        def CUBE_SYMBOL(self):
            return self.getToken(MySQLParser.CUBE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_olapOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOlapOption" ):
                listener.enterOlapOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOlapOption" ):
                listener.exitOlapOption(self)




    def olapOption(self):

        localctx = MySQLParser.OlapOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_olapOption)
        try:
            self.state = 3206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3201
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 3202
                self.match(MySQLParser.ROLLUP_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3203
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 3204
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 3205
                self.match(MySQLParser.CUBE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_SYMBOL(self):
            return self.getToken(MySQLParser.ORDER_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def orderList(self):
            return self.getTypedRuleContext(MySQLParser.OrderListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_orderClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderClause" ):
                listener.enterOrderClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderClause" ):
                listener.exitOrderClause(self)




    def orderClause(self):

        localctx = MySQLParser.OrderClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_orderClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3208
            self.match(MySQLParser.ORDER_SYMBOL)
            self.state = 3209
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 3210
            self.orderList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC_SYMBOL(self):
            return self.getToken(MySQLParser.ASC_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(MySQLParser.DESC_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_direction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirection" ):
                listener.enterDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirection" ):
                listener.exitDirection(self)




    def direction(self):

        localctx = MySQLParser.DirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_direction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3212
            _la = self._input.LA(1)
            if not(_la==MySQLParser.ASC_SYMBOL or _la==MySQLParser.DESC_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def DUAL_SYMBOL(self):
            return self.getToken(MySQLParser.DUAL_SYMBOL, 0)

        def tableReferenceList(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = MySQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3214
            self.match(MySQLParser.FROM_SYMBOL)
            self.state = 3217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 3215
                self.match(MySQLParser.DUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 3216
                self.tableReferenceList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableReferenceListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TableReferenceContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TableReferenceContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableReferenceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableReferenceList" ):
                listener.enterTableReferenceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableReferenceList" ):
                listener.exitTableReferenceList(self)




    def tableReferenceList(self):

        localctx = MySQLParser.TableReferenceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_tableReferenceList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3219
            self.tableReference()
            self.state = 3224
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,332,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3220
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3221
                    self.tableReference() 
                self.state = 3226
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,332,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableValueConstructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES_SYMBOL(self):
            return self.getToken(MySQLParser.VALUES_SYMBOL, 0)

        def rowValueExplicit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RowValueExplicitContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RowValueExplicitContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableValueConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValueConstructor" ):
                listener.enterTableValueConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValueConstructor" ):
                listener.exitTableValueConstructor(self)




    def tableValueConstructor(self):

        localctx = MySQLParser.TableValueConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_tableValueConstructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3227
            self.match(MySQLParser.VALUES_SYMBOL)
            self.state = 3228
            self.rowValueExplicit()
            self.state = 3233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3229
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3230
                    self.rowValueExplicit() 
                self.state = 3235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_explicitTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitTable" ):
                listener.enterExplicitTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitTable" ):
                listener.exitExplicitTable(self)




    def explicitTable(self):

        localctx = MySQLParser.ExplicitTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_explicitTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3236
            self.match(MySQLParser.TABLE_SYMBOL)
            self.state = 3237
            self.tableRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowValueExplicitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def values(self):
            return self.getTypedRuleContext(MySQLParser.ValuesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_rowValueExplicit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowValueExplicit" ):
                listener.enterRowValueExplicit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowValueExplicit" ):
                listener.exitRowValueExplicit(self)




    def rowValueExplicit(self):

        localctx = MySQLParser.RowValueExplicitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_rowValueExplicit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3239
            self.match(MySQLParser.ROW_SYMBOL)
            self.state = 3240
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 3241
                self.values()


            self.state = 3244
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecOption(self):
            return self.getTypedRuleContext(MySQLParser.QuerySpecOptionContext,0)


        def SQL_NO_CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0)

        def SQL_CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_CACHE_SYMBOL, 0)

        def MAX_STATEMENT_TIME_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_selectOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectOption" ):
                listener.enterSelectOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectOption" ):
                listener.exitSelectOption(self)




    def selectOption(self):

        localctx = MySQLParser.SelectOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_selectOption)
        try:
            self.state = 3254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3246
                self.querySpecOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3247
                self.match(MySQLParser.SQL_NO_CACHE_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3248
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 3249
                self.match(MySQLParser.SQL_CACHE_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3250
                if not serverVersion >= 50704 && serverVersion < 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50704 && serverVersion < 50708")
                self.state = 3251
                self.match(MySQLParser.MAX_STATEMENT_TIME_SYMBOL)
                self.state = 3252
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3253
                self.real_ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockingClauseListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lockingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.LockingClauseContext)
            else:
                return self.getTypedRuleContext(MySQLParser.LockingClauseContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_lockingClauseList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockingClauseList" ):
                listener.enterLockingClauseList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockingClauseList" ):
                listener.exitLockingClauseList(self)




    def lockingClauseList(self):

        localctx = MySQLParser.LockingClauseListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_lockingClauseList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3257 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3256
                self.lockingClause()
                self.state = 3259 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySQLParser.FOR_SYMBOL or _la==MySQLParser.LOCK_SYMBOL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def lockStrengh(self):
            return self.getTypedRuleContext(MySQLParser.LockStrenghContext,0)


        def OF_SYMBOL(self):
            return self.getToken(MySQLParser.OF_SYMBOL, 0)

        def tableAliasRefList(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasRefListContext,0)


        def lockedRowAction(self):
            return self.getTypedRuleContext(MySQLParser.LockedRowActionContext,0)


        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(MySQLParser.SHARE_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(MySQLParser.MODE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lockingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockingClause" ):
                listener.enterLockingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockingClause" ):
                listener.exitLockingClause(self)




    def lockingClause(self):

        localctx = MySQLParser.LockingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_lockingClause)
        try:
            self.state = 3276
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.FOR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3261
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 3262
                self.lockStrengh()
                self.state = 3266
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
                if la_ == 1:
                    self.state = 3263
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 3264
                    self.match(MySQLParser.OF_SYMBOL)
                    self.state = 3265
                    self.tableAliasRefList()


                self.state = 3270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                if la_ == 1:
                    self.state = 3268
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 3269
                    self.lockedRowAction()


                pass
            elif token in [MySQLParser.LOCK_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3272
                self.match(MySQLParser.LOCK_SYMBOL)
                self.state = 3273
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 3274
                self.match(MySQLParser.SHARE_SYMBOL)
                self.state = 3275
                self.match(MySQLParser.MODE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStrenghContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(MySQLParser.SHARE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lockStrengh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStrengh" ):
                listener.enterLockStrengh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStrengh" ):
                listener.exitLockStrengh(self)




    def lockStrengh(self):

        localctx = MySQLParser.LockStrenghContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_lockStrengh)
        try:
            self.state = 3281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3278
                self.match(MySQLParser.UPDATE_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3279
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 3280
                self.match(MySQLParser.SHARE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockedRowActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_SYMBOL(self):
            return self.getToken(MySQLParser.SKIP_SYMBOL, 0)

        def LOCKED_SYMBOL(self):
            return self.getToken(MySQLParser.LOCKED_SYMBOL, 0)

        def NOWAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NOWAIT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lockedRowAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockedRowAction" ):
                listener.enterLockedRowAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockedRowAction" ):
                listener.exitLockedRowAction(self)




    def lockedRowAction(self):

        localctx = MySQLParser.LockedRowActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_lockedRowAction)
        try:
            self.state = 3286
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.SKIP_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3283
                self.match(MySQLParser.SKIP_SYMBOL)
                self.state = 3284
                self.match(MySQLParser.LOCKED_SYMBOL)
                pass
            elif token in [MySQLParser.NOWAIT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3285
                self.match(MySQLParser.NOWAIT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SelectItemContext,i)


        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_selectItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectItemList" ):
                listener.enterSelectItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectItemList" ):
                listener.exitSelectItemList(self)




    def selectItemList(self):

        localctx = MySQLParser.SelectItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_selectItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 3288
                self.selectItem()
                pass

            elif la_ == 2:
                self.state = 3289
                self.match(MySQLParser.MULT_OPERATOR)
                pass


            self.state = 3296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3292
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3293
                    self.selectItem() 
                self.state = 3298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableWild(self):
            return self.getTypedRuleContext(MySQLParser.TableWildContext,0)


        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def selectAlias(self):
            return self.getTypedRuleContext(MySQLParser.SelectAliasContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_selectItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectItem" ):
                listener.enterSelectItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectItem" ):
                listener.exitSelectItem(self)




    def selectItem(self):

        localctx = MySQLParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_selectItem)
        try:
            self.state = 3304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3299
                self.tableWild()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3300
                self.expr(0)
                self.state = 3302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                if la_ == 1:
                    self.state = 3301
                    self.selectAlias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_selectAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAlias" ):
                listener.enterSelectAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAlias" ):
                listener.exitSelectAlias(self)




    def selectAlias(self):

        localctx = MySQLParser.SelectAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_selectAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.state = 3306
                self.match(MySQLParser.AS_SYMBOL)


            self.state = 3311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 3309
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3310
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE_SYMBOL(self):
            return self.getToken(MySQLParser.WHERE_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = MySQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3313
            self.match(MySQLParser.WHERE_SYMBOL)
            self.state = 3314
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableFactor(self):
            return self.getTypedRuleContext(MySQLParser.TableFactorContext,0)


        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0)

        def escapedTableReference(self):
            return self.getTypedRuleContext(MySQLParser.EscapedTableReferenceContext,0)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0)

        def joinedTable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.JoinedTableContext)
            else:
                return self.getTypedRuleContext(MySQLParser.JoinedTableContext,i)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def OJ_SYMBOL(self):
            return self.getToken(MySQLParser.OJ_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableReference" ):
                listener.enterTableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableReference" ):
                listener.exitTableReference(self)




    def tableReference(self):

        localctx = MySQLParser.TableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_tableReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 3316
                self.tableFactor()
                pass

            elif la_ == 2:
                self.state = 3317
                self.match(MySQLParser.OPEN_CURLY_SYMBOL)
                self.state = 3321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
                if la_ == 1:
                    self.state = 3318
                    if not serverVersion < 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 80017")
                    self.state = 3319
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 3320
                    self.match(MySQLParser.OJ_SYMBOL)
                    pass


                self.state = 3323
                self.escapedTableReference()
                self.state = 3324
                self.match(MySQLParser.CLOSE_CURLY_SYMBOL)
                pass


            self.state = 3331
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3328
                    self.joinedTable() 
                self.state = 3333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EscapedTableReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableFactor(self):
            return self.getTypedRuleContext(MySQLParser.TableFactorContext,0)


        def joinedTable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.JoinedTableContext)
            else:
                return self.getTypedRuleContext(MySQLParser.JoinedTableContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_escapedTableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscapedTableReference" ):
                listener.enterEscapedTableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscapedTableReference" ):
                listener.exitEscapedTableReference(self)




    def escapedTableReference(self):

        localctx = MySQLParser.EscapedTableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_escapedTableReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3334
            self.tableFactor()
            self.state = 3338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.CROSS_SYMBOL or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & ((1 << (MySQLParser.INNER_SYMBOL - 239)) | (1 << (MySQLParser.JOIN_SYMBOL - 239)) | (1 << (MySQLParser.LEFT_SYMBOL - 239)))) != 0) or _la==MySQLParser.NATURAL_SYMBOL or _la==MySQLParser.RIGHT_SYMBOL or _la==MySQLParser.STRAIGHT_JOIN_SYMBOL:
                self.state = 3335
                self.joinedTable()
                self.state = 3340
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinedTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerJoinType(self):
            return self.getTypedRuleContext(MySQLParser.InnerJoinTypeContext,0)


        def tableReference(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListWithParenthesesContext,0)


        def outerJoinType(self):
            return self.getTypedRuleContext(MySQLParser.OuterJoinTypeContext,0)


        def naturalJoinType(self):
            return self.getTypedRuleContext(MySQLParser.NaturalJoinTypeContext,0)


        def tableFactor(self):
            return self.getTypedRuleContext(MySQLParser.TableFactorContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_joinedTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinedTable" ):
                listener.enterJoinedTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinedTable" ):
                listener.exitJoinedTable(self)




    def joinedTable(self):

        localctx = MySQLParser.JoinedTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_joinedTable)
        try:
            self.state = 3360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.CROSS_SYMBOL, MySQLParser.INNER_SYMBOL, MySQLParser.JOIN_SYMBOL, MySQLParser.STRAIGHT_JOIN_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3341
                self.innerJoinType()
                self.state = 3342
                self.tableReference()
                self.state = 3347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 3343
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 3344
                    self.expr(0)

                elif la_ == 2:
                    self.state = 3345
                    self.match(MySQLParser.USING_SYMBOL)
                    self.state = 3346
                    self.identifierListWithParentheses()


                pass
            elif token in [MySQLParser.LEFT_SYMBOL, MySQLParser.RIGHT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3349
                self.outerJoinType()
                self.state = 3350
                self.tableReference()
                self.state = 3355
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.ON_SYMBOL]:
                    self.state = 3351
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 3352
                    self.expr(0)
                    pass
                elif token in [MySQLParser.USING_SYMBOL]:
                    self.state = 3353
                    self.match(MySQLParser.USING_SYMBOL)
                    self.state = 3354
                    self.identifierListWithParentheses()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySQLParser.NATURAL_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3357
                self.naturalJoinType()
                self.state = 3358
                self.tableFactor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NaturalJoinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NATURAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATURAL_SYMBOL, 0)

        def JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.JOIN_SYMBOL, 0)

        def INNER_SYMBOL(self):
            return self.getToken(MySQLParser.INNER_SYMBOL, 0)

        def LEFT_SYMBOL(self):
            return self.getToken(MySQLParser.LEFT_SYMBOL, 0)

        def RIGHT_SYMBOL(self):
            return self.getToken(MySQLParser.RIGHT_SYMBOL, 0)

        def OUTER_SYMBOL(self):
            return self.getToken(MySQLParser.OUTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_naturalJoinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoinType" ):
                listener.enterNaturalJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoinType" ):
                listener.exitNaturalJoinType(self)




    def naturalJoinType(self):

        localctx = MySQLParser.NaturalJoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_naturalJoinType)
        self._la = 0 # Token type
        try:
            self.state = 3373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3362
                self.match(MySQLParser.NATURAL_SYMBOL)
                self.state = 3364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.INNER_SYMBOL:
                    self.state = 3363
                    self.match(MySQLParser.INNER_SYMBOL)


                self.state = 3366
                self.match(MySQLParser.JOIN_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3367
                self.match(MySQLParser.NATURAL_SYMBOL)
                self.state = 3368
                _la = self._input.LA(1)
                if not(_la==MySQLParser.LEFT_SYMBOL or _la==MySQLParser.RIGHT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.OUTER_SYMBOL:
                    self.state = 3369
                    self.match(MySQLParser.OUTER_SYMBOL)


                self.state = 3372
                self.match(MySQLParser.JOIN_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerJoinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.JOIN_SYMBOL, 0)

        def INNER_SYMBOL(self):
            return self.getToken(MySQLParser.INNER_SYMBOL, 0)

        def CROSS_SYMBOL(self):
            return self.getToken(MySQLParser.CROSS_SYMBOL, 0)

        def STRAIGHT_JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_innerJoinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoinType" ):
                listener.enterInnerJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoinType" ):
                listener.exitInnerJoinType(self)




    def innerJoinType(self):

        localctx = MySQLParser.InnerJoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_innerJoinType)
        self._la = 0 # Token type
        try:
            self.state = 3380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.CROSS_SYMBOL, MySQLParser.INNER_SYMBOL, MySQLParser.JOIN_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.CROSS_SYMBOL or _la==MySQLParser.INNER_SYMBOL:
                    self.state = 3375
                    localctx.type_expression = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.CROSS_SYMBOL or _la==MySQLParser.INNER_SYMBOL):
                        localctx.type_expression = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3378
                self.match(MySQLParser.JOIN_SYMBOL)
                pass
            elif token in [MySQLParser.STRAIGHT_JOIN_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3379
                localctx.type_expression = self.match(MySQLParser.STRAIGHT_JOIN_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OuterJoinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.JOIN_SYMBOL, 0)

        def LEFT_SYMBOL(self):
            return self.getToken(MySQLParser.LEFT_SYMBOL, 0)

        def RIGHT_SYMBOL(self):
            return self.getToken(MySQLParser.RIGHT_SYMBOL, 0)

        def OUTER_SYMBOL(self):
            return self.getToken(MySQLParser.OUTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_outerJoinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoinType" ):
                listener.enterOuterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoinType" ):
                listener.exitOuterJoinType(self)




    def outerJoinType(self):

        localctx = MySQLParser.OuterJoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_outerJoinType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3382
            localctx.type_expression = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySQLParser.LEFT_SYMBOL or _la==MySQLParser.RIGHT_SYMBOL):
                localctx.type_expression = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OUTER_SYMBOL:
                self.state = 3383
                self.match(MySQLParser.OUTER_SYMBOL)


            self.state = 3386
            self.match(MySQLParser.JOIN_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleTable(self):
            return self.getTypedRuleContext(MySQLParser.SingleTableContext,0)


        def singleTableParens(self):
            return self.getTypedRuleContext(MySQLParser.SingleTableParensContext,0)


        def derivedTable(self):
            return self.getTypedRuleContext(MySQLParser.DerivedTableContext,0)


        def tableReferenceListParens(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListParensContext,0)


        def tableFunction(self):
            return self.getTypedRuleContext(MySQLParser.TableFunctionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableFactor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFactor" ):
                listener.enterTableFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFactor" ):
                listener.exitTableFactor(self)




    def tableFactor(self):

        localctx = MySQLParser.TableFactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_tableFactor)
        try:
            self.state = 3394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3388
                self.singleTable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3389
                self.singleTableParens()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3390
                self.derivedTable()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3391
                self.tableReferenceListParens()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3392
                if not serverVersion >= 80004:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80004")
                self.state = 3393
                self.tableFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def usePartition(self):
            return self.getTypedRuleContext(MySQLParser.UsePartitionContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def indexHintList(self):
            return self.getTypedRuleContext(MySQLParser.IndexHintListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_singleTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTable" ):
                listener.enterSingleTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTable" ):
                listener.exitSingleTable(self)




    def singleTable(self):

        localctx = MySQLParser.SingleTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_singleTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3396
            self.tableRef()
            self.state = 3398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.state = 3397
                self.usePartition()


            self.state = 3401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 3400
                self.tableAlias()


            self.state = 3404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.state = 3403
                self.indexHintList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableParensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def singleTable(self):
            return self.getTypedRuleContext(MySQLParser.SingleTableContext,0)


        def singleTableParens(self):
            return self.getTypedRuleContext(MySQLParser.SingleTableParensContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_singleTableParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableParens" ):
                listener.enterSingleTableParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableParens" ):
                listener.exitSingleTableParens(self)




    def singleTableParens(self):

        localctx = MySQLParser.SingleTableParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_singleTableParens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3406
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.state = 3407
                self.singleTable()
                pass

            elif la_ == 2:
                self.state = 3408
                self.singleTableParens()
                pass


            self.state = 3411
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerivedTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefListContext,0)


        def LATERAL_SYMBOL(self):
            return self.getToken(MySQLParser.LATERAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_derivedTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerivedTable" ):
                listener.enterDerivedTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerivedTable" ):
                listener.exitDerivedTable(self)




    def derivedTable(self):

        localctx = MySQLParser.DerivedTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_derivedTable)
        try:
            self.state = 3430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3413
                self.subquery()
                self.state = 3415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 3414
                    self.tableAlias()


                self.state = 3419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
                if la_ == 1:
                    self.state = 3417
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 3418
                    self.columnInternalRefList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3421
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 3422
                self.match(MySQLParser.LATERAL_SYMBOL)
                self.state = 3423
                self.subquery()
                self.state = 3425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
                if la_ == 1:
                    self.state = 3424
                    self.tableAlias()


                self.state = 3428
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                if la_ == 1:
                    self.state = 3427
                    self.columnInternalRefList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableReferenceListParensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def tableReferenceList(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListContext,0)


        def tableReferenceListParens(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListParensContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableReferenceListParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableReferenceListParens" ):
                listener.enterTableReferenceListParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableReferenceListParens" ):
                listener.exitTableReferenceListParens(self)




    def tableReferenceListParens(self):

        localctx = MySQLParser.TableReferenceListParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_tableReferenceListParens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3432
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 3433
                self.tableReferenceList()
                pass

            elif la_ == 2:
                self.state = 3434
                self.tableReferenceListParens()
                pass


            self.state = 3437
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_TABLE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def columnsClause(self):
            return self.getTypedRuleContext(MySQLParser.ColumnsClauseContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunction" ):
                listener.enterTableFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunction" ):
                listener.exitTableFunction(self)




    def tableFunction(self):

        localctx = MySQLParser.TableFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_tableFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3439
            self.match(MySQLParser.JSON_TABLE_SYMBOL)
            self.state = 3440
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3441
            self.expr(0)
            self.state = 3442
            self.match(MySQLParser.COMMA_SYMBOL)
            self.state = 3443
            self.textStringLiteral()
            self.state = 3444
            self.columnsClause()
            self.state = 3445
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
            self.state = 3447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.state = 3446
                self.tableAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def jtColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.JtColumnContext)
            else:
                return self.getTypedRuleContext(MySQLParser.JtColumnContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_columnsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnsClause" ):
                listener.enterColumnsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnsClause" ):
                listener.exitColumnsClause(self)




    def columnsClause(self):

        localctx = MySQLParser.ColumnsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_columnsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3449
            self.match(MySQLParser.COLUMNS_SYMBOL)
            self.state = 3450
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3451
            self.jtColumn()
            self.state = 3456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 3452
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 3453
                self.jtColumn()
                self.state = 3458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3459
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JtColumnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def ORDINALITY_SYMBOL(self):
            return self.getToken(MySQLParser.ORDINALITY_SYMBOL, 0)

        def dataType(self):
            return self.getTypedRuleContext(MySQLParser.DataTypeContext,0)


        def PATH_SYMBOL(self):
            return self.getToken(MySQLParser.PATH_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def EXISTS_SYMBOL(self):
            return self.getToken(MySQLParser.EXISTS_SYMBOL, 0)

        def onEmptyOrError(self):
            return self.getTypedRuleContext(MySQLParser.OnEmptyOrErrorContext,0)


        def NESTED_SYMBOL(self):
            return self.getToken(MySQLParser.NESTED_SYMBOL, 0)

        def columnsClause(self):
            return self.getTypedRuleContext(MySQLParser.ColumnsClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_jtColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJtColumn" ):
                listener.enterJtColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJtColumn" ):
                listener.exitJtColumn(self)




    def jtColumn(self):

        localctx = MySQLParser.JtColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_jtColumn)
        self._la = 0 # Token type
        try:
            self.state = 3484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3461
                self.identifier()
                self.state = 3462
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 3463
                self.match(MySQLParser.ORDINALITY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3465
                self.identifier()
                self.state = 3466
                self.dataType()
                self.state = 3469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 3467
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 3468
                    self.collate()


                self.state = 3472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EXISTS_SYMBOL:
                    self.state = 3471
                    self.match(MySQLParser.EXISTS_SYMBOL)


                self.state = 3474
                self.match(MySQLParser.PATH_SYMBOL)
                self.state = 3475
                self.textStringLiteral()
                self.state = 3477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.DEFAULT_SYMBOL or _la==MySQLParser.ERROR_SYMBOL or _la==MySQLParser.NULL_SYMBOL:
                    self.state = 3476
                    self.onEmptyOrError()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3479
                self.match(MySQLParser.NESTED_SYMBOL)
                self.state = 3480
                self.match(MySQLParser.PATH_SYMBOL)
                self.state = 3481
                self.textStringLiteral()
                self.state = 3482
                self.columnsClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnEmptyOrErrorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def onEmpty(self):
            return self.getTypedRuleContext(MySQLParser.OnEmptyContext,0)


        def onError(self):
            return self.getTypedRuleContext(MySQLParser.OnErrorContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_onEmptyOrError

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnEmptyOrError" ):
                listener.enterOnEmptyOrError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnEmptyOrError" ):
                listener.exitOnEmptyOrError(self)




    def onEmptyOrError(self):

        localctx = MySQLParser.OnEmptyOrErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_onEmptyOrError)
        self._la = 0 # Token type
        try:
            self.state = 3494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3486
                self.onEmpty()
                self.state = 3488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.DEFAULT_SYMBOL or _la==MySQLParser.ERROR_SYMBOL or _la==MySQLParser.NULL_SYMBOL:
                    self.state = 3487
                    self.onError()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3490
                self.onError()
                self.state = 3492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.DEFAULT_SYMBOL or _la==MySQLParser.ERROR_SYMBOL or _la==MySQLParser.NULL_SYMBOL:
                    self.state = 3491
                    self.onEmpty()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnEmptyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jtOnResponse(self):
            return self.getTypedRuleContext(MySQLParser.JtOnResponseContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def EMPTY_SYMBOL(self):
            return self.getToken(MySQLParser.EMPTY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_onEmpty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnEmpty" ):
                listener.enterOnEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnEmpty" ):
                listener.exitOnEmpty(self)




    def onEmpty(self):

        localctx = MySQLParser.OnEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_onEmpty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3496
            self.jtOnResponse()
            self.state = 3497
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 3498
            self.match(MySQLParser.EMPTY_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnErrorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jtOnResponse(self):
            return self.getTypedRuleContext(MySQLParser.JtOnResponseContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(MySQLParser.ERROR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_onError

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnError" ):
                listener.enterOnError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnError" ):
                listener.exitOnError(self)




    def onError(self):

        localctx = MySQLParser.OnErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_onError)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3500
            self.jtOnResponse()
            self.state = 3501
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 3502
            self.match(MySQLParser.ERROR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JtOnResponseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR_SYMBOL(self):
            return self.getToken(MySQLParser.ERROR_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_jtOnResponse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJtOnResponse" ):
                listener.enterJtOnResponse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJtOnResponse" ):
                listener.exitJtOnResponse(self)




    def jtOnResponse(self):

        localctx = MySQLParser.JtOnResponseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_jtOnResponse)
        try:
            self.state = 3508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.ERROR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3504
                self.match(MySQLParser.ERROR_SYMBOL)
                pass
            elif token in [MySQLParser.NULL_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3505
                self.match(MySQLParser.NULL_SYMBOL)
                pass
            elif token in [MySQLParser.DEFAULT_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3506
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 3507
                self.textStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT_SYMBOL(self):
            return self.getToken(MySQLParser.DISTINCT_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_unionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionOption" ):
                listener.enterUnionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionOption" ):
                listener.exitUnionOption(self)




    def unionOption(self):

        localctx = MySQLParser.UnionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_unionOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3510
            _la = self._input.LA(1)
            if not(_la==MySQLParser.ALL_SYMBOL or _la==MySQLParser.DISTINCT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)




    def tableAlias(self):

        localctx = MySQLParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 3512
                self.match(MySQLParser.AS_SYMBOL)

            elif la_ == 2:
                self.state = 3513
                if not serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80017")
                self.state = 3514
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 3517
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IndexHintContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IndexHintContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexHintList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintList" ):
                listener.enterIndexHintList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintList" ):
                listener.exitIndexHintList(self)




    def indexHintList(self):

        localctx = MySQLParser.IndexHintListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_indexHintList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3519
            self.indexHint()
            self.state = 3524
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,383,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3520
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3521
                    self.indexHint() 
                self.state = 3526
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,383,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexHintType(self):
            return self.getTypedRuleContext(MySQLParser.IndexHintTypeContext,0)


        def keyOrIndex(self):
            return self.getTypedRuleContext(MySQLParser.KeyOrIndexContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def indexList(self):
            return self.getTypedRuleContext(MySQLParser.IndexListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def indexHintClause(self):
            return self.getTypedRuleContext(MySQLParser.IndexHintClauseContext,0)


        def USE_SYMBOL(self):
            return self.getToken(MySQLParser.USE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHint" ):
                listener.enterIndexHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHint" ):
                listener.exitIndexHint(self)




    def indexHint(self):

        localctx = MySQLParser.IndexHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_indexHint)
        self._la = 0 # Token type
        try:
            self.state = 3547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.FORCE_SYMBOL, MySQLParser.IGNORE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3527
                self.indexHintType()
                self.state = 3528
                self.keyOrIndex()
                self.state = 3530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FOR_SYMBOL:
                    self.state = 3529
                    self.indexHintClause()


                self.state = 3532
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 3533
                self.indexList()
                self.state = 3534
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [MySQLParser.USE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3536
                self.match(MySQLParser.USE_SYMBOL)
                self.state = 3537
                self.keyOrIndex()
                self.state = 3539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FOR_SYMBOL:
                    self.state = 3538
                    self.indexHintClause()


                self.state = 3541
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 3543
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
                if la_ == 1:
                    self.state = 3542
                    self.indexList()


                self.state = 3545
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORCE_SYMBOL(self):
            return self.getToken(MySQLParser.FORCE_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexHintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintType" ):
                listener.enterIndexHintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintType" ):
                listener.exitIndexHintType(self)




    def indexHintType(self):

        localctx = MySQLParser.IndexHintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_indexHintType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3549
            _la = self._input.LA(1)
            if not(_la==MySQLParser.FORCE_SYMBOL or _la==MySQLParser.IGNORE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyOrIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyOrIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyOrIndex" ):
                listener.enterKeyOrIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyOrIndex" ):
                listener.exitKeyOrIndex(self)




    def keyOrIndex(self):

        localctx = MySQLParser.KeyOrIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_keyOrIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3551
            _la = self._input.LA(1)
            if not(_la==MySQLParser.INDEX_SYMBOL or _la==MySQLParser.KEY_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintKeyTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def UNIQUE_SYMBOL(self):
            return self.getToken(MySQLParser.UNIQUE_SYMBOL, 0)

        def keyOrIndex(self):
            return self.getTypedRuleContext(MySQLParser.KeyOrIndexContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_constraintKeyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintKeyType" ):
                listener.enterConstraintKeyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintKeyType" ):
                listener.exitConstraintKeyType(self)




    def constraintKeyType(self):

        localctx = MySQLParser.ConstraintKeyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_constraintKeyType)
        self._la = 0 # Token type
        try:
            self.state = 3559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.PRIMARY_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3553
                self.match(MySQLParser.PRIMARY_SYMBOL)
                self.state = 3554
                self.match(MySQLParser.KEY_SYMBOL)
                pass
            elif token in [MySQLParser.UNIQUE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3555
                self.match(MySQLParser.UNIQUE_SYMBOL)
                self.state = 3557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.INDEX_SYMBOL or _la==MySQLParser.KEY_SYMBOL:
                    self.state = 3556
                    self.keyOrIndex()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.JOIN_SYMBOL, 0)

        def ORDER_SYMBOL(self):
            return self.getToken(MySQLParser.ORDER_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexHintClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintClause" ):
                listener.enterIndexHintClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintClause" ):
                listener.exitIndexHintClause(self)




    def indexHintClause(self):

        localctx = MySQLParser.IndexHintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_indexHintClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3561
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 3567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.JOIN_SYMBOL]:
                self.state = 3562
                self.match(MySQLParser.JOIN_SYMBOL)
                pass
            elif token in [MySQLParser.ORDER_SYMBOL]:
                self.state = 3563
                self.match(MySQLParser.ORDER_SYMBOL)
                self.state = 3564
                self.match(MySQLParser.BY_SYMBOL)
                pass
            elif token in [MySQLParser.GROUP_SYMBOL]:
                self.state = 3565
                self.match(MySQLParser.GROUP_SYMBOL)
                self.state = 3566
                self.match(MySQLParser.BY_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IndexListElementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IndexListElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexList" ):
                listener.enterIndexList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexList" ):
                listener.exitIndexList(self)




    def indexList(self):

        localctx = MySQLParser.IndexListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_indexList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3569
            self.indexListElement()
            self.state = 3574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 3570
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 3571
                self.indexListElement()
                self.state = 3576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexListElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexListElement" ):
                listener.enterIndexListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexListElement" ):
                listener.exitIndexListElement(self)




    def indexListElement(self):

        localctx = MySQLParser.IndexListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_indexListElement)
        try:
            self.state = 3579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3577
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3578
                self.match(MySQLParser.PRIMARY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def tableReferenceList(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(MySQLParser.UpdateListContext,0)


        def withClause(self):
            return self.getTypedRuleContext(MySQLParser.WithClauseContext,0)


        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(MySQLParser.OrderClauseContext,0)


        def simpleLimitClause(self):
            return self.getTypedRuleContext(MySQLParser.SimpleLimitClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)




    def updateStatement(self):

        localctx = MySQLParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_updateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.state = 3581
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 3582
                self.withClause()


            self.state = 3585
            self.match(MySQLParser.UPDATE_SYMBOL)
            self.state = 3587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.state = 3586
                self.match(MySQLParser.LOW_PRIORITY_SYMBOL)


            self.state = 3590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 3589
                self.match(MySQLParser.IGNORE_SYMBOL)


            self.state = 3592
            self.tableReferenceList()
            self.state = 3593
            self.match(MySQLParser.SET_SYMBOL)
            self.state = 3594
            self.updateList()
            self.state = 3596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.WHERE_SYMBOL:
                self.state = 3595
                self.whereClause()


            self.state = 3599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ORDER_SYMBOL:
                self.state = 3598
                self.orderClause()


            self.state = 3602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.LIMIT_SYMBOL:
                self.state = 3601
                self.simpleLimitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionOrLockingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionStatement(self):
            return self.getTypedRuleContext(MySQLParser.TransactionStatementContext,0)


        def savepointStatement(self):
            return self.getTypedRuleContext(MySQLParser.SavepointStatementContext,0)


        def lockStatement(self):
            return self.getTypedRuleContext(MySQLParser.LockStatementContext,0)


        def xaStatement(self):
            return self.getTypedRuleContext(MySQLParser.XaStatementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_transactionOrLockingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionOrLockingStatement" ):
                listener.enterTransactionOrLockingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionOrLockingStatement" ):
                listener.exitTransactionOrLockingStatement(self)




    def transactionOrLockingStatement(self):

        localctx = MySQLParser.TransactionOrLockingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_transactionOrLockingStatement)
        try:
            self.state = 3608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3604
                self.transactionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3605
                self.savepointStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3606
                self.lockStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3607
                self.xaStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def TRANSACTION_SYMBOL(self):
            return self.getToken(MySQLParser.TRANSACTION_SYMBOL, 0)

        def transactionCharacteristic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TransactionCharacteristicContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TransactionCharacteristicContext,i)


        def COMMIT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMIT_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(MySQLParser.WORK_SYMBOL, 0)

        def AND_SYMBOL(self):
            return self.getToken(MySQLParser.AND_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(MySQLParser.CHAIN_SYMBOL, 0)

        def RELEASE_SYMBOL(self):
            return self.getToken(MySQLParser.RELEASE_SYMBOL, 0)

        def NO_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.NO_SYMBOL)
            else:
                return self.getToken(MySQLParser.NO_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_transactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionStatement" ):
                listener.enterTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionStatement" ):
                listener.exitTransactionStatement(self)




    def transactionStatement(self):

        localctx = MySQLParser.TransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_transactionStatement)
        self._la = 0 # Token type
        try:
            self.state = 3635
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.START_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3610
                self.match(MySQLParser.START_SYMBOL)
                self.state = 3611
                self.match(MySQLParser.TRANSACTION_SYMBOL)
                self.state = 3615
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,400,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3612
                        self.transactionCharacteristic() 
                    self.state = 3617
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,400,self._ctx)

                pass
            elif token in [MySQLParser.COMMIT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3618
                self.match(MySQLParser.COMMIT_SYMBOL)
                self.state = 3620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.WORK_SYMBOL:
                    self.state = 3619
                    self.match(MySQLParser.WORK_SYMBOL)


                self.state = 3627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.AND_SYMBOL:
                    self.state = 3622
                    self.match(MySQLParser.AND_SYMBOL)
                    self.state = 3624
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.NO_SYMBOL:
                        self.state = 3623
                        self.match(MySQLParser.NO_SYMBOL)


                    self.state = 3626
                    self.match(MySQLParser.CHAIN_SYMBOL)


                self.state = 3633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NO_SYMBOL or _la==MySQLParser.RELEASE_SYMBOL:
                    self.state = 3630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.NO_SYMBOL:
                        self.state = 3629
                        self.match(MySQLParser.NO_SYMBOL)


                    self.state = 3632
                    self.match(MySQLParser.RELEASE_SYMBOL)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_SYMBOL(self):
            return self.getToken(MySQLParser.BEGIN_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(MySQLParser.WORK_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_beginWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginWork" ):
                listener.enterBeginWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginWork" ):
                listener.exitBeginWork(self)




    def beginWork(self):

        localctx = MySQLParser.BeginWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_beginWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3637
            self.match(MySQLParser.BEGIN_SYMBOL)
            self.state = 3639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.WORK_SYMBOL:
                self.state = 3638
                self.match(MySQLParser.WORK_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionCharacteristicContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def CONSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONSISTENT_SYMBOL, 0)

        def SNAPSHOT_SYMBOL(self):
            return self.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.WRITE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.ONLY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_transactionCharacteristic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionCharacteristic" ):
                listener.enterTransactionCharacteristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionCharacteristic" ):
                listener.exitTransactionCharacteristic(self)




    def transactionCharacteristic(self):

        localctx = MySQLParser.TransactionCharacteristicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_transactionCharacteristic)
        self._la = 0 # Token type
        try:
            self.state = 3647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3641
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 3642
                self.match(MySQLParser.CONSISTENT_SYMBOL)
                self.state = 3643
                self.match(MySQLParser.SNAPSHOT_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3644
                if not serverVersion >= 50605:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50605")
                self.state = 3645
                self.match(MySQLParser.READ_SYMBOL)
                self.state = 3646
                _la = self._input.LA(1)
                if not(_la==MySQLParser.ONLY_SYMBOL or _la==MySQLParser.WRITE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SavepointStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def ROLLBACK_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLBACK_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(MySQLParser.WORK_SYMBOL, 0)

        def AND_SYMBOL(self):
            return self.getToken(MySQLParser.AND_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(MySQLParser.CHAIN_SYMBOL, 0)

        def RELEASE_SYMBOL(self):
            return self.getToken(MySQLParser.RELEASE_SYMBOL, 0)

        def NO_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.NO_SYMBOL)
            else:
                return self.getToken(MySQLParser.NO_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_savepointStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepointStatement" ):
                listener.enterSavepointStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepointStatement" ):
                listener.exitSavepointStatement(self)




    def savepointStatement(self):

        localctx = MySQLParser.SavepointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_savepointStatement)
        self._la = 0 # Token type
        try:
            self.state = 3678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.SAVEPOINT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3649
                self.match(MySQLParser.SAVEPOINT_SYMBOL)
                self.state = 3650
                self.identifier()
                pass
            elif token in [MySQLParser.ROLLBACK_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3651
                self.match(MySQLParser.ROLLBACK_SYMBOL)
                self.state = 3653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.WORK_SYMBOL:
                    self.state = 3652
                    self.match(MySQLParser.WORK_SYMBOL)


                self.state = 3673
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.TO_SYMBOL]:
                    self.state = 3655
                    self.match(MySQLParser.TO_SYMBOL)
                    self.state = 3657
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
                    if la_ == 1:
                        self.state = 3656
                        self.match(MySQLParser.SAVEPOINT_SYMBOL)


                    self.state = 3659
                    self.identifier()
                    pass
                elif token in [MySQLParser.EOF, MySQLParser.AND_SYMBOL, MySQLParser.NO_SYMBOL, MySQLParser.RELEASE_SYMBOL, MySQLParser.SEMICOLON_SYMBOL]:
                    self.state = 3665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.AND_SYMBOL:
                        self.state = 3660
                        self.match(MySQLParser.AND_SYMBOL)
                        self.state = 3662
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySQLParser.NO_SYMBOL:
                            self.state = 3661
                            self.match(MySQLParser.NO_SYMBOL)


                        self.state = 3664
                        self.match(MySQLParser.CHAIN_SYMBOL)


                    self.state = 3671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.NO_SYMBOL or _la==MySQLParser.RELEASE_SYMBOL:
                        self.state = 3668
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySQLParser.NO_SYMBOL:
                            self.state = 3667
                            self.match(MySQLParser.NO_SYMBOL)


                        self.state = 3670
                        self.match(MySQLParser.RELEASE_SYMBOL)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySQLParser.RELEASE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3675
                self.match(MySQLParser.RELEASE_SYMBOL)
                self.state = 3676
                self.match(MySQLParser.SAVEPOINT_SYMBOL)
                self.state = 3677
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def lockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.LockItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.LockItemContext,i)


        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def INSTANCE_SYMBOL(self):
            return self.getToken(MySQLParser.INSTANCE_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def BACKUP_SYMBOL(self):
            return self.getToken(MySQLParser.BACKUP_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MySQLParser.UNLOCK_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStatement" ):
                listener.enterLockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStatement" ):
                listener.exitLockStatement(self)




    def lockStatement(self):

        localctx = MySQLParser.LockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_lockStatement)
        self._la = 0 # Token type
        try:
            self.state = 3702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3680
                self.match(MySQLParser.LOCK_SYMBOL)
                self.state = 3681
                _la = self._input.LA(1)
                if not(_la==MySQLParser.TABLES_SYMBOL or _la==MySQLParser.TABLE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3682
                self.lockItem()
                self.state = 3687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 3683
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3684
                    self.lockItem()
                    self.state = 3689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3690
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 3691
                self.match(MySQLParser.LOCK_SYMBOL)
                self.state = 3692
                self.match(MySQLParser.INSTANCE_SYMBOL)
                self.state = 3693
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 3694
                self.match(MySQLParser.BACKUP_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3695
                self.match(MySQLParser.UNLOCK_SYMBOL)
                self.state = 3700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
                if la_ == 1:
                    self.state = 3696
                    self.match(MySQLParser.TABLES_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 3697
                    self.match(MySQLParser.TABLE_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 3698
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 3699
                    self.match(MySQLParser.INSTANCE_SYMBOL)
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def lockOption(self):
            return self.getTypedRuleContext(MySQLParser.LockOptionContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_lockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockItem" ):
                listener.enterLockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockItem" ):
                listener.exitLockItem(self)




    def lockItem(self):

        localctx = MySQLParser.LockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_lockItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3704
            self.tableRef()
            self.state = 3706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.state = 3705
                self.tableAlias()


            self.state = 3708
            self.lockOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.WRITE_SYMBOL, 0)

        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockOption" ):
                listener.enterLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockOption" ):
                listener.exitLockOption(self)




    def lockOption(self):

        localctx = MySQLParser.LockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_lockOption)
        self._la = 0 # Token type
        try:
            self.state = 3718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.READ_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3710
                self.match(MySQLParser.READ_SYMBOL)
                self.state = 3712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LOCAL_SYMBOL:
                    self.state = 3711
                    self.match(MySQLParser.LOCAL_SYMBOL)


                pass
            elif token in [MySQLParser.LOW_PRIORITY_SYMBOL, MySQLParser.WRITE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LOW_PRIORITY_SYMBOL:
                    self.state = 3714
                    self.match(MySQLParser.LOW_PRIORITY_SYMBOL)


                self.state = 3717
                self.match(MySQLParser.WRITE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA_SYMBOL(self):
            return self.getToken(MySQLParser.XA_SYMBOL, 0)

        def xid(self):
            return self.getTypedRuleContext(MySQLParser.XidContext,0)


        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(MySQLParser.PREPARE_SYMBOL, 0)

        def COMMIT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMIT_SYMBOL, 0)

        def ROLLBACK_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLBACK_SYMBOL, 0)

        def RECOVER_SYMBOL(self):
            return self.getToken(MySQLParser.RECOVER_SYMBOL, 0)

        def xaConvert(self):
            return self.getTypedRuleContext(MySQLParser.XaConvertContext,0)


        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def BEGIN_SYMBOL(self):
            return self.getToken(MySQLParser.BEGIN_SYMBOL, 0)

        def SUSPEND_SYMBOL(self):
            return self.getToken(MySQLParser.SUSPEND_SYMBOL, 0)

        def ONE_SYMBOL(self):
            return self.getToken(MySQLParser.ONE_SYMBOL, 0)

        def PHASE_SYMBOL(self):
            return self.getToken(MySQLParser.PHASE_SYMBOL, 0)

        def JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.JOIN_SYMBOL, 0)

        def RESUME_SYMBOL(self):
            return self.getToken(MySQLParser.RESUME_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def MIGRATE_SYMBOL(self):
            return self.getToken(MySQLParser.MIGRATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_xaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaStatement" ):
                listener.enterXaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaStatement" ):
                listener.exitXaStatement(self)




    def xaStatement(self):

        localctx = MySQLParser.XaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_xaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3720
            self.match(MySQLParser.XA_SYMBOL)
            self.state = 3747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.BEGIN_SYMBOL, MySQLParser.START_SYMBOL]:
                self.state = 3721
                _la = self._input.LA(1)
                if not(_la==MySQLParser.BEGIN_SYMBOL or _la==MySQLParser.START_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3722
                self.xid()
                self.state = 3724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.JOIN_SYMBOL or _la==MySQLParser.RESUME_SYMBOL:
                    self.state = 3723
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.JOIN_SYMBOL or _la==MySQLParser.RESUME_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [MySQLParser.END_SYMBOL]:
                self.state = 3726
                self.match(MySQLParser.END_SYMBOL)
                self.state = 3727
                self.xid()
                self.state = 3733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.SUSPEND_SYMBOL:
                    self.state = 3728
                    self.match(MySQLParser.SUSPEND_SYMBOL)
                    self.state = 3731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.FOR_SYMBOL:
                        self.state = 3729
                        self.match(MySQLParser.FOR_SYMBOL)
                        self.state = 3730
                        self.match(MySQLParser.MIGRATE_SYMBOL)




                pass
            elif token in [MySQLParser.PREPARE_SYMBOL]:
                self.state = 3735
                self.match(MySQLParser.PREPARE_SYMBOL)
                self.state = 3736
                self.xid()
                pass
            elif token in [MySQLParser.COMMIT_SYMBOL]:
                self.state = 3737
                self.match(MySQLParser.COMMIT_SYMBOL)
                self.state = 3738
                self.xid()
                self.state = 3741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ONE_SYMBOL:
                    self.state = 3739
                    self.match(MySQLParser.ONE_SYMBOL)
                    self.state = 3740
                    self.match(MySQLParser.PHASE_SYMBOL)


                pass
            elif token in [MySQLParser.ROLLBACK_SYMBOL]:
                self.state = 3743
                self.match(MySQLParser.ROLLBACK_SYMBOL)
                self.state = 3744
                self.xid()
                pass
            elif token in [MySQLParser.RECOVER_SYMBOL]:
                self.state = 3745
                self.match(MySQLParser.RECOVER_SYMBOL)
                self.state = 3746
                self.xaConvert()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaConvertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONVERT_SYMBOL(self):
            return self.getToken(MySQLParser.CONVERT_SYMBOL, 0)

        def XID_SYMBOL(self):
            return self.getToken(MySQLParser.XID_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_xaConvert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaConvert" ):
                listener.enterXaConvert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaConvert" ):
                listener.exitXaConvert(self)




    def xaConvert(self):

        localctx = MySQLParser.XaConvertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_xaConvert)
        self._la = 0 # Token type
        try:
            self.state = 3755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3749
                if not serverVersion >= 50704:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50704")
                self.state = 3752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.CONVERT_SYMBOL:
                    self.state = 3750
                    self.match(MySQLParser.CONVERT_SYMBOL)
                    self.state = 3751
                    self.match(MySQLParser.XID_SYMBOL)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_xid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXid" ):
                listener.enterXid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXid" ):
                listener.exitXid(self)




    def xid(self):

        localctx = MySQLParser.XidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_xid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3757
            self.textString()
            self.state = 3764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.COMMA_SYMBOL:
                self.state = 3758
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 3759
                self.textString()
                self.state = 3762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 3760
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3761
                    self.ulong_number()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PURGE_SYMBOL(self):
            return self.getToken(MySQLParser.PURGE_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(MySQLParser.LOGS_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def BEFORE_SYMBOL(self):
            return self.getToken(MySQLParser.BEFORE_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def changeMaster(self):
            return self.getTypedRuleContext(MySQLParser.ChangeMasterContext,0)


        def RESET_SYMBOL(self):
            return self.getToken(MySQLParser.RESET_SYMBOL, 0)

        def resetOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ResetOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ResetOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def PERSIST_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_SYMBOL, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def slave(self):
            return self.getTypedRuleContext(MySQLParser.SlaveContext,0)


        def changeReplication(self):
            return self.getTypedRuleContext(MySQLParser.ChangeReplicationContext,0)


        def replicationLoad(self):
            return self.getTypedRuleContext(MySQLParser.ReplicationLoadContext,0)


        def groupReplication(self):
            return self.getTypedRuleContext(MySQLParser.GroupReplicationContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_replicationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationStatement" ):
                listener.enterReplicationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationStatement" ):
                listener.exitReplicationStatement(self)




    def replicationStatement(self):

        localctx = MySQLParser.ReplicationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_replicationStatement)
        self._la = 0 # Token type
        try:
            self.state = 3799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3766
                self.match(MySQLParser.PURGE_SYMBOL)
                self.state = 3767
                _la = self._input.LA(1)
                if not(_la==MySQLParser.BINARY_SYMBOL or _la==MySQLParser.MASTER_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3768
                self.match(MySQLParser.LOGS_SYMBOL)
                self.state = 3773
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.TO_SYMBOL]:
                    self.state = 3769
                    self.match(MySQLParser.TO_SYMBOL)
                    self.state = 3770
                    self.textLiteral()
                    pass
                elif token in [MySQLParser.BEFORE_SYMBOL]:
                    self.state = 3771
                    self.match(MySQLParser.BEFORE_SYMBOL)
                    self.state = 3772
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3775
                self.changeMaster()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3776
                self.match(MySQLParser.RESET_SYMBOL)
                self.state = 3777
                self.resetOption()
                self.state = 3782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 3778
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3779
                    self.resetOption()
                    self.state = 3784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3785
                if not serverVersion > 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion > 80000")
                self.state = 3786
                self.match(MySQLParser.RESET_SYMBOL)
                self.state = 3787
                self.match(MySQLParser.PERSIST_SYMBOL)
                self.state = 3791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.IF_SYMBOL:
                    self.state = 3788
                    self.ifExists()
                    self.state = 3789
                    self.identifier()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3793
                self.slave()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3794
                if not serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50700")
                self.state = 3795
                self.changeReplication()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3796
                self.replicationLoad()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3797
                if not serverVersion > 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion > 50706")
                self.state = 3798
                self.groupReplication()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def masterResetOptions(self):
            return self.getTypedRuleContext(MySQLParser.MasterResetOptionsContext,0)


        def CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.CACHE_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_resetOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetOption" ):
                listener.enterResetOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetOption" ):
                listener.exitResetOption(self)




    def resetOption(self):

        localctx = MySQLParser.ResetOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_resetOption)
        try:
            self.state = 3815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3801
                localctx.option = self.match(MySQLParser.MASTER_SYMBOL)
                self.state = 3803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
                if la_ == 1:
                    self.state = 3802
                    self.masterResetOptions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3805
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 3806
                localctx.option = self.match(MySQLParser.QUERY_SYMBOL)
                self.state = 3807
                self.match(MySQLParser.CACHE_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3808
                localctx.option = self.match(MySQLParser.SLAVE_SYMBOL)
                self.state = 3810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
                if la_ == 1:
                    self.state = 3809
                    self.match(MySQLParser.ALL_SYMBOL)


                self.state = 3813
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
                if la_ == 1:
                    self.state = 3812
                    self.channel()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterResetOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_masterResetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterResetOptions" ):
                listener.enterMasterResetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterResetOptions" ):
                listener.exitMasterResetOptions(self)




    def masterResetOptions(self):

        localctx = MySQLParser.MasterResetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_masterResetOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3817
            if not serverVersion >= 80000:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 80000")
            self.state = 3818
            self.match(MySQLParser.TO_SYMBOL)
            self.state = 3823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 3819
                if not serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80017")
                self.state = 3820
                self.real_ulong_number()
                pass

            elif la_ == 2:
                self.state = 3821
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 3822
                self.real_ulonglong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationLoadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.LOAD_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_replicationLoad

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationLoad" ):
                listener.enterReplicationLoad(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationLoad" ):
                listener.exitReplicationLoad(self)




    def replicationLoad(self):

        localctx = MySQLParser.ReplicationLoadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_replicationLoad)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3825
            self.match(MySQLParser.LOAD_SYMBOL)
            self.state = 3829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.DATA_SYMBOL]:
                self.state = 3826
                self.match(MySQLParser.DATA_SYMBOL)
                pass
            elif token in [MySQLParser.TABLE_SYMBOL]:
                self.state = 3827
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 3828
                self.tableRef()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3831
            self.match(MySQLParser.FROM_SYMBOL)
            self.state = 3832
            self.match(MySQLParser.MASTER_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGE_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def changeMasterOptions(self):
            return self.getTypedRuleContext(MySQLParser.ChangeMasterOptionsContext,0)


        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_changeMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMaster" ):
                listener.enterChangeMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMaster" ):
                listener.exitChangeMaster(self)




    def changeMaster(self):

        localctx = MySQLParser.ChangeMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_changeMaster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3834
            self.match(MySQLParser.CHANGE_SYMBOL)
            self.state = 3835
            self.match(MySQLParser.MASTER_SYMBOL)
            self.state = 3836
            self.match(MySQLParser.TO_SYMBOL)
            self.state = 3837
            self.changeMasterOptions()
            self.state = 3839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.state = 3838
                self.channel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def masterOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.MasterOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.MasterOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_changeMasterOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMasterOptions" ):
                listener.enterChangeMasterOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMasterOptions" ):
                listener.exitChangeMasterOptions(self)




    def changeMasterOptions(self):

        localctx = MySQLParser.ChangeMasterOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_changeMasterOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3841
            self.masterOption()
            self.state = 3846
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,444,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3842
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3843
                    self.masterOption() 
                self.state = 3848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,444,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_HOST_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def NETWORK_NAMESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0)

        def MASTER_BIND_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_BIND_SYMBOL, 0)

        def MASTER_USER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_USER_SYMBOL, 0)

        def MASTER_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0)

        def MASTER_PORT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def MASTER_CONNECT_RETRY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0)

        def MASTER_RETRY_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0)

        def MASTER_DELAY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0)

        def MASTER_SSL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0)

        def MASTER_SSL_CA_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0)

        def MASTER_SSL_CAPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0)

        def MASTER_TLS_VERSION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0)

        def MASTER_SSL_CERT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0)

        def MASTER_TLS_CIPHERSUITES_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0)

        def masterTlsCiphersuitesDef(self):
            return self.getTypedRuleContext(MySQLParser.MasterTlsCiphersuitesDefContext,0)


        def MASTER_SSL_CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0)

        def MASTER_SSL_KEY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0)

        def MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0)

        def MASTER_SSL_CRL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def MASTER_SSL_CRLPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0)

        def MASTER_PUBLIC_KEY_PATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0)

        def GET_MASTER_PUBLIC_KEY_SYMBOL(self):
            return self.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0)

        def MASTER_HEARTBEAT_PERIOD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0)

        def IGNORE_SERVER_IDS_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0)

        def serverIdList(self):
            return self.getTypedRuleContext(MySQLParser.ServerIdListContext,0)


        def MASTER_COMPRESSION_ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0)

        def MASTER_AUTO_POSITION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0)

        def PRIVILEGE_CHECKS_USER_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0)

        def privilegeCheckDef(self):
            return self.getTypedRuleContext(MySQLParser.PrivilegeCheckDefContext,0)


        def REQUIRE_ROW_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0)

        def REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0)

        def tablePrimaryKeyCheckDef(self):
            return self.getTypedRuleContext(MySQLParser.TablePrimaryKeyCheckDefContext,0)


        def masterFileDef(self):
            return self.getTypedRuleContext(MySQLParser.MasterFileDefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_masterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterOption" ):
                listener.enterMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterOption" ):
                listener.exitMasterOption(self)




    def masterOption(self):

        localctx = MySQLParser.MasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_masterOption)
        try:
            self.state = 3940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.MASTER_HOST_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3849
                self.match(MySQLParser.MASTER_HOST_SYMBOL)
                self.state = 3850
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3851
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.NETWORK_NAMESPACE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3852
                self.match(MySQLParser.NETWORK_NAMESPACE_SYMBOL)
                self.state = 3853
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3854
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_BIND_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3855
                self.match(MySQLParser.MASTER_BIND_SYMBOL)
                self.state = 3856
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3857
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_USER_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3858
                self.match(MySQLParser.MASTER_USER_SYMBOL)
                self.state = 3859
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3860
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_PASSWORD_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3861
                self.match(MySQLParser.MASTER_PASSWORD_SYMBOL)
                self.state = 3862
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3863
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_PORT_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3864
                self.match(MySQLParser.MASTER_PORT_SYMBOL)
                self.state = 3865
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3866
                self.ulong_number()
                pass
            elif token in [MySQLParser.MASTER_CONNECT_RETRY_SYMBOL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3867
                self.match(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL)
                self.state = 3868
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3869
                self.ulong_number()
                pass
            elif token in [MySQLParser.MASTER_RETRY_COUNT_SYMBOL]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3870
                self.match(MySQLParser.MASTER_RETRY_COUNT_SYMBOL)
                self.state = 3871
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3872
                self.ulong_number()
                pass
            elif token in [MySQLParser.MASTER_DELAY_SYMBOL]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3873
                self.match(MySQLParser.MASTER_DELAY_SYMBOL)
                self.state = 3874
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3875
                self.ulong_number()
                pass
            elif token in [MySQLParser.MASTER_SSL_SYMBOL]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3876
                self.match(MySQLParser.MASTER_SSL_SYMBOL)
                self.state = 3877
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3878
                self.ulong_number()
                pass
            elif token in [MySQLParser.MASTER_SSL_CA_SYMBOL]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3879
                self.match(MySQLParser.MASTER_SSL_CA_SYMBOL)
                self.state = 3880
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3881
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_SSL_CAPATH_SYMBOL]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3882
                self.match(MySQLParser.MASTER_SSL_CAPATH_SYMBOL)
                self.state = 3883
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3884
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_TLS_VERSION_SYMBOL]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3885
                self.match(MySQLParser.MASTER_TLS_VERSION_SYMBOL)
                self.state = 3886
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3887
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_SSL_CERT_SYMBOL]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3888
                self.match(MySQLParser.MASTER_SSL_CERT_SYMBOL)
                self.state = 3889
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3890
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3891
                self.match(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL)
                self.state = 3892
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3893
                self.masterTlsCiphersuitesDef()
                pass
            elif token in [MySQLParser.MASTER_SSL_CIPHER_SYMBOL]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3894
                self.match(MySQLParser.MASTER_SSL_CIPHER_SYMBOL)
                self.state = 3895
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3896
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_SSL_KEY_SYMBOL]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3897
                self.match(MySQLParser.MASTER_SSL_KEY_SYMBOL)
                self.state = 3898
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3899
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3900
                self.match(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL)
                self.state = 3901
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3902
                self.ulong_number()
                pass
            elif token in [MySQLParser.MASTER_SSL_CRL_SYMBOL]:
                self.enterOuterAlt(localctx, 19)
                self.state = 3903
                self.match(MySQLParser.MASTER_SSL_CRL_SYMBOL)
                self.state = 3904
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3905
                self.textLiteral()
                pass
            elif token in [MySQLParser.MASTER_SSL_CRLPATH_SYMBOL]:
                self.enterOuterAlt(localctx, 20)
                self.state = 3906
                self.match(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL)
                self.state = 3907
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3908
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL]:
                self.enterOuterAlt(localctx, 21)
                self.state = 3909
                self.match(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL)
                self.state = 3910
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3911
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL]:
                self.enterOuterAlt(localctx, 22)
                self.state = 3912
                self.match(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL)
                self.state = 3913
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3914
                self.ulong_number()
                pass
            elif token in [MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL]:
                self.enterOuterAlt(localctx, 23)
                self.state = 3915
                self.match(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL)
                self.state = 3916
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3917
                self.ulong_number()
                pass
            elif token in [MySQLParser.IGNORE_SERVER_IDS_SYMBOL]:
                self.enterOuterAlt(localctx, 24)
                self.state = 3918
                self.match(MySQLParser.IGNORE_SERVER_IDS_SYMBOL)
                self.state = 3919
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3920
                self.serverIdList()
                pass
            elif token in [MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL]:
                self.enterOuterAlt(localctx, 25)
                self.state = 3921
                self.match(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL)
                self.state = 3922
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3923
                self.textStringLiteral()
                pass
            elif token in [MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL]:
                self.enterOuterAlt(localctx, 26)
                self.state = 3924
                self.match(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL)
                self.state = 3925
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3926
                self.ulong_number()
                pass
            elif token in [MySQLParser.MASTER_AUTO_POSITION_SYMBOL]:
                self.enterOuterAlt(localctx, 27)
                self.state = 3927
                self.match(MySQLParser.MASTER_AUTO_POSITION_SYMBOL)
                self.state = 3928
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3929
                self.ulong_number()
                pass
            elif token in [MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL]:
                self.enterOuterAlt(localctx, 28)
                self.state = 3930
                self.match(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL)
                self.state = 3931
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3932
                self.privilegeCheckDef()
                pass
            elif token in [MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL]:
                self.enterOuterAlt(localctx, 29)
                self.state = 3933
                self.match(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL)
                self.state = 3934
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3935
                self.ulong_number()
                pass
            elif token in [MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL]:
                self.enterOuterAlt(localctx, 30)
                self.state = 3936
                self.match(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL)
                self.state = 3937
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3938
                self.tablePrimaryKeyCheckDef()
                pass
            elif token in [MySQLParser.MASTER_LOG_FILE_SYMBOL, MySQLParser.MASTER_LOG_POS_SYMBOL, MySQLParser.RELAY_LOG_FILE_SYMBOL, MySQLParser.RELAY_LOG_POS_SYMBOL]:
                self.enterOuterAlt(localctx, 31)
                self.state = 3939
                self.masterFileDef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeCheckDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userIdentifierOrText(self):
            return self.getTypedRuleContext(MySQLParser.UserIdentifierOrTextContext,0)


        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_privilegeCheckDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeCheckDef" ):
                listener.enterPrivilegeCheckDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeCheckDef" ):
                listener.exitPrivilegeCheckDef(self)




    def privilegeCheckDef(self):

        localctx = MySQLParser.PrivilegeCheckDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_privilegeCheckDef)
        try:
            self.state = 3944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3942
                self.userIdentifierOrText()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3943
                self.match(MySQLParser.NULL_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePrimaryKeyCheckDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STREAM_SYMBOL(self):
            return self.getToken(MySQLParser.STREAM_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def OFF_SYMBOL(self):
            return self.getToken(MySQLParser.OFF_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tablePrimaryKeyCheckDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePrimaryKeyCheckDef" ):
                listener.enterTablePrimaryKeyCheckDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePrimaryKeyCheckDef" ):
                listener.exitTablePrimaryKeyCheckDef(self)




    def tablePrimaryKeyCheckDef(self):

        localctx = MySQLParser.TablePrimaryKeyCheckDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_tablePrimaryKeyCheckDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3946
            _la = self._input.LA(1)
            if not(_la==MySQLParser.ON_SYMBOL or _la==MySQLParser.STREAM_SYMBOL or _la==MySQLParser.OFF_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterTlsCiphersuitesDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_masterTlsCiphersuitesDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterTlsCiphersuitesDef" ):
                listener.enterMasterTlsCiphersuitesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterTlsCiphersuitesDef" ):
                listener.exitMasterTlsCiphersuitesDef(self)




    def masterTlsCiphersuitesDef(self):

        localctx = MySQLParser.MasterTlsCiphersuitesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_masterTlsCiphersuitesDef)
        try:
            self.state = 3950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3948
                self.textStringNoLinebreak()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3949
                self.match(MySQLParser.NULL_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterFileDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def MASTER_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0)

        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def RELAY_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0)

        def RELAY_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_masterFileDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterFileDef" ):
                listener.enterMasterFileDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterFileDef" ):
                listener.exitMasterFileDef(self)




    def masterFileDef(self):

        localctx = MySQLParser.MasterFileDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_masterFileDef)
        try:
            self.state = 3964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.MASTER_LOG_FILE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3952
                self.match(MySQLParser.MASTER_LOG_FILE_SYMBOL)
                self.state = 3953
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3954
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.MASTER_LOG_POS_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3955
                self.match(MySQLParser.MASTER_LOG_POS_SYMBOL)
                self.state = 3956
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3957
                self.ulonglong_number()
                pass
            elif token in [MySQLParser.RELAY_LOG_FILE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3958
                self.match(MySQLParser.RELAY_LOG_FILE_SYMBOL)
                self.state = 3959
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3960
                self.textStringNoLinebreak()
                pass
            elif token in [MySQLParser.RELAY_LOG_POS_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3961
                self.match(MySQLParser.RELAY_LOG_POS_SYMBOL)
                self.state = 3962
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3963
                self.ulong_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerIdListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Ulong_numberContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_serverIdList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerIdList" ):
                listener.enterServerIdList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerIdList" ):
                listener.exitServerIdList(self)




    def serverIdList(self):

        localctx = MySQLParser.ServerIdListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_serverIdList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3966
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (MySQLParser.INT_NUMBER - 747)) | (1 << (MySQLParser.LONG_NUMBER - 747)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 747)) | (1 << (MySQLParser.HEX_NUMBER - 747)) | (1 << (MySQLParser.DECIMAL_NUMBER - 747)) | (1 << (MySQLParser.FLOAT_NUMBER - 747)))) != 0):
                self.state = 3967
                self.ulong_number()
                self.state = 3972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 3968
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3969
                    self.ulong_number()
                    self.state = 3974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3977
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeReplicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGE_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATION_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MySQLParser.FILTER_SYMBOL, 0)

        def filterDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FilterDefinitionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FilterDefinitionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_changeReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeReplication" ):
                listener.enterChangeReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeReplication" ):
                listener.exitChangeReplication(self)




    def changeReplication(self):

        localctx = MySQLParser.ChangeReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_changeReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3979
            self.match(MySQLParser.CHANGE_SYMBOL)
            self.state = 3980
            self.match(MySQLParser.REPLICATION_SYMBOL)
            self.state = 3981
            self.match(MySQLParser.FILTER_SYMBOL)
            self.state = 3982
            self.filterDefinition()
            self.state = 3987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,451,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3983
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3984
                    self.filterDefinition() 
                self.state = 3989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,451,self._ctx)

            self.state = 3992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
            if la_ == 1:
                self.state = 3990
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 3991
                self.channel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLICATE_DO_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def filterDbList(self):
            return self.getTypedRuleContext(MySQLParser.FilterDbListContext,0)


        def REPLICATE_IGNORE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0)

        def REPLICATE_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0)

        def filterTableList(self):
            return self.getTypedRuleContext(MySQLParser.FilterTableListContext,0)


        def REPLICATE_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0)

        def filterStringList(self):
            return self.getTypedRuleContext(MySQLParser.FilterStringListContext,0)


        def REPLICATE_WILD_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_REWRITE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0)

        def filterDbPairList(self):
            return self.getTypedRuleContext(MySQLParser.FilterDbPairListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_filterDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterDefinition" ):
                listener.enterFilterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterDefinition" ):
                listener.exitFilterDefinition(self)




    def filterDefinition(self):

        localctx = MySQLParser.FilterDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_filterDefinition)
        self._la = 0 # Token type
        try:
            self.state = 4043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.REPLICATE_DO_DB_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3994
                self.match(MySQLParser.REPLICATE_DO_DB_SYMBOL)
                self.state = 3995
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3996
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 3998
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                if la_ == 1:
                    self.state = 3997
                    self.filterDbList()


                self.state = 4000
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [MySQLParser.REPLICATE_IGNORE_DB_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4001
                self.match(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL)
                self.state = 4002
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4003
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4005
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                if la_ == 1:
                    self.state = 4004
                    self.filterDbList()


                self.state = 4007
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [MySQLParser.REPLICATE_DO_TABLE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4008
                self.match(MySQLParser.REPLICATE_DO_TABLE_SYMBOL)
                self.state = 4009
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4010
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
                if la_ == 1:
                    self.state = 4011
                    self.filterTableList()


                self.state = 4014
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4015
                self.match(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL)
                self.state = 4016
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4017
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4019
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
                if la_ == 1:
                    self.state = 4018
                    self.filterTableList()


                self.state = 4021
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4022
                self.match(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL)
                self.state = 4023
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4024
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
                if la_ == 1:
                    self.state = 4025
                    self.filterStringList()


                self.state = 4028
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4029
                self.match(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL)
                self.state = 4030
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4031
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
                if la_ == 1:
                    self.state = 4032
                    self.filterStringList()


                self.state = 4035
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [MySQLParser.REPLICATE_REWRITE_DB_SYMBOL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4036
                self.match(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL)
                self.state = 4037
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4038
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.OPEN_PAR_SYMBOL:
                    self.state = 4039
                    self.filterDbPairList()


                self.state = 4042
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterDbListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SchemaRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SchemaRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_filterDbList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterDbList" ):
                listener.enterFilterDbList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterDbList" ):
                listener.exitFilterDbList(self)




    def filterDbList(self):

        localctx = MySQLParser.FilterDbListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_filterDbList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4045
            self.schemaRef()
            self.state = 4050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 4046
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4047
                self.schemaRef()
                self.state = 4052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterTableListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filterTableRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FilterTableRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FilterTableRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_filterTableList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterTableList" ):
                listener.enterFilterTableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterTableList" ):
                listener.exitFilterTableList(self)




    def filterTableList(self):

        localctx = MySQLParser.FilterTableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_filterTableList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4053
            self.filterTableRef()
            self.state = 4058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 4054
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4055
                self.filterTableRef()
                self.state = 4060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterStringListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filterWildDbTableString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FilterWildDbTableStringContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FilterWildDbTableStringContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_filterStringList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterStringList" ):
                listener.enterFilterStringList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterStringList" ):
                listener.exitFilterStringList(self)




    def filterStringList(self):

        localctx = MySQLParser.FilterStringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_filterStringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4061
            self.filterWildDbTableString()
            self.state = 4066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 4062
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4063
                self.filterWildDbTableString()
                self.state = 4068
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterWildDbTableStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_filterWildDbTableString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterWildDbTableString" ):
                listener.enterFilterWildDbTableString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterWildDbTableString" ):
                listener.exitFilterWildDbTableString(self)




    def filterWildDbTableString(self):

        localctx = MySQLParser.FilterWildDbTableStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_filterWildDbTableString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4069
            self.textStringNoLinebreak()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterDbPairListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaIdentifierPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SchemaIdentifierPairContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SchemaIdentifierPairContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_filterDbPairList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterDbPairList" ):
                listener.enterFilterDbPairList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterDbPairList" ):
                listener.exitFilterDbPairList(self)




    def filterDbPairList(self):

        localctx = MySQLParser.FilterDbPairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_filterDbPairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4071
            self.schemaIdentifierPair()
            self.state = 4076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 4072
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4073
                self.schemaIdentifierPair()
                self.state = 4078
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def slaveConnectionOptions(self):
            return self.getTypedRuleContext(MySQLParser.SlaveConnectionOptionsContext,0)


        def slaveThreadOptions(self):
            return self.getTypedRuleContext(MySQLParser.SlaveThreadOptionsContext,0)


        def UNTIL_SYMBOL(self):
            return self.getToken(MySQLParser.UNTIL_SYMBOL, 0)

        def slaveUntilOptions(self):
            return self.getTypedRuleContext(MySQLParser.SlaveUntilOptionsContext,0)


        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def STOP_SYMBOL(self):
            return self.getToken(MySQLParser.STOP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_slave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlave" ):
                listener.enterSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlave" ):
                listener.exitSlave(self)




    def slave(self):

        localctx = MySQLParser.SlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_slave)
        try:
            self.state = 4100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.START_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4079
                self.match(MySQLParser.START_SYMBOL)
                self.state = 4080
                self.match(MySQLParser.SLAVE_SYMBOL)
                self.state = 4082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
                if la_ == 1:
                    self.state = 4081
                    self.slaveThreadOptions()


                self.state = 4086
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,466,self._ctx)
                if la_ == 1:
                    self.state = 4084
                    self.match(MySQLParser.UNTIL_SYMBOL)
                    self.state = 4085
                    self.slaveUntilOptions()


                self.state = 4088
                self.slaveConnectionOptions()
                self.state = 4090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
                if la_ == 1:
                    self.state = 4089
                    self.channel()


                pass
            elif token in [MySQLParser.STOP_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4092
                self.match(MySQLParser.STOP_SYMBOL)
                self.state = 4093
                self.match(MySQLParser.SLAVE_SYMBOL)
                self.state = 4095
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
                if la_ == 1:
                    self.state = 4094
                    self.slaveThreadOptions()


                self.state = 4098
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
                if la_ == 1:
                    self.state = 4097
                    self.channel()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveUntilOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def masterFileDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.MasterFileDefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.MasterFileDefContext,i)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def SQL_AFTER_MTS_GAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0)

        def SQL_BEFORE_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0)

        def SQL_AFTER_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_slaveUntilOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveUntilOptions" ):
                listener.enterSlaveUntilOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveUntilOptions" ):
                listener.exitSlaveUntilOptions(self)




    def slaveUntilOptions(self):

        localctx = MySQLParser.SlaveUntilOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_slaveUntilOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
            if la_ == 1:
                self.state = 4102
                self.masterFileDef()
                pass

            elif la_ == 2:
                self.state = 4103
                if not serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50606")
                self.state = 4104
                _la = self._input.LA(1)
                if not(_la==MySQLParser.SQL_AFTER_GTIDS_SYMBOL or _la==MySQLParser.SQL_BEFORE_GTIDS_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4105
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4106
                self.textString()
                pass

            elif la_ == 3:
                self.state = 4107
                if not serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50606")
                self.state = 4108
                self.match(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL)
                pass


            self.state = 4115
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,472,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4111
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4112
                    self.masterFileDef() 
                self.state = 4117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,472,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveConnectionOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def EQUAL_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.EQUAL_OPERATOR)
            else:
                return self.getToken(MySQLParser.EQUAL_OPERATOR, i)

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringContext,i)


        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def DEFAULT_AUTH_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0)

        def PLUGIN_DIR_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_slaveConnectionOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveConnectionOptions" ):
                listener.enterSlaveConnectionOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveConnectionOptions" ):
                listener.exitSlaveConnectionOptions(self)




    def slaveConnectionOptions(self):

        localctx = MySQLParser.SlaveConnectionOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_slaveConnectionOptions)
        try:
            self.state = 4140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4118
                if not serverVersion >= 50604:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50604")
                self.state = 4122
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
                if la_ == 1:
                    self.state = 4119
                    self.match(MySQLParser.USER_SYMBOL)
                    self.state = 4120
                    self.match(MySQLParser.EQUAL_OPERATOR)
                    self.state = 4121
                    self.textString()


                self.state = 4127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
                if la_ == 1:
                    self.state = 4124
                    self.match(MySQLParser.PASSWORD_SYMBOL)
                    self.state = 4125
                    self.match(MySQLParser.EQUAL_OPERATOR)
                    self.state = 4126
                    self.textString()


                self.state = 4132
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
                if la_ == 1:
                    self.state = 4129
                    self.match(MySQLParser.DEFAULT_AUTH_SYMBOL)
                    self.state = 4130
                    self.match(MySQLParser.EQUAL_OPERATOR)
                    self.state = 4131
                    self.textString()


                self.state = 4137
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
                if la_ == 1:
                    self.state = 4134
                    self.match(MySQLParser.PLUGIN_DIR_SYMBOL)
                    self.state = 4135
                    self.match(MySQLParser.EQUAL_OPERATOR)
                    self.state = 4136
                    self.textString()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveThreadOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slaveThreadOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SlaveThreadOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SlaveThreadOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_slaveThreadOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveThreadOptions" ):
                listener.enterSlaveThreadOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveThreadOptions" ):
                listener.exitSlaveThreadOptions(self)




    def slaveThreadOptions(self):

        localctx = MySQLParser.SlaveThreadOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_slaveThreadOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4142
            self.slaveThreadOption()
            self.state = 4147
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,478,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4143
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4144
                    self.slaveThreadOption() 
                self.state = 4149
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,478,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveThreadOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELAY_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0)

        def SQL_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_slaveThreadOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveThreadOption" ):
                listener.enterSlaveThreadOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveThreadOption" ):
                listener.exitSlaveThreadOption(self)




    def slaveThreadOption(self):

        localctx = MySQLParser.SlaveThreadOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_slaveThreadOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4150
            _la = self._input.LA(1)
            if not(_la==MySQLParser.RELAY_THREAD_SYMBOL or _la==MySQLParser.SQL_THREAD_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupReplicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0)

        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def STOP_SYMBOL(self):
            return self.getToken(MySQLParser.STOP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_groupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupReplication" ):
                listener.enterGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupReplication" ):
                listener.exitGroupReplication(self)




    def groupReplication(self):

        localctx = MySQLParser.GroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_groupReplication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4152
            _la = self._input.LA(1)
            if not(_la==MySQLParser.START_SYMBOL or _la==MySQLParser.STOP_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4153
            self.match(MySQLParser.GROUP_REPLICATION_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparedStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(MySQLParser.PREPARE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def userVariable(self):
            return self.getTypedRuleContext(MySQLParser.UserVariableContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(MySQLParser.ExecuteStatementContext,0)


        def DEALLOCATE_SYMBOL(self):
            return self.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_preparedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparedStatement" ):
                listener.enterPreparedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparedStatement" ):
                listener.exitPreparedStatement(self)




    def preparedStatement(self):

        localctx = MySQLParser.PreparedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_preparedStatement)
        self._la = 0 # Token type
        try:
            self.state = 4166
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.PREPARE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4155
                localctx.type_expression = self.match(MySQLParser.PREPARE_SYMBOL)
                self.state = 4156
                self.identifier()
                self.state = 4157
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 4160
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
                if la_ == 1:
                    self.state = 4158
                    self.textLiteral()
                    pass

                elif la_ == 2:
                    self.state = 4159
                    self.userVariable()
                    pass


                pass
            elif token in [MySQLParser.EXECUTE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4162
                self.executeStatement()
                pass
            elif token in [MySQLParser.DEALLOCATE_SYMBOL, MySQLParser.DROP_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4163
                localctx.type_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.DEALLOCATE_SYMBOL or _la==MySQLParser.DROP_SYMBOL):
                    localctx.type_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4164
                self.match(MySQLParser.PREPARE_SYMBOL)
                self.state = 4165
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE_SYMBOL(self):
            return self.getToken(MySQLParser.EXECUTE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def executeVarList(self):
            return self.getTypedRuleContext(MySQLParser.ExecuteVarListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)




    def executeStatement(self):

        localctx = MySQLParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_executeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4168
            self.match(MySQLParser.EXECUTE_SYMBOL)
            self.state = 4169
            self.identifier()
            self.state = 4172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.USING_SYMBOL:
                self.state = 4170
                self.match(MySQLParser.USING_SYMBOL)
                self.state = 4171
                self.executeVarList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteVarListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UserVariableContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UserVariableContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_executeVarList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteVarList" ):
                listener.enterExecuteVarList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteVarList" ):
                listener.exitExecuteVarList(self)




    def executeVarList(self):

        localctx = MySQLParser.ExecuteVarListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_executeVarList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4174
            self.userVariable()
            self.state = 4179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 4175
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4176
                self.userVariable()
                self.state = 4181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloneStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLONE_SYMBOL(self):
            return self.getToken(MySQLParser.CLONE_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def REMOTE_SYMBOL(self):
            return self.getToken(MySQLParser.REMOTE_SYMBOL, 0)

        def INSTANCE_SYMBOL(self):
            return self.getToken(MySQLParser.INSTANCE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MySQLParser.COLON_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATION_SYMBOL, 0)

        def dataDirSSL(self):
            return self.getTypedRuleContext(MySQLParser.DataDirSSLContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_cloneStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneStatement" ):
                listener.enterCloneStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneStatement" ):
                listener.exitCloneStatement(self)




    def cloneStatement(self):

        localctx = MySQLParser.CloneStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_cloneStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4182
            self.match(MySQLParser.CLONE_SYMBOL)
            self.state = 4207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.state = 4183
                self.match(MySQLParser.LOCAL_SYMBOL)
                self.state = 4184
                self.match(MySQLParser.DATA_SYMBOL)
                self.state = 4185
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 4187
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
                if la_ == 1:
                    self.state = 4186
                    self.equal()


                self.state = 4189
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.state = 4190
                self.match(MySQLParser.REMOTE_SYMBOL)
                self.state = 4193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FOR_SYMBOL:
                    self.state = 4191
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 4192
                    self.match(MySQLParser.REPLICATION_SYMBOL)


                pass

            elif la_ == 3:
                self.state = 4195
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 4196
                self.match(MySQLParser.INSTANCE_SYMBOL)
                self.state = 4197
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 4198
                self.user()
                self.state = 4199
                self.match(MySQLParser.COLON_SYMBOL)
                self.state = 4200
                self.ulong_number()
                self.state = 4201
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 4202
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 4203
                self.textStringLiteral()
                self.state = 4205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.DATA_SYMBOL or _la==MySQLParser.REQUIRE_SYMBOL:
                    self.state = 4204
                    self.dataDirSSL()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDirSSLContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ssl(self):
            return self.getTypedRuleContext(MySQLParser.SslContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dataDirSSL

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDirSSL" ):
                listener.enterDataDirSSL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDirSSL" ):
                listener.exitDataDirSSL(self)




    def dataDirSSL(self):

        localctx = MySQLParser.DataDirSSLContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_dataDirSSL)
        self._la = 0 # Token type
        try:
            self.state = 4219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.REQUIRE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4209
                self.ssl()
                pass
            elif token in [MySQLParser.DATA_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4210
                self.match(MySQLParser.DATA_SYMBOL)
                self.state = 4211
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 4213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
                if la_ == 1:
                    self.state = 4212
                    self.equal()


                self.state = 4215
                self.textStringLiteral()
                self.state = 4217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.REQUIRE_SYMBOL:
                    self.state = 4216
                    self.ssl()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SslContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRE_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_SYMBOL, 0)

        def SSL_SYMBOL(self):
            return self.getToken(MySQLParser.SSL_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ssl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSsl" ):
                listener.enterSsl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSsl" ):
                listener.exitSsl(self)




    def ssl(self):

        localctx = MySQLParser.SslContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_ssl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4221
            self.match(MySQLParser.REQUIRE_SYMBOL)
            self.state = 4223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.NO_SYMBOL:
                self.state = 4222
                self.match(MySQLParser.NO_SYMBOL)


            self.state = 4225
            self.match(MySQLParser.SSL_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccountManagementStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUser(self):
            return self.getTypedRuleContext(MySQLParser.AlterUserContext,0)


        def createUser(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserContext,0)


        def dropUser(self):
            return self.getTypedRuleContext(MySQLParser.DropUserContext,0)


        def grant(self):
            return self.getTypedRuleContext(MySQLParser.GrantContext,0)


        def renameUser(self):
            return self.getTypedRuleContext(MySQLParser.RenameUserContext,0)


        def revoke(self):
            return self.getTypedRuleContext(MySQLParser.RevokeContext,0)


        def setRole(self):
            return self.getTypedRuleContext(MySQLParser.SetRoleContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_accountManagementStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccountManagementStatement" ):
                listener.enterAccountManagementStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccountManagementStatement" ):
                listener.exitAccountManagementStatement(self)




    def accountManagementStatement(self):

        localctx = MySQLParser.AccountManagementStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_accountManagementStatement)
        try:
            self.state = 4236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4227
                if not serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50606")
                self.state = 4228
                self.alterUser()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4229
                self.createUser()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4230
                self.dropUser()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4231
                self.grant()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4232
                self.renameUser()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4233
                self.revoke()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4234
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4235
                self.setRole()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MySQLParser.ALTER_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def alterUserTail(self):
            return self.getTypedRuleContext(MySQLParser.AlterUserTailContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUser" ):
                listener.enterAlterUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUser" ):
                listener.exitAlterUser(self)




    def alterUser(self):

        localctx = MySQLParser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_alterUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4238
            self.match(MySQLParser.ALTER_SYMBOL)
            self.state = 4239
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
            if la_ == 1:
                self.state = 4240
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 4241
                self.ifExists()


            self.state = 4244
            self.alterUserTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createUserTail(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserTailContext,0)


        def createUserList(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserListContext,0)


        def alterUserList(self):
            return self.getTypedRuleContext(MySQLParser.AlterUserListContext,0)


        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def replacePassword(self):
            return self.getTypedRuleContext(MySQLParser.ReplacePasswordContext,0)


        def retainCurrentPassword(self):
            return self.getTypedRuleContext(MySQLParser.RetainCurrentPasswordContext,0)


        def discardOldPassword(self):
            return self.getTypedRuleContext(MySQLParser.DiscardOldPasswordContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def RANDOM_SYMBOL(self):
            return self.getToken(MySQLParser.RANDOM_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def FAILED_LOGIN_ATTEMPTS_SYMBOL(self):
            return self.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def PASSWORD_LOCK_TIME_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0)

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterUserTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserTail" ):
                listener.enterAlterUserTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserTail" ):
                listener.exitAlterUserTail(self)




    def alterUserTail(self):

        localctx = MySQLParser.AlterUserTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_alterUserTail)
        self._la = 0 # Token type
        try:
            self.state = 4300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
                if la_ == 1:
                    self.state = 4246
                    if not serverVersion < 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 80014")
                    self.state = 4247
                    self.createUserList()
                    pass

                elif la_ == 2:
                    self.state = 4248
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 4249
                    self.alterUserList()
                    pass


                self.state = 4252
                self.createUserTail()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4254
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 4255
                self.user()
                self.state = 4256
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 4257
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 4258
                self.textString()
                self.state = 4261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
                if la_ == 1:
                    self.state = 4259
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 4260
                    self.replacePassword()


                self.state = 4265
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
                if la_ == 1:
                    self.state = 4263
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 4264
                    self.retainCurrentPassword()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4267
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 4268
                self.user()
                self.state = 4269
                self.discardOldPassword()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4271
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4272
                self.user()
                self.state = 4273
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 4274
                self.match(MySQLParser.ROLE_SYMBOL)
                self.state = 4278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
                if la_ == 1:
                    self.state = 4275
                    self.match(MySQLParser.ALL_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 4276
                    self.match(MySQLParser.NONE_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 4277
                    self.roleList()
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4280
                if not serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80018")
                self.state = 4281
                self.user()
                self.state = 4282
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 4285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.WITH_SYMBOL:
                    self.state = 4283
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 4284
                    self.textOrIdentifier()


                self.state = 4287
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 4288
                self.match(MySQLParser.RANDOM_SYMBOL)
                self.state = 4289
                self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 4291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.RETAIN_SYMBOL:
                    self.state = 4290
                    self.retainCurrentPassword()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4293
                self.match(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL)
                self.state = 4294
                self.real_ulong_number()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4295
                self.match(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL)
                self.state = 4298
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.INT_NUMBER, MySQLParser.LONG_NUMBER, MySQLParser.ULONGLONG_NUMBER, MySQLParser.HEX_NUMBER]:
                    self.state = 4296
                    self.real_ulong_number()
                    pass
                elif token in [MySQLParser.UNBOUNDED_SYMBOL]:
                    self.state = 4297
                    self.match(MySQLParser.UNBOUNDED_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def parentheses(self):
            return self.getTypedRuleContext(MySQLParser.ParenthesesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_userFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserFunction" ):
                listener.enterUserFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserFunction" ):
                listener.exitUserFunction(self)




    def userFunction(self):

        localctx = MySQLParser.UserFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_userFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4302
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4303
            self.parentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def createUserList(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserListContext,0)


        def defaultRoleClause(self):
            return self.getTypedRuleContext(MySQLParser.DefaultRoleClauseContext,0)


        def createUserTail(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserTailContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUser" ):
                listener.enterCreateUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUser" ):
                listener.exitCreateUser(self)




    def createUser(self):

        localctx = MySQLParser.CreateUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_createUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4305
            self.match(MySQLParser.CREATE_SYMBOL)
            self.state = 4306
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
            if la_ == 1:
                self.state = 4307
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 4308
                self.ifNotExists()
                pass

            elif la_ == 2:
                pass


            self.state = 4312
            self.createUserList()
            self.state = 4313
            self.defaultRoleClause()
            self.state = 4314
            self.createUserTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requireClause(self):
            return self.getTypedRuleContext(MySQLParser.RequireClauseContext,0)


        def connectOptions(self):
            return self.getTypedRuleContext(MySQLParser.ConnectOptionsContext,0)


        def accountLockPasswordExpireOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AccountLockPasswordExpireOptionsContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AccountLockPasswordExpireOptionsContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_createUserTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserTail" ):
                listener.enterCreateUserTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserTail" ):
                listener.exitCreateUserTail(self)




    def createUserTail(self):

        localctx = MySQLParser.CreateUserTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_createUserTail)
        self._la = 0 # Token type
        try:
            self.state = 4330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4316
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 4318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.REQUIRE_SYMBOL:
                    self.state = 4317
                    self.requireClause()


                self.state = 4321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.WITH_SYMBOL:
                    self.state = 4320
                    self.connectOptions()


                self.state = 4326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.ACCOUNT_SYMBOL or _la==MySQLParser.PASSWORD_SYMBOL:
                    self.state = 4323
                    self.accountLockPasswordExpireOptions()
                    self.state = 4328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_defaultRoleClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRoleClause" ):
                listener.enterDefaultRoleClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRoleClause" ):
                listener.exitDefaultRoleClause(self)




    def defaultRoleClause(self):

        localctx = MySQLParser.DefaultRoleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_defaultRoleClause)
        try:
            self.state = 4339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4332
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,506,self._ctx)
                if la_ == 1:
                    self.state = 4333
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    self.state = 4334
                    self.match(MySQLParser.ROLE_SYMBOL)
                    self.state = 4335
                    self.roleList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def REQUIRE_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_SYMBOL, 0)

        def requireList(self):
            return self.getTypedRuleContext(MySQLParser.RequireListContext,0)


        def SSL_SYMBOL(self):
            return self.getToken(MySQLParser.SSL_SYMBOL, 0)

        def X509_SYMBOL(self):
            return self.getToken(MySQLParser.X509_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_requireClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireClause" ):
                listener.enterRequireClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireClause" ):
                listener.exitRequireClause(self)




    def requireClause(self):

        localctx = MySQLParser.RequireClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_requireClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4341
            self.match(MySQLParser.REQUIRE_SYMBOL)
            self.state = 4344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.CIPHER_SYMBOL, MySQLParser.ISSUER_SYMBOL, MySQLParser.SUBJECT_SYMBOL]:
                self.state = 4342
                self.requireList()
                pass
            elif token in [MySQLParser.NONE_SYMBOL, MySQLParser.SSL_SYMBOL, MySQLParser.X509_SYMBOL]:
                self.state = 4343
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.NONE_SYMBOL or _la==MySQLParser.SSL_SYMBOL or _la==MySQLParser.X509_SYMBOL):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def MAX_QUERIES_PER_HOUR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL)
            else:
                return self.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i)

        def ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Ulong_numberContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,i)


        def MAX_UPDATES_PER_HOUR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL)
            else:
                return self.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL)
            else:
                return self.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i)

        def MAX_USER_CONNECTIONS_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL)
            else:
                return self.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_connectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnectOptions" ):
                listener.enterConnectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnectOptions" ):
                listener.exitConnectOptions(self)




    def connectOptions(self):

        localctx = MySQLParser.ConnectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_connectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4346
            self.match(MySQLParser.WITH_SYMBOL)
            self.state = 4355 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4355
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL]:
                    self.state = 4347
                    self.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL)
                    self.state = 4348
                    self.ulong_number()
                    pass
                elif token in [MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL]:
                    self.state = 4349
                    self.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL)
                    self.state = 4350
                    self.ulong_number()
                    pass
                elif token in [MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL]:
                    self.state = 4351
                    self.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL)
                    self.state = 4352
                    self.ulong_number()
                    pass
                elif token in [MySQLParser.MAX_USER_CONNECTIONS_SYMBOL]:
                    self.state = 4353
                    self.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL)
                    self.state = 4354
                    self.ulong_number()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4357 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 321)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 321)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 321)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 321)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccountLockPasswordExpireOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ACCOUNT_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MySQLParser.UNLOCK_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def EXPIRE_SYMBOL(self):
            return self.getToken(MySQLParser.EXPIRE_SYMBOL, 0)

        def HISTORY_SYMBOL(self):
            return self.getToken(MySQLParser.HISTORY_SYMBOL, 0)

        def REUSE_SYMBOL(self):
            return self.getToken(MySQLParser.REUSE_SYMBOL, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)

        def REQUIRE_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SYMBOL, 0)

        def NEVER_SYMBOL(self):
            return self.getToken(MySQLParser.NEVER_SYMBOL, 0)

        def OPTIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_accountLockPasswordExpireOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccountLockPasswordExpireOptions" ):
                listener.enterAccountLockPasswordExpireOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccountLockPasswordExpireOptions" ):
                listener.exitAccountLockPasswordExpireOptions(self)




    def accountLockPasswordExpireOptions(self):

        localctx = MySQLParser.AccountLockPasswordExpireOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_accountLockPasswordExpireOptions)
        self._la = 0 # Token type
        try:
            self.state = 4392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.ACCOUNT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4359
                self.match(MySQLParser.ACCOUNT_SYMBOL)
                self.state = 4360
                _la = self._input.LA(1)
                if not(_la==MySQLParser.LOCK_SYMBOL or _la==MySQLParser.UNLOCK_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySQLParser.PASSWORD_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4361
                self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 4390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
                if la_ == 1:
                    self.state = 4362
                    self.match(MySQLParser.EXPIRE_SYMBOL)
                    self.state = 4369
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySQLParser.INTERVAL_SYMBOL]:
                        self.state = 4363
                        self.match(MySQLParser.INTERVAL_SYMBOL)
                        self.state = 4364
                        self.real_ulong_number()
                        self.state = 4365
                        self.match(MySQLParser.DAY_SYMBOL)
                        pass
                    elif token in [MySQLParser.NEVER_SYMBOL]:
                        self.state = 4367
                        self.match(MySQLParser.NEVER_SYMBOL)
                        pass
                    elif token in [MySQLParser.DEFAULT_SYMBOL]:
                        self.state = 4368
                        self.match(MySQLParser.DEFAULT_SYMBOL)
                        pass
                    elif token in [MySQLParser.EOF, MySQLParser.ACCOUNT_SYMBOL, MySQLParser.PASSWORD_SYMBOL, MySQLParser.SEMICOLON_SYMBOL]:
                        pass
                    else:
                        pass
                    pass

                elif la_ == 2:
                    self.state = 4371
                    self.match(MySQLParser.HISTORY_SYMBOL)
                    self.state = 4374
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySQLParser.INT_NUMBER, MySQLParser.LONG_NUMBER, MySQLParser.ULONGLONG_NUMBER, MySQLParser.HEX_NUMBER]:
                        self.state = 4372
                        self.real_ulong_number()
                        pass
                    elif token in [MySQLParser.DEFAULT_SYMBOL]:
                        self.state = 4373
                        self.match(MySQLParser.DEFAULT_SYMBOL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 4376
                    self.match(MySQLParser.REUSE_SYMBOL)
                    self.state = 4377
                    self.match(MySQLParser.INTERVAL_SYMBOL)
                    self.state = 4382
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySQLParser.INT_NUMBER, MySQLParser.LONG_NUMBER, MySQLParser.ULONGLONG_NUMBER, MySQLParser.HEX_NUMBER]:
                        self.state = 4378
                        self.real_ulong_number()
                        self.state = 4379
                        self.match(MySQLParser.DAY_SYMBOL)
                        pass
                    elif token in [MySQLParser.DEFAULT_SYMBOL]:
                        self.state = 4381
                        self.match(MySQLParser.DEFAULT_SYMBOL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 4:
                    self.state = 4384
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 4385
                    self.match(MySQLParser.REQUIRE_SYMBOL)
                    self.state = 4386
                    self.match(MySQLParser.CURRENT_SYMBOL)
                    self.state = 4388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.DEFAULT_SYMBOL or _la==MySQLParser.OPTIONAL_SYMBOL:
                        self.state = 4387
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.DEFAULT_SYMBOL or _la==MySQLParser.OPTIONAL_SYMBOL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(MySQLParser.UserListContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUser" ):
                listener.enterDropUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUser" ):
                listener.exitDropUser(self)




    def dropUser(self):

        localctx = MySQLParser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_dropUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4394
            self.match(MySQLParser.DROP_SYMBOL)
            self.state = 4395
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
            if la_ == 1:
                self.state = 4396
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 4397
                self.ifExists()


            self.state = 4400
            self.userList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.GRANT_SYMBOL)
            else:
                return self.getToken(MySQLParser.GRANT_SYMBOL, i)

        def roleOrPrivilegesList(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrPrivilegesListContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(MySQLParser.UserListContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def grantIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.GrantIdentifierContext,0)


        def grantTargetList(self):
            return self.getTypedRuleContext(MySQLParser.GrantTargetListContext,0)


        def PROXY_SYMBOL(self):
            return self.getToken(MySQLParser.PROXY_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def ADMIN_SYMBOL(self):
            return self.getToken(MySQLParser.ADMIN_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def aclType(self):
            return self.getTypedRuleContext(MySQLParser.AclTypeContext,0)


        def versionedRequireClause(self):
            return self.getTypedRuleContext(MySQLParser.VersionedRequireClauseContext,0)


        def grantOptions(self):
            return self.getTypedRuleContext(MySQLParser.GrantOptionsContext,0)


        def grantAs(self):
            return self.getTypedRuleContext(MySQLParser.GrantAsContext,0)


        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_grant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant" ):
                listener.enterGrant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant" ):
                listener.exitGrant(self)




    def grant(self):

        localctx = MySQLParser.GrantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_grant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4402
            self.match(MySQLParser.GRANT_SYMBOL)
            self.state = 4445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                self.state = 4403
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4404
                self.roleOrPrivilegesList()
                self.state = 4405
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4406
                self.userList()
                self.state = 4410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.WITH_SYMBOL:
                    self.state = 4407
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 4408
                    self.match(MySQLParser.ADMIN_SYMBOL)
                    self.state = 4409
                    self.match(MySQLParser.OPTION_SYMBOL)


                pass

            elif la_ == 2:
                self.state = 4417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
                if la_ == 1:
                    self.state = 4412
                    self.roleOrPrivilegesList()
                    pass

                elif la_ == 2:
                    self.state = 4413
                    self.match(MySQLParser.ALL_SYMBOL)
                    self.state = 4415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.PRIVILEGES_SYMBOL:
                        self.state = 4414
                        self.match(MySQLParser.PRIVILEGES_SYMBOL)


                    pass


                self.state = 4419
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4421
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                if la_ == 1:
                    self.state = 4420
                    self.aclType()


                self.state = 4423
                self.grantIdentifier()
                self.state = 4424
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4425
                self.grantTargetList()
                self.state = 4427
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
                if la_ == 1:
                    self.state = 4426
                    self.versionedRequireClause()


                self.state = 4430
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
                if la_ == 1:
                    self.state = 4429
                    self.grantOptions()


                self.state = 4433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.AS_SYMBOL:
                    self.state = 4432
                    self.grantAs()


                pass

            elif la_ == 3:
                self.state = 4435
                self.match(MySQLParser.PROXY_SYMBOL)
                self.state = 4436
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4437
                self.user()
                self.state = 4438
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4439
                self.grantTargetList()
                self.state = 4443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.WITH_SYMBOL:
                    self.state = 4440
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 4441
                    self.match(MySQLParser.GRANT_SYMBOL)
                    self.state = 4442
                    self.match(MySQLParser.OPTION_SYMBOL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantTargetListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createUserList(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserListContext,0)


        def userList(self):
            return self.getTypedRuleContext(MySQLParser.UserListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_grantTargetList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantTargetList" ):
                listener.enterGrantTargetList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantTargetList" ):
                listener.exitGrantTargetList(self)




    def grantTargetList(self):

        localctx = MySQLParser.GrantTargetListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_grantTargetList)
        try:
            self.state = 4451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4447
                if not serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80011")
                self.state = 4448
                self.createUserList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4449
                if not serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80011")
                self.state = 4450
                self.userList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def grantOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.GrantOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.GrantOptionContext,i)


        def GRANT_SYMBOL(self):
            return self.getToken(MySQLParser.GRANT_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_grantOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOptions" ):
                listener.enterGrantOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOptions" ):
                listener.exitGrantOptions(self)




    def grantOptions(self):

        localctx = MySQLParser.GrantOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_grantOptions)
        self._la = 0 # Token type
        try:
            self.state = 4464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4453
                if not serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80011")
                self.state = 4454
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 4456 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4455
                    self.grantOption()
                    self.state = 4458 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySQLParser.GRANT_SYMBOL or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 321)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 321)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 321)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 321)))) != 0)):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4460
                if not serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80011")
                self.state = 4461
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 4462
                self.match(MySQLParser.GRANT_SYMBOL)
                self.state = 4463
                self.match(MySQLParser.OPTION_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptRoleListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT_SYMBOL(self):
            return self.getToken(MySQLParser.EXCEPT_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_exceptRoleList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptRoleList" ):
                listener.enterExceptRoleList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptRoleList" ):
                listener.exitExceptRoleList(self)




    def exceptRoleList(self):

        localctx = MySQLParser.ExceptRoleListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_exceptRoleList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4466
            self.match(MySQLParser.EXCEPT_SYMBOL)
            self.state = 4467
            self.roleList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithRolesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def exceptRoleList(self):
            return self.getTypedRuleContext(MySQLParser.ExceptRoleListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_withRoles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithRoles" ):
                listener.enterWithRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithRoles" ):
                listener.exitWithRoles(self)




    def withRoles(self):

        localctx = MySQLParser.WithRolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_withRoles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4469
            self.match(MySQLParser.WITH_SYMBOL)
            self.state = 4470
            self.match(MySQLParser.ROLE_SYMBOL)
            self.state = 4478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
            if la_ == 1:
                self.state = 4471
                self.roleList()
                pass

            elif la_ == 2:
                self.state = 4472
                self.match(MySQLParser.ALL_SYMBOL)
                self.state = 4474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EXCEPT_SYMBOL:
                    self.state = 4473
                    self.exceptRoleList()


                pass

            elif la_ == 3:
                self.state = 4476
                self.match(MySQLParser.NONE_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 4477
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantAsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def withRoles(self):
            return self.getTypedRuleContext(MySQLParser.WithRolesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_grantAs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantAs" ):
                listener.enterGrantAs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantAs" ):
                listener.exitGrantAs(self)




    def grantAs(self):

        localctx = MySQLParser.GrantAsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_grantAs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4480
            self.match(MySQLParser.AS_SYMBOL)
            self.state = 4481
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.WITH_SYMBOL:
                self.state = 4482
                self.withRoles()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionedRequireClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requireClause(self):
            return self.getTypedRuleContext(MySQLParser.RequireClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_versionedRequireClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionedRequireClause" ):
                listener.enterVersionedRequireClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionedRequireClause" ):
                listener.exitVersionedRequireClause(self)




    def versionedRequireClause(self):

        localctx = MySQLParser.VersionedRequireClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_versionedRequireClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4485
            if not serverVersion < 80011:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion < 80011")
            self.state = 4486
            self.requireClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME_SYMBOL(self):
            return self.getToken(MySQLParser.RENAME_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def user(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UserContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UserContext,i)


        def TO_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.TO_SYMBOL)
            else:
                return self.getToken(MySQLParser.TO_SYMBOL, i)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_renameUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUser" ):
                listener.enterRenameUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUser" ):
                listener.exitRenameUser(self)




    def renameUser(self):

        localctx = MySQLParser.RenameUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_renameUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4488
            self.match(MySQLParser.RENAME_SYMBOL)
            self.state = 4489
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4490
            self.user()
            self.state = 4491
            self.match(MySQLParser.TO_SYMBOL)
            self.state = 4492
            self.user()
            self.state = 4500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 4493
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4494
                self.user()
                self.state = 4495
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4496
                self.user()
                self.state = 4502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MySQLParser.REVOKE_SYMBOL, 0)

        def roleOrPrivilegesList(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrPrivilegesListContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(MySQLParser.UserListContext,0)


        def onTypeTo(self):
            return self.getTypedRuleContext(MySQLParser.OnTypeToContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(MySQLParser.PROXY_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def grantIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.GrantIdentifierContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(MySQLParser.GRANT_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def aclType(self):
            return self.getTypedRuleContext(MySQLParser.AclTypeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_revoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke" ):
                listener.enterRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke" ):
                listener.exitRevoke(self)




    def revoke(self):

        localctx = MySQLParser.RevokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_revoke)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4503
            self.match(MySQLParser.REVOKE_SYMBOL)
            self.state = 4537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,537,self._ctx)
            if la_ == 1:
                self.state = 4504
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4505
                self.roleOrPrivilegesList()
                self.state = 4506
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 4507
                self.userList()
                pass

            elif la_ == 2:
                self.state = 4509
                self.roleOrPrivilegesList()
                self.state = 4510
                self.onTypeTo()
                self.state = 4511
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 4512
                self.userList()
                pass

            elif la_ == 3:
                self.state = 4514
                self.match(MySQLParser.ALL_SYMBOL)
                self.state = 4516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,534,self._ctx)
                if la_ == 1:
                    self.state = 4515
                    self.match(MySQLParser.PRIVILEGES_SYMBOL)


                self.state = 4529
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
                if la_ == 1:
                    self.state = 4518
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 4519
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 4521
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
                    if la_ == 1:
                        self.state = 4520
                        self.aclType()


                    self.state = 4523
                    self.grantIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 4524
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4525
                    self.match(MySQLParser.GRANT_SYMBOL)
                    self.state = 4526
                    self.match(MySQLParser.OPTION_SYMBOL)
                    self.state = 4527
                    self.match(MySQLParser.FROM_SYMBOL)
                    self.state = 4528
                    self.userList()
                    pass


                pass

            elif la_ == 4:
                self.state = 4531
                self.match(MySQLParser.PROXY_SYMBOL)
                self.state = 4532
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4533
                self.user()
                self.state = 4534
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 4535
                self.userList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnTypeToContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def grantIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.GrantIdentifierContext,0)


        def aclType(self):
            return self.getTypedRuleContext(MySQLParser.AclTypeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_onTypeTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnTypeTo" ):
                listener.enterOnTypeTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnTypeTo" ):
                listener.exitOnTypeTo(self)




    def onTypeTo(self):

        localctx = MySQLParser.OnTypeToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_onTypeTo)
        self._la = 0 # Token type
        try:
            self.state = 4553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4539
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 4540
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4542
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
                if la_ == 1:
                    self.state = 4541
                    self.aclType()


                self.state = 4544
                self.grantIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4545
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ON_SYMBOL:
                    self.state = 4546
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 4548
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
                    if la_ == 1:
                        self.state = 4547
                        self.aclType()


                    self.state = 4550
                    self.grantIdentifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AclTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_aclType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAclType" ):
                listener.enterAclType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAclType" ):
                listener.exitAclType(self)




    def aclType(self):

        localctx = MySQLParser.AclTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_aclType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4555
            _la = self._input.LA(1)
            if not(_la==MySQLParser.FUNCTION_SYMBOL or _la==MySQLParser.PROCEDURE_SYMBOL or _la==MySQLParser.TABLE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrPrivilegesListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleOrPrivilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoleOrPrivilegeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoleOrPrivilegeContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_roleOrPrivilegesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrPrivilegesList" ):
                listener.enterRoleOrPrivilegesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrPrivilegesList" ):
                listener.exitRoleOrPrivilegesList(self)




    def roleOrPrivilegesList(self):

        localctx = MySQLParser.RoleOrPrivilegesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_roleOrPrivilegesList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4557
            self.roleOrPrivilege()
            self.state = 4562
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,542,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4558
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4559
                    self.roleOrPrivilege() 
                self.state = 4564
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,542,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrPrivilegeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db_object = None # Token

        def roleIdentifierOrText(self):
            return self.getTypedRuleContext(MySQLParser.RoleIdentifierOrTextContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(MySQLParser.AT_TEXT_SUFFIX, 0)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefListContext,0)


        def SELECT_SYMBOL(self):
            return self.getToken(MySQLParser.SELECT_SYMBOL, 0)

        def INSERT_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def REFERENCES_SYMBOL(self):
            return self.getToken(MySQLParser.REFERENCES_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MySQLParser.DELETE_SYMBOL, 0)

        def USAGE_SYMBOL(self):
            return self.getToken(MySQLParser.USAGE_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def EXECUTE_SYMBOL(self):
            return self.getToken(MySQLParser.EXECUTE_SYMBOL, 0)

        def RELOAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELOAD_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def PROCESS_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESS_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(MySQLParser.PROXY_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(MySQLParser.SUPER_SYMBOL, 0)

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def TRIGGER_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGER_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(MySQLParser.GRANT_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def SHOW_SYMBOL(self):
            return self.getToken(MySQLParser.SHOW_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASES_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPORARY_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def ROUTINE_SYMBOL(self):
            return self.getToken(MySQLParser.ROUTINE_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATION_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MySQLParser.CLIENT_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def ALTER_SYMBOL(self):
            return self.getToken(MySQLParser.ALTER_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_roleOrPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrPrivilege" ):
                listener.enterRoleOrPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrPrivilege" ):
                listener.exitRoleOrPrivilege(self)




    def roleOrPrivilege(self):

        localctx = MySQLParser.RoleOrPrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_roleOrPrivilege)
        self._la = 0 # Token type
        try:
            self.state = 4606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4565
                if not serverVersion > 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion > 80000")
                self.state = 4576
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,545,self._ctx)
                if la_ == 1:
                    self.state = 4566
                    self.roleIdentifierOrText()
                    self.state = 4568
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
                    if la_ == 1:
                        self.state = 4567
                        self.columnInternalRefList()


                    pass

                elif la_ == 2:
                    self.state = 4570
                    self.roleIdentifierOrText()
                    self.state = 4574
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySQLParser.AT_TEXT_SUFFIX]:
                        self.state = 4571
                        self.match(MySQLParser.AT_TEXT_SUFFIX)
                        pass
                    elif token in [MySQLParser.AT_SIGN_SYMBOL]:
                        self.state = 4572
                        self.match(MySQLParser.AT_SIGN_SYMBOL)
                        self.state = 4573
                        self.textOrIdentifier()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4578
                _la = self._input.LA(1)
                if not(_la==MySQLParser.INSERT_SYMBOL or _la==MySQLParser.REFERENCES_SYMBOL or _la==MySQLParser.SELECT_SYMBOL or _la==MySQLParser.UPDATE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,546,self._ctx)
                if la_ == 1:
                    self.state = 4579
                    self.columnInternalRefList()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4582
                _la = self._input.LA(1)
                if not(((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (MySQLParser.DELETE_SYMBOL - 133)) | (1 << (MySQLParser.DROP_SYMBOL - 133)) | (1 << (MySQLParser.EVENT_SYMBOL - 133)) | (1 << (MySQLParser.EXECUTE_SYMBOL - 133)) | (1 << (MySQLParser.FILE_SYMBOL - 133)))) != 0) or _la==MySQLParser.INDEX_SYMBOL or ((((_la - 423)) & ~0x3f) == 0 and ((1 << (_la - 423)) & ((1 << (MySQLParser.PROCESS_SYMBOL - 423)) | (1 << (MySQLParser.PROXY_SYMBOL - 423)) | (1 << (MySQLParser.RELOAD_SYMBOL - 423)))) != 0) or _la==MySQLParser.SHUTDOWN_SYMBOL or _la==MySQLParser.SUPER_SYMBOL or _la==MySQLParser.TRIGGER_SYMBOL or _la==MySQLParser.USAGE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4583
                self.match(MySQLParser.GRANT_SYMBOL)
                self.state = 4584
                self.match(MySQLParser.OPTION_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4585
                self.match(MySQLParser.SHOW_SYMBOL)
                self.state = 4586
                self.match(MySQLParser.DATABASES_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4587
                self.match(MySQLParser.CREATE_SYMBOL)
                self.state = 4591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
                if la_ == 1:
                    self.state = 4588
                    self.match(MySQLParser.TEMPORARY_SYMBOL)
                    self.state = 4589
                    localctx.db_object = self.match(MySQLParser.TABLES_SYMBOL)

                elif la_ == 2:
                    self.state = 4590
                    localctx.db_object = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.ROUTINE_SYMBOL or _la==MySQLParser.TABLESPACE_SYMBOL or _la==MySQLParser.USER_SYMBOL or _la==MySQLParser.VIEW_SYMBOL):
                        localctx.db_object = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4593
                self.match(MySQLParser.LOCK_SYMBOL)
                self.state = 4594
                self.match(MySQLParser.TABLES_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4595
                self.match(MySQLParser.REPLICATION_SYMBOL)
                self.state = 4596
                localctx.db_object = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.CLIENT_SYMBOL or _la==MySQLParser.SLAVE_SYMBOL):
                    localctx.db_object = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4597
                self.match(MySQLParser.SHOW_SYMBOL)
                self.state = 4598
                self.match(MySQLParser.VIEW_SYMBOL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4599
                self.match(MySQLParser.ALTER_SYMBOL)
                self.state = 4601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
                if la_ == 1:
                    self.state = 4600
                    self.match(MySQLParser.ROUTINE_SYMBOL)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4603
                if not serverVersion > 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion > 80000")
                self.state = 4604
                _la = self._input.LA(1)
                if not(_la==MySQLParser.CREATE_SYMBOL or _la==MySQLParser.DROP_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4605
                self.match(MySQLParser.ROLE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MULT_OPERATOR)
            else:
                return self.getToken(MySQLParser.MULT_OPERATOR, i)

        def DOT_SYMBOL(self):
            return self.getToken(MySQLParser.DOT_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(MySQLParser.SchemaRefContext,0)


        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_grantIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantIdentifier" ):
                listener.enterGrantIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantIdentifier" ):
                listener.exitGrantIdentifier(self)




    def grantIdentifier(self):

        localctx = MySQLParser.GrantIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_grantIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 4624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,552,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4608
                self.match(MySQLParser.MULT_OPERATOR)
                self.state = 4611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.DOT_SYMBOL:
                    self.state = 4609
                    self.match(MySQLParser.DOT_SYMBOL)
                    self.state = 4610
                    self.match(MySQLParser.MULT_OPERATOR)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4613
                self.schemaRef()
                self.state = 4616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.DOT_SYMBOL:
                    self.state = 4614
                    self.match(MySQLParser.DOT_SYMBOL)
                    self.state = 4615
                    self.match(MySQLParser.MULT_OPERATOR)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4618
                self.tableRef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4619
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 4620
                self.schemaRef()
                self.state = 4621
                self.match(MySQLParser.DOT_SYMBOL)
                self.state = 4622
                self.tableRef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requireListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RequireListElementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RequireListElementContext,i)


        def AND_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.AND_SYMBOL)
            else:
                return self.getToken(MySQLParser.AND_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_requireList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireList" ):
                listener.enterRequireList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireList" ):
                listener.exitRequireList(self)




    def requireList(self):

        localctx = MySQLParser.RequireListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_requireList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4626
            self.requireListElement()
            self.state = 4633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,554,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.AND_SYMBOL:
                        self.state = 4627
                        self.match(MySQLParser.AND_SYMBOL)


                    self.state = 4630
                    self.requireListElement() 
                self.state = 4635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,554,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireListElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.element = None # Token

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.CIPHER_SYMBOL, 0)

        def ISSUER_SYMBOL(self):
            return self.getToken(MySQLParser.ISSUER_SYMBOL, 0)

        def SUBJECT_SYMBOL(self):
            return self.getToken(MySQLParser.SUBJECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_requireListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireListElement" ):
                listener.enterRequireListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireListElement" ):
                listener.exitRequireListElement(self)




    def requireListElement(self):

        localctx = MySQLParser.RequireListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_requireListElement)
        try:
            self.state = 4642
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.CIPHER_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4636
                localctx.element = self.match(MySQLParser.CIPHER_SYMBOL)
                self.state = 4637
                self.textString()
                pass
            elif token in [MySQLParser.ISSUER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4638
                localctx.element = self.match(MySQLParser.ISSUER_SYMBOL)
                self.state = 4639
                self.textString()
                pass
            elif token in [MySQLParser.SUBJECT_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4640
                localctx.element = self.match(MySQLParser.SUBJECT_SYMBOL)
                self.state = 4641
                self.textString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(MySQLParser.GRANT_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def MAX_QUERIES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0)

        def MAX_UPDATES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0)

        def MAX_USER_CONNECTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_grantOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOption" ):
                listener.enterGrantOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOption" ):
                listener.exitGrantOption(self)




    def grantOption(self):

        localctx = MySQLParser.GrantOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_grantOption)
        try:
            self.state = 4654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.GRANT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4644
                localctx.option = self.match(MySQLParser.GRANT_SYMBOL)
                self.state = 4645
                self.match(MySQLParser.OPTION_SYMBOL)
                pass
            elif token in [MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4646
                localctx.option = self.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL)
                self.state = 4647
                self.ulong_number()
                pass
            elif token in [MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4648
                localctx.option = self.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL)
                self.state = 4649
                self.ulong_number()
                pass
            elif token in [MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4650
                localctx.option = self.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL)
                self.state = 4651
                self.ulong_number()
                pass
            elif token in [MySQLParser.MAX_USER_CONNECTIONS_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4652
                localctx.option = self.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL)
                self.state = 4653
                self.ulong_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetRoleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def roleList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoleListContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoleListContext,i)


        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def EXCEPT_SYMBOL(self):
            return self.getToken(MySQLParser.EXCEPT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_setRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)




    def setRole(self):

        localctx = MySQLParser.SetRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_setRole)
        self._la = 0 # Token type
        try:
            self.state = 4679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4656
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 4657
                self.match(MySQLParser.ROLE_SYMBOL)
                self.state = 4658
                self.roleList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4659
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 4660
                self.match(MySQLParser.ROLE_SYMBOL)
                self.state = 4661
                _la = self._input.LA(1)
                if not(_la==MySQLParser.DEFAULT_SYMBOL or _la==MySQLParser.NONE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4662
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 4663
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 4664
                self.match(MySQLParser.ROLE_SYMBOL)
                self.state = 4668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
                if la_ == 1:
                    self.state = 4665
                    self.roleList()
                    pass

                elif la_ == 2:
                    self.state = 4666
                    self.match(MySQLParser.NONE_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 4667
                    self.match(MySQLParser.ALL_SYMBOL)
                    pass


                self.state = 4670
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4671
                self.roleList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4672
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 4673
                self.match(MySQLParser.ROLE_SYMBOL)
                self.state = 4674
                self.match(MySQLParser.ALL_SYMBOL)
                self.state = 4677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EXCEPT_SYMBOL:
                    self.state = 4675
                    self.match(MySQLParser.EXCEPT_SYMBOL)
                    self.state = 4676
                    self.roleList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def role(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoleContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoleContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_roleList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleList" ):
                listener.enterRoleList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleList" ):
                listener.exitRoleList(self)




    def roleList(self):

        localctx = MySQLParser.RoleListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_roleList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4681
            self.role()
            self.state = 4686
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,560,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4682
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4683
                    self.role() 
                self.state = 4688
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,560,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleIdentifierOrText(self):
            return self.getTypedRuleContext(MySQLParser.RoleIdentifierOrTextContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(MySQLParser.AT_TEXT_SUFFIX, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole" ):
                listener.enterRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole" ):
                listener.exitRole(self)




    def role(self):

        localctx = MySQLParser.RoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4689
            self.roleIdentifierOrText()
            self.state = 4693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
            if la_ == 1:
                self.state = 4690
                self.match(MySQLParser.AT_SIGN_SYMBOL)
                self.state = 4691
                self.textOrIdentifier()

            elif la_ == 2:
                self.state = 4692
                self.match(MySQLParser.AT_TEXT_SUFFIX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAdministrationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRefList(self):
            return self.getTypedRuleContext(MySQLParser.TableRefListContext,0)


        def ANALYZE_SYMBOL(self):
            return self.getToken(MySQLParser.ANALYZE_SYMBOL, 0)

        def noWriteToBinLog(self):
            return self.getTypedRuleContext(MySQLParser.NoWriteToBinLogContext,0)


        def histogram(self):
            return self.getTypedRuleContext(MySQLParser.HistogramContext,0)


        def CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.CHECK_SYMBOL, 0)

        def checkOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CheckOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CheckOptionContext,i)


        def CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.CHECKSUM_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def OPTIMIZE_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0)

        def REPAIR_SYMBOL(self):
            return self.getToken(MySQLParser.REPAIR_SYMBOL, 0)

        def repairType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RepairTypeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RepairTypeContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableAdministrationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAdministrationStatement" ):
                listener.enterTableAdministrationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAdministrationStatement" ):
                listener.exitTableAdministrationStatement(self)




    def tableAdministrationStatement(self):

        localctx = MySQLParser.TableAdministrationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_tableAdministrationStatement)
        self._la = 0 # Token type
        try:
            self.state = 4738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.ANALYZE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4695
                localctx.type_expression = self.match(MySQLParser.ANALYZE_SYMBOL)
                self.state = 4697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LOCAL_SYMBOL or _la==MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 4696
                    self.noWriteToBinLog()


                self.state = 4699
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4700
                self.tableRefList()
                self.state = 4703
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
                if la_ == 1:
                    self.state = 4701
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 4702
                    self.histogram()


                pass
            elif token in [MySQLParser.CHECK_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4705
                localctx.type_expression = self.match(MySQLParser.CHECK_SYMBOL)
                self.state = 4706
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4707
                self.tableRefList()
                self.state = 4711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.CHANGED_SYMBOL or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySQLParser.EXTENDED_SYMBOL - 180)) | (1 << (MySQLParser.FAST_SYMBOL - 180)) | (1 << (MySQLParser.FOR_SYMBOL - 180)))) != 0) or _la==MySQLParser.MEDIUM_SYMBOL or _la==MySQLParser.QUICK_SYMBOL:
                    self.state = 4708
                    self.checkOption()
                    self.state = 4713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySQLParser.CHECKSUM_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4714
                localctx.type_expression = self.match(MySQLParser.CHECKSUM_SYMBOL)
                self.state = 4715
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4716
                self.tableRefList()
                self.state = 4718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EXTENDED_SYMBOL or _la==MySQLParser.QUICK_SYMBOL:
                    self.state = 4717
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.EXTENDED_SYMBOL or _la==MySQLParser.QUICK_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [MySQLParser.OPTIMIZE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4720
                localctx.type_expression = self.match(MySQLParser.OPTIMIZE_SYMBOL)
                self.state = 4722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LOCAL_SYMBOL or _la==MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 4721
                    self.noWriteToBinLog()


                self.state = 4724
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4725
                self.tableRefList()
                pass
            elif token in [MySQLParser.REPAIR_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4726
                localctx.type_expression = self.match(MySQLParser.REPAIR_SYMBOL)
                self.state = 4728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LOCAL_SYMBOL or _la==MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL:
                    self.state = 4727
                    self.noWriteToBinLog()


                self.state = 4730
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4731
                self.tableRefList()
                self.state = 4735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.EXTENDED_SYMBOL or _la==MySQLParser.QUICK_SYMBOL or _la==MySQLParser.USE_FRM_SYMBOL:
                    self.state = 4732
                    self.repairType()
                    self.state = 4737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HistogramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def HISTOGRAM_SYMBOL(self):
            return self.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def BUCKETS_SYMBOL(self):
            return self.getToken(MySQLParser.BUCKETS_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_histogram

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHistogram" ):
                listener.enterHistogram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHistogram" ):
                listener.exitHistogram(self)




    def histogram(self):

        localctx = MySQLParser.HistogramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_histogram)
        self._la = 0 # Token type
        try:
            self.state = 4753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.UPDATE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4740
                self.match(MySQLParser.UPDATE_SYMBOL)
                self.state = 4741
                self.match(MySQLParser.HISTOGRAM_SYMBOL)
                self.state = 4742
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4743
                self.identifierList()
                self.state = 4747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.WITH_SYMBOL:
                    self.state = 4744
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 4745
                    self.match(MySQLParser.INT_NUMBER)
                    self.state = 4746
                    self.match(MySQLParser.BUCKETS_SYMBOL)


                pass
            elif token in [MySQLParser.DROP_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4749
                self.match(MySQLParser.DROP_SYMBOL)
                self.state = 4750
                self.match(MySQLParser.HISTOGRAM_SYMBOL)
                self.state = 4751
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4752
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def UPGRADE_SYMBOL(self):
            return self.getToken(MySQLParser.UPGRADE_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def FAST_SYMBOL(self):
            return self.getToken(MySQLParser.FAST_SYMBOL, 0)

        def MEDIUM_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUM_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def CHANGED_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_checkOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckOption" ):
                listener.enterCheckOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckOption" ):
                listener.exitCheckOption(self)




    def checkOption(self):

        localctx = MySQLParser.CheckOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_checkOption)
        self._la = 0 # Token type
        try:
            self.state = 4758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.FOR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4755
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 4756
                self.match(MySQLParser.UPGRADE_SYMBOL)
                pass
            elif token in [MySQLParser.CHANGED_SYMBOL, MySQLParser.EXTENDED_SYMBOL, MySQLParser.FAST_SYMBOL, MySQLParser.MEDIUM_SYMBOL, MySQLParser.QUICK_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4757
                _la = self._input.LA(1)
                if not(_la==MySQLParser.CHANGED_SYMBOL or _la==MySQLParser.EXTENDED_SYMBOL or _la==MySQLParser.FAST_SYMBOL or _la==MySQLParser.MEDIUM_SYMBOL or _la==MySQLParser.QUICK_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepairTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def USE_FRM_SYMBOL(self):
            return self.getToken(MySQLParser.USE_FRM_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_repairType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairType" ):
                listener.enterRepairType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairType" ):
                listener.exitRepairType(self)




    def repairType(self):

        localctx = MySQLParser.RepairTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_repairType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4760
            _la = self._input.LA(1)
            if not(_la==MySQLParser.EXTENDED_SYMBOL or _la==MySQLParser.QUICK_SYMBOL or _la==MySQLParser.USE_FRM_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstallUninstallStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.action = None # Token
            self.type_expression = None # Token

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def SONAME_SYMBOL(self):
            return self.getToken(MySQLParser.SONAME_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def INSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.INSTALL_SYMBOL, 0)

        def PLUGIN_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_SYMBOL, 0)

        def textStringLiteralList(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralListContext,0)


        def COMPONENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPONENT_SYMBOL, 0)

        def pluginRef(self):
            return self.getTypedRuleContext(MySQLParser.PluginRefContext,0)


        def UNINSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.UNINSTALL_SYMBOL, 0)

        def componentRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ComponentRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ComponentRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_installUninstallStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstallUninstallStatment" ):
                listener.enterInstallUninstallStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstallUninstallStatment" ):
                listener.exitInstallUninstallStatment(self)




    def installUninstallStatment(self):

        localctx = MySQLParser.InstallUninstallStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_installUninstallStatment)
        self._la = 0 # Token type
        try:
            self.state = 4784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4762
                localctx.action = self.match(MySQLParser.INSTALL_SYMBOL)
                self.state = 4763
                localctx.type_expression = self.match(MySQLParser.PLUGIN_SYMBOL)
                self.state = 4764
                self.identifier()
                self.state = 4765
                self.match(MySQLParser.SONAME_SYMBOL)
                self.state = 4766
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4768
                localctx.action = self.match(MySQLParser.INSTALL_SYMBOL)
                self.state = 4769
                localctx.type_expression = self.match(MySQLParser.COMPONENT_SYMBOL)
                self.state = 4770
                self.textStringLiteralList()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4771
                localctx.action = self.match(MySQLParser.UNINSTALL_SYMBOL)
                self.state = 4772
                localctx.type_expression = self.match(MySQLParser.PLUGIN_SYMBOL)
                self.state = 4773
                self.pluginRef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4774
                localctx.action = self.match(MySQLParser.UNINSTALL_SYMBOL)
                self.state = 4775
                localctx.type_expression = self.match(MySQLParser.COMPONENT_SYMBOL)
                self.state = 4776
                self.componentRef()
                self.state = 4781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 4777
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4778
                    self.componentRef()
                    self.state = 4783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def startOptionValueList(self):
            return self.getTypedRuleContext(MySQLParser.StartOptionValueListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)




    def setStatement(self):

        localctx = MySQLParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_setStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4786
            self.match(MySQLParser.SET_SYMBOL)
            self.state = 4787
            self.startOptionValueList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartOptionValueListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionValueNoOptionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionValueNoOptionTypeContext,0)


        def optionValueListContinued(self):
            return self.getTypedRuleContext(MySQLParser.OptionValueListContinuedContext,0)


        def TRANSACTION_SYMBOL(self):
            return self.getToken(MySQLParser.TRANSACTION_SYMBOL, 0)

        def transactionCharacteristics(self):
            return self.getTypedRuleContext(MySQLParser.TransactionCharacteristicsContext,0)


        def optionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionTypeContext,0)


        def startOptionValueListFollowingOptionType(self):
            return self.getTypedRuleContext(MySQLParser.StartOptionValueListFollowingOptionTypeContext,0)


        def PASSWORD_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.PASSWORD_SYMBOL)
            else:
                return self.getToken(MySQLParser.PASSWORD_SYMBOL, i)

        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def OLD_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def replacePassword(self):
            return self.getTypedRuleContext(MySQLParser.ReplacePasswordContext,0)


        def retainCurrentPassword(self):
            return self.getTypedRuleContext(MySQLParser.RetainCurrentPasswordContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def RANDOM_SYMBOL(self):
            return self.getToken(MySQLParser.RANDOM_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_startOptionValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartOptionValueList" ):
                listener.enterStartOptionValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartOptionValueList" ):
                listener.exitStartOptionValueList(self)




    def startOptionValueList(self):

        localctx = MySQLParser.StartOptionValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_startOptionValueList)
        self._la = 0 # Token type
        try:
            self.state = 4845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,584,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4789
                self.optionValueNoOptionType()
                self.state = 4790
                self.optionValueListContinued()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4792
                self.match(MySQLParser.TRANSACTION_SYMBOL)
                self.state = 4793
                self.transactionCharacteristics()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4794
                self.optionType()
                self.state = 4795
                self.startOptionValueListFollowingOptionType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4797
                self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 4800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FOR_SYMBOL:
                    self.state = 4798
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 4799
                    self.user()


                self.state = 4802
                self.equal()
                self.state = 4829
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,580,self._ctx)
                if la_ == 1:
                    self.state = 4803
                    self.textString()
                    self.state = 4805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.REPLACE_SYMBOL:
                        self.state = 4804
                        self.replacePassword()


                    self.state = 4808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.RETAIN_SYMBOL:
                        self.state = 4807
                        self.retainCurrentPassword()


                    pass

                elif la_ == 2:
                    self.state = 4810
                    self.textString()
                    self.state = 4812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.REPLACE_SYMBOL:
                        self.state = 4811
                        self.replacePassword()


                    self.state = 4815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.RETAIN_SYMBOL:
                        self.state = 4814
                        self.retainCurrentPassword()


                    pass

                elif la_ == 3:
                    self.state = 4817
                    if not serverVersion < 50706:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 50706")
                    self.state = 4818
                    self.match(MySQLParser.OLD_PASSWORD_SYMBOL)
                    self.state = 4819
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 4820
                    self.textString()
                    self.state = 4821
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 4823
                    if not serverVersion < 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 80014")
                    self.state = 4824
                    self.match(MySQLParser.PASSWORD_SYMBOL)
                    self.state = 4825
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 4826
                    self.textString()
                    self.state = 4827
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4831
                if not serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80018")
                self.state = 4832
                self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 4835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FOR_SYMBOL:
                    self.state = 4833
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 4834
                    self.user()


                self.state = 4837
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4838
                self.match(MySQLParser.RANDOM_SYMBOL)
                self.state = 4840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.REPLACE_SYMBOL:
                    self.state = 4839
                    self.replacePassword()


                self.state = 4843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.RETAIN_SYMBOL:
                    self.state = 4842
                    self.retainCurrentPassword()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionCharacteristicsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionAccessMode(self):
            return self.getTypedRuleContext(MySQLParser.TransactionAccessModeContext,0)


        def isolationLevel(self):
            return self.getTypedRuleContext(MySQLParser.IsolationLevelContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_transactionCharacteristics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionCharacteristics" ):
                listener.enterTransactionCharacteristics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionCharacteristics" ):
                listener.exitTransactionCharacteristics(self)




    def transactionCharacteristics(self):

        localctx = MySQLParser.TransactionCharacteristicsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_transactionCharacteristics)
        self._la = 0 # Token type
        try:
            self.state = 4856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.READ_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4847
                self.transactionAccessMode()
                self.state = 4849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ISOLATION_SYMBOL:
                    self.state = 4848
                    self.isolationLevel()


                pass
            elif token in [MySQLParser.ISOLATION_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4851
                self.isolationLevel()
                self.state = 4854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 4852
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4853
                    self.transactionAccessMode()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionAccessModeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.WRITE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.ONLY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_transactionAccessMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)




    def transactionAccessMode(self):

        localctx = MySQLParser.TransactionAccessModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_transactionAccessMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4858
            self.match(MySQLParser.READ_SYMBOL)
            self.state = 4859
            _la = self._input.LA(1)
            if not(_la==MySQLParser.ONLY_SYMBOL or _la==MySQLParser.WRITE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsolationLevelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION_SYMBOL(self):
            return self.getToken(MySQLParser.ISOLATION_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.LEVEL_SYMBOL, 0)

        def REPEATABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPEATABLE_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def SERIALIZABLE_SYMBOL(self):
            return self.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0)

        def COMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.COMMITTED_SYMBOL, 0)

        def UNCOMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_isolationLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)




    def isolationLevel(self):

        localctx = MySQLParser.IsolationLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_isolationLevel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4861
            self.match(MySQLParser.ISOLATION_SYMBOL)
            self.state = 4862
            self.match(MySQLParser.LEVEL_SYMBOL)
            self.state = 4868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.REPEATABLE_SYMBOL]:
                self.state = 4863
                self.match(MySQLParser.REPEATABLE_SYMBOL)
                self.state = 4864
                self.match(MySQLParser.READ_SYMBOL)
                pass
            elif token in [MySQLParser.READ_SYMBOL]:
                self.state = 4865
                self.match(MySQLParser.READ_SYMBOL)
                self.state = 4866
                _la = self._input.LA(1)
                if not(_la==MySQLParser.COMMITTED_SYMBOL or _la==MySQLParser.UNCOMMITTED_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySQLParser.SERIALIZABLE_SYMBOL]:
                self.state = 4867
                self.match(MySQLParser.SERIALIZABLE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueListContinuedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def optionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.OptionValueContext)
            else:
                return self.getTypedRuleContext(MySQLParser.OptionValueContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_optionValueListContinued

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValueListContinued" ):
                listener.enterOptionValueListContinued(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValueListContinued" ):
                listener.exitOptionValueListContinued(self)




    def optionValueListContinued(self):

        localctx = MySQLParser.OptionValueListContinuedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_optionValueListContinued)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 4870
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4871
                self.optionValue()
                self.state = 4876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueNoOptionTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def internalVariableName(self):
            return self.getTypedRuleContext(MySQLParser.InternalVariableNameContext,0)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def setExprOrDefault(self):
            return self.getTypedRuleContext(MySQLParser.SetExprOrDefaultContext,0)


        def charsetClause(self):
            return self.getTypedRuleContext(MySQLParser.CharsetClauseContext,0)


        def userVariable(self):
            return self.getTypedRuleContext(MySQLParser.UserVariableContext,0)


        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def setSystemVariable(self):
            return self.getTypedRuleContext(MySQLParser.SetSystemVariableContext,0)


        def NAMES_SYMBOL(self):
            return self.getToken(MySQLParser.NAMES_SYMBOL, 0)

        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_optionValueNoOptionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValueNoOptionType" ):
                listener.enterOptionValueNoOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValueNoOptionType" ):
                listener.exitOptionValueNoOptionType(self)




    def optionValueNoOptionType(self):

        localctx = MySQLParser.OptionValueNoOptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_optionValueNoOptionType)
        self._la = 0 # Token type
        try:
            self.state = 4902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,592,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4877
                self.internalVariableName()
                self.state = 4878
                self.equal()
                self.state = 4879
                self.setExprOrDefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4881
                self.charsetClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4882
                self.userVariable()
                self.state = 4883
                self.equal()
                self.state = 4884
                self.expr(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4886
                self.setSystemVariable()
                self.state = 4887
                self.equal()
                self.state = 4888
                self.setExprOrDefault()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4890
                self.match(MySQLParser.NAMES_SYMBOL)
                self.state = 4900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,591,self._ctx)
                if la_ == 1:
                    self.state = 4891
                    self.equal()
                    self.state = 4892
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4894
                    self.charsetName()
                    self.state = 4896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.COLLATE_SYMBOL:
                        self.state = 4895
                        self.collate()


                    pass

                elif la_ == 3:
                    self.state = 4898
                    if not serverVersion >= 80011:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80011")
                    self.state = 4899
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionTypeContext,0)


        def internalVariableName(self):
            return self.getTypedRuleContext(MySQLParser.InternalVariableNameContext,0)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def setExprOrDefault(self):
            return self.getTypedRuleContext(MySQLParser.SetExprOrDefaultContext,0)


        def optionValueNoOptionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionValueNoOptionTypeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_optionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValue" ):
                listener.enterOptionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValue" ):
                listener.exitOptionValue(self)




    def optionValue(self):

        localctx = MySQLParser.OptionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_optionValue)
        try:
            self.state = 4910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4904
                self.optionType()
                self.state = 4905
                self.internalVariableName()
                self.state = 4906
                self.equal()
                self.state = 4907
                self.setExprOrDefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4909
                self.optionValueNoOptionType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetSystemVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0)

        def internalVariableName(self):
            return self.getTypedRuleContext(MySQLParser.InternalVariableNameContext,0)


        def setVarIdentType(self):
            return self.getTypedRuleContext(MySQLParser.SetVarIdentTypeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_setSystemVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSystemVariable" ):
                listener.enterSetSystemVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSystemVariable" ):
                listener.exitSetSystemVariable(self)




    def setSystemVariable(self):

        localctx = MySQLParser.SetSystemVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_setSystemVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4912
            self.match(MySQLParser.AT_AT_SIGN_SYMBOL)
            self.state = 4914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,594,self._ctx)
            if la_ == 1:
                self.state = 4913
                self.setVarIdentType()


            self.state = 4916
            self.internalVariableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartOptionValueListFollowingOptionTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionValueFollowingOptionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionValueFollowingOptionTypeContext,0)


        def optionValueListContinued(self):
            return self.getTypedRuleContext(MySQLParser.OptionValueListContinuedContext,0)


        def TRANSACTION_SYMBOL(self):
            return self.getToken(MySQLParser.TRANSACTION_SYMBOL, 0)

        def transactionCharacteristics(self):
            return self.getTypedRuleContext(MySQLParser.TransactionCharacteristicsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_startOptionValueListFollowingOptionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartOptionValueListFollowingOptionType" ):
                listener.enterStartOptionValueListFollowingOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartOptionValueListFollowingOptionType" ):
                listener.exitStartOptionValueListFollowingOptionType(self)




    def startOptionValueListFollowingOptionType(self):

        localctx = MySQLParser.StartOptionValueListFollowingOptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_startOptionValueListFollowingOptionType)
        try:
            self.state = 4923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4918
                self.optionValueFollowingOptionType()
                self.state = 4919
                self.optionValueListContinued()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4921
                self.match(MySQLParser.TRANSACTION_SYMBOL)
                self.state = 4922
                self.transactionCharacteristics()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueFollowingOptionTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def internalVariableName(self):
            return self.getTypedRuleContext(MySQLParser.InternalVariableNameContext,0)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def setExprOrDefault(self):
            return self.getTypedRuleContext(MySQLParser.SetExprOrDefaultContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_optionValueFollowingOptionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValueFollowingOptionType" ):
                listener.enterOptionValueFollowingOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValueFollowingOptionType" ):
                listener.exitOptionValueFollowingOptionType(self)




    def optionValueFollowingOptionType(self):

        localctx = MySQLParser.OptionValueFollowingOptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_optionValueFollowingOptionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4925
            self.internalVariableName()
            self.state = 4926
            self.equal()
            self.state = 4927
            self.setExprOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExprOrDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(MySQLParser.SYSTEM_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_setExprOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetExprOrDefault" ):
                listener.enterSetExprOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetExprOrDefault" ):
                listener.exitSetExprOrDefault(self)




    def setExprOrDefault(self):

        localctx = MySQLParser.SetExprOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_setExprOrDefault)
        self._la = 0 # Token type
        try:
            self.state = 4933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4929
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4930
                _la = self._input.LA(1)
                if not(_la==MySQLParser.ALL_SYMBOL or _la==MySQLParser.BINARY_SYMBOL or _la==MySQLParser.DEFAULT_SYMBOL or _la==MySQLParser.ON_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4931
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4932
                _la = self._input.LA(1)
                if not(_la==MySQLParser.ROW_SYMBOL or _la==MySQLParser.SYSTEM_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token
            self.db_object = None # Token

        def SHOW_SYMBOL(self):
            return self.getToken(MySQLParser.SHOW_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MySQLParser.STATUS_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def EVENTS_SYMBOL(self):
            return self.getToken(MySQLParser.EVENTS_SYMBOL, 0)

        def fromOrIn(self):
            return self.getTypedRuleContext(MySQLParser.FromOrInContext,0)


        def COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.COUNT_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def charset(self):
            return self.getTypedRuleContext(MySQLParser.CharsetContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(MySQLParser.UserListContext,0)


        def CODE_SYMBOL(self):
            return self.getToken(MySQLParser.CODE_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureRefContext,0)


        def functionRef(self):
            return self.getTypedRuleContext(MySQLParser.FunctionRefContext,0)


        def AUTHORS_SYMBOL(self):
            return self.getToken(MySQLParser.AUTHORS_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASES_SYMBOL, 0)

        def TRIGGERS_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGERS_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def OPEN_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_SYMBOL, 0)

        def PLUGINS_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGINS_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def MUTEX_SYMBOL(self):
            return self.getToken(MySQLParser.MUTEX_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(MySQLParser.LOGS_SYMBOL, 0)

        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def ENGINES_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINES_SYMBOL, 0)

        def WARNINGS_SYMBOL(self):
            return self.getToken(MySQLParser.WARNINGS_SYMBOL, 0)

        def ERRORS_SYMBOL(self):
            return self.getToken(MySQLParser.ERRORS_SYMBOL, 0)

        def PROFILES_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILES_SYMBOL, 0)

        def PROFILE_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILE_SYMBOL, 0)

        def PROCESSLIST_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATION_SYMBOL, 0)

        def CONTRIBUTORS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MySQLParser.GRANTS_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def engineRef(self):
            return self.getTypedRuleContext(MySQLParser.EngineRefContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(MySQLParser.HOSTS_SYMBOL, 0)

        def nonBlocking(self):
            return self.getTypedRuleContext(MySQLParser.NonBlockingContext,0)


        def BINLOG_SYMBOL(self):
            return self.getToken(MySQLParser.BINLOG_SYMBOL, 0)

        def RELAYLOG_SYMBOL(self):
            return self.getToken(MySQLParser.RELAYLOG_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def INDEXES_SYMBOL(self):
            return self.getToken(MySQLParser.INDEXES_SYMBOL, 0)

        def KEYS_SYMBOL(self):
            return self.getToken(MySQLParser.KEYS_SYMBOL, 0)

        def VARIABLES_SYMBOL(self):
            return self.getToken(MySQLParser.VARIABLES_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(MySQLParser.SchemaRefContext,0)


        def eventRef(self):
            return self.getTypedRuleContext(MySQLParser.EventRefContext,0)


        def triggerRef(self):
            return self.getTypedRuleContext(MySQLParser.TriggerRefContext,0)


        def viewRef(self):
            return self.getTypedRuleContext(MySQLParser.ViewRefContext,0)


        def likeOrWhere(self):
            return self.getTypedRuleContext(MySQLParser.LikeOrWhereContext,0)


        def showCommandType(self):
            return self.getTypedRuleContext(MySQLParser.ShowCommandTypeContext,0)


        def inDb(self):
            return self.getTypedRuleContext(MySQLParser.InDbContext,0)


        def FULL_SYMBOL(self):
            return self.getToken(MySQLParser.FULL_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySQLParser.LimitClauseContext,0)


        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def profileType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ProfileTypeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ProfileTypeContext,i)


        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def optionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionTypeContext,0)


        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def TRIGGER_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGER_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_showStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatement" ):
                listener.enterShowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatement" ):
                listener.exitShowStatement(self)




    def showStatement(self):

        localctx = MySQLParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4935
            self.match(MySQLParser.SHOW_SYMBOL)
            self.state = 5155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,640,self._ctx)
            if la_ == 1:
                self.state = 4936
                if not serverVersion < 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50700")
                self.state = 4937
                localctx.value = self.match(MySQLParser.AUTHORS_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 4938
                localctx.value = self.match(MySQLParser.DATABASES_SYMBOL)
                self.state = 4940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 4939
                    self.likeOrWhere()


                pass

            elif la_ == 3:
                self.state = 4943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,598,self._ctx)
                if la_ == 1:
                    self.state = 4942
                    self.showCommandType()


                self.state = 4945
                localctx.value = self.match(MySQLParser.TABLES_SYMBOL)
                self.state = 4947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FROM_SYMBOL or _la==MySQLParser.IN_SYMBOL:
                    self.state = 4946
                    self.inDb()


                self.state = 4950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 4949
                    self.likeOrWhere()


                pass

            elif la_ == 4:
                self.state = 4953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FULL_SYMBOL:
                    self.state = 4952
                    self.match(MySQLParser.FULL_SYMBOL)


                self.state = 4955
                localctx.value = self.match(MySQLParser.TRIGGERS_SYMBOL)
                self.state = 4957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FROM_SYMBOL or _la==MySQLParser.IN_SYMBOL:
                    self.state = 4956
                    self.inDb()


                self.state = 4960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 4959
                    self.likeOrWhere()


                pass

            elif la_ == 5:
                self.state = 4962
                localctx.value = self.match(MySQLParser.EVENTS_SYMBOL)
                self.state = 4964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FROM_SYMBOL or _la==MySQLParser.IN_SYMBOL:
                    self.state = 4963
                    self.inDb()


                self.state = 4967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 4966
                    self.likeOrWhere()


                pass

            elif la_ == 6:
                self.state = 4969
                localctx.value = self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4970
                self.match(MySQLParser.STATUS_SYMBOL)
                self.state = 4972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FROM_SYMBOL or _la==MySQLParser.IN_SYMBOL:
                    self.state = 4971
                    self.inDb()


                self.state = 4975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 4974
                    self.likeOrWhere()


                pass

            elif la_ == 7:
                self.state = 4977
                localctx.value = self.match(MySQLParser.OPEN_SYMBOL)
                self.state = 4978
                self.match(MySQLParser.TABLES_SYMBOL)
                self.state = 4980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FROM_SYMBOL or _la==MySQLParser.IN_SYMBOL:
                    self.state = 4979
                    self.inDb()


                self.state = 4983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 4982
                    self.likeOrWhere()


                pass

            elif la_ == 8:
                self.state = 4985
                localctx.value = self.match(MySQLParser.PLUGINS_SYMBOL)
                pass

            elif la_ == 9:
                self.state = 4986
                localctx.value = self.match(MySQLParser.ENGINE_SYMBOL)
                self.state = 4989
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,610,self._ctx)
                if la_ == 1:
                    self.state = 4987
                    self.engineRef()
                    pass

                elif la_ == 2:
                    self.state = 4988
                    self.match(MySQLParser.ALL_SYMBOL)
                    pass


                self.state = 4991
                _la = self._input.LA(1)
                if not(_la==MySQLParser.LOGS_SYMBOL or _la==MySQLParser.MUTEX_SYMBOL or _la==MySQLParser.STATUS_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                self.state = 4993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,611,self._ctx)
                if la_ == 1:
                    self.state = 4992
                    self.showCommandType()


                self.state = 4995
                localctx.value = self.match(MySQLParser.COLUMNS_SYMBOL)
                self.state = 4996
                _la = self._input.LA(1)
                if not(_la==MySQLParser.FROM_SYMBOL or _la==MySQLParser.IN_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4997
                self.tableRef()
                self.state = 4999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FROM_SYMBOL or _la==MySQLParser.IN_SYMBOL:
                    self.state = 4998
                    self.inDb()


                self.state = 5002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 5001
                    self.likeOrWhere()


                pass

            elif la_ == 11:
                self.state = 5004
                _la = self._input.LA(1)
                if not(_la==MySQLParser.BINARY_SYMBOL or _la==MySQLParser.MASTER_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5005
                localctx.value = self.match(MySQLParser.LOGS_SYMBOL)
                pass

            elif la_ == 12:
                self.state = 5006
                localctx.value = self.match(MySQLParser.SLAVE_SYMBOL)
                self.state = 5013
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.HOSTS_SYMBOL]:
                    self.state = 5007
                    self.match(MySQLParser.HOSTS_SYMBOL)
                    pass
                elif token in [MySQLParser.STATUS_SYMBOL]:
                    self.state = 5008
                    self.match(MySQLParser.STATUS_SYMBOL)
                    self.state = 5009
                    self.nonBlocking()
                    self.state = 5011
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,614,self._ctx)
                    if la_ == 1:
                        self.state = 5010
                        self.channel()


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 5015
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.BINLOG_SYMBOL or _la==MySQLParser.RELAYLOG_SYMBOL):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5016
                self.match(MySQLParser.EVENTS_SYMBOL)
                self.state = 5019
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,616,self._ctx)
                if la_ == 1:
                    self.state = 5017
                    self.match(MySQLParser.IN_SYMBOL)
                    self.state = 5018
                    self.textString()


                self.state = 5023
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,617,self._ctx)
                if la_ == 1:
                    self.state = 5021
                    self.match(MySQLParser.FROM_SYMBOL)
                    self.state = 5022
                    self.ulonglong_number()


                self.state = 5026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,618,self._ctx)
                if la_ == 1:
                    self.state = 5025
                    self.limitClause()


                self.state = 5029
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,619,self._ctx)
                if la_ == 1:
                    self.state = 5028
                    self.channel()


                pass

            elif la_ == 14:
                self.state = 5033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,620,self._ctx)
                if la_ == 1:
                    self.state = 5031
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5032
                    self.match(MySQLParser.EXTENDED_SYMBOL)


                self.state = 5035
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 235)) & ~0x3f) == 0 and ((1 << (_la - 235)) & ((1 << (MySQLParser.INDEXES_SYMBOL - 235)) | (1 << (MySQLParser.INDEX_SYMBOL - 235)) | (1 << (MySQLParser.KEYS_SYMBOL - 235)))) != 0)):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5036
                self.fromOrIn()
                self.state = 5037
                self.tableRef()
                self.state = 5039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FROM_SYMBOL or _la==MySQLParser.IN_SYMBOL:
                    self.state = 5038
                    self.inDb()


                self.state = 5042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 5041
                    self.whereClause()


                pass

            elif la_ == 15:
                self.state = 5045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.STORAGE_SYMBOL:
                    self.state = 5044
                    self.match(MySQLParser.STORAGE_SYMBOL)


                self.state = 5047
                localctx.value = self.match(MySQLParser.ENGINES_SYMBOL)
                pass

            elif la_ == 16:
                self.state = 5048
                self.match(MySQLParser.COUNT_SYMBOL)
                self.state = 5049
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5050
                self.match(MySQLParser.MULT_OPERATOR)
                self.state = 5051
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5052
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.ERRORS_SYMBOL or _la==MySQLParser.WARNINGS_SYMBOL):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 17:
                self.state = 5053
                localctx.value = self.match(MySQLParser.WARNINGS_SYMBOL)
                self.state = 5055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIMIT_SYMBOL:
                    self.state = 5054
                    self.limitClause()


                pass

            elif la_ == 18:
                self.state = 5057
                localctx.value = self.match(MySQLParser.ERRORS_SYMBOL)
                self.state = 5059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIMIT_SYMBOL:
                    self.state = 5058
                    self.limitClause()


                pass

            elif la_ == 19:
                self.state = 5061
                localctx.value = self.match(MySQLParser.PROFILES_SYMBOL)
                pass

            elif la_ == 20:
                self.state = 5062
                localctx.value = self.match(MySQLParser.PROFILE_SYMBOL)
                self.state = 5071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ALL_SYMBOL or _la==MySQLParser.BLOCK_SYMBOL or _la==MySQLParser.CONTEXT_SYMBOL or _la==MySQLParser.CPU_SYMBOL or _la==MySQLParser.IPC_SYMBOL or _la==MySQLParser.MEMORY_SYMBOL or _la==MySQLParser.PAGE_SYMBOL or _la==MySQLParser.SOURCE_SYMBOL or _la==MySQLParser.SWAPS_SYMBOL:
                    self.state = 5063
                    self.profileType()
                    self.state = 5068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySQLParser.COMMA_SYMBOL:
                        self.state = 5064
                        self.match(MySQLParser.COMMA_SYMBOL)
                        self.state = 5065
                        self.profileType()
                        self.state = 5070
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FOR_SYMBOL:
                    self.state = 5073
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 5074
                    self.match(MySQLParser.QUERY_SYMBOL)
                    self.state = 5075
                    self.match(MySQLParser.INT_NUMBER)


                self.state = 5079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIMIT_SYMBOL:
                    self.state = 5078
                    self.limitClause()


                pass

            elif la_ == 21:
                self.state = 5082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.GLOBAL_SYMBOL or _la==MySQLParser.LOCAL_SYMBOL or _la==MySQLParser.SESSION_SYMBOL or _la==MySQLParser.PERSIST_SYMBOL or _la==MySQLParser.PERSIST_ONLY_SYMBOL:
                    self.state = 5081
                    self.optionType()


                self.state = 5084
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.STATUS_SYMBOL or _la==MySQLParser.VARIABLES_SYMBOL):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 5085
                    self.likeOrWhere()


                pass

            elif la_ == 22:
                self.state = 5089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FULL_SYMBOL:
                    self.state = 5088
                    self.match(MySQLParser.FULL_SYMBOL)


                self.state = 5091
                localctx.value = self.match(MySQLParser.PROCESSLIST_SYMBOL)
                pass

            elif la_ == 23:
                self.state = 5092
                self.charset()
                self.state = 5094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 5093
                    self.likeOrWhere()


                pass

            elif la_ == 24:
                self.state = 5096
                localctx.value = self.match(MySQLParser.COLLATION_SYMBOL)
                self.state = 5098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 5097
                    self.likeOrWhere()


                pass

            elif la_ == 25:
                self.state = 5100
                if not serverVersion < 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50700")
                self.state = 5101
                localctx.value = self.match(MySQLParser.CONTRIBUTORS_SYMBOL)
                pass

            elif la_ == 26:
                self.state = 5102
                localctx.value = self.match(MySQLParser.PRIVILEGES_SYMBOL)
                pass

            elif la_ == 27:
                self.state = 5103
                localctx.value = self.match(MySQLParser.GRANTS_SYMBOL)
                self.state = 5106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FOR_SYMBOL:
                    self.state = 5104
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 5105
                    self.user()


                pass

            elif la_ == 28:
                self.state = 5108
                localctx.value = self.match(MySQLParser.GRANTS_SYMBOL)
                self.state = 5109
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 5110
                self.user()
                self.state = 5111
                self.match(MySQLParser.USING_SYMBOL)
                self.state = 5112
                self.userList()
                pass

            elif la_ == 29:
                self.state = 5114
                localctx.value = self.match(MySQLParser.MASTER_SYMBOL)
                self.state = 5115
                self.match(MySQLParser.STATUS_SYMBOL)
                pass

            elif la_ == 30:
                self.state = 5116
                localctx.value = self.match(MySQLParser.CREATE_SYMBOL)
                self.state = 5137
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,637,self._ctx)
                if la_ == 1:
                    self.state = 5117
                    localctx.db_object = self.match(MySQLParser.DATABASE_SYMBOL)
                    self.state = 5119
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,636,self._ctx)
                    if la_ == 1:
                        self.state = 5118
                        self.ifNotExists()


                    self.state = 5121
                    self.schemaRef()
                    pass

                elif la_ == 2:
                    self.state = 5122
                    localctx.db_object = self.match(MySQLParser.EVENT_SYMBOL)
                    self.state = 5123
                    self.eventRef()
                    pass

                elif la_ == 3:
                    self.state = 5124
                    localctx.db_object = self.match(MySQLParser.FUNCTION_SYMBOL)
                    self.state = 5125
                    self.functionRef()
                    pass

                elif la_ == 4:
                    self.state = 5126
                    localctx.db_object = self.match(MySQLParser.PROCEDURE_SYMBOL)
                    self.state = 5127
                    self.procedureRef()
                    pass

                elif la_ == 5:
                    self.state = 5128
                    localctx.db_object = self.match(MySQLParser.TABLE_SYMBOL)
                    self.state = 5129
                    self.tableRef()
                    pass

                elif la_ == 6:
                    self.state = 5130
                    localctx.db_object = self.match(MySQLParser.TRIGGER_SYMBOL)
                    self.state = 5131
                    self.triggerRef()
                    pass

                elif la_ == 7:
                    self.state = 5132
                    localctx.db_object = self.match(MySQLParser.VIEW_SYMBOL)
                    self.state = 5133
                    self.viewRef()
                    pass

                elif la_ == 8:
                    self.state = 5134
                    if not serverVersion >= 50704:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 50704")
                    self.state = 5135
                    localctx.db_object = self.match(MySQLParser.USER_SYMBOL)
                    self.state = 5136
                    self.user()
                    pass


                pass

            elif la_ == 31:
                self.state = 5139
                localctx.value = self.match(MySQLParser.PROCEDURE_SYMBOL)
                self.state = 5140
                self.match(MySQLParser.STATUS_SYMBOL)
                self.state = 5142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 5141
                    self.likeOrWhere()


                pass

            elif la_ == 32:
                self.state = 5144
                localctx.value = self.match(MySQLParser.FUNCTION_SYMBOL)
                self.state = 5145
                self.match(MySQLParser.STATUS_SYMBOL)
                self.state = 5147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LIKE_SYMBOL or _la==MySQLParser.WHERE_SYMBOL:
                    self.state = 5146
                    self.likeOrWhere()


                pass

            elif la_ == 33:
                self.state = 5149
                localctx.value = self.match(MySQLParser.PROCEDURE_SYMBOL)
                self.state = 5150
                self.match(MySQLParser.CODE_SYMBOL)
                self.state = 5151
                self.procedureRef()
                pass

            elif la_ == 34:
                self.state = 5152
                localctx.value = self.match(MySQLParser.FUNCTION_SYMBOL)
                self.state = 5153
                self.match(MySQLParser.CODE_SYMBOL)
                self.state = 5154
                self.functionRef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCommandTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL_SYMBOL(self):
            return self.getToken(MySQLParser.FULL_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_showCommandType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCommandType" ):
                listener.enterShowCommandType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCommandType" ):
                listener.exitShowCommandType(self)




    def showCommandType(self):

        localctx = MySQLParser.ShowCommandTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_showCommandType)
        self._la = 0 # Token type
        try:
            self.state = 5163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5157
                self.match(MySQLParser.FULL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5158
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 5159
                self.match(MySQLParser.EXTENDED_SYMBOL)
                self.state = 5161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FULL_SYMBOL:
                    self.state = 5160
                    self.match(MySQLParser.FULL_SYMBOL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonBlockingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONBLOCKING_SYMBOL(self):
            return self.getToken(MySQLParser.NONBLOCKING_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_nonBlocking

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonBlocking" ):
                listener.enterNonBlocking(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonBlocking" ):
                listener.exitNonBlocking(self)




    def nonBlocking(self):

        localctx = MySQLParser.NonBlockingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_nonBlocking)
        try:
            self.state = 5170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,644,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5165
                if not serverVersion >= 50700 && serverVersion < 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50700 && serverVersion < 50706")
                self.state = 5167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,643,self._ctx)
                if la_ == 1:
                    self.state = 5166
                    self.match(MySQLParser.NONBLOCKING_SYMBOL)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromOrInContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_fromOrIn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromOrIn" ):
                listener.enterFromOrIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromOrIn" ):
                listener.exitFromOrIn(self)




    def fromOrIn(self):

        localctx = MySQLParser.FromOrInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_fromOrIn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5172
            _la = self._input.LA(1)
            if not(_la==MySQLParser.FROM_SYMBOL or _la==MySQLParser.IN_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InDbContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromOrIn(self):
            return self.getTypedRuleContext(MySQLParser.FromOrInContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_inDb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInDb" ):
                listener.enterInDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInDb" ):
                listener.exitInDb(self)




    def inDb(self):

        localctx = MySQLParser.InDbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_inDb)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5174
            self.fromOrIn()
            self.state = 5175
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProfileTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK_SYMBOL(self):
            return self.getToken(MySQLParser.BLOCK_SYMBOL, 0)

        def IO_SYMBOL(self):
            return self.getToken(MySQLParser.IO_SYMBOL, 0)

        def CONTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.CONTEXT_SYMBOL, 0)

        def SWITCHES_SYMBOL(self):
            return self.getToken(MySQLParser.SWITCHES_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MySQLParser.PAGE_SYMBOL, 0)

        def FAULTS_SYMBOL(self):
            return self.getToken(MySQLParser.FAULTS_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def CPU_SYMBOL(self):
            return self.getToken(MySQLParser.CPU_SYMBOL, 0)

        def IPC_SYMBOL(self):
            return self.getToken(MySQLParser.IPC_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(MySQLParser.MEMORY_SYMBOL, 0)

        def SOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.SOURCE_SYMBOL, 0)

        def SWAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SWAPS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_profileType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfileType" ):
                listener.enterProfileType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfileType" ):
                listener.exitProfileType(self)




    def profileType(self):

        localctx = MySQLParser.ProfileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_profileType)
        self._la = 0 # Token type
        try:
            self.state = 5184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.BLOCK_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5177
                self.match(MySQLParser.BLOCK_SYMBOL)
                self.state = 5178
                self.match(MySQLParser.IO_SYMBOL)
                pass
            elif token in [MySQLParser.CONTEXT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5179
                self.match(MySQLParser.CONTEXT_SYMBOL)
                self.state = 5180
                self.match(MySQLParser.SWITCHES_SYMBOL)
                pass
            elif token in [MySQLParser.PAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5181
                self.match(MySQLParser.PAGE_SYMBOL)
                self.state = 5182
                self.match(MySQLParser.FAULTS_SYMBOL)
                pass
            elif token in [MySQLParser.ALL_SYMBOL, MySQLParser.CPU_SYMBOL, MySQLParser.IPC_SYMBOL, MySQLParser.MEMORY_SYMBOL, MySQLParser.SOURCE_SYMBOL, MySQLParser.SWAPS_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5183
                _la = self._input.LA(1)
                if not(_la==MySQLParser.ALL_SYMBOL or _la==MySQLParser.CPU_SYMBOL or _la==MySQLParser.IPC_SYMBOL or _la==MySQLParser.MEMORY_SYMBOL or _la==MySQLParser.SOURCE_SYMBOL or _la==MySQLParser.SWAPS_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherAdministrativeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def BINLOG_SYMBOL(self):
            return self.getToken(MySQLParser.BINLOG_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def keyCacheListOrParts(self):
            return self.getTypedRuleContext(MySQLParser.KeyCacheListOrPartsContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.CACHE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def FLUSH_SYMBOL(self):
            return self.getToken(MySQLParser.FLUSH_SYMBOL, 0)

        def flushTables(self):
            return self.getTypedRuleContext(MySQLParser.FlushTablesContext,0)


        def flushOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FlushOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FlushOptionContext,i)


        def noWriteToBinLog(self):
            return self.getTypedRuleContext(MySQLParser.NoWriteToBinLogContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def KILL_SYMBOL(self):
            return self.getToken(MySQLParser.KILL_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(MySQLParser.CONNECTION_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def preloadTail(self):
            return self.getTypedRuleContext(MySQLParser.PreloadTailContext,0)


        def LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.LOAD_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_otherAdministrativeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherAdministrativeStatement" ):
                listener.enterOtherAdministrativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherAdministrativeStatement" ):
                listener.exitOtherAdministrativeStatement(self)




    def otherAdministrativeStatement(self):

        localctx = MySQLParser.OtherAdministrativeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_otherAdministrativeStatement)
        self._la = 0 # Token type
        try:
            self.state = 5223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,651,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5186
                localctx.type_expression = self.match(MySQLParser.BINLOG_SYMBOL)
                self.state = 5187
                self.textLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5188
                localctx.type_expression = self.match(MySQLParser.CACHE_SYMBOL)
                self.state = 5189
                self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 5190
                self.keyCacheListOrParts()
                self.state = 5191
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 5194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
                if la_ == 1:
                    self.state = 5192
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 5193
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5196
                localctx.type_expression = self.match(MySQLParser.FLUSH_SYMBOL)
                self.state = 5198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,647,self._ctx)
                if la_ == 1:
                    self.state = 5197
                    self.noWriteToBinLog()


                self.state = 5209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,649,self._ctx)
                if la_ == 1:
                    self.state = 5200
                    self.flushTables()
                    pass

                elif la_ == 2:
                    self.state = 5201
                    self.flushOption()
                    self.state = 5206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySQLParser.COMMA_SYMBOL:
                        self.state = 5202
                        self.match(MySQLParser.COMMA_SYMBOL)
                        self.state = 5203
                        self.flushOption()
                        self.state = 5208
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5211
                localctx.type_expression = self.match(MySQLParser.KILL_SYMBOL)
                self.state = 5213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,650,self._ctx)
                if la_ == 1:
                    self.state = 5212
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.CONNECTION_SYMBOL or _la==MySQLParser.QUERY_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5215
                self.expr(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5216
                localctx.type_expression = self.match(MySQLParser.LOAD_SYMBOL)
                self.state = 5217
                self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 5218
                self.match(MySQLParser.INTO_SYMBOL)
                self.state = 5219
                self.match(MySQLParser.CACHE_SYMBOL)
                self.state = 5220
                self.preloadTail()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5221
                if not serverVersion >= 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50709")
                self.state = 5222
                localctx.type_expression = self.match(MySQLParser.SHUTDOWN_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyCacheListOrPartsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyCacheList(self):
            return self.getTypedRuleContext(MySQLParser.KeyCacheListContext,0)


        def assignToKeycachePartition(self):
            return self.getTypedRuleContext(MySQLParser.AssignToKeycachePartitionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_keyCacheListOrParts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyCacheListOrParts" ):
                listener.enterKeyCacheListOrParts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyCacheListOrParts" ):
                listener.exitKeyCacheListOrParts(self)




    def keyCacheListOrParts(self):

        localctx = MySQLParser.KeyCacheListOrPartsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_keyCacheListOrParts)
        try:
            self.state = 5227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,652,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5225
                self.keyCacheList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5226
                self.assignToKeycachePartition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyCacheListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignToKeycache(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AssignToKeycacheContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AssignToKeycacheContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyCacheList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyCacheList" ):
                listener.enterKeyCacheList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyCacheList" ):
                listener.exitKeyCacheList(self)




    def keyCacheList(self):

        localctx = MySQLParser.KeyCacheListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_keyCacheList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5229
            self.assignToKeycache()
            self.state = 5234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 5230
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5231
                self.assignToKeycache()
                self.state = 5236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignToKeycacheContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def cacheKeyList(self):
            return self.getTypedRuleContext(MySQLParser.CacheKeyListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_assignToKeycache

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignToKeycache" ):
                listener.enterAssignToKeycache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignToKeycache" ):
                listener.exitAssignToKeycache(self)




    def assignToKeycache(self):

        localctx = MySQLParser.AssignToKeycacheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_assignToKeycache)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5237
            self.tableRef()
            self.state = 5239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.INDEX_SYMBOL or _la==MySQLParser.KEY_SYMBOL:
                self.state = 5238
                self.cacheKeyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignToKeycachePartitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def allOrPartitionNameList(self):
            return self.getTypedRuleContext(MySQLParser.AllOrPartitionNameListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def cacheKeyList(self):
            return self.getTypedRuleContext(MySQLParser.CacheKeyListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_assignToKeycachePartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignToKeycachePartition" ):
                listener.enterAssignToKeycachePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignToKeycachePartition" ):
                listener.exitAssignToKeycachePartition(self)




    def assignToKeycachePartition(self):

        localctx = MySQLParser.AssignToKeycachePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_assignToKeycachePartition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5241
            self.tableRef()
            self.state = 5242
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 5243
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 5244
            self.allOrPartitionNameList()
            self.state = 5245
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
            self.state = 5247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.INDEX_SYMBOL or _la==MySQLParser.KEY_SYMBOL:
                self.state = 5246
                self.cacheKeyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CacheKeyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyOrIndex(self):
            return self.getTypedRuleContext(MySQLParser.KeyOrIndexContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def keyUsageList(self):
            return self.getTypedRuleContext(MySQLParser.KeyUsageListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_cacheKeyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheKeyList" ):
                listener.enterCacheKeyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheKeyList" ):
                listener.exitCacheKeyList(self)




    def cacheKeyList(self):

        localctx = MySQLParser.CacheKeyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_cacheKeyList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5249
            self.keyOrIndex()
            self.state = 5250
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 5252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,656,self._ctx)
            if la_ == 1:
                self.state = 5251
                self.keyUsageList()


            self.state = 5254
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyUsageElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyUsageElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyUsageElement" ):
                listener.enterKeyUsageElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyUsageElement" ):
                listener.exitKeyUsageElement(self)




    def keyUsageElement(self):

        localctx = MySQLParser.KeyUsageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_keyUsageElement)
        try:
            self.state = 5258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5256
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5257
                self.match(MySQLParser.PRIMARY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyUsageListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyUsageElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.KeyUsageElementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.KeyUsageElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyUsageList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyUsageList" ):
                listener.enterKeyUsageList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyUsageList" ):
                listener.exitKeyUsageList(self)




    def keyUsageList(self):

        localctx = MySQLParser.KeyUsageListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_keyUsageList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5260
            self.keyUsageElement()
            self.state = 5265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 5261
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5262
                self.keyUsageElement()
                self.state = 5267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def DES_KEY_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(MySQLParser.HOSTS_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MySQLParser.STATUS_SYMBOL, 0)

        def USER_RESOURCES_SYMBOL(self):
            return self.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(MySQLParser.LOGS_SYMBOL, 0)

        def logType(self):
            return self.getTypedRuleContext(MySQLParser.LogTypeContext,0)


        def RELAY_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_SYMBOL, 0)

        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.CACHE_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def OPTIMIZER_COSTS_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_flushOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushOption" ):
                listener.enterFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushOption" ):
                listener.exitFlushOption(self)




    def flushOption(self):

        localctx = MySQLParser.FlushOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_flushOption)
        self._la = 0 # Token type
        try:
            self.state = 5283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5268
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.DES_KEY_FILE_SYMBOL or _la==MySQLParser.HOSTS_SYMBOL or _la==MySQLParser.PRIVILEGES_SYMBOL or _la==MySQLParser.STATUS_SYMBOL or _la==MySQLParser.USER_RESOURCES_SYMBOL):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.BINARY_SYMBOL or ((((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & ((1 << (MySQLParser.ENGINE_SYMBOL - 163)) | (1 << (MySQLParser.ERROR_SYMBOL - 163)) | (1 << (MySQLParser.GENERAL_SYMBOL - 163)))) != 0) or _la==MySQLParser.SLOW_SYMBOL:
                    self.state = 5269
                    self.logType()


                self.state = 5272
                localctx.option = self.match(MySQLParser.LOGS_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5273
                localctx.option = self.match(MySQLParser.RELAY_SYMBOL)
                self.state = 5274
                self.match(MySQLParser.LOGS_SYMBOL)
                self.state = 5276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,660,self._ctx)
                if la_ == 1:
                    self.state = 5275
                    self.channel()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5278
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 5279
                localctx.option = self.match(MySQLParser.QUERY_SYMBOL)
                self.state = 5280
                self.match(MySQLParser.CACHE_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5281
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 5282
                localctx.option = self.match(MySQLParser.OPTIMIZER_COSTS_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(MySQLParser.ERROR_SYMBOL, 0)

        def GENERAL_SYMBOL(self):
            return self.getToken(MySQLParser.GENERAL_SYMBOL, 0)

        def SLOW_SYMBOL(self):
            return self.getToken(MySQLParser.SLOW_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_logType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogType" ):
                listener.enterLogType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogType" ):
                listener.exitLogType(self)




    def logType(self):

        localctx = MySQLParser.LogTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_logType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5285
            _la = self._input.LA(1)
            if not(_la==MySQLParser.BINARY_SYMBOL or ((((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & ((1 << (MySQLParser.ENGINE_SYMBOL - 163)) | (1 << (MySQLParser.ERROR_SYMBOL - 163)) | (1 << (MySQLParser.GENERAL_SYMBOL - 163)))) != 0) or _la==MySQLParser.SLOW_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def flushTablesOptions(self):
            return self.getTypedRuleContext(MySQLParser.FlushTablesOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_flushTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushTables" ):
                listener.enterFlushTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushTables" ):
                listener.exitFlushTables(self)




    def flushTables(self):

        localctx = MySQLParser.FlushTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_flushTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5287
            _la = self._input.LA(1)
            if not(_la==MySQLParser.TABLES_SYMBOL or _la==MySQLParser.TABLE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,663,self._ctx)
            if la_ == 1:
                self.state = 5288
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 5289
                self.match(MySQLParser.READ_SYMBOL)
                self.state = 5290
                self.match(MySQLParser.LOCK_SYMBOL)

            elif la_ == 2:
                self.state = 5291
                self.identifierList()
                self.state = 5293
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,662,self._ctx)
                if la_ == 1:
                    self.state = 5292
                    self.flushTablesOptions()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTablesOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def EXPORT_SYMBOL(self):
            return self.getToken(MySQLParser.EXPORT_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_flushTablesOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushTablesOptions" ):
                listener.enterFlushTablesOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushTablesOptions" ):
                listener.exitFlushTablesOptions(self)




    def flushTablesOptions(self):

        localctx = MySQLParser.FlushTablesOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_flushTablesOptions)
        try:
            self.state = 5303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,664,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5297
                if not serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50606")
                self.state = 5298
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 5299
                self.match(MySQLParser.EXPORT_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5300
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 5301
                self.match(MySQLParser.READ_SYMBOL)
                self.state = 5302
                self.match(MySQLParser.LOCK_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreloadTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def adminPartition(self):
            return self.getTypedRuleContext(MySQLParser.AdminPartitionContext,0)


        def cacheKeyList(self):
            return self.getTypedRuleContext(MySQLParser.CacheKeyListContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(MySQLParser.LEAVES_SYMBOL, 0)

        def preloadList(self):
            return self.getTypedRuleContext(MySQLParser.PreloadListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_preloadTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreloadTail" ):
                listener.enterPreloadTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreloadTail" ):
                listener.exitPreloadTail(self)




    def preloadTail(self):

        localctx = MySQLParser.PreloadTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_preloadTail)
        self._la = 0 # Token type
        try:
            self.state = 5315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,667,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5305
                self.tableRef()
                self.state = 5306
                self.adminPartition()
                self.state = 5308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.INDEX_SYMBOL or _la==MySQLParser.KEY_SYMBOL:
                    self.state = 5307
                    self.cacheKeyList()


                self.state = 5312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.IGNORE_SYMBOL:
                    self.state = 5310
                    self.match(MySQLParser.IGNORE_SYMBOL)
                    self.state = 5311
                    self.match(MySQLParser.LEAVES_SYMBOL)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5314
                self.preloadList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreloadListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preloadKeys(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PreloadKeysContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PreloadKeysContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_preloadList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreloadList" ):
                listener.enterPreloadList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreloadList" ):
                listener.exitPreloadList(self)




    def preloadList(self):

        localctx = MySQLParser.PreloadListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_preloadList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5317
            self.preloadKeys()
            self.state = 5322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 5318
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5319
                self.preloadKeys()
                self.state = 5324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreloadKeysContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def cacheKeyList(self):
            return self.getTypedRuleContext(MySQLParser.CacheKeyListContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(MySQLParser.LEAVES_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_preloadKeys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreloadKeys" ):
                listener.enterPreloadKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreloadKeys" ):
                listener.exitPreloadKeys(self)




    def preloadKeys(self):

        localctx = MySQLParser.PreloadKeysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_preloadKeys)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5325
            self.tableRef()
            self.state = 5327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.INDEX_SYMBOL or _la==MySQLParser.KEY_SYMBOL:
                self.state = 5326
                self.cacheKeyList()


            self.state = 5331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.IGNORE_SYMBOL:
                self.state = 5329
                self.match(MySQLParser.IGNORE_SYMBOL)
                self.state = 5330
                self.match(MySQLParser.LEAVES_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminPartitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def allOrPartitionNameList(self):
            return self.getTypedRuleContext(MySQLParser.AllOrPartitionNameListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_adminPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminPartition" ):
                listener.enterAdminPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminPartition" ):
                listener.exitAdminPartition(self)




    def adminPartition(self):

        localctx = MySQLParser.AdminPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_adminPartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5333
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 5334
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 5335
            self.allOrPartitionNameList()
            self.state = 5336
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupManagementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createResourceGroup(self):
            return self.getTypedRuleContext(MySQLParser.CreateResourceGroupContext,0)


        def alterResourceGroup(self):
            return self.getTypedRuleContext(MySQLParser.AlterResourceGroupContext,0)


        def setResourceGroup(self):
            return self.getTypedRuleContext(MySQLParser.SetResourceGroupContext,0)


        def dropResourceGroup(self):
            return self.getTypedRuleContext(MySQLParser.DropResourceGroupContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_resourceGroupManagement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupManagement" ):
                listener.enterResourceGroupManagement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupManagement" ):
                listener.exitResourceGroupManagement(self)




    def resourceGroupManagement(self):

        localctx = MySQLParser.ResourceGroupManagementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_resourceGroupManagement)
        try:
            self.state = 5342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.CREATE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5338
                self.createResourceGroup()
                pass
            elif token in [MySQLParser.ALTER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5339
                self.alterResourceGroup()
                pass
            elif token in [MySQLParser.SET_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5340
                self.setResourceGroup()
                pass
            elif token in [MySQLParser.DROP_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5341
                self.dropResourceGroup()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateResourceGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def TYPE_SYMBOL(self):
            return self.getToken(MySQLParser.TYPE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(MySQLParser.SYSTEM_SYMBOL, 0)

        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def resourceGroupVcpuList(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupVcpuListContext,0)


        def resourceGroupPriority(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupPriorityContext,0)


        def resourceGroupEnableDisable(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupEnableDisableContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateResourceGroup" ):
                listener.enterCreateResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateResourceGroup" ):
                listener.exitCreateResourceGroup(self)




    def createResourceGroup(self):

        localctx = MySQLParser.CreateResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_createResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5344
            self.match(MySQLParser.CREATE_SYMBOL)
            self.state = 5345
            self.match(MySQLParser.RESOURCE_SYMBOL)
            self.state = 5346
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 5347
            self.identifier()
            self.state = 5348
            self.match(MySQLParser.TYPE_SYMBOL)
            self.state = 5350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.EQUAL_OPERATOR or _la==MySQLParser.ASSIGN_OPERATOR:
                self.state = 5349
                self.equal()


            self.state = 5352
            _la = self._input.LA(1)
            if not(_la==MySQLParser.USER_SYMBOL or _la==MySQLParser.SYSTEM_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.VCPU_SYMBOL:
                self.state = 5353
                self.resourceGroupVcpuList()


            self.state = 5357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.THREAD_PRIORITY_SYMBOL:
                self.state = 5356
                self.resourceGroupPriority()


            self.state = 5360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DISABLE_SYMBOL or _la==MySQLParser.ENABLE_SYMBOL:
                self.state = 5359
                self.resourceGroupEnableDisable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupVcpuListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VCPU_SYMBOL(self):
            return self.getToken(MySQLParser.VCPU_SYMBOL, 0)

        def vcpuNumOrRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.VcpuNumOrRangeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.VcpuNumOrRangeContext,i)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_resourceGroupVcpuList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupVcpuList" ):
                listener.enterResourceGroupVcpuList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupVcpuList" ):
                listener.exitResourceGroupVcpuList(self)




    def resourceGroupVcpuList(self):

        localctx = MySQLParser.ResourceGroupVcpuListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_resourceGroupVcpuList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5362
            self.match(MySQLParser.VCPU_SYMBOL)
            self.state = 5364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.EQUAL_OPERATOR or _la==MySQLParser.ASSIGN_OPERATOR:
                self.state = 5363
                self.equal()


            self.state = 5366
            self.vcpuNumOrRange()
            self.state = 5373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.INT_NUMBER or _la==MySQLParser.COMMA_SYMBOL:
                self.state = 5368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 5367
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 5370
                self.vcpuNumOrRange()
                self.state = 5375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VcpuNumOrRangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.INT_NUMBER)
            else:
                return self.getToken(MySQLParser.INT_NUMBER, i)

        def MINUS_OPERATOR(self):
            return self.getToken(MySQLParser.MINUS_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_vcpuNumOrRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVcpuNumOrRange" ):
                listener.enterVcpuNumOrRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVcpuNumOrRange" ):
                listener.exitVcpuNumOrRange(self)




    def vcpuNumOrRange(self):

        localctx = MySQLParser.VcpuNumOrRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_vcpuNumOrRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5376
            self.match(MySQLParser.INT_NUMBER)
            self.state = 5379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.MINUS_OPERATOR:
                self.state = 5377
                self.match(MySQLParser.MINUS_OPERATOR)
                self.state = 5378
                self.match(MySQLParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupPriorityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THREAD_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_resourceGroupPriority

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupPriority" ):
                listener.enterResourceGroupPriority(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupPriority" ):
                listener.exitResourceGroupPriority(self)




    def resourceGroupPriority(self):

        localctx = MySQLParser.ResourceGroupPriorityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_resourceGroupPriority)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5381
            self.match(MySQLParser.THREAD_PRIORITY_SYMBOL)
            self.state = 5383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.EQUAL_OPERATOR or _la==MySQLParser.ASSIGN_OPERATOR:
                self.state = 5382
                self.equal()


            self.state = 5385
            self.match(MySQLParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupEnableDisableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_resourceGroupEnableDisable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupEnableDisable" ):
                listener.enterResourceGroupEnableDisable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupEnableDisable" ):
                listener.exitResourceGroupEnableDisable(self)




    def resourceGroupEnableDisable(self):

        localctx = MySQLParser.ResourceGroupEnableDisableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_resourceGroupEnableDisable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5387
            _la = self._input.LA(1)
            if not(_la==MySQLParser.DISABLE_SYMBOL or _la==MySQLParser.ENABLE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterResourceGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MySQLParser.ALTER_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def resourceGroupRef(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupRefContext,0)


        def resourceGroupVcpuList(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupVcpuListContext,0)


        def resourceGroupPriority(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupPriorityContext,0)


        def resourceGroupEnableDisable(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupEnableDisableContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(MySQLParser.FORCE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterResourceGroup" ):
                listener.enterAlterResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterResourceGroup" ):
                listener.exitAlterResourceGroup(self)




    def alterResourceGroup(self):

        localctx = MySQLParser.AlterResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_alterResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5389
            self.match(MySQLParser.ALTER_SYMBOL)
            self.state = 5390
            self.match(MySQLParser.RESOURCE_SYMBOL)
            self.state = 5391
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 5392
            self.resourceGroupRef()
            self.state = 5394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.VCPU_SYMBOL:
                self.state = 5393
                self.resourceGroupVcpuList()


            self.state = 5397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.THREAD_PRIORITY_SYMBOL:
                self.state = 5396
                self.resourceGroupPriority()


            self.state = 5400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DISABLE_SYMBOL or _la==MySQLParser.ENABLE_SYMBOL:
                self.state = 5399
                self.resourceGroupEnableDisable()


            self.state = 5403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.FORCE_SYMBOL:
                self.state = 5402
                self.match(MySQLParser.FORCE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetResourceGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def threadIdList(self):
            return self.getTypedRuleContext(MySQLParser.ThreadIdListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_setResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetResourceGroup" ):
                listener.enterSetResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetResourceGroup" ):
                listener.exitSetResourceGroup(self)




    def setResourceGroup(self):

        localctx = MySQLParser.SetResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_setResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5405
            self.match(MySQLParser.SET_SYMBOL)
            self.state = 5406
            self.match(MySQLParser.RESOURCE_SYMBOL)
            self.state = 5407
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 5408
            self.identifier()
            self.state = 5411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.FOR_SYMBOL:
                self.state = 5409
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 5410
                self.threadIdList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreadIdListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Real_ulong_numberContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_threadIdList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreadIdList" ):
                listener.enterThreadIdList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreadIdList" ):
                listener.exitThreadIdList(self)




    def threadIdList(self):

        localctx = MySQLParser.ThreadIdListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_threadIdList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5413
            self.real_ulong_number()
            self.state = 5420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (MySQLParser.INT_NUMBER - 747)) | (1 << (MySQLParser.LONG_NUMBER - 747)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 747)) | (1 << (MySQLParser.COMMA_SYMBOL - 747)) | (1 << (MySQLParser.HEX_NUMBER - 747)))) != 0):
                self.state = 5415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 5414
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 5417
                self.real_ulong_number()
                self.state = 5422
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropResourceGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def resourceGroupRef(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupRefContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(MySQLParser.FORCE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dropResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropResourceGroup" ):
                listener.enterDropResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropResourceGroup" ):
                listener.exitDropResourceGroup(self)




    def dropResourceGroup(self):

        localctx = MySQLParser.DropResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_dropResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5423
            self.match(MySQLParser.DROP_SYMBOL)
            self.state = 5424
            self.match(MySQLParser.RESOURCE_SYMBOL)
            self.state = 5425
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 5426
            self.resourceGroupRef()
            self.state = 5428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.FORCE_SYMBOL:
                self.state = 5427
                self.match(MySQLParser.FORCE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describeStatement(self):
            return self.getTypedRuleContext(MySQLParser.DescribeStatementContext,0)


        def explainStatement(self):
            return self.getTypedRuleContext(MySQLParser.ExplainStatementContext,0)


        def helpCommand(self):
            return self.getTypedRuleContext(MySQLParser.HelpCommandContext,0)


        def useCommand(self):
            return self.getTypedRuleContext(MySQLParser.UseCommandContext,0)


        def restartServer(self):
            return self.getTypedRuleContext(MySQLParser.RestartServerContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)




    def utilityStatement(self):

        localctx = MySQLParser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_utilityStatement)
        try:
            self.state = 5436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,689,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5430
                self.describeStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5431
                self.explainStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5432
                self.helpCommand()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5433
                self.useCommand()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5434
                if not serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80011")
                self.state = 5435
                self.restartServer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def EXPLAIN_SYMBOL(self):
            return self.getToken(MySQLParser.EXPLAIN_SYMBOL, 0)

        def DESCRIBE_SYMBOL(self):
            return self.getToken(MySQLParser.DESCRIBE_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(MySQLParser.DESC_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def columnRef(self):
            return self.getTypedRuleContext(MySQLParser.ColumnRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_describeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeStatement" ):
                listener.enterDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeStatement" ):
                listener.exitDescribeStatement(self)




    def describeStatement(self):

        localctx = MySQLParser.DescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_describeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5438
            _la = self._input.LA(1)
            if not(((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (MySQLParser.DESC_SYMBOL - 134)) | (1 << (MySQLParser.DESCRIBE_SYMBOL - 134)) | (1 << (MySQLParser.EXPLAIN_SYMBOL - 134)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5439
            self.tableRef()
            self.state = 5442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,690,self._ctx)
            if la_ == 1:
                self.state = 5440
                self.textString()

            elif la_ == 2:
                self.state = 5441
                self.columnRef()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explainableStatement(self):
            return self.getTypedRuleContext(MySQLParser.ExplainableStatementContext,0)


        def EXPLAIN_SYMBOL(self):
            return self.getToken(MySQLParser.EXPLAIN_SYMBOL, 0)

        def DESCRIBE_SYMBOL(self):
            return self.getToken(MySQLParser.DESCRIBE_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(MySQLParser.DESC_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def PARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONS_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.FORMAT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def ANALYZE_SYMBOL(self):
            return self.getToken(MySQLParser.ANALYZE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_explainStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainStatement" ):
                listener.enterExplainStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainStatement" ):
                listener.exitExplainStatement(self)




    def explainStatement(self):

        localctx = MySQLParser.ExplainStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_explainStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5444
            _la = self._input.LA(1)
            if not(((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (MySQLParser.DESC_SYMBOL - 134)) | (1 << (MySQLParser.DESCRIBE_SYMBOL - 134)) | (1 << (MySQLParser.EXPLAIN_SYMBOL - 134)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,691,self._ctx)
            if la_ == 1:
                self.state = 5445
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 5446
                self.match(MySQLParser.EXTENDED_SYMBOL)

            elif la_ == 2:
                self.state = 5447
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 5448
                self.match(MySQLParser.PARTITIONS_SYMBOL)

            elif la_ == 3:
                self.state = 5449
                if not serverVersion >= 50605:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50605")
                self.state = 5450
                self.match(MySQLParser.FORMAT_SYMBOL)
                self.state = 5451
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 5452
                self.textOrIdentifier()

            elif la_ == 4:
                self.state = 5453
                if not serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80018")
                self.state = 5454
                self.match(MySQLParser.ANALYZE_SYMBOL)

            elif la_ == 5:
                self.state = 5455
                if not serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80019")
                self.state = 5456
                self.match(MySQLParser.ANALYZE_SYMBOL)
                self.state = 5457
                self.match(MySQLParser.FORMAT_SYMBOL)
                self.state = 5458
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 5459
                self.textOrIdentifier()


            self.state = 5462
            self.explainableStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(MySQLParser.SelectStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(MySQLParser.DeleteStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(MySQLParser.InsertStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(MySQLParser.ReplaceStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(MySQLParser.UpdateStatementContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(MySQLParser.CONNECTION_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_explainableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainableStatement" ):
                listener.enterExplainableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainableStatement" ):
                listener.exitExplainableStatement(self)




    def explainableStatement(self):

        localctx = MySQLParser.ExplainableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_explainableStatement)
        try:
            self.state = 5476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,693,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5464
                self.selectStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5465
                if not serverVersion >= 50603:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50603")
                self.state = 5470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,692,self._ctx)
                if la_ == 1:
                    self.state = 5466
                    self.deleteStatement()
                    pass

                elif la_ == 2:
                    self.state = 5467
                    self.insertStatement()
                    pass

                elif la_ == 3:
                    self.state = 5468
                    self.replaceStatement()
                    pass

                elif la_ == 4:
                    self.state = 5469
                    self.updateStatement()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5472
                if not serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50700")
                self.state = 5473
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 5474
                self.match(MySQLParser.CONNECTION_SYMBOL)
                self.state = 5475
                self.real_ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpCommandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP_SYMBOL(self):
            return self.getToken(MySQLParser.HELP_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_helpCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpCommand" ):
                listener.enterHelpCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpCommand" ):
                listener.exitHelpCommand(self)




    def helpCommand(self):

        localctx = MySQLParser.HelpCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_helpCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5478
            self.match(MySQLParser.HELP_SYMBOL)
            self.state = 5479
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseCommandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MySQLParser.USE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_useCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseCommand" ):
                listener.enterUseCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseCommand" ):
                listener.exitUseCommand(self)




    def useCommand(self):

        localctx = MySQLParser.UseCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_useCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5481
            self.match(MySQLParser.USE_SYMBOL)
            self.state = 5482
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestartServerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTART_SYMBOL(self):
            return self.getToken(MySQLParser.RESTART_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_restartServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestartServer" ):
                listener.enterRestartServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestartServer" ):
                listener.exitRestartServer(self)




    def restartServer(self):

        localctx = MySQLParser.RestartServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_restartServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5484
            self.match(MySQLParser.RESTART_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySQLParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExprOrContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)

        def OR_SYMBOL(self):
            return self.getToken(MySQLParser.OR_SYMBOL, 0)
        def LOGICAL_OR_OPERATOR(self):
            return self.getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprOr" ):
                listener.enterExprOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprOr" ):
                listener.exitExprOr(self)


    class ExprNotContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprNot" ):
                listener.enterExprNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprNot" ):
                listener.exitExprNot(self)


    class ExprIsContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.ExprContext
            super().__init__(parser)
            self.type_expression = None # Token
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(MySQLParser.BoolPriContext,0)

        def IS_SYMBOL(self):
            return self.getToken(MySQLParser.IS_SYMBOL, 0)
        def TRUE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUE_SYMBOL, 0)
        def FALSE_SYMBOL(self):
            return self.getToken(MySQLParser.FALSE_SYMBOL, 0)
        def UNKNOWN_SYMBOL(self):
            return self.getToken(MySQLParser.UNKNOWN_SYMBOL, 0)
        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprIs" ):
                listener.enterExprIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprIs" ):
                listener.exitExprIs(self)


    class ExprAndContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)

        def AND_SYMBOL(self):
            return self.getToken(MySQLParser.AND_SYMBOL, 0)
        def LOGICAL_AND_OPERATOR(self):
            return self.getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprAnd" ):
                listener.enterExprAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprAnd" ):
                listener.exitExprAnd(self)


    class ExprXorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)

        def XOR_SYMBOL(self):
            return self.getToken(MySQLParser.XOR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprXor" ):
                listener.enterExprXor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprXor" ):
                listener.exitExprXor(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySQLParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 676
        self.enterRecursionRule(localctx, 676, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,696,self._ctx)
            if la_ == 1:
                localctx = MySQLParser.ExprIsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5487
                self.boolPri(0)
                self.state = 5493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,695,self._ctx)
                if la_ == 1:
                    self.state = 5488
                    self.match(MySQLParser.IS_SYMBOL)
                    self.state = 5490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.NOT_SYMBOL or _la==MySQLParser.NOT2_SYMBOL:
                        self.state = 5489
                        self.notRule()


                    self.state = 5492
                    localctx.type_expression = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.FALSE_SYMBOL or _la==MySQLParser.TRUE_SYMBOL or _la==MySQLParser.UNKNOWN_SYMBOL):
                        localctx.type_expression = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                localctx = MySQLParser.ExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5495
                self.match(MySQLParser.NOT_SYMBOL)
                self.state = 5496
                self.expr(4)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5510
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,698,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5508
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,697,self._ctx)
                    if la_ == 1:
                        localctx = MySQLParser.ExprAndContext(self, MySQLParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 5499
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5500
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.AND_SYMBOL or _la==MySQLParser.LOGICAL_AND_OPERATOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5501
                        self.expr(4)
                        pass

                    elif la_ == 2:
                        localctx = MySQLParser.ExprXorContext(self, MySQLParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 5502
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5503
                        self.match(MySQLParser.XOR_SYMBOL)
                        self.state = 5504
                        self.expr(3)
                        pass

                    elif la_ == 3:
                        localctx = MySQLParser.ExprOrContext(self, MySQLParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 5505
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5506
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.OR_SYMBOL or _la==MySQLParser.LOGICAL_OR_OPERATOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5507
                        self.expr(2)
                        pass

             
                self.state = 5512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,698,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BoolPriContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySQLParser.RULE_boolPri

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PrimaryExprPredicateContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprPredicate" ):
                listener.enterPrimaryExprPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprPredicate" ):
                listener.exitPrimaryExprPredicate(self)


    class PrimaryExprCompareContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(MySQLParser.BoolPriContext,0)

        def compOp(self):
            return self.getTypedRuleContext(MySQLParser.CompOpContext,0)

        def predicate(self):
            return self.getTypedRuleContext(MySQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprCompare" ):
                listener.enterPrimaryExprCompare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprCompare" ):
                listener.exitPrimaryExprCompare(self)


    class PrimaryExprAllAnyContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(MySQLParser.BoolPriContext,0)

        def compOp(self):
            return self.getTypedRuleContext(MySQLParser.CompOpContext,0)

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)
        def ANY_SYMBOL(self):
            return self.getToken(MySQLParser.ANY_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprAllAny" ):
                listener.enterPrimaryExprAllAny(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprAllAny" ):
                listener.exitPrimaryExprAllAny(self)


    class PrimaryExprIsNullContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(MySQLParser.BoolPriContext,0)

        def IS_SYMBOL(self):
            return self.getToken(MySQLParser.IS_SYMBOL, 0)
        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)
        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprIsNull" ):
                listener.enterPrimaryExprIsNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprIsNull" ):
                listener.exitPrimaryExprIsNull(self)



    def boolPri(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySQLParser.BoolPriContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 678
        self.enterRecursionRule(localctx, 678, self.RULE_boolPri, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MySQLParser.PrimaryExprPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 5514
            self.predicate()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5533
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,701,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5531
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,700,self._ctx)
                    if la_ == 1:
                        localctx = MySQLParser.PrimaryExprIsNullContext(self, MySQLParser.BoolPriContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolPri)
                        self.state = 5516
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5517
                        self.match(MySQLParser.IS_SYMBOL)
                        self.state = 5519
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySQLParser.NOT_SYMBOL or _la==MySQLParser.NOT2_SYMBOL:
                            self.state = 5518
                            self.notRule()


                        self.state = 5521
                        self.match(MySQLParser.NULL_SYMBOL)
                        pass

                    elif la_ == 2:
                        localctx = MySQLParser.PrimaryExprCompareContext(self, MySQLParser.BoolPriContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolPri)
                        self.state = 5522
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5523
                        self.compOp()
                        self.state = 5524
                        self.predicate()
                        pass

                    elif la_ == 3:
                        localctx = MySQLParser.PrimaryExprAllAnyContext(self, MySQLParser.BoolPriContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolPri)
                        self.state = 5526
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5527
                        self.compOp()
                        self.state = 5528
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.ALL_SYMBOL or _la==MySQLParser.ANY_SYMBOL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5529
                        self.subquery()
                        pass

             
                self.state = 5535
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,701,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CompOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def NULL_SAFE_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0)

        def GREATER_OR_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0)

        def GREATER_THAN_OPERATOR(self):
            return self.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0)

        def LESS_OR_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0)

        def LESS_THAN_OPERATOR(self):
            return self.getToken(MySQLParser.LESS_THAN_OPERATOR, 0)

        def NOT_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_compOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompOp" ):
                listener.enterCompOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompOp" ):
                listener.exitCompOp(self)




    def compOp(self):

        localctx = MySQLParser.CompOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_compOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5536
            _la = self._input.LA(1)
            if not(((((_la - 750)) & ~0x3f) == 0 and ((1 << (_la - 750)) & ((1 << (MySQLParser.EQUAL_OPERATOR - 750)) | (1 << (MySQLParser.NULL_SAFE_EQUAL_OPERATOR - 750)) | (1 << (MySQLParser.GREATER_OR_EQUAL_OPERATOR - 750)) | (1 << (MySQLParser.GREATER_THAN_OPERATOR - 750)) | (1 << (MySQLParser.LESS_OR_EQUAL_OPERATOR - 750)) | (1 << (MySQLParser.LESS_THAN_OPERATOR - 750)) | (1 << (MySQLParser.NOT_EQUAL_OPERATOR - 750)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.BitExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.BitExprContext,i)


        def predicateOperations(self):
            return self.getTypedRuleContext(MySQLParser.PredicateOperationsContext,0)


        def MEMBER_SYMBOL(self):
            return self.getToken(MySQLParser.MEMBER_SYMBOL, 0)

        def simpleExprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprWithParenthesesContext,0)


        def SOUNDS_SYMBOL(self):
            return self.getToken(MySQLParser.SOUNDS_SYMBOL, 0)

        def LIKE_SYMBOL(self):
            return self.getToken(MySQLParser.LIKE_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def OF_SYMBOL(self):
            return self.getToken(MySQLParser.OF_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = MySQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5538
            self.bitExpr(0)
            self.state = 5552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,704,self._ctx)
            if la_ == 1:
                self.state = 5540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NOT_SYMBOL or _la==MySQLParser.NOT2_SYMBOL:
                    self.state = 5539
                    self.notRule()


                self.state = 5542
                self.predicateOperations()

            elif la_ == 2:
                self.state = 5543
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 5544
                self.match(MySQLParser.MEMBER_SYMBOL)
                self.state = 5546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.OF_SYMBOL:
                    self.state = 5545
                    self.match(MySQLParser.OF_SYMBOL)


                self.state = 5548
                self.simpleExprWithParentheses()

            elif la_ == 3:
                self.state = 5549
                self.match(MySQLParser.SOUNDS_SYMBOL)
                self.state = 5550
                self.match(MySQLParser.LIKE_SYMBOL)
                self.state = 5551
                self.bitExpr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySQLParser.RULE_predicateOperations

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PredicateExprRegexContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REGEXP_SYMBOL(self):
            return self.getToken(MySQLParser.REGEXP_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprRegex" ):
                listener.enterPredicateExprRegex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprRegex" ):
                listener.exitPredicateExprRegex(self)


    class PredicateExprBetweenContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN_SYMBOL(self):
            return self.getToken(MySQLParser.BETWEEN_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)

        def AND_SYMBOL(self):
            return self.getToken(MySQLParser.AND_SYMBOL, 0)
        def predicate(self):
            return self.getTypedRuleContext(MySQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprBetween" ):
                listener.enterPredicateExprBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprBetween" ):
                listener.exitPredicateExprBetween(self)


    class PredicateExprInContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)
        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprIn" ):
                listener.enterPredicateExprIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprIn" ):
                listener.exitPredicateExprIn(self)


    class PredicateExprLikeContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIKE_SYMBOL(self):
            return self.getToken(MySQLParser.LIKE_SYMBOL, 0)
        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SimpleExprContext,i)

        def ESCAPE_SYMBOL(self):
            return self.getToken(MySQLParser.ESCAPE_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprLike" ):
                listener.enterPredicateExprLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprLike" ):
                listener.exitPredicateExprLike(self)



    def predicateOperations(self):

        localctx = MySQLParser.PredicateOperationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_predicateOperations)
        try:
            self.state = 5575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.IN_SYMBOL]:
                localctx = MySQLParser.PredicateExprInContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5554
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 5560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,705,self._ctx)
                if la_ == 1:
                    self.state = 5555
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 5556
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 5557
                    self.exprList()
                    self.state = 5558
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass


                pass
            elif token in [MySQLParser.BETWEEN_SYMBOL]:
                localctx = MySQLParser.PredicateExprBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5562
                self.match(MySQLParser.BETWEEN_SYMBOL)
                self.state = 5563
                self.bitExpr(0)
                self.state = 5564
                self.match(MySQLParser.AND_SYMBOL)
                self.state = 5565
                self.predicate()
                pass
            elif token in [MySQLParser.LIKE_SYMBOL]:
                localctx = MySQLParser.PredicateExprLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5567
                self.match(MySQLParser.LIKE_SYMBOL)
                self.state = 5568
                self.simpleExpr(0)
                self.state = 5571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
                if la_ == 1:
                    self.state = 5569
                    self.match(MySQLParser.ESCAPE_SYMBOL)
                    self.state = 5570
                    self.simpleExpr(0)


                pass
            elif token in [MySQLParser.REGEXP_SYMBOL]:
                localctx = MySQLParser.PredicateExprRegexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5573
                self.match(MySQLParser.REGEXP_SYMBOL)
                self.state = 5574
                self.bitExpr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)


        def bitExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.BitExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.BitExprContext,i)


        def BITWISE_XOR_OPERATOR(self):
            return self.getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0)

        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def DIV_OPERATOR(self):
            return self.getToken(MySQLParser.DIV_OPERATOR, 0)

        def MOD_OPERATOR(self):
            return self.getToken(MySQLParser.MOD_OPERATOR, 0)

        def DIV_SYMBOL(self):
            return self.getToken(MySQLParser.DIV_SYMBOL, 0)

        def MOD_SYMBOL(self):
            return self.getToken(MySQLParser.MOD_SYMBOL, 0)

        def PLUS_OPERATOR(self):
            return self.getToken(MySQLParser.PLUS_OPERATOR, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(MySQLParser.MINUS_OPERATOR, 0)

        def SHIFT_LEFT_OPERATOR(self):
            return self.getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0)

        def SHIFT_RIGHT_OPERATOR(self):
            return self.getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0)

        def BITWISE_AND_OPERATOR(self):
            return self.getToken(MySQLParser.BITWISE_AND_OPERATOR, 0)

        def BITWISE_OR_OPERATOR(self):
            return self.getToken(MySQLParser.BITWISE_OR_OPERATOR, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_bitExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpr" ):
                listener.enterBitExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpr" ):
                listener.exitBitExpr(self)



    def bitExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySQLParser.BitExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 686
        self.enterRecursionRule(localctx, 686, self.RULE_bitExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5578
            self.simpleExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 5606
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,709,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5604
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,708,self._ctx)
                    if la_ == 1:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5580
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 5581
                        localctx.op = self.match(MySQLParser.BITWISE_XOR_OPERATOR)
                        self.state = 5582
                        self.bitExpr(8)
                        pass

                    elif la_ == 2:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5583
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 5584
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.DIV_SYMBOL or _la==MySQLParser.MOD_SYMBOL or ((((_la - 760)) & ~0x3f) == 0 and ((1 << (_la - 760)) & ((1 << (MySQLParser.MULT_OPERATOR - 760)) | (1 << (MySQLParser.DIV_OPERATOR - 760)) | (1 << (MySQLParser.MOD_OPERATOR - 760)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5585
                        self.bitExpr(7)
                        pass

                    elif la_ == 3:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5586
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 5587
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.PLUS_OPERATOR or _la==MySQLParser.MINUS_OPERATOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5588
                        self.bitExpr(6)
                        pass

                    elif la_ == 4:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5589
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5590
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.SHIFT_LEFT_OPERATOR or _la==MySQLParser.SHIFT_RIGHT_OPERATOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5591
                        self.bitExpr(4)
                        pass

                    elif la_ == 5:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5592
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5593
                        localctx.op = self.match(MySQLParser.BITWISE_AND_OPERATOR)
                        self.state = 5594
                        self.bitExpr(3)
                        pass

                    elif la_ == 6:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5595
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5596
                        localctx.op = self.match(MySQLParser.BITWISE_OR_OPERATOR)
                        self.state = 5597
                        self.bitExpr(2)
                        pass

                    elif la_ == 7:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5598
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 5599
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.PLUS_OPERATOR or _la==MySQLParser.MINUS_OPERATOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5600
                        self.match(MySQLParser.INTERVAL_SYMBOL)
                        self.state = 5601
                        self.expr(0)
                        self.state = 5602
                        self.interval()
                        pass

             
                self.state = 5608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,709,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySQLParser.RULE_simpleExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SimpleExprConvertContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT_SYMBOL(self):
            return self.getToken(MySQLParser.CONVERT_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)

        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)
        def castType(self):
            return self.getTypedRuleContext(MySQLParser.CastTypeContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprConvert" ):
                listener.enterSimpleExprConvert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprConvert" ):
                listener.exitSimpleExprConvert(self)


    class SimpleExprVariableContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable(self):
            return self.getTypedRuleContext(MySQLParser.VariableContext,0)

        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprVariable" ):
                listener.enterSimpleExprVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprVariable" ):
                listener.exitSimpleExprVariable(self)


    class SimpleExprCastContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST_SYMBOL(self):
            return self.getToken(MySQLParser.CAST_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)
        def castType(self):
            return self.getTypedRuleContext(MySQLParser.CastTypeContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def arrayCast(self):
            return self.getTypedRuleContext(MySQLParser.ArrayCastContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprCast" ):
                listener.enterSimpleExprCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprCast" ):
                listener.exitSimpleExprCast(self)


    class SimpleExprUnaryContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)

        def PLUS_OPERATOR(self):
            return self.getToken(MySQLParser.PLUS_OPERATOR, 0)
        def MINUS_OPERATOR(self):
            return self.getToken(MySQLParser.MINUS_OPERATOR, 0)
        def BITWISE_NOT_OPERATOR(self):
            return self.getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprUnary" ):
                listener.enterSimpleExprUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprUnary" ):
                listener.exitSimpleExprUnary(self)


    class SimpleExprOdbcContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0)
        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)

        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprOdbc" ):
                listener.enterSimpleExprOdbc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprOdbc" ):
                listener.exitSimpleExprOdbc(self)


    class SimpleExprRuntimeFunctionContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def runtimeFunctionCall(self):
            return self.getTypedRuleContext(MySQLParser.RuntimeFunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprRuntimeFunction" ):
                listener.enterSimpleExprRuntimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprRuntimeFunction" ):
                listener.exitSimpleExprRuntimeFunction(self)


    class SimpleExprFunctionContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(MySQLParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprFunction" ):
                listener.enterSimpleExprFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprFunction" ):
                listener.exitSimpleExprFunction(self)


    class SimpleExprCollateContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)

        def COLLATE_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATE_SYMBOL, 0)
        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprCollate" ):
                listener.enterSimpleExprCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprCollate" ):
                listener.exitSimpleExprCollate(self)


    class SimpleExprMatchContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MATCH_SYMBOL(self):
            return self.getToken(MySQLParser.MATCH_SYMBOL, 0)
        def identListArg(self):
            return self.getTypedRuleContext(MySQLParser.IdentListArgContext,0)

        def AGAINST_SYMBOL(self):
            return self.getToken(MySQLParser.AGAINST_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def fulltextOptions(self):
            return self.getTypedRuleContext(MySQLParser.FulltextOptionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprMatch" ):
                listener.enterSimpleExprMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprMatch" ):
                listener.exitSimpleExprMatch(self)


    class SimpleExprWindowingFunctionContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def windowFunctionCall(self):
            return self.getTypedRuleContext(MySQLParser.WindowFunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprWindowingFunction" ):
                listener.enterSimpleExprWindowingFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprWindowingFunction" ):
                listener.exitSimpleExprWindowingFunction(self)


    class SimpleExprBinaryContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)
        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprBinary" ):
                listener.enterSimpleExprBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprBinary" ):
                listener.exitSimpleExprBinary(self)


    class SimpleExprColumnRefContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnRef(self):
            return self.getTypedRuleContext(MySQLParser.ColumnRefContext,0)

        def jsonOperator(self):
            return self.getTypedRuleContext(MySQLParser.JsonOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprColumnRef" ):
                listener.enterSimpleExprColumnRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprColumnRef" ):
                listener.exitSimpleExprColumnRef(self)


    class SimpleExprParamMarkerContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARAM_MARKER(self):
            return self.getToken(MySQLParser.PARAM_MARKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprParamMarker" ):
                listener.enterSimpleExprParamMarker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprParamMarker" ):
                listener.exitSimpleExprParamMarker(self)


    class SimpleExprSumContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sumExpr(self):
            return self.getTypedRuleContext(MySQLParser.SumExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprSum" ):
                listener.enterSimpleExprSum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprSum" ):
                listener.exitSimpleExprSum(self)


    class SimpleExprConvertUsingContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT_SYMBOL(self):
            return self.getToken(MySQLParser.CONVERT_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)

        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprConvertUsing" ):
                listener.enterSimpleExprConvertUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprConvertUsing" ):
                listener.exitSimpleExprConvertUsing(self)


    class SimpleExprSubQueryContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MySQLParser.EXISTS_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprSubQuery" ):
                listener.enterSimpleExprSubQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprSubQuery" ):
                listener.exitSimpleExprSubQuery(self)


    class SimpleExprGroupingOperationContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groupingOperation(self):
            return self.getTypedRuleContext(MySQLParser.GroupingOperationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprGroupingOperation" ):
                listener.enterSimpleExprGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprGroupingOperation" ):
                listener.exitSimpleExprGroupingOperation(self)


    class SimpleExprNotContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def not2Rule(self):
            return self.getTypedRuleContext(MySQLParser.Not2RuleContext,0)

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprNot" ):
                listener.enterSimpleExprNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprNot" ):
                listener.exitSimpleExprNot(self)


    class SimpleExprValuesContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES_SYMBOL(self):
            return self.getToken(MySQLParser.VALUES_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def simpleIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.SimpleIdentifierContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprValues" ):
                listener.enterSimpleExprValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprValues" ):
                listener.exitSimpleExprValues(self)


    class SimpleExprDefaultContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def simpleIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.SimpleIdentifierContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprDefault" ):
                listener.enterSimpleExprDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprDefault" ):
                listener.exitSimpleExprDefault(self)


    class SimpleExprListContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprList" ):
                listener.enterSimpleExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprList" ):
                listener.exitSimpleExprList(self)


    class SimpleExprIntervalContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)

        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)

        def PLUS_OPERATOR(self):
            return self.getToken(MySQLParser.PLUS_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprInterval" ):
                listener.enterSimpleExprInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprInterval" ):
                listener.exitSimpleExprInterval(self)


    class SimpleExprCaseContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CASE_SYMBOL(self):
            return self.getToken(MySQLParser.CASE_SYMBOL, 0)
        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)

        def whenExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.WhenExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.WhenExpressionContext,i)

        def thenExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ThenExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ThenExpressionContext,i)

        def elseExpression(self):
            return self.getTypedRuleContext(MySQLParser.ElseExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprCase" ):
                listener.enterSimpleExprCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprCase" ):
                listener.exitSimpleExprCase(self)


    class SimpleExprConcatContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SimpleExprContext,i)

        def CONCAT_PIPES_SYMBOL(self):
            return self.getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprConcat" ):
                listener.enterSimpleExprConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprConcat" ):
                listener.exitSimpleExprConcat(self)


    class SimpleExprLiteralContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(MySQLParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprLiteral" ):
                listener.enterSimpleExprLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprLiteral" ):
                listener.exitSimpleExprLiteral(self)



    def simpleExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySQLParser.SimpleExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 688
        self.enterRecursionRule(localctx, 688, self.RULE_simpleExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,719,self._ctx)
            if la_ == 1:
                localctx = MySQLParser.SimpleExprVariableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5610
                self.variable()
                self.state = 5614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,710,self._ctx)
                if la_ == 1:
                    self.state = 5611
                    self.equal()
                    self.state = 5612
                    self.expr(0)


                pass

            elif la_ == 2:
                localctx = MySQLParser.SimpleExprColumnRefContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5616
                self.columnRef()
                self.state = 5618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,711,self._ctx)
                if la_ == 1:
                    self.state = 5617
                    self.jsonOperator()


                pass

            elif la_ == 3:
                localctx = MySQLParser.SimpleExprRuntimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5620
                self.runtimeFunctionCall()
                pass

            elif la_ == 4:
                localctx = MySQLParser.SimpleExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5621
                self.functionCall()
                pass

            elif la_ == 5:
                localctx = MySQLParser.SimpleExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5622
                self.literal()
                pass

            elif la_ == 6:
                localctx = MySQLParser.SimpleExprParamMarkerContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5623
                self.match(MySQLParser.PARAM_MARKER)
                pass

            elif la_ == 7:
                localctx = MySQLParser.SimpleExprSumContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5624
                self.sumExpr()
                pass

            elif la_ == 8:
                localctx = MySQLParser.SimpleExprGroupingOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5625
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 5626
                self.groupingOperation()
                pass

            elif la_ == 9:
                localctx = MySQLParser.SimpleExprWindowingFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5627
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 5628
                self.windowFunctionCall()
                pass

            elif la_ == 10:
                localctx = MySQLParser.SimpleExprUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5629
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 758)) & ~0x3f) == 0 and ((1 << (_la - 758)) & ((1 << (MySQLParser.PLUS_OPERATOR - 758)) | (1 << (MySQLParser.MINUS_OPERATOR - 758)) | (1 << (MySQLParser.BITWISE_NOT_OPERATOR - 758)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5630
                self.simpleExpr(14)
                pass

            elif la_ == 11:
                localctx = MySQLParser.SimpleExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5631
                self.not2Rule()
                self.state = 5632
                self.simpleExpr(13)
                pass

            elif la_ == 12:
                localctx = MySQLParser.SimpleExprListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ROW_SYMBOL:
                    self.state = 5634
                    self.match(MySQLParser.ROW_SYMBOL)


                self.state = 5637
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5638
                self.exprList()
                self.state = 5639
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 13:
                localctx = MySQLParser.SimpleExprSubQueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EXISTS_SYMBOL:
                    self.state = 5641
                    self.match(MySQLParser.EXISTS_SYMBOL)


                self.state = 5644
                self.subquery()
                pass

            elif la_ == 14:
                localctx = MySQLParser.SimpleExprOdbcContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5645
                self.match(MySQLParser.OPEN_CURLY_SYMBOL)
                self.state = 5646
                self.identifier()
                self.state = 5647
                self.expr(0)
                self.state = 5648
                self.match(MySQLParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 15:
                localctx = MySQLParser.SimpleExprMatchContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5650
                self.match(MySQLParser.MATCH_SYMBOL)
                self.state = 5651
                self.identListArg()
                self.state = 5652
                self.match(MySQLParser.AGAINST_SYMBOL)
                self.state = 5653
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5654
                self.bitExpr(0)
                self.state = 5656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.IN_SYMBOL or _la==MySQLParser.WITH_SYMBOL:
                    self.state = 5655
                    self.fulltextOptions()


                self.state = 5658
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 16:
                localctx = MySQLParser.SimpleExprBinaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5660
                self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 5661
                self.simpleExpr(8)
                pass

            elif la_ == 17:
                localctx = MySQLParser.SimpleExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5662
                self.match(MySQLParser.CAST_SYMBOL)
                self.state = 5663
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5664
                self.expr(0)
                self.state = 5665
                self.match(MySQLParser.AS_SYMBOL)
                self.state = 5666
                self.castType()
                self.state = 5668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,715,self._ctx)
                if la_ == 1:
                    self.state = 5667
                    self.arrayCast()


                self.state = 5670
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 18:
                localctx = MySQLParser.SimpleExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5672
                self.match(MySQLParser.CASE_SYMBOL)
                self.state = 5674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,716,self._ctx)
                if la_ == 1:
                    self.state = 5673
                    self.expr(0)


                self.state = 5679 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5676
                    self.whenExpression()
                    self.state = 5677
                    self.thenExpression()
                    self.state = 5681 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySQLParser.WHEN_SYMBOL):
                        break

                self.state = 5684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ELSE_SYMBOL:
                    self.state = 5683
                    self.elseExpression()


                self.state = 5686
                self.match(MySQLParser.END_SYMBOL)
                pass

            elif la_ == 19:
                localctx = MySQLParser.SimpleExprConvertContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5688
                self.match(MySQLParser.CONVERT_SYMBOL)
                self.state = 5689
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5690
                self.expr(0)
                self.state = 5691
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5692
                self.castType()
                self.state = 5693
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 20:
                localctx = MySQLParser.SimpleExprConvertUsingContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5695
                self.match(MySQLParser.CONVERT_SYMBOL)
                self.state = 5696
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5697
                self.expr(0)
                self.state = 5698
                self.match(MySQLParser.USING_SYMBOL)
                self.state = 5699
                self.charsetName()
                self.state = 5700
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 21:
                localctx = MySQLParser.SimpleExprDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5702
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 5703
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5704
                self.simpleIdentifier()
                self.state = 5705
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 22:
                localctx = MySQLParser.SimpleExprValuesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5707
                self.match(MySQLParser.VALUES_SYMBOL)
                self.state = 5708
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5709
                self.simpleIdentifier()
                self.state = 5710
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 23:
                localctx = MySQLParser.SimpleExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5712
                self.match(MySQLParser.INTERVAL_SYMBOL)
                self.state = 5713
                self.expr(0)
                self.state = 5714
                self.interval()
                self.state = 5715
                self.match(MySQLParser.PLUS_OPERATOR)
                self.state = 5716
                self.expr(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,721,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5726
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,720,self._ctx)
                    if la_ == 1:
                        localctx = MySQLParser.SimpleExprConcatContext(self, MySQLParser.SimpleExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simpleExpr)
                        self.state = 5720
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 5721
                        self.match(MySQLParser.CONCAT_PIPES_SYMBOL)
                        self.state = 5722
                        self.simpleExpr(16)
                        pass

                    elif la_ == 2:
                        localctx = MySQLParser.SimpleExprCollateContext(self, MySQLParser.SimpleExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simpleExpr)
                        self.state = 5723
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 5724
                        self.match(MySQLParser.COLLATE_SYMBOL)
                        self.state = 5725
                        self.textOrIdentifier()
                        pass

             
                self.state = 5730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,721,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ArrayCastContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY_SYMBOL(self):
            return self.getToken(MySQLParser.ARRAY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_arrayCast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCast" ):
                listener.enterArrayCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCast" ):
                listener.exitArrayCast(self)




    def arrayCast(self):

        localctx = MySQLParser.ArrayCastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_arrayCast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5731
            if not serverVersion >= 80017:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 80017")
            self.state = 5732
            self.match(MySQLParser.ARRAY_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_SEPARATOR_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def JSON_UNQUOTED_SEPARATOR_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_jsonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOperator" ):
                listener.enterJsonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOperator" ):
                listener.exitJsonOperator(self)




    def jsonOperator(self):

        localctx = MySQLParser.JsonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_jsonOperator)
        try:
            self.state = 5740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,722,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5734
                if not serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50708")
                self.state = 5735
                self.match(MySQLParser.JSON_SEPARATOR_SYMBOL)
                self.state = 5736
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5737
                if not serverVersion >= 50713:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50713")
                self.state = 5738
                self.match(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL)
                self.state = 5739
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SumExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def inSumExpr(self):
            return self.getTypedRuleContext(MySQLParser.InSumExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def AVG_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_SYMBOL, 0)

        def DISTINCT_SYMBOL(self):
            return self.getToken(MySQLParser.DISTINCT_SYMBOL, 0)

        def windowingClause(self):
            return self.getTypedRuleContext(MySQLParser.WindowingClauseContext,0)


        def BIT_AND_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_AND_SYMBOL, 0)

        def BIT_OR_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_OR_SYMBOL, 0)

        def BIT_XOR_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_XOR_SYMBOL, 0)

        def jsonFunction(self):
            return self.getTypedRuleContext(MySQLParser.JsonFunctionContext,0)


        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.COUNT_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def MIN_SYMBOL(self):
            return self.getToken(MySQLParser.MIN_SYMBOL, 0)

        def MAX_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_SYMBOL, 0)

        def STD_SYMBOL(self):
            return self.getToken(MySQLParser.STD_SYMBOL, 0)

        def VARIANCE_SYMBOL(self):
            return self.getToken(MySQLParser.VARIANCE_SYMBOL, 0)

        def STDDEV_SAMP_SYMBOL(self):
            return self.getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0)

        def VAR_SAMP_SYMBOL(self):
            return self.getToken(MySQLParser.VAR_SAMP_SYMBOL, 0)

        def SUM_SYMBOL(self):
            return self.getToken(MySQLParser.SUM_SYMBOL, 0)

        def GROUP_CONCAT_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0)

        def orderClause(self):
            return self.getTypedRuleContext(MySQLParser.OrderClauseContext,0)


        def SEPARATOR_SYMBOL(self):
            return self.getToken(MySQLParser.SEPARATOR_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_sumExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSumExpr" ):
                listener.enterSumExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSumExpr" ):
                listener.exitSumExpr(self)




    def sumExpr(self):

        localctx = MySQLParser.SumExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_sumExpr)
        self._la = 0 # Token type
        try:
            self.state = 5873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,745,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5742
                localctx.name = self.match(MySQLParser.AVG_SYMBOL)
                self.state = 5743
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,723,self._ctx)
                if la_ == 1:
                    self.state = 5744
                    self.match(MySQLParser.DISTINCT_SYMBOL)


                self.state = 5747
                self.inSumExpr()
                self.state = 5748
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5751
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,724,self._ctx)
                if la_ == 1:
                    self.state = 5749
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5750
                    self.windowingClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5753
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySQLParser.BIT_AND_SYMBOL) | (1 << MySQLParser.BIT_OR_SYMBOL) | (1 << MySQLParser.BIT_XOR_SYMBOL))) != 0)):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5754
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5755
                self.inSumExpr()
                self.state = 5756
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,725,self._ctx)
                if la_ == 1:
                    self.state = 5757
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5758
                    self.windowingClause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5761
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 5762
                self.jsonFunction()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5763
                localctx.name = self.match(MySQLParser.COUNT_SYMBOL)
                self.state = 5764
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ALL_SYMBOL:
                    self.state = 5765
                    self.match(MySQLParser.ALL_SYMBOL)


                self.state = 5768
                self.match(MySQLParser.MULT_OPERATOR)
                self.state = 5769
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,727,self._ctx)
                if la_ == 1:
                    self.state = 5770
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5771
                    self.windowingClause()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5774
                localctx.name = self.match(MySQLParser.COUNT_SYMBOL)
                self.state = 5775
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,729,self._ctx)
                if la_ == 1:
                    self.state = 5777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.ALL_SYMBOL:
                        self.state = 5776
                        self.match(MySQLParser.ALL_SYMBOL)


                    self.state = 5779
                    self.match(MySQLParser.MULT_OPERATOR)
                    pass

                elif la_ == 2:
                    self.state = 5780
                    self.inSumExpr()
                    pass

                elif la_ == 3:
                    self.state = 5781
                    self.match(MySQLParser.DISTINCT_SYMBOL)
                    self.state = 5782
                    self.exprList()
                    pass


                self.state = 5785
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,730,self._ctx)
                if la_ == 1:
                    self.state = 5786
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5787
                    self.windowingClause()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5790
                localctx.name = self.match(MySQLParser.MIN_SYMBOL)
                self.state = 5791
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5793
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,731,self._ctx)
                if la_ == 1:
                    self.state = 5792
                    self.match(MySQLParser.DISTINCT_SYMBOL)


                self.state = 5795
                self.inSumExpr()
                self.state = 5796
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,732,self._ctx)
                if la_ == 1:
                    self.state = 5797
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5798
                    self.windowingClause()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5801
                localctx.name = self.match(MySQLParser.MAX_SYMBOL)
                self.state = 5802
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,733,self._ctx)
                if la_ == 1:
                    self.state = 5803
                    self.match(MySQLParser.DISTINCT_SYMBOL)


                self.state = 5806
                self.inSumExpr()
                self.state = 5807
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,734,self._ctx)
                if la_ == 1:
                    self.state = 5808
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5809
                    self.windowingClause()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5812
                localctx.name = self.match(MySQLParser.STD_SYMBOL)
                self.state = 5813
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5814
                self.inSumExpr()
                self.state = 5815
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,735,self._ctx)
                if la_ == 1:
                    self.state = 5816
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5817
                    self.windowingClause()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5820
                localctx.name = self.match(MySQLParser.VARIANCE_SYMBOL)
                self.state = 5821
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5822
                self.inSumExpr()
                self.state = 5823
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,736,self._ctx)
                if la_ == 1:
                    self.state = 5824
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5825
                    self.windowingClause()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5828
                localctx.name = self.match(MySQLParser.STDDEV_SAMP_SYMBOL)
                self.state = 5829
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5830
                self.inSumExpr()
                self.state = 5831
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5834
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,737,self._ctx)
                if la_ == 1:
                    self.state = 5832
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5833
                    self.windowingClause()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5836
                localctx.name = self.match(MySQLParser.VAR_SAMP_SYMBOL)
                self.state = 5837
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5838
                self.inSumExpr()
                self.state = 5839
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5842
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,738,self._ctx)
                if la_ == 1:
                    self.state = 5840
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5841
                    self.windowingClause()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5844
                localctx.name = self.match(MySQLParser.SUM_SYMBOL)
                self.state = 5845
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,739,self._ctx)
                if la_ == 1:
                    self.state = 5846
                    self.match(MySQLParser.DISTINCT_SYMBOL)


                self.state = 5849
                self.inSumExpr()
                self.state = 5850
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,740,self._ctx)
                if la_ == 1:
                    self.state = 5851
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5852
                    self.windowingClause()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5855
                localctx.name = self.match(MySQLParser.GROUP_CONCAT_SYMBOL)
                self.state = 5856
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,741,self._ctx)
                if la_ == 1:
                    self.state = 5857
                    self.match(MySQLParser.DISTINCT_SYMBOL)


                self.state = 5860
                self.exprList()
                self.state = 5862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ORDER_SYMBOL:
                    self.state = 5861
                    self.orderClause()


                self.state = 5866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.SEPARATOR_SYMBOL:
                    self.state = 5864
                    self.match(MySQLParser.SEPARATOR_SYMBOL)
                    self.state = 5865
                    self.textString()


                self.state = 5868
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5871
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,744,self._ctx)
                if la_ == 1:
                    self.state = 5869
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5870
                    self.windowingClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING_SYMBOL(self):
            return self.getToken(MySQLParser.GROUPING_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_groupingOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingOperation" ):
                listener.enterGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingOperation" ):
                listener.exitGroupingOperation(self)




    def groupingOperation(self):

        localctx = MySQLParser.GroupingOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_groupingOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5875
            self.match(MySQLParser.GROUPING_SYMBOL)
            self.state = 5876
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 5877
            self.exprList()
            self.state = 5878
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parentheses(self):
            return self.getTypedRuleContext(MySQLParser.ParenthesesContext,0)


        def windowingClause(self):
            return self.getTypedRuleContext(MySQLParser.WindowingClauseContext,0)


        def ROW_NUMBER_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0)

        def RANK_SYMBOL(self):
            return self.getToken(MySQLParser.RANK_SYMBOL, 0)

        def DENSE_RANK_SYMBOL(self):
            return self.getToken(MySQLParser.DENSE_RANK_SYMBOL, 0)

        def CUME_DIST_SYMBOL(self):
            return self.getToken(MySQLParser.CUME_DIST_SYMBOL, 0)

        def PERCENT_RANK_SYMBOL(self):
            return self.getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0)

        def NTILE_SYMBOL(self):
            return self.getToken(MySQLParser.NTILE_SYMBOL, 0)

        def simpleExprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprWithParenthesesContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def LEAD_SYMBOL(self):
            return self.getToken(MySQLParser.LEAD_SYMBOL, 0)

        def LAG_SYMBOL(self):
            return self.getToken(MySQLParser.LAG_SYMBOL, 0)

        def leadLagInfo(self):
            return self.getTypedRuleContext(MySQLParser.LeadLagInfoContext,0)


        def nullTreatment(self):
            return self.getTypedRuleContext(MySQLParser.NullTreatmentContext,0)


        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def FIRST_VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0)

        def LAST_VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_VALUE_SYMBOL, 0)

        def NTH_VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.NTH_VALUE_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFunctionCall" ):
                listener.enterWindowFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFunctionCall" ):
                listener.exitWindowFunctionCall(self)




    def windowFunctionCall(self):

        localctx = MySQLParser.WindowFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_windowFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 5922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.CUME_DIST_SYMBOL, MySQLParser.DENSE_RANK_SYMBOL, MySQLParser.PERCENT_RANK_SYMBOL, MySQLParser.RANK_SYMBOL, MySQLParser.ROW_NUMBER_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5880
                _la = self._input.LA(1)
                if not(((((_la - 678)) & ~0x3f) == 0 and ((1 << (_la - 678)) & ((1 << (MySQLParser.CUME_DIST_SYMBOL - 678)) | (1 << (MySQLParser.DENSE_RANK_SYMBOL - 678)) | (1 << (MySQLParser.PERCENT_RANK_SYMBOL - 678)) | (1 << (MySQLParser.RANK_SYMBOL - 678)) | (1 << (MySQLParser.ROW_NUMBER_SYMBOL - 678)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5881
                self.parentheses()
                self.state = 5882
                self.windowingClause()
                pass
            elif token in [MySQLParser.NTILE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5884
                self.match(MySQLParser.NTILE_SYMBOL)
                self.state = 5885
                self.simpleExprWithParentheses()
                self.state = 5886
                self.windowingClause()
                pass
            elif token in [MySQLParser.LAG_SYMBOL, MySQLParser.LEAD_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5888
                _la = self._input.LA(1)
                if not(_la==MySQLParser.LAG_SYMBOL or _la==MySQLParser.LEAD_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5889
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5890
                self.expr(0)
                self.state = 5892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 5891
                    self.leadLagInfo()


                self.state = 5894
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.IGNORE_SYMBOL or _la==MySQLParser.RESPECT_SYMBOL:
                    self.state = 5895
                    self.nullTreatment()


                self.state = 5898
                self.windowingClause()
                pass
            elif token in [MySQLParser.FIRST_VALUE_SYMBOL, MySQLParser.LAST_VALUE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5900
                _la = self._input.LA(1)
                if not(_la==MySQLParser.FIRST_VALUE_SYMBOL or _la==MySQLParser.LAST_VALUE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5901
                self.exprWithParentheses()
                self.state = 5903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.IGNORE_SYMBOL or _la==MySQLParser.RESPECT_SYMBOL:
                    self.state = 5902
                    self.nullTreatment()


                self.state = 5905
                self.windowingClause()
                pass
            elif token in [MySQLParser.NTH_VALUE_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5907
                self.match(MySQLParser.NTH_VALUE_SYMBOL)
                self.state = 5908
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5909
                self.expr(0)
                self.state = 5910
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5911
                self.simpleExpr(0)
                self.state = 5912
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FROM_SYMBOL:
                    self.state = 5913
                    self.match(MySQLParser.FROM_SYMBOL)
                    self.state = 5914
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.FIRST_SYMBOL or _la==MySQLParser.LAST_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.IGNORE_SYMBOL or _la==MySQLParser.RESPECT_SYMBOL:
                    self.state = 5917
                    self.nullTreatment()


                self.state = 5920
                self.windowingClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER_SYMBOL(self):
            return self.getToken(MySQLParser.OVER_SYMBOL, 0)

        def windowName(self):
            return self.getTypedRuleContext(MySQLParser.WindowNameContext,0)


        def windowSpec(self):
            return self.getTypedRuleContext(MySQLParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowingClause" ):
                listener.enterWindowingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowingClause" ):
                listener.exitWindowingClause(self)




    def windowingClause(self):

        localctx = MySQLParser.WindowingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_windowingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5924
            self.match(MySQLParser.OVER_SYMBOL)
            self.state = 5927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,752,self._ctx)
            if la_ == 1:
                self.state = 5925
                self.windowName()
                pass

            elif la_ == 2:
                self.state = 5926
                self.windowSpec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeadLagInfoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def PARAM_MARKER(self):
            return self.getToken(MySQLParser.PARAM_MARKER, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_leadLagInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeadLagInfo" ):
                listener.enterLeadLagInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeadLagInfo" ):
                listener.exitLeadLagInfo(self)




    def leadLagInfo(self):

        localctx = MySQLParser.LeadLagInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_leadLagInfo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5929
            self.match(MySQLParser.COMMA_SYMBOL)
            self.state = 5932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.INT_NUMBER, MySQLParser.LONG_NUMBER, MySQLParser.ULONGLONG_NUMBER, MySQLParser.DECIMAL_NUMBER, MySQLParser.FLOAT_NUMBER]:
                self.state = 5930
                self.ulonglong_number()
                pass
            elif token in [MySQLParser.PARAM_MARKER]:
                self.state = 5931
                self.match(MySQLParser.PARAM_MARKER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.COMMA_SYMBOL:
                self.state = 5934
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5935
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullTreatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS_SYMBOL(self):
            return self.getToken(MySQLParser.NULLS_SYMBOL, 0)

        def RESPECT_SYMBOL(self):
            return self.getToken(MySQLParser.RESPECT_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_nullTreatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullTreatment" ):
                listener.enterNullTreatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullTreatment" ):
                listener.exitNullTreatment(self)




    def nullTreatment(self):

        localctx = MySQLParser.NullTreatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_nullTreatment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5938
            _la = self._input.LA(1)
            if not(_la==MySQLParser.IGNORE_SYMBOL or _la==MySQLParser.RESPECT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5939
            self.match(MySQLParser.NULLS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_ARRAYAGG_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def inSumExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.InSumExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.InSumExprContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def windowingClause(self):
            return self.getTypedRuleContext(MySQLParser.WindowingClauseContext,0)


        def JSON_OBJECTAGG_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_jsonFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonFunction" ):
                listener.enterJsonFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonFunction" ):
                listener.exitJsonFunction(self)




    def jsonFunction(self):

        localctx = MySQLParser.JsonFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_jsonFunction)
        try:
            self.state = 5957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.JSON_ARRAYAGG_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5941
                self.match(MySQLParser.JSON_ARRAYAGG_SYMBOL)
                self.state = 5942
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5943
                self.inSumExpr()
                self.state = 5944
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,755,self._ctx)
                if la_ == 1:
                    self.state = 5945
                    self.windowingClause()


                pass
            elif token in [MySQLParser.JSON_OBJECTAGG_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5948
                self.match(MySQLParser.JSON_OBJECTAGG_SYMBOL)
                self.state = 5949
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5950
                self.inSumExpr()
                self.state = 5951
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5952
                self.inSumExpr()
                self.state = 5953
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5955
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,756,self._ctx)
                if la_ == 1:
                    self.state = 5954
                    self.windowingClause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InSumExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_inSumExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSumExpr" ):
                listener.enterInSumExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSumExpr" ):
                listener.exitInSumExpr(self)




    def inSumExpr(self):

        localctx = MySQLParser.InSumExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_inSumExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,758,self._ctx)
            if la_ == 1:
                self.state = 5959
                self.match(MySQLParser.ALL_SYMBOL)


            self.state = 5962
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentListArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identList(self):
            return self.getTypedRuleContext(MySQLParser.IdentListContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identListArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentListArg" ):
                listener.enterIdentListArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentListArg" ):
                listener.exitIdentListArg(self)




    def identListArg(self):

        localctx = MySQLParser.IdentListArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_identListArg)
        try:
            self.state = 5969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,759,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5964
                self.identList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5965
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5966
                self.identList()
                self.state = 5967
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SimpleIdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_identList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentList" ):
                listener.enterIdentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentList" ):
                listener.exitIdentList(self)




    def identList(self):

        localctx = MySQLParser.IdentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_identList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5971
            self.simpleIdentifier()
            self.state = 5976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 5972
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5973
                self.simpleIdentifier()
                self.state = 5978
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FulltextOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(MySQLParser.BOOLEAN_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(MySQLParser.MODE_SYMBOL, 0)

        def NATURAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATURAL_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(MySQLParser.LANGUAGE_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def EXPANSION_SYMBOL(self):
            return self.getToken(MySQLParser.EXPANSION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_fulltextOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFulltextOptions" ):
                listener.enterFulltextOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFulltextOptions" ):
                listener.exitFulltextOptions(self)




    def fulltextOptions(self):

        localctx = MySQLParser.FulltextOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_fulltextOptions)
        self._la = 0 # Token type
        try:
            self.state = 5994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,762,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5979
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 5980
                self.match(MySQLParser.BOOLEAN_SYMBOL)
                self.state = 5981
                self.match(MySQLParser.MODE_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5982
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 5983
                self.match(MySQLParser.NATURAL_SYMBOL)
                self.state = 5984
                self.match(MySQLParser.LANGUAGE_SYMBOL)
                self.state = 5985
                self.match(MySQLParser.MODE_SYMBOL)
                self.state = 5989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.WITH_SYMBOL:
                    self.state = 5986
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 5987
                    self.match(MySQLParser.QUERY_SYMBOL)
                    self.state = 5988
                    self.match(MySQLParser.EXPANSION_SYMBOL)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5991
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 5992
                self.match(MySQLParser.QUERY_SYMBOL)
                self.state = 5993
                self.match(MySQLParser.EXPANSION_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuntimeFunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def CHAR_SYMBOL(self):
            return self.getToken(MySQLParser.CHAR_SYMBOL, 0)

        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def CURRENT_USER_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0)

        def parentheses(self):
            return self.getTypedRuleContext(MySQLParser.ParenthesesContext,0)


        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def INSERT_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_SYMBOL, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)

        def LEFT_SYMBOL(self):
            return self.getToken(MySQLParser.LEFT_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(MySQLParser.MONTH_SYMBOL, 0)

        def RIGHT_SYMBOL(self):
            return self.getToken(MySQLParser.RIGHT_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.SECOND_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def trimFunction(self):
            return self.getTypedRuleContext(MySQLParser.TrimFunctionContext,0)


        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def VALUES_SYMBOL(self):
            return self.getToken(MySQLParser.VALUES_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_SYMBOL, 0)

        def ADDDATE_SYMBOL(self):
            return self.getToken(MySQLParser.ADDDATE_SYMBOL, 0)

        def SUBDATE_SYMBOL(self):
            return self.getToken(MySQLParser.SUBDATE_SYMBOL, 0)

        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)


        def CURDATE_SYMBOL(self):
            return self.getToken(MySQLParser.CURDATE_SYMBOL, 0)

        def CURTIME_SYMBOL(self):
            return self.getToken(MySQLParser.CURTIME_SYMBOL, 0)

        def timeFunctionParameters(self):
            return self.getTypedRuleContext(MySQLParser.TimeFunctionParametersContext,0)


        def DATE_ADD_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_ADD_SYMBOL, 0)

        def DATE_SUB_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SUB_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def EXTRACT_SYMBOL(self):
            return self.getToken(MySQLParser.EXTRACT_SYMBOL, 0)

        def dateTimeTtype(self):
            return self.getTypedRuleContext(MySQLParser.DateTimeTtypeContext,0)


        def GET_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0)

        def NOW_SYMBOL(self):
            return self.getToken(MySQLParser.NOW_SYMBOL, 0)

        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def POSITION_SYMBOL(self):
            return self.getToken(MySQLParser.POSITION_SYMBOL, 0)

        def substringFunction(self):
            return self.getTypedRuleContext(MySQLParser.SubstringFunctionContext,0)


        def SYSDATE_SYMBOL(self):
            return self.getToken(MySQLParser.SYSDATE_SYMBOL, 0)

        def intervalTimeStamp(self):
            return self.getTypedRuleContext(MySQLParser.IntervalTimeStampContext,0)


        def TIMESTAMP_ADD_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0)

        def TIMESTAMP_DIFF_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0)

        def UTC_DATE_SYMBOL(self):
            return self.getToken(MySQLParser.UTC_DATE_SYMBOL, 0)

        def UTC_TIME_SYMBOL(self):
            return self.getToken(MySQLParser.UTC_TIME_SYMBOL, 0)

        def UTC_TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0)

        def ASCII_SYMBOL(self):
            return self.getToken(MySQLParser.ASCII_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(MySQLParser.CHARSET_SYMBOL, 0)

        def exprListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprListWithParenthesesContext,0)


        def COALESCE_SYMBOL(self):
            return self.getToken(MySQLParser.COALESCE_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATION_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MySQLParser.IF_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.FORMAT_SYMBOL, 0)

        def MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MICROSECOND_SYMBOL, 0)

        def MOD_SYMBOL(self):
            return self.getToken(MySQLParser.MOD_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def OLD_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(MySQLParser.QUARTER_SYMBOL, 0)

        def REPEAT_SYMBOL(self):
            return self.getToken(MySQLParser.REPEAT_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def REVERSE_SYMBOL(self):
            return self.getToken(MySQLParser.REVERSE_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUNCATE_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(MySQLParser.WEEK_SYMBOL, 0)

        def WEIGHT_STRING_SYMBOL(self):
            return self.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0)

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def wsNumCodepoints(self):
            return self.getTypedRuleContext(MySQLParser.WsNumCodepointsContext,0)


        def ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Ulong_numberContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,i)


        def weightStringLevels(self):
            return self.getTypedRuleContext(MySQLParser.WeightStringLevelsContext,0)


        def geometryFunction(self):
            return self.getTypedRuleContext(MySQLParser.GeometryFunctionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_runtimeFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuntimeFunctionCall" ):
                listener.enterRuntimeFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuntimeFunctionCall" ):
                listener.exitRuntimeFunctionCall(self)




    def runtimeFunctionCall(self):

        localctx = MySQLParser.RuntimeFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_runtimeFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 6269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,780,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5996
                localctx.name = self.match(MySQLParser.CHAR_SYMBOL)
                self.state = 5997
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5998
                self.exprList()
                self.state = 6001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.USING_SYMBOL:
                    self.state = 5999
                    self.match(MySQLParser.USING_SYMBOL)
                    self.state = 6000
                    self.charsetName()


                self.state = 6003
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6005
                localctx.name = self.match(MySQLParser.CURRENT_USER_SYMBOL)
                self.state = 6007
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,764,self._ctx)
                if la_ == 1:
                    self.state = 6006
                    self.parentheses()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6009
                localctx.name = self.match(MySQLParser.DATE_SYMBOL)
                self.state = 6010
                self.exprWithParentheses()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6011
                localctx.name = self.match(MySQLParser.DAY_SYMBOL)
                self.state = 6012
                self.exprWithParentheses()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6013
                localctx.name = self.match(MySQLParser.HOUR_SYMBOL)
                self.state = 6014
                self.exprWithParentheses()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6015
                localctx.name = self.match(MySQLParser.INSERT_SYMBOL)
                self.state = 6016
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6017
                self.expr(0)
                self.state = 6018
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6019
                self.expr(0)
                self.state = 6020
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6021
                self.expr(0)
                self.state = 6022
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6023
                self.expr(0)
                self.state = 6024
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6026
                localctx.name = self.match(MySQLParser.INTERVAL_SYMBOL)
                self.state = 6027
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6028
                self.expr(0)
                self.state = 6031 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6029
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6030
                    self.expr(0)
                    self.state = 6033 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySQLParser.COMMA_SYMBOL):
                        break

                self.state = 6035
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6037
                localctx.name = self.match(MySQLParser.LEFT_SYMBOL)
                self.state = 6038
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6039
                self.expr(0)
                self.state = 6040
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6041
                self.expr(0)
                self.state = 6042
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6044
                localctx.name = self.match(MySQLParser.MINUTE_SYMBOL)
                self.state = 6045
                self.exprWithParentheses()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6046
                localctx.name = self.match(MySQLParser.MONTH_SYMBOL)
                self.state = 6047
                self.exprWithParentheses()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6048
                localctx.name = self.match(MySQLParser.RIGHT_SYMBOL)
                self.state = 6049
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6050
                self.expr(0)
                self.state = 6051
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6052
                self.expr(0)
                self.state = 6053
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6055
                localctx.name = self.match(MySQLParser.SECOND_SYMBOL)
                self.state = 6056
                self.exprWithParentheses()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6057
                localctx.name = self.match(MySQLParser.TIME_SYMBOL)
                self.state = 6058
                self.exprWithParentheses()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6059
                localctx.name = self.match(MySQLParser.TIMESTAMP_SYMBOL)
                self.state = 6060
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6061
                self.expr(0)
                self.state = 6064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 6062
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6063
                    self.expr(0)


                self.state = 6066
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6068
                self.trimFunction()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6069
                localctx.name = self.match(MySQLParser.USER_SYMBOL)
                self.state = 6070
                self.parentheses()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6071
                localctx.name = self.match(MySQLParser.VALUES_SYMBOL)
                self.state = 6072
                self.exprWithParentheses()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6073
                localctx.name = self.match(MySQLParser.YEAR_SYMBOL)
                self.state = 6074
                self.exprWithParentheses()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6075
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.ADDDATE_SYMBOL or _la==MySQLParser.SUBDATE_SYMBOL):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6076
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6077
                self.expr(0)
                self.state = 6078
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,767,self._ctx)
                if la_ == 1:
                    self.state = 6079
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 6080
                    self.match(MySQLParser.INTERVAL_SYMBOL)
                    self.state = 6081
                    self.expr(0)
                    self.state = 6082
                    self.interval()
                    pass


                self.state = 6086
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6088
                localctx.name = self.match(MySQLParser.CURDATE_SYMBOL)
                self.state = 6090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,768,self._ctx)
                if la_ == 1:
                    self.state = 6089
                    self.parentheses()


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6092
                localctx.name = self.match(MySQLParser.CURTIME_SYMBOL)
                self.state = 6094
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,769,self._ctx)
                if la_ == 1:
                    self.state = 6093
                    self.timeFunctionParameters()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6096
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.DATE_ADD_SYMBOL or _la==MySQLParser.DATE_SUB_SYMBOL):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6097
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6098
                self.expr(0)
                self.state = 6099
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6100
                self.match(MySQLParser.INTERVAL_SYMBOL)
                self.state = 6101
                self.expr(0)
                self.state = 6102
                self.interval()
                self.state = 6103
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 6105
                localctx.name = self.match(MySQLParser.EXTRACT_SYMBOL)
                self.state = 6106
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6107
                self.interval()
                self.state = 6108
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 6109
                self.expr(0)
                self.state = 6110
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 6112
                localctx.name = self.match(MySQLParser.GET_FORMAT_SYMBOL)
                self.state = 6113
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6114
                self.dateTimeTtype()
                self.state = 6115
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6116
                self.expr(0)
                self.state = 6117
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 6119
                localctx.name = self.match(MySQLParser.NOW_SYMBOL)
                self.state = 6121
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,770,self._ctx)
                if la_ == 1:
                    self.state = 6120
                    self.timeFunctionParameters()


                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 6123
                localctx.name = self.match(MySQLParser.POSITION_SYMBOL)
                self.state = 6124
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6125
                self.bitExpr(0)
                self.state = 6126
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 6127
                self.expr(0)
                self.state = 6128
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 6130
                self.substringFunction()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 6131
                localctx.name = self.match(MySQLParser.SYSDATE_SYMBOL)
                self.state = 6133
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,771,self._ctx)
                if la_ == 1:
                    self.state = 6132
                    self.timeFunctionParameters()


                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 6135
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.TIMESTAMP_ADD_SYMBOL or _la==MySQLParser.TIMESTAMP_DIFF_SYMBOL):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6136
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6137
                self.intervalTimeStamp()
                self.state = 6138
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6139
                self.expr(0)
                self.state = 6140
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6141
                self.expr(0)
                self.state = 6142
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 6144
                localctx.name = self.match(MySQLParser.UTC_DATE_SYMBOL)
                self.state = 6146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,772,self._ctx)
                if la_ == 1:
                    self.state = 6145
                    self.parentheses()


                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 6148
                localctx.name = self.match(MySQLParser.UTC_TIME_SYMBOL)
                self.state = 6150
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,773,self._ctx)
                if la_ == 1:
                    self.state = 6149
                    self.timeFunctionParameters()


                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 6152
                localctx.name = self.match(MySQLParser.UTC_TIMESTAMP_SYMBOL)
                self.state = 6154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,774,self._ctx)
                if la_ == 1:
                    self.state = 6153
                    self.timeFunctionParameters()


                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 6156
                localctx.name = self.match(MySQLParser.ASCII_SYMBOL)
                self.state = 6157
                self.exprWithParentheses()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 6158
                localctx.name = self.match(MySQLParser.CHARSET_SYMBOL)
                self.state = 6159
                self.exprWithParentheses()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 6160
                localctx.name = self.match(MySQLParser.COALESCE_SYMBOL)
                self.state = 6161
                self.exprListWithParentheses()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 6162
                localctx.name = self.match(MySQLParser.COLLATION_SYMBOL)
                self.state = 6163
                self.exprWithParentheses()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 6164
                localctx.name = self.match(MySQLParser.DATABASE_SYMBOL)
                self.state = 6165
                self.parentheses()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 6166
                localctx.name = self.match(MySQLParser.IF_SYMBOL)
                self.state = 6167
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6168
                self.expr(0)
                self.state = 6169
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6170
                self.expr(0)
                self.state = 6171
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6172
                self.expr(0)
                self.state = 6173
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 6175
                localctx.name = self.match(MySQLParser.FORMAT_SYMBOL)
                self.state = 6176
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6177
                self.expr(0)
                self.state = 6178
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6179
                self.expr(0)
                self.state = 6182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 6180
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6181
                    self.expr(0)


                self.state = 6184
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 6186
                localctx.name = self.match(MySQLParser.MICROSECOND_SYMBOL)
                self.state = 6187
                self.exprWithParentheses()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 6188
                localctx.name = self.match(MySQLParser.MOD_SYMBOL)
                self.state = 6189
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6190
                self.expr(0)
                self.state = 6191
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6192
                self.expr(0)
                self.state = 6193
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 6195
                if not serverVersion < 50607:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50607")
                self.state = 6196
                localctx.name = self.match(MySQLParser.OLD_PASSWORD_SYMBOL)
                self.state = 6197
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6198
                self.textLiteral()
                self.state = 6199
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 6201
                if not serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80011")
                self.state = 6202
                localctx.name = self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 6203
                self.exprWithParentheses()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 6204
                localctx.name = self.match(MySQLParser.QUARTER_SYMBOL)
                self.state = 6205
                self.exprWithParentheses()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 6206
                localctx.name = self.match(MySQLParser.REPEAT_SYMBOL)
                self.state = 6207
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6208
                self.expr(0)
                self.state = 6209
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6210
                self.expr(0)
                self.state = 6211
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 6213
                localctx.name = self.match(MySQLParser.REPLACE_SYMBOL)
                self.state = 6214
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6215
                self.expr(0)
                self.state = 6216
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6217
                self.expr(0)
                self.state = 6218
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6219
                self.expr(0)
                self.state = 6220
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 6222
                localctx.name = self.match(MySQLParser.REVERSE_SYMBOL)
                self.state = 6223
                self.exprWithParentheses()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 6224
                localctx.name = self.match(MySQLParser.ROW_COUNT_SYMBOL)
                self.state = 6225
                self.parentheses()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 6226
                localctx.name = self.match(MySQLParser.TRUNCATE_SYMBOL)
                self.state = 6227
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6228
                self.expr(0)
                self.state = 6229
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6230
                self.expr(0)
                self.state = 6231
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 6233
                localctx.name = self.match(MySQLParser.WEEK_SYMBOL)
                self.state = 6234
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6235
                self.expr(0)
                self.state = 6238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 6236
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6237
                    self.expr(0)


                self.state = 6240
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 6242
                localctx.name = self.match(MySQLParser.WEIGHT_STRING_SYMBOL)
                self.state = 6243
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6244
                self.expr(0)
                self.state = 6264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,779,self._ctx)
                if la_ == 1:
                    self.state = 6248
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,777,self._ctx)
                    if la_ == 1:
                        self.state = 6245
                        self.match(MySQLParser.AS_SYMBOL)
                        self.state = 6246
                        self.match(MySQLParser.CHAR_SYMBOL)
                        self.state = 6247
                        self.wsNumCodepoints()


                    self.state = 6252
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,778,self._ctx)
                    if la_ == 1:
                        self.state = 6250
                        if not serverVersion < 80000:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion < 80000")
                        self.state = 6251
                        self.weightStringLevels()


                    pass

                elif la_ == 2:
                    self.state = 6254
                    self.match(MySQLParser.AS_SYMBOL)
                    self.state = 6255
                    self.match(MySQLParser.BINARY_SYMBOL)
                    self.state = 6256
                    self.wsNumCodepoints()
                    pass

                elif la_ == 3:
                    self.state = 6257
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6258
                    self.ulong_number()
                    self.state = 6259
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6260
                    self.ulong_number()
                    self.state = 6261
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6262
                    self.ulong_number()
                    pass


                self.state = 6266
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 6268
                self.geometryFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeometryFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTAINS_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def exprListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprListWithParenthesesContext,0)


        def LINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.LINESTRING_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(MySQLParser.POINT_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.POLYGON_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_geometryFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeometryFunction" ):
                listener.enterGeometryFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeometryFunction" ):
                listener.exitGeometryFunction(self)




    def geometryFunction(self):

        localctx = MySQLParser.GeometryFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_geometryFunction)
        try:
            self.state = 6302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,782,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6271
                if not serverVersion < 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50706")
                self.state = 6272
                localctx.name = self.match(MySQLParser.CONTAINS_SYMBOL)
                self.state = 6273
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6274
                self.expr(0)
                self.state = 6275
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6276
                self.expr(0)
                self.state = 6277
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6279
                localctx.name = self.match(MySQLParser.GEOMETRYCOLLECTION_SYMBOL)
                self.state = 6280
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,781,self._ctx)
                if la_ == 1:
                    self.state = 6281
                    self.exprList()


                self.state = 6284
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6285
                localctx.name = self.match(MySQLParser.LINESTRING_SYMBOL)
                self.state = 6286
                self.exprListWithParentheses()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6287
                localctx.name = self.match(MySQLParser.MULTILINESTRING_SYMBOL)
                self.state = 6288
                self.exprListWithParentheses()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6289
                localctx.name = self.match(MySQLParser.MULTIPOINT_SYMBOL)
                self.state = 6290
                self.exprListWithParentheses()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6291
                localctx.name = self.match(MySQLParser.MULTIPOLYGON_SYMBOL)
                self.state = 6292
                self.exprListWithParentheses()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6293
                localctx.name = self.match(MySQLParser.POINT_SYMBOL)
                self.state = 6294
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6295
                self.expr(0)
                self.state = 6296
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6297
                self.expr(0)
                self.state = 6298
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6300
                localctx.name = self.match(MySQLParser.POLYGON_SYMBOL)
                self.state = 6301
                self.exprListWithParentheses()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeFunctionParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def fractionalPrecision(self):
            return self.getTypedRuleContext(MySQLParser.FractionalPrecisionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_timeFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeFunctionParameters" ):
                listener.enterTimeFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeFunctionParameters" ):
                listener.exitTimeFunctionParameters(self)




    def timeFunctionParameters(self):

        localctx = MySQLParser.TimeFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_timeFunctionParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6304
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,783,self._ctx)
            if la_ == 1:
                self.state = 6305
                self.fractionalPrecision()


            self.state = 6308
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FractionalPrecisionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_fractionalPrecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFractionalPrecision" ):
                listener.enterFractionalPrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFractionalPrecision" ):
                listener.exitFractionalPrecision(self)




    def fractionalPrecision(self):

        localctx = MySQLParser.FractionalPrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_fractionalPrecision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6310
            if not serverVersion >= 50604:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50604")
            self.state = 6311
            self.match(MySQLParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WeightStringLevelsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.LEVEL_SYMBOL, 0)

        def real_ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Real_ulong_numberContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,i)


        def MINUS_OPERATOR(self):
            return self.getToken(MySQLParser.MINUS_OPERATOR, 0)

        def weightStringLevelListItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.WeightStringLevelListItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.WeightStringLevelListItemContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_weightStringLevels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightStringLevels" ):
                listener.enterWeightStringLevels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightStringLevels" ):
                listener.exitWeightStringLevels(self)




    def weightStringLevels(self):

        localctx = MySQLParser.WeightStringLevelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_weightStringLevels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6313
            self.match(MySQLParser.LEVEL_SYMBOL)
            self.state = 6326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,785,self._ctx)
            if la_ == 1:
                self.state = 6314
                self.real_ulong_number()
                self.state = 6315
                self.match(MySQLParser.MINUS_OPERATOR)
                self.state = 6316
                self.real_ulong_number()
                pass

            elif la_ == 2:
                self.state = 6318
                self.weightStringLevelListItem()
                self.state = 6323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 6319
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6320
                    self.weightStringLevelListItem()
                    self.state = 6325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WeightStringLevelListItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def REVERSE_SYMBOL(self):
            return self.getToken(MySQLParser.REVERSE_SYMBOL, 0)

        def ASC_SYMBOL(self):
            return self.getToken(MySQLParser.ASC_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(MySQLParser.DESC_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_weightStringLevelListItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightStringLevelListItem" ):
                listener.enterWeightStringLevelListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightStringLevelListItem" ):
                listener.exitWeightStringLevelListItem(self)




    def weightStringLevelListItem(self):

        localctx = MySQLParser.WeightStringLevelListItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_weightStringLevelListItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6328
            self.real_ulong_number()
            self.state = 6334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.ASC_SYMBOL, MySQLParser.DESC_SYMBOL]:
                self.state = 6329
                _la = self._input.LA(1)
                if not(_la==MySQLParser.ASC_SYMBOL or _la==MySQLParser.DESC_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.REVERSE_SYMBOL:
                    self.state = 6330
                    self.match(MySQLParser.REVERSE_SYMBOL)


                pass
            elif token in [MySQLParser.REVERSE_SYMBOL]:
                self.state = 6333
                self.match(MySQLParser.REVERSE_SYMBOL)
                pass
            elif token in [MySQLParser.COMMA_SYMBOL, MySQLParser.CLOSE_PAR_SYMBOL]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateTimeTtypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(MySQLParser.DATETIME_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dateTimeTtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeTtype" ):
                listener.enterDateTimeTtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeTtype" ):
                listener.exitDateTimeTtype(self)




    def dateTimeTtype(self):

        localctx = MySQLParser.DateTimeTtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_dateTimeTtype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6336
            _la = self._input.LA(1)
            if not(_la==MySQLParser.DATETIME_SYMBOL or _la==MySQLParser.DATE_SYMBOL or _la==MySQLParser.TIMESTAMP_SYMBOL or _la==MySQLParser.TIME_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrimFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIM_SYMBOL(self):
            return self.getToken(MySQLParser.TRIM_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def LEADING_SYMBOL(self):
            return self.getToken(MySQLParser.LEADING_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def TRAILING_SYMBOL(self):
            return self.getToken(MySQLParser.TRAILING_SYMBOL, 0)

        def BOTH_SYMBOL(self):
            return self.getToken(MySQLParser.BOTH_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_trimFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunction" ):
                listener.enterTrimFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunction" ):
                listener.exitTrimFunction(self)




    def trimFunction(self):

        localctx = MySQLParser.TrimFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_trimFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6338
            self.match(MySQLParser.TRIM_SYMBOL)
            self.state = 6339
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,792,self._ctx)
            if la_ == 1:
                self.state = 6340
                self.expr(0)
                self.state = 6343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FROM_SYMBOL:
                    self.state = 6341
                    self.match(MySQLParser.FROM_SYMBOL)
                    self.state = 6342
                    self.expr(0)


                pass

            elif la_ == 2:
                self.state = 6345
                self.match(MySQLParser.LEADING_SYMBOL)
                self.state = 6347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,789,self._ctx)
                if la_ == 1:
                    self.state = 6346
                    self.expr(0)


                self.state = 6349
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 6350
                self.expr(0)
                pass

            elif la_ == 3:
                self.state = 6351
                self.match(MySQLParser.TRAILING_SYMBOL)
                self.state = 6353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,790,self._ctx)
                if la_ == 1:
                    self.state = 6352
                    self.expr(0)


                self.state = 6355
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 6356
                self.expr(0)
                pass

            elif la_ == 4:
                self.state = 6357
                self.match(MySQLParser.BOTH_SYMBOL)
                self.state = 6359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,791,self._ctx)
                if la_ == 1:
                    self.state = 6358
                    self.expr(0)


                self.state = 6361
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 6362
                self.expr(0)
                pass


            self.state = 6365
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubstringFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTRING_SYMBOL(self):
            return self.getToken(MySQLParser.SUBSTRING_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_substringFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstringFunction" ):
                listener.enterSubstringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstringFunction" ):
                listener.exitSubstringFunction(self)




    def substringFunction(self):

        localctx = MySQLParser.SubstringFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_substringFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6367
            self.match(MySQLParser.SUBSTRING_SYMBOL)
            self.state = 6368
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6369
            self.expr(0)
            self.state = 6382
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.COMMA_SYMBOL]:
                self.state = 6370
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6371
                self.expr(0)
                self.state = 6374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 6372
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6373
                    self.expr(0)


                pass
            elif token in [MySQLParser.FROM_SYMBOL]:
                self.state = 6376
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 6377
                self.expr(0)
                self.state = 6380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.FOR_SYMBOL:
                    self.state = 6378
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 6379
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 6384
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def udfExprList(self):
            return self.getTypedRuleContext(MySQLParser.UdfExprListContext,0)


        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = MySQLParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_functionCall)
        try:
            self.state = 6400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,798,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6386
                self.pureIdentifier()
                self.state = 6387
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6389
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,796,self._ctx)
                if la_ == 1:
                    self.state = 6388
                    self.udfExprList()


                self.state = 6391
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6393
                self.qualifiedIdentifier()
                self.state = 6394
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,797,self._ctx)
                if la_ == 1:
                    self.state = 6395
                    self.exprList()


                self.state = 6398
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def udfExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UdfExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UdfExprContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_udfExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfExprList" ):
                listener.enterUdfExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfExprList" ):
                listener.exitUdfExprList(self)




    def udfExprList(self):

        localctx = MySQLParser.UdfExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_udfExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6402
            self.udfExpr()
            self.state = 6407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 6403
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6404
                self.udfExpr()
                self.state = 6409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def selectAlias(self):
            return self.getTypedRuleContext(MySQLParser.SelectAliasContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_udfExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfExpr" ):
                listener.enterUdfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfExpr" ):
                listener.exitUdfExpr(self)




    def udfExpr(self):

        localctx = MySQLParser.UdfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_udfExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6410
            self.expr(0)
            self.state = 6412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,800,self._ctx)
            if la_ == 1:
                self.state = 6411
                self.selectAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userVariable(self):
            return self.getTypedRuleContext(MySQLParser.UserVariableContext,0)


        def systemVariable(self):
            return self.getTypedRuleContext(MySQLParser.SystemVariableContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = MySQLParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_variable)
        try:
            self.state = 6416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.AT_SIGN_SYMBOL, MySQLParser.AT_TEXT_SUFFIX]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6414
                self.userVariable()
                pass
            elif token in [MySQLParser.AT_AT_SIGN_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6415
                self.systemVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(MySQLParser.AT_TEXT_SUFFIX, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_userVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariable" ):
                listener.enterUserVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariable" ):
                listener.exitUserVariable(self)




    def userVariable(self):

        localctx = MySQLParser.UserVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_userVariable)
        try:
            self.state = 6421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.AT_SIGN_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6418
                self.match(MySQLParser.AT_SIGN_SYMBOL)
                self.state = 6419
                self.textOrIdentifier()
                pass
            elif token in [MySQLParser.AT_TEXT_SUFFIX]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6420
                self.match(MySQLParser.AT_TEXT_SUFFIX)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SystemVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def varIdentType(self):
            return self.getTypedRuleContext(MySQLParser.VarIdentTypeContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_systemVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystemVariable" ):
                listener.enterSystemVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystemVariable" ):
                listener.exitSystemVariable(self)




    def systemVariable(self):

        localctx = MySQLParser.SystemVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_systemVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6423
            self.match(MySQLParser.AT_AT_SIGN_SYMBOL)
            self.state = 6425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,803,self._ctx)
            if la_ == 1:
                self.state = 6424
                self.varIdentType()


            self.state = 6427
            self.textOrIdentifier()
            self.state = 6429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,804,self._ctx)
            if la_ == 1:
                self.state = 6428
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InternalVariableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def lValueIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.LValueIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_internalVariableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInternalVariableName" ):
                listener.enterInternalVariableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInternalVariableName" ):
                listener.exitInternalVariableName(self)




    def internalVariableName(self):

        localctx = MySQLParser.InternalVariableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_internalVariableName)
        self._la = 0 # Token type
        try:
            self.state = 6445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,808,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,807,self._ctx)
                if la_ == 1:
                    self.state = 6431
                    if not serverVersion < 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 80017")
                    self.state = 6432
                    self.identifier()
                    self.state = 6434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.DOT_SYMBOL:
                        self.state = 6433
                        self.dotIdentifier()


                    pass

                elif la_ == 2:
                    self.state = 6436
                    if not serverVersion >= 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80017")
                    self.state = 6437
                    self.lValueIdentifier()
                    self.state = 6439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.DOT_SYMBOL:
                        self.state = 6438
                        self.dotIdentifier()


                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6443
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 6444
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN_SYMBOL(self):
            return self.getToken(MySQLParser.WHEN_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_whenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpression" ):
                listener.enterWhenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpression" ):
                listener.exitWhenExpression(self)




    def whenExpression(self):

        localctx = MySQLParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_whenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6447
            self.match(MySQLParser.WHEN_SYMBOL)
            self.state = 6448
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN_SYMBOL(self):
            return self.getToken(MySQLParser.THEN_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_thenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThenExpression" ):
                listener.enterThenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThenExpression" ):
                listener.exitThenExpression(self)




    def thenExpression(self):

        localctx = MySQLParser.ThenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_thenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6450
            self.match(MySQLParser.THEN_SYMBOL)
            self.state = 6451
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE_SYMBOL(self):
            return self.getToken(MySQLParser.ELSE_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_elseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseExpression" ):
                listener.enterElseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseExpression" ):
                listener.exitElseExpression(self)




    def elseExpression(self):

        localctx = MySQLParser.ElseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_elseExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6453
            self.match(MySQLParser.ELSE_SYMBOL)
            self.state = 6454
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def fieldLength(self):
            return self.getTypedRuleContext(MySQLParser.FieldLengthContext,0)


        def CHAR_SYMBOL(self):
            return self.getToken(MySQLParser.CHAR_SYMBOL, 0)

        def charsetWithOptBinary(self):
            return self.getTypedRuleContext(MySQLParser.CharsetWithOptBinaryContext,0)


        def nchar(self):
            return self.getTypedRuleContext(MySQLParser.NcharContext,0)


        def SIGNED_SYMBOL(self):
            return self.getToken(MySQLParser.SIGNED_SYMBOL, 0)

        def INT_SYMBOL(self):
            return self.getToken(MySQLParser.INT_SYMBOL, 0)

        def UNSIGNED_SYMBOL(self):
            return self.getToken(MySQLParser.UNSIGNED_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def typeDatetimePrecision(self):
            return self.getTypedRuleContext(MySQLParser.TypeDatetimePrecisionContext,0)


        def DATETIME_SYMBOL(self):
            return self.getToken(MySQLParser.DATETIME_SYMBOL, 0)

        def DECIMAL_SYMBOL(self):
            return self.getToken(MySQLParser.DECIMAL_SYMBOL, 0)

        def floatOptions(self):
            return self.getTypedRuleContext(MySQLParser.FloatOptionsContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_SYMBOL, 0)

        def realType(self):
            return self.getTypedRuleContext(MySQLParser.RealTypeContext,0)


        def FLOAT_SYMBOL(self):
            return self.getToken(MySQLParser.FLOAT_SYMBOL, 0)

        def standardFloatOptions(self):
            return self.getTypedRuleContext(MySQLParser.StandardFloatOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_castType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastType" ):
                listener.enterCastType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastType" ):
                listener.exitCastType(self)




    def castType(self):

        localctx = MySQLParser.CastTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_castType)
        try:
            self.state = 6501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,819,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6456
                self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 6458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,809,self._ctx)
                if la_ == 1:
                    self.state = 6457
                    self.fieldLength()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6460
                self.match(MySQLParser.CHAR_SYMBOL)
                self.state = 6462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,810,self._ctx)
                if la_ == 1:
                    self.state = 6461
                    self.fieldLength()


                self.state = 6465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,811,self._ctx)
                if la_ == 1:
                    self.state = 6464
                    self.charsetWithOptBinary()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6467
                self.nchar()
                self.state = 6469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,812,self._ctx)
                if la_ == 1:
                    self.state = 6468
                    self.fieldLength()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6471
                self.match(MySQLParser.SIGNED_SYMBOL)
                self.state = 6473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
                if la_ == 1:
                    self.state = 6472
                    self.match(MySQLParser.INT_SYMBOL)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6475
                self.match(MySQLParser.UNSIGNED_SYMBOL)
                self.state = 6477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,814,self._ctx)
                if la_ == 1:
                    self.state = 6476
                    self.match(MySQLParser.INT_SYMBOL)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6479
                self.match(MySQLParser.DATE_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6480
                self.match(MySQLParser.TIME_SYMBOL)
                self.state = 6482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,815,self._ctx)
                if la_ == 1:
                    self.state = 6481
                    self.typeDatetimePrecision()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6484
                self.match(MySQLParser.DATETIME_SYMBOL)
                self.state = 6486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
                if la_ == 1:
                    self.state = 6485
                    self.typeDatetimePrecision()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6488
                self.match(MySQLParser.DECIMAL_SYMBOL)
                self.state = 6490
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,817,self._ctx)
                if la_ == 1:
                    self.state = 6489
                    self.floatOptions()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6492
                if not serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50708")
                self.state = 6493
                self.match(MySQLParser.JSON_SYMBOL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6494
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 6495
                self.realType()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6496
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 6497
                self.match(MySQLParser.FLOAT_SYMBOL)
                self.state = 6499
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,818,self._ctx)
                if la_ == 1:
                    self.state = 6498
                    self.standardFloatOptions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = MySQLParser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6503
            self.expr(0)
            self.state = 6508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 6504
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6505
                self.expr(0)
                self.state = 6510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_SYMBOL(self):
            return self.getToken(MySQLParser.CHAR_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(MySQLParser.CHARSET_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_charset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharset" ):
                listener.enterCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharset" ):
                listener.exitCharset(self)




    def charset(self):

        localctx = MySQLParser.CharsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_charset)
        try:
            self.state = 6514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.CHAR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6511
                self.match(MySQLParser.CHAR_SYMBOL)
                self.state = 6512
                self.match(MySQLParser.SET_SYMBOL)
                pass
            elif token in [MySQLParser.CHARSET_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6513
                self.match(MySQLParser.CHARSET_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotRuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def NOT2_SYMBOL(self):
            return self.getToken(MySQLParser.NOT2_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_notRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotRule" ):
                listener.enterNotRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotRule" ):
                listener.exitNotRule(self)




    def notRule(self):

        localctx = MySQLParser.NotRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_notRule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6516
            _la = self._input.LA(1)
            if not(_la==MySQLParser.NOT_SYMBOL or _la==MySQLParser.NOT2_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not2RuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGICAL_NOT_OPERATOR(self):
            return self.getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0)

        def NOT2_SYMBOL(self):
            return self.getToken(MySQLParser.NOT2_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_not2Rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot2Rule" ):
                listener.enterNot2Rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot2Rule" ):
                listener.exitNot2Rule(self)




    def not2Rule(self):

        localctx = MySQLParser.Not2RuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_not2Rule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6518
            _la = self._input.LA(1)
            if not(_la==MySQLParser.NOT2_SYMBOL or _la==MySQLParser.LOGICAL_NOT_OPERATOR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalTimeStamp(self):
            return self.getTypedRuleContext(MySQLParser.IntervalTimeStampContext,0)


        def SECOND_MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0)

        def MINUTE_MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0)

        def MINUTE_SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0)

        def HOUR_MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0)

        def HOUR_SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0)

        def HOUR_MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0)

        def DAY_MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0)

        def DAY_SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SECOND_SYMBOL, 0)

        def DAY_MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0)

        def DAY_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_HOUR_SYMBOL, 0)

        def YEAR_MONTH_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = MySQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.state = 6522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.DAY_SYMBOL, MySQLParser.HOUR_SYMBOL, MySQLParser.MICROSECOND_SYMBOL, MySQLParser.MINUTE_SYMBOL, MySQLParser.MONTH_SYMBOL, MySQLParser.QUARTER_SYMBOL, MySQLParser.SECOND_SYMBOL, MySQLParser.WEEK_SYMBOL, MySQLParser.YEAR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6520
                self.intervalTimeStamp()
                pass
            elif token in [MySQLParser.DAY_HOUR_SYMBOL, MySQLParser.DAY_MICROSECOND_SYMBOL, MySQLParser.DAY_MINUTE_SYMBOL, MySQLParser.DAY_SECOND_SYMBOL, MySQLParser.HOUR_MICROSECOND_SYMBOL, MySQLParser.HOUR_MINUTE_SYMBOL, MySQLParser.HOUR_SECOND_SYMBOL, MySQLParser.MINUTE_MICROSECOND_SYMBOL, MySQLParser.MINUTE_SECOND_SYMBOL, MySQLParser.SECOND_MICROSECOND_SYMBOL, MySQLParser.YEAR_MONTH_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6521
                _la = self._input.LA(1)
                if not(((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (MySQLParser.DAY_HOUR_SYMBOL - 118)) | (1 << (MySQLParser.DAY_MICROSECOND_SYMBOL - 118)) | (1 << (MySQLParser.DAY_MINUTE_SYMBOL - 118)) | (1 << (MySQLParser.DAY_SECOND_SYMBOL - 118)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (MySQLParser.HOUR_MICROSECOND_SYMBOL - 226)) | (1 << (MySQLParser.HOUR_MINUTE_SYMBOL - 226)) | (1 << (MySQLParser.HOUR_SECOND_SYMBOL - 226)))) != 0) or _la==MySQLParser.MINUTE_MICROSECOND_SYMBOL or _la==MySQLParser.MINUTE_SECOND_SYMBOL or _la==MySQLParser.SECOND_MICROSECOND_SYMBOL or _la==MySQLParser.YEAR_MONTH_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTimeStampContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MICROSECOND_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.SECOND_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(MySQLParser.WEEK_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(MySQLParser.MONTH_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(MySQLParser.QUARTER_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_intervalTimeStamp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTimeStamp" ):
                listener.enterIntervalTimeStamp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTimeStamp" ):
                listener.exitIntervalTimeStamp(self)




    def intervalTimeStamp(self):

        localctx = MySQLParser.IntervalTimeStampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_intervalTimeStamp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6524
            _la = self._input.LA(1)
            if not(_la==MySQLParser.DAY_SYMBOL or _la==MySQLParser.HOUR_SYMBOL or ((((_la - 337)) & ~0x3f) == 0 and ((1 << (_la - 337)) & ((1 << (MySQLParser.MICROSECOND_SYMBOL - 337)) | (1 << (MySQLParser.MINUTE_SYMBOL - 337)) | (1 << (MySQLParser.MONTH_SYMBOL - 337)))) != 0) or _la==MySQLParser.QUARTER_SYMBOL or _la==MySQLParser.SECOND_SYMBOL or _la==MySQLParser.WEEK_SYMBOL or _la==MySQLParser.YEAR_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListWithParenthesesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_exprListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprListWithParentheses" ):
                listener.enterExprListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprListWithParentheses" ):
                listener.exitExprListWithParentheses(self)




    def exprListWithParentheses(self):

        localctx = MySQLParser.ExprListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_exprListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6526
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6527
            self.exprList()
            self.state = 6528
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprWithParenthesesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_exprWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprWithParentheses" ):
                listener.enterExprWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprWithParentheses" ):
                listener.exitExprWithParentheses(self)




    def exprWithParentheses(self):

        localctx = MySQLParser.ExprWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_exprWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6530
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6531
            self.expr(0)
            self.state = 6532
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExprWithParenthesesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_simpleExprWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprWithParentheses" ):
                listener.enterSimpleExprWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprWithParentheses" ):
                listener.exitSimpleExprWithParentheses(self)




    def simpleExprWithParentheses(self):

        localctx = MySQLParser.SimpleExprWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_simpleExprWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6534
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6535
            self.simpleExpr(0)
            self.state = 6536
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.OrderExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.OrderExpressionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_orderList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderList" ):
                listener.enterOrderList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderList" ):
                listener.exitOrderList(self)




    def orderList(self):

        localctx = MySQLParser.OrderListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_orderList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6538
            self.orderExpression()
            self.state = 6543
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,823,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6539
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6540
                    self.orderExpression() 
                self.state = 6545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,823,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def direction(self):
            return self.getTypedRuleContext(MySQLParser.DirectionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_orderExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderExpression" ):
                listener.enterOrderExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderExpression" ):
                listener.exitOrderExpression(self)




    def orderExpression(self):

        localctx = MySQLParser.OrderExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_orderExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6546
            self.expr(0)
            self.state = 6548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,824,self._ctx)
            if la_ == 1:
                self.state = 6547
                self.direction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.GroupingExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.GroupingExpressionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_groupList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupList" ):
                listener.enterGroupList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupList" ):
                listener.exitGroupList(self)




    def groupList(self):

        localctx = MySQLParser.GroupListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_groupList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6550
            self.groupingExpression()
            self.state = 6555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 6551
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6552
                self.groupingExpression()
                self.state = 6557
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_groupingExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingExpression" ):
                listener.enterGroupingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingExpression" ):
                listener.exitGroupingExpression(self)




    def groupingExpression(self):

        localctx = MySQLParser.GroupingExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_groupingExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6558
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def CHANNEL_SYMBOL(self):
            return self.getToken(MySQLParser.CHANNEL_SYMBOL, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_channel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannel" ):
                listener.enterChannel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannel" ):
                listener.exitChannel(self)




    def channel(self):

        localctx = MySQLParser.ChannelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_channel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6560
            if not serverVersion >= 50706:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50706")
            self.state = 6561
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 6562
            self.match(MySQLParser.CHANNEL_SYMBOL)
            self.state = 6563
            self.textStringNoLinebreak()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStatement(self):
            return self.getTypedRuleContext(MySQLParser.SimpleStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(MySQLParser.ReturnStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(MySQLParser.IfStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(MySQLParser.CaseStatementContext,0)


        def labeledBlock(self):
            return self.getTypedRuleContext(MySQLParser.LabeledBlockContext,0)


        def unlabeledBlock(self):
            return self.getTypedRuleContext(MySQLParser.UnlabeledBlockContext,0)


        def labeledControl(self):
            return self.getTypedRuleContext(MySQLParser.LabeledControlContext,0)


        def unlabeledControl(self):
            return self.getTypedRuleContext(MySQLParser.UnlabeledControlContext,0)


        def leaveStatement(self):
            return self.getTypedRuleContext(MySQLParser.LeaveStatementContext,0)


        def iterateStatement(self):
            return self.getTypedRuleContext(MySQLParser.IterateStatementContext,0)


        def cursorOpen(self):
            return self.getTypedRuleContext(MySQLParser.CursorOpenContext,0)


        def cursorFetch(self):
            return self.getTypedRuleContext(MySQLParser.CursorFetchContext,0)


        def cursorClose(self):
            return self.getTypedRuleContext(MySQLParser.CursorCloseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = MySQLParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_compoundStatement)
        try:
            self.state = 6578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,826,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6565
                self.simpleStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6566
                self.returnStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6567
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6568
                self.caseStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6569
                self.labeledBlock()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6570
                self.unlabeledBlock()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6571
                self.labeledControl()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6572
                self.unlabeledControl()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6573
                self.leaveStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6574
                self.iterateStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6575
                self.cursorOpen()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6576
                self.cursorFetch()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6577
                self.cursorClose()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN_SYMBOL(self):
            return self.getToken(MySQLParser.RETURN_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = MySQLParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6580
            self.match(MySQLParser.RETURN_SYMBOL)
            self.state = 6581
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.IF_SYMBOL)
            else:
                return self.getToken(MySQLParser.IF_SYMBOL, i)

        def ifBody(self):
            return self.getTypedRuleContext(MySQLParser.IfBodyContext,0)


        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = MySQLParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6583
            self.match(MySQLParser.IF_SYMBOL)
            self.state = 6584
            self.ifBody()
            self.state = 6585
            self.match(MySQLParser.END_SYMBOL)
            self.state = 6586
            self.match(MySQLParser.IF_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def thenStatement(self):
            return self.getTypedRuleContext(MySQLParser.ThenStatementContext,0)


        def ELSEIF_SYMBOL(self):
            return self.getToken(MySQLParser.ELSEIF_SYMBOL, 0)

        def ifBody(self):
            return self.getTypedRuleContext(MySQLParser.IfBodyContext,0)


        def ELSE_SYMBOL(self):
            return self.getToken(MySQLParser.ELSE_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_ifBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBody" ):
                listener.enterIfBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBody" ):
                listener.exitIfBody(self)




    def ifBody(self):

        localctx = MySQLParser.IfBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_ifBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6588
            self.expr(0)
            self.state = 6589
            self.thenStatement()
            self.state = 6594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.ELSEIF_SYMBOL]:
                self.state = 6590
                self.match(MySQLParser.ELSEIF_SYMBOL)
                self.state = 6591
                self.ifBody()
                pass
            elif token in [MySQLParser.ELSE_SYMBOL]:
                self.state = 6592
                self.match(MySQLParser.ELSE_SYMBOL)
                self.state = 6593
                self.compoundStatementList()
                pass
            elif token in [MySQLParser.END_SYMBOL]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN_SYMBOL(self):
            return self.getToken(MySQLParser.THEN_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_thenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThenStatement" ):
                listener.enterThenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThenStatement" ):
                listener.exitThenStatement(self)




    def thenStatement(self):

        localctx = MySQLParser.ThenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_thenStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6596
            self.match(MySQLParser.THEN_SYMBOL)
            self.state = 6597
            self.compoundStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CompoundStatementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MySQLParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_compoundStatementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatementList" ):
                listener.enterCompoundStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatementList" ):
                listener.exitCompoundStatementList(self)




    def compoundStatementList(self):

        localctx = MySQLParser.CompoundStatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_compoundStatementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6602 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6599
                    self.compoundStatement()
                    self.state = 6600
                    self.match(MySQLParser.SEMICOLON_SYMBOL)

                else:
                    raise NoViableAltException(self)
                self.state = 6604 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,828,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.CASE_SYMBOL)
            else:
                return self.getToken(MySQLParser.CASE_SYMBOL, i)

        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def whenExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.WhenExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.WhenExpressionContext,i)


        def thenStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ThenStatementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ThenStatementContext,i)


        def elseStatement(self):
            return self.getTypedRuleContext(MySQLParser.ElseStatementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)




    def caseStatement(self):

        localctx = MySQLParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6606
            self.match(MySQLParser.CASE_SYMBOL)
            self.state = 6608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,829,self._ctx)
            if la_ == 1:
                self.state = 6607
                self.expr(0)


            self.state = 6613 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6610
                self.whenExpression()
                self.state = 6611
                self.thenStatement()
                self.state = 6615 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySQLParser.WHEN_SYMBOL):
                    break

            self.state = 6618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ELSE_SYMBOL:
                self.state = 6617
                self.elseStatement()


            self.state = 6620
            self.match(MySQLParser.END_SYMBOL)
            self.state = 6621
            self.match(MySQLParser.CASE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE_SYMBOL(self):
            return self.getToken(MySQLParser.ELSE_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_elseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStatement" ):
                listener.enterElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStatement" ):
                listener.exitElseStatement(self)




    def elseStatement(self):

        localctx = MySQLParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6623
            self.match(MySQLParser.ELSE_SYMBOL)
            self.state = 6624
            self.compoundStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(MySQLParser.LabelContext,0)


        def beginEndBlock(self):
            return self.getTypedRuleContext(MySQLParser.BeginEndBlockContext,0)


        def labelRef(self):
            return self.getTypedRuleContext(MySQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_labeledBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledBlock" ):
                listener.enterLabeledBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledBlock" ):
                listener.exitLabeledBlock(self)




    def labeledBlock(self):

        localctx = MySQLParser.LabeledBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_labeledBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6626
            self.label()
            self.state = 6627
            self.beginEndBlock()
            self.state = 6629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,832,self._ctx)
            if la_ == 1:
                self.state = 6628
                self.labelRef()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlabeledBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def beginEndBlock(self):
            return self.getTypedRuleContext(MySQLParser.BeginEndBlockContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_unlabeledBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlabeledBlock" ):
                listener.enterUnlabeledBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlabeledBlock" ):
                listener.exitUnlabeledBlock(self)




    def unlabeledBlock(self):

        localctx = MySQLParser.UnlabeledBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_unlabeledBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6631
            self.beginEndBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.LabelIdentifierContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MySQLParser.COLON_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)




    def label(self):

        localctx = MySQLParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6633
            self.labelIdentifier()
            self.state = 6634
            self.match(MySQLParser.COLON_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginEndBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_SYMBOL(self):
            return self.getToken(MySQLParser.BEGIN_SYMBOL, 0)

        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def spDeclarations(self):
            return self.getTypedRuleContext(MySQLParser.SpDeclarationsContext,0)


        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_beginEndBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginEndBlock" ):
                listener.enterBeginEndBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginEndBlock" ):
                listener.exitBeginEndBlock(self)




    def beginEndBlock(self):

        localctx = MySQLParser.BeginEndBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_beginEndBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6636
            self.match(MySQLParser.BEGIN_SYMBOL)
            self.state = 6638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
            if la_ == 1:
                self.state = 6637
                self.spDeclarations()


            self.state = 6641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,834,self._ctx)
            if la_ == 1:
                self.state = 6640
                self.compoundStatementList()


            self.state = 6643
            self.match(MySQLParser.END_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledControlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(MySQLParser.LabelContext,0)


        def unlabeledControl(self):
            return self.getTypedRuleContext(MySQLParser.UnlabeledControlContext,0)


        def labelRef(self):
            return self.getTypedRuleContext(MySQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_labeledControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledControl" ):
                listener.enterLabeledControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledControl" ):
                listener.exitLabeledControl(self)




    def labeledControl(self):

        localctx = MySQLParser.LabeledControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_labeledControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6645
            self.label()
            self.state = 6646
            self.unlabeledControl()
            self.state = 6648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,835,self._ctx)
            if la_ == 1:
                self.state = 6647
                self.labelRef()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlabeledControlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopBlock(self):
            return self.getTypedRuleContext(MySQLParser.LoopBlockContext,0)


        def whileDoBlock(self):
            return self.getTypedRuleContext(MySQLParser.WhileDoBlockContext,0)


        def repeatUntilBlock(self):
            return self.getTypedRuleContext(MySQLParser.RepeatUntilBlockContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_unlabeledControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlabeledControl" ):
                listener.enterUnlabeledControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlabeledControl" ):
                listener.exitUnlabeledControl(self)




    def unlabeledControl(self):

        localctx = MySQLParser.UnlabeledControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_unlabeledControl)
        try:
            self.state = 6653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.LOOP_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6650
                self.loopBlock()
                pass
            elif token in [MySQLParser.WHILE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6651
                self.whileDoBlock()
                pass
            elif token in [MySQLParser.REPEAT_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6652
                self.repeatUntilBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.LOOP_SYMBOL)
            else:
                return self.getToken(MySQLParser.LOOP_SYMBOL, i)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_loopBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopBlock" ):
                listener.enterLoopBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopBlock" ):
                listener.exitLoopBlock(self)




    def loopBlock(self):

        localctx = MySQLParser.LoopBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_loopBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6655
            self.match(MySQLParser.LOOP_SYMBOL)
            self.state = 6656
            self.compoundStatementList()
            self.state = 6657
            self.match(MySQLParser.END_SYMBOL)
            self.state = 6658
            self.match(MySQLParser.LOOP_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileDoBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.WHILE_SYMBOL)
            else:
                return self.getToken(MySQLParser.WHILE_SYMBOL, i)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_whileDoBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileDoBlock" ):
                listener.enterWhileDoBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileDoBlock" ):
                listener.exitWhileDoBlock(self)




    def whileDoBlock(self):

        localctx = MySQLParser.WhileDoBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_whileDoBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6660
            self.match(MySQLParser.WHILE_SYMBOL)
            self.state = 6661
            self.expr(0)
            self.state = 6662
            self.match(MySQLParser.DO_SYMBOL)
            self.state = 6663
            self.compoundStatementList()
            self.state = 6664
            self.match(MySQLParser.END_SYMBOL)
            self.state = 6665
            self.match(MySQLParser.WHILE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatUntilBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.REPEAT_SYMBOL)
            else:
                return self.getToken(MySQLParser.REPEAT_SYMBOL, i)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def UNTIL_SYMBOL(self):
            return self.getToken(MySQLParser.UNTIL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_repeatUntilBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatUntilBlock" ):
                listener.enterRepeatUntilBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatUntilBlock" ):
                listener.exitRepeatUntilBlock(self)




    def repeatUntilBlock(self):

        localctx = MySQLParser.RepeatUntilBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_repeatUntilBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6667
            self.match(MySQLParser.REPEAT_SYMBOL)
            self.state = 6668
            self.compoundStatementList()
            self.state = 6669
            self.match(MySQLParser.UNTIL_SYMBOL)
            self.state = 6670
            self.expr(0)
            self.state = 6671
            self.match(MySQLParser.END_SYMBOL)
            self.state = 6672
            self.match(MySQLParser.REPEAT_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpDeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SpDeclarationContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SpDeclarationContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MySQLParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_spDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpDeclarations" ):
                listener.enterSpDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpDeclarations" ):
                listener.exitSpDeclarations(self)




    def spDeclarations(self):

        localctx = MySQLParser.SpDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_spDeclarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6677 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6674
                    self.spDeclaration()
                    self.state = 6675
                    self.match(MySQLParser.SEMICOLON_SYMBOL)

                else:
                    raise NoViableAltException(self)
                self.state = 6679 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,837,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(MySQLParser.VariableDeclarationContext,0)


        def conditionDeclaration(self):
            return self.getTypedRuleContext(MySQLParser.ConditionDeclarationContext,0)


        def handlerDeclaration(self):
            return self.getTypedRuleContext(MySQLParser.HandlerDeclarationContext,0)


        def cursorDeclaration(self):
            return self.getTypedRuleContext(MySQLParser.CursorDeclarationContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_spDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpDeclaration" ):
                listener.enterSpDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpDeclaration" ):
                listener.exitSpDeclaration(self)




    def spDeclaration(self):

        localctx = MySQLParser.SpDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_spDeclaration)
        try:
            self.state = 6685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,838,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6681
                self.variableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6682
                self.conditionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6683
                self.handlerDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6684
                self.cursorDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(MySQLParser.DECLARE_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySQLParser.DataTypeContext,0)


        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = MySQLParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6687
            self.match(MySQLParser.DECLARE_SYMBOL)
            self.state = 6688
            self.identifierList()
            self.state = 6689
            self.dataType()
            self.state = 6691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.COLLATE_SYMBOL:
                self.state = 6690
                self.collate()


            self.state = 6695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DEFAULT_SYMBOL:
                self.state = 6693
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 6694
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(MySQLParser.DECLARE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def CONDITION_SYMBOL(self):
            return self.getToken(MySQLParser.CONDITION_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def spCondition(self):
            return self.getTypedRuleContext(MySQLParser.SpConditionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_conditionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionDeclaration" ):
                listener.enterConditionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionDeclaration" ):
                listener.exitConditionDeclaration(self)




    def conditionDeclaration(self):

        localctx = MySQLParser.ConditionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_conditionDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6697
            self.match(MySQLParser.DECLARE_SYMBOL)
            self.state = 6698
            self.identifier()
            self.state = 6699
            self.match(MySQLParser.CONDITION_SYMBOL)
            self.state = 6700
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 6701
            self.spCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def sqlstate(self):
            return self.getTypedRuleContext(MySQLParser.SqlstateContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_spCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpCondition" ):
                listener.enterSpCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpCondition" ):
                listener.exitSpCondition(self)




    def spCondition(self):

        localctx = MySQLParser.SpConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_spCondition)
        try:
            self.state = 6705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.INT_NUMBER, MySQLParser.LONG_NUMBER, MySQLParser.ULONGLONG_NUMBER, MySQLParser.HEX_NUMBER, MySQLParser.DECIMAL_NUMBER, MySQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6703
                self.ulong_number()
                pass
            elif token in [MySQLParser.SQLSTATE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6704
                self.sqlstate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlstateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQLSTATE_SYMBOL(self):
            return self.getToken(MySQLParser.SQLSTATE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.VALUE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_sqlstate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlstate" ):
                listener.enterSqlstate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlstate" ):
                listener.exitSqlstate(self)




    def sqlstate(self):

        localctx = MySQLParser.SqlstateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_sqlstate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6707
            self.match(MySQLParser.SQLSTATE_SYMBOL)
            self.state = 6709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,842,self._ctx)
            if la_ == 1:
                self.state = 6708
                self.match(MySQLParser.VALUE_SYMBOL)


            self.state = 6711
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(MySQLParser.DECLARE_SYMBOL, 0)

        def HANDLER_SYMBOL(self):
            return self.getToken(MySQLParser.HANDLER_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def handlerCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.HandlerConditionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.HandlerConditionContext,i)


        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def CONTINUE_SYMBOL(self):
            return self.getToken(MySQLParser.CONTINUE_SYMBOL, 0)

        def EXIT_SYMBOL(self):
            return self.getToken(MySQLParser.EXIT_SYMBOL, 0)

        def UNDO_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_handlerDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerDeclaration" ):
                listener.enterHandlerDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerDeclaration" ):
                listener.exitHandlerDeclaration(self)




    def handlerDeclaration(self):

        localctx = MySQLParser.HandlerDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_handlerDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6713
            self.match(MySQLParser.DECLARE_SYMBOL)
            self.state = 6714
            _la = self._input.LA(1)
            if not(_la==MySQLParser.CONTINUE_SYMBOL or _la==MySQLParser.EXIT_SYMBOL or _la==MySQLParser.UNDO_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6715
            self.match(MySQLParser.HANDLER_SYMBOL)
            self.state = 6716
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 6717
            self.handlerCondition()
            self.state = 6722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,843,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6718
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6719
                    self.handlerCondition() 
                self.state = 6724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,843,self._ctx)

            self.state = 6725
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spCondition(self):
            return self.getTypedRuleContext(MySQLParser.SpConditionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def SQLWARNING_SYMBOL(self):
            return self.getToken(MySQLParser.SQLWARNING_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def FOUND_SYMBOL(self):
            return self.getToken(MySQLParser.FOUND_SYMBOL, 0)

        def SQLEXCEPTION_SYMBOL(self):
            return self.getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_handlerCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerCondition" ):
                listener.enterHandlerCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerCondition" ):
                listener.exitHandlerCondition(self)




    def handlerCondition(self):

        localctx = MySQLParser.HandlerConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_handlerCondition)
        try:
            self.state = 6734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,844,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6727
                self.spCondition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6728
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6729
                self.match(MySQLParser.SQLWARNING_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6730
                self.notRule()
                self.state = 6731
                self.match(MySQLParser.FOUND_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6733
                self.match(MySQLParser.SQLEXCEPTION_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(MySQLParser.DECLARE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def CURSOR_SYMBOL(self):
            return self.getToken(MySQLParser.CURSOR_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySQLParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_cursorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorDeclaration" ):
                listener.enterCursorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorDeclaration" ):
                listener.exitCursorDeclaration(self)




    def cursorDeclaration(self):

        localctx = MySQLParser.CursorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_cursorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6736
            self.match(MySQLParser.DECLARE_SYMBOL)
            self.state = 6737
            self.identifier()
            self.state = 6738
            self.match(MySQLParser.CURSOR_SYMBOL)
            self.state = 6739
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 6740
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE_SYMBOL(self):
            return self.getToken(MySQLParser.ITERATE_SYMBOL, 0)

        def labelRef(self):
            return self.getTypedRuleContext(MySQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_iterateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterateStatement" ):
                listener.enterIterateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterateStatement" ):
                listener.exitIterateStatement(self)




    def iterateStatement(self):

        localctx = MySQLParser.IterateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_iterateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6742
            self.match(MySQLParser.ITERATE_SYMBOL)
            self.state = 6743
            self.labelRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeaveStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEAVE_SYMBOL(self):
            return self.getToken(MySQLParser.LEAVE_SYMBOL, 0)

        def labelRef(self):
            return self.getTypedRuleContext(MySQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_leaveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeaveStatement" ):
                listener.enterLeaveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeaveStatement" ):
                listener.exitLeaveStatement(self)




    def leaveStatement(self):

        localctx = MySQLParser.LeaveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_leaveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6745
            self.match(MySQLParser.LEAVE_SYMBOL)
            self.state = 6746
            self.labelRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetDiagnosticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_SYMBOL(self):
            return self.getToken(MySQLParser.GET_SYMBOL, 0)

        def DIAGNOSTICS_SYMBOL(self):
            return self.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0)

        def statementInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.StatementInformationItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.StatementInformationItemContext,i)


        def CONDITION_SYMBOL(self):
            return self.getToken(MySQLParser.CONDITION_SYMBOL, 0)

        def signalAllowedExpr(self):
            return self.getTypedRuleContext(MySQLParser.SignalAllowedExprContext,0)


        def conditionInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ConditionInformationItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ConditionInformationItemContext,i)


        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def STACKED_SYMBOL(self):
            return self.getToken(MySQLParser.STACKED_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_getDiagnostics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetDiagnostics" ):
                listener.enterGetDiagnostics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetDiagnostics" ):
                listener.exitGetDiagnostics(self)




    def getDiagnostics(self):

        localctx = MySQLParser.GetDiagnosticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_getDiagnostics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6748
            self.match(MySQLParser.GET_SYMBOL)
            self.state = 6752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,845,self._ctx)
            if la_ == 1:
                self.state = 6749
                self.match(MySQLParser.CURRENT_SYMBOL)

            elif la_ == 2:
                self.state = 6750
                if not serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50700")
                self.state = 6751
                self.match(MySQLParser.STACKED_SYMBOL)


            self.state = 6754
            self.match(MySQLParser.DIAGNOSTICS_SYMBOL)
            self.state = 6773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,848,self._ctx)
            if la_ == 1:
                self.state = 6755
                self.statementInformationItem()
                self.state = 6760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 6756
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6757
                    self.statementInformationItem()
                    self.state = 6762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 6763
                self.match(MySQLParser.CONDITION_SYMBOL)
                self.state = 6764
                self.signalAllowedExpr()
                self.state = 6765
                self.conditionInformationItem()
                self.state = 6770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 6766
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6767
                    self.conditionInformationItem()
                    self.state = 6772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalAllowedExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(MySQLParser.LiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(MySQLParser.VariableContext,0)


        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_signalAllowedExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalAllowedExpr" ):
                listener.enterSignalAllowedExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalAllowedExpr" ):
                listener.exitSignalAllowedExpr(self)




    def signalAllowedExpr(self):

        localctx = MySQLParser.SignalAllowedExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_signalAllowedExpr)
        try:
            self.state = 6778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,849,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6775
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6776
                self.variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6777
                self.qualifiedIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementInformationItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def NUMBER_SYMBOL(self):
            return self.getToken(MySQLParser.NUMBER_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0)

        def variable(self):
            return self.getTypedRuleContext(MySQLParser.VariableContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_statementInformationItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementInformationItem" ):
                listener.enterStatementInformationItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementInformationItem" ):
                listener.exitStatementInformationItem(self)




    def statementInformationItem(self):

        localctx = MySQLParser.StatementInformationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_statementInformationItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
            if la_ == 1:
                self.state = 6780
                self.variable()
                pass

            elif la_ == 2:
                self.state = 6781
                self.identifier()
                pass


            self.state = 6784
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 6785
            _la = self._input.LA(1)
            if not(_la==MySQLParser.NUMBER_SYMBOL or _la==MySQLParser.ROW_COUNT_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionInformationItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def variable(self):
            return self.getTypedRuleContext(MySQLParser.VariableContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def signalInformationItemName(self):
            return self.getTypedRuleContext(MySQLParser.SignalInformationItemNameContext,0)


        def RETURNED_SQLSTATE_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_conditionInformationItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionInformationItem" ):
                listener.enterConditionInformationItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionInformationItem" ):
                listener.exitConditionInformationItem(self)




    def conditionInformationItem(self):

        localctx = MySQLParser.ConditionInformationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_conditionInformationItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,851,self._ctx)
            if la_ == 1:
                self.state = 6787
                self.variable()
                pass

            elif la_ == 2:
                self.state = 6788
                self.identifier()
                pass


            self.state = 6791
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 6794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.CATALOG_NAME_SYMBOL, MySQLParser.CLASS_ORIGIN_SYMBOL, MySQLParser.COLUMN_NAME_SYMBOL, MySQLParser.CONSTRAINT_CATALOG_SYMBOL, MySQLParser.CONSTRAINT_NAME_SYMBOL, MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, MySQLParser.CURSOR_NAME_SYMBOL, MySQLParser.MESSAGE_TEXT_SYMBOL, MySQLParser.MYSQL_ERRNO_SYMBOL, MySQLParser.SCHEMA_NAME_SYMBOL, MySQLParser.SUBCLASS_ORIGIN_SYMBOL, MySQLParser.TABLE_NAME_SYMBOL]:
                self.state = 6792
                self.signalInformationItemName()
                pass
            elif token in [MySQLParser.RETURNED_SQLSTATE_SYMBOL]:
                self.state = 6793
                self.match(MySQLParser.RETURNED_SQLSTATE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalInformationItemNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0)

        def SUBCLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0)

        def CONSTRAINT_CATALOG_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0)

        def CONSTRAINT_SCHEMA_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0)

        def CONSTRAINT_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0)

        def CATALOG_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0)

        def SCHEMA_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0)

        def TABLE_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0)

        def COLUMN_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0)

        def CURSOR_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0)

        def MESSAGE_TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0)

        def MYSQL_ERRNO_SYMBOL(self):
            return self.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_signalInformationItemName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalInformationItemName" ):
                listener.enterSignalInformationItemName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalInformationItemName" ):
                listener.exitSignalInformationItemName(self)




    def signalInformationItemName(self):

        localctx = MySQLParser.SignalInformationItemNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_signalInformationItemName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6796
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (MySQLParser.CATALOG_NAME_SYMBOL - 53)) | (1 << (MySQLParser.CLASS_ORIGIN_SYMBOL - 53)) | (1 << (MySQLParser.COLUMN_NAME_SYMBOL - 53)) | (1 << (MySQLParser.CONSTRAINT_CATALOG_SYMBOL - 53)) | (1 << (MySQLParser.CONSTRAINT_NAME_SYMBOL - 53)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 53)) | (1 << (MySQLParser.CURSOR_NAME_SYMBOL - 53)))) != 0) or _la==MySQLParser.MESSAGE_TEXT_SYMBOL or _la==MySQLParser.MYSQL_ERRNO_SYMBOL or _la==MySQLParser.SCHEMA_NAME_SYMBOL or _la==MySQLParser.SUBCLASS_ORIGIN_SYMBOL or _la==MySQLParser.TABLE_NAME_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNAL_SYMBOL(self):
            return self.getToken(MySQLParser.SIGNAL_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def sqlstate(self):
            return self.getTypedRuleContext(MySQLParser.SqlstateContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def signalInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SignalInformationItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SignalInformationItemContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_signalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalStatement" ):
                listener.enterSignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalStatement" ):
                listener.exitSignalStatement(self)




    def signalStatement(self):

        localctx = MySQLParser.SignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_signalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6798
            self.match(MySQLParser.SIGNAL_SYMBOL)
            self.state = 6801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,853,self._ctx)
            if la_ == 1:
                self.state = 6799
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 6800
                self.sqlstate()
                pass


            self.state = 6812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.SET_SYMBOL:
                self.state = 6803
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 6804
                self.signalInformationItem()
                self.state = 6809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 6805
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6806
                    self.signalInformationItem()
                    self.state = 6811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResignalStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESIGNAL_SYMBOL(self):
            return self.getToken(MySQLParser.RESIGNAL_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def sqlstate(self):
            return self.getTypedRuleContext(MySQLParser.SqlstateContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def signalInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SignalInformationItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SignalInformationItemContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_resignalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResignalStatement" ):
                listener.enterResignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResignalStatement" ):
                listener.exitResignalStatement(self)




    def resignalStatement(self):

        localctx = MySQLParser.ResignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_resignalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6814
            self.match(MySQLParser.RESIGNAL_SYMBOL)
            self.state = 6817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,856,self._ctx)
            if la_ == 1:
                self.state = 6815
                self.identifier()

            elif la_ == 2:
                self.state = 6816
                self.sqlstate()


            self.state = 6828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.SET_SYMBOL:
                self.state = 6819
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 6820
                self.signalInformationItem()
                self.state = 6825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 6821
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6822
                    self.signalInformationItem()
                    self.state = 6827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalInformationItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signalInformationItemName(self):
            return self.getTypedRuleContext(MySQLParser.SignalInformationItemNameContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def signalAllowedExpr(self):
            return self.getTypedRuleContext(MySQLParser.SignalAllowedExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_signalInformationItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalInformationItem" ):
                listener.enterSignalInformationItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalInformationItem" ):
                listener.exitSignalInformationItem(self)




    def signalInformationItem(self):

        localctx = MySQLParser.SignalInformationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_signalInformationItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6830
            self.signalInformationItemName()
            self.state = 6831
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 6832
            self.signalAllowedExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorOpenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_cursorOpen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorOpen" ):
                listener.enterCursorOpen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorOpen" ):
                listener.exitCursorOpen(self)




    def cursorOpen(self):

        localctx = MySQLParser.CursorOpenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_cursorOpen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6834
            self.match(MySQLParser.OPEN_SYMBOL)
            self.state = 6835
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorCloseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_cursorClose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorClose" ):
                listener.enterCursorClose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorClose" ):
                listener.exitCursorClose(self)




    def cursorClose(self):

        localctx = MySQLParser.CursorCloseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_cursorClose)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6837
            self.match(MySQLParser.CLOSE_SYMBOL)
            self.state = 6838
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorFetchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH_SYMBOL(self):
            return self.getToken(MySQLParser.FETCH_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(MySQLParser.NEXT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_cursorFetch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorFetch" ):
                listener.enterCursorFetch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorFetch" ):
                listener.exitCursorFetch(self)




    def cursorFetch(self):

        localctx = MySQLParser.CursorFetchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_cursorFetch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6840
            self.match(MySQLParser.FETCH_SYMBOL)
            self.state = 6845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,860,self._ctx)
            if la_ == 1:
                self.state = 6842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NEXT_SYMBOL:
                    self.state = 6841
                    self.match(MySQLParser.NEXT_SYMBOL)


                self.state = 6844
                self.match(MySQLParser.FROM_SYMBOL)


            self.state = 6847
            self.identifier()
            self.state = 6848
            self.match(MySQLParser.INTO_SYMBOL)
            self.state = 6849
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def EVERY_SYMBOL(self):
            return self.getToken(MySQLParser.EVERY_SYMBOL, 0)

        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)


        def STARTS_SYMBOL(self):
            return self.getToken(MySQLParser.STARTS_SYMBOL, 0)

        def ENDS_SYMBOL(self):
            return self.getToken(MySQLParser.ENDS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_schedule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchedule" ):
                listener.enterSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchedule" ):
                listener.exitSchedule(self)




    def schedule(self):

        localctx = MySQLParser.ScheduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_schedule)
        self._la = 0 # Token type
        try:
            self.state = 6864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.AT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6851
                self.match(MySQLParser.AT_SYMBOL)
                self.state = 6852
                self.expr(0)
                pass
            elif token in [MySQLParser.EVERY_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6853
                self.match(MySQLParser.EVERY_SYMBOL)
                self.state = 6854
                self.expr(0)
                self.state = 6855
                self.interval()
                self.state = 6858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.STARTS_SYMBOL:
                    self.state = 6856
                    self.match(MySQLParser.STARTS_SYMBOL)
                    self.state = 6857
                    self.expr(0)


                self.state = 6862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ENDS_SYMBOL:
                    self.state = 6860
                    self.match(MySQLParser.ENDS_SYMBOL)
                    self.state = 6861
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnName(self):
            return self.getTypedRuleContext(MySQLParser.ColumnNameContext,0)


        def fieldDefinition(self):
            return self.getTypedRuleContext(MySQLParser.FieldDefinitionContext,0)


        def checkOrReferences(self):
            return self.getTypedRuleContext(MySQLParser.CheckOrReferencesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = MySQLParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_columnDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6866
            self.columnName()
            self.state = 6867
            self.fieldDefinition()
            self.state = 6869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,864,self._ctx)
            if la_ == 1:
                self.state = 6868
                self.checkOrReferences()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckOrReferencesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def checkConstraint(self):
            return self.getTypedRuleContext(MySQLParser.CheckConstraintContext,0)


        def references(self):
            return self.getTypedRuleContext(MySQLParser.ReferencesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_checkOrReferences

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckOrReferences" ):
                listener.enterCheckOrReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckOrReferences" ):
                listener.exitCheckOrReferences(self)




    def checkOrReferences(self):

        localctx = MySQLParser.CheckOrReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_checkOrReferences)
        try:
            self.state = 6874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,865,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6871
                if not serverVersion < 80016:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80016")
                self.state = 6872
                self.checkConstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6873
                self.references()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.CHECK_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_checkConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckConstraint" ):
                listener.enterCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckConstraint" ):
                listener.exitCheckConstraint(self)




    def checkConstraint(self):

        localctx = MySQLParser.CheckConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_checkConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6876
            self.match(MySQLParser.CHECK_SYMBOL)
            self.state = 6877
            self.exprWithParentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintEnforcementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENFORCED_SYMBOL(self):
            return self.getToken(MySQLParser.ENFORCED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_constraintEnforcement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintEnforcement" ):
                listener.enterConstraintEnforcement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintEnforcement" ):
                listener.exitConstraintEnforcement(self)




    def constraintEnforcement(self):

        localctx = MySQLParser.ConstraintEnforcementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_constraintEnforcement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.NOT_SYMBOL:
                self.state = 6879
                self.match(MySQLParser.NOT_SYMBOL)


            self.state = 6882
            self.match(MySQLParser.ENFORCED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def keyListVariants(self):
            return self.getTypedRuleContext(MySQLParser.KeyListVariantsContext,0)


        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def indexNameAndType(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameAndTypeContext,0)


        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IndexOptionContext,i)


        def FULLTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.FULLTEXT_SYMBOL, 0)

        def keyOrIndex(self):
            return self.getTypedRuleContext(MySQLParser.KeyOrIndexContext,0)


        def indexName(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameContext,0)


        def fulltextIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FulltextIndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FulltextIndexOptionContext,i)


        def SPATIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SPATIAL_SYMBOL, 0)

        def spatialIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SpatialIndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SpatialIndexOptionContext,i)


        def keyList(self):
            return self.getTypedRuleContext(MySQLParser.KeyListContext,0)


        def references(self):
            return self.getTypedRuleContext(MySQLParser.ReferencesContext,0)


        def checkConstraint(self):
            return self.getTypedRuleContext(MySQLParser.CheckConstraintContext,0)


        def constraintName(self):
            return self.getTypedRuleContext(MySQLParser.ConstraintNameContext,0)


        def FOREIGN_SYMBOL(self):
            return self.getToken(MySQLParser.FOREIGN_SYMBOL, 0)

        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def UNIQUE_SYMBOL(self):
            return self.getToken(MySQLParser.UNIQUE_SYMBOL, 0)

        def constraintEnforcement(self):
            return self.getTypedRuleContext(MySQLParser.ConstraintEnforcementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableConstraintDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableConstraintDef" ):
                listener.enterTableConstraintDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableConstraintDef" ):
                listener.exitTableConstraintDef(self)




    def tableConstraintDef(self):

        localctx = MySQLParser.TableConstraintDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_tableConstraintDef)
        self._la = 0 # Token type
        try:
            self.state = 6959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.INDEX_SYMBOL, MySQLParser.KEY_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6884
                localctx.type_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.INDEX_SYMBOL or _la==MySQLParser.KEY_SYMBOL):
                    localctx.type_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,867,self._ctx)
                if la_ == 1:
                    self.state = 6885
                    self.indexNameAndType()


                self.state = 6888
                self.keyListVariants()
                self.state = 6892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,868,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6889
                        self.indexOption() 
                    self.state = 6894
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,868,self._ctx)

                pass
            elif token in [MySQLParser.FULLTEXT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6895
                localctx.type_expression = self.match(MySQLParser.FULLTEXT_SYMBOL)
                self.state = 6897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,869,self._ctx)
                if la_ == 1:
                    self.state = 6896
                    self.keyOrIndex()


                self.state = 6900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,870,self._ctx)
                if la_ == 1:
                    self.state = 6899
                    self.indexName()


                self.state = 6902
                self.keyListVariants()
                self.state = 6906
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,871,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6903
                        self.fulltextIndexOption() 
                    self.state = 6908
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,871,self._ctx)

                pass
            elif token in [MySQLParser.SPATIAL_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6909
                localctx.type_expression = self.match(MySQLParser.SPATIAL_SYMBOL)
                self.state = 6911
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,872,self._ctx)
                if la_ == 1:
                    self.state = 6910
                    self.keyOrIndex()


                self.state = 6914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,873,self._ctx)
                if la_ == 1:
                    self.state = 6913
                    self.indexName()


                self.state = 6916
                self.keyListVariants()
                self.state = 6920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,874,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6917
                        self.spatialIndexOption() 
                    self.state = 6922
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,874,self._ctx)

                pass
            elif token in [MySQLParser.CHECK_SYMBOL, MySQLParser.CONSTRAINT_SYMBOL, MySQLParser.FOREIGN_SYMBOL, MySQLParser.PRIMARY_SYMBOL, MySQLParser.UNIQUE_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.CONSTRAINT_SYMBOL:
                    self.state = 6923
                    self.constraintName()


                self.state = 6957
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.PRIMARY_SYMBOL, MySQLParser.UNIQUE_SYMBOL]:
                    self.state = 6932
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySQLParser.PRIMARY_SYMBOL]:
                        self.state = 6926
                        localctx.type_expression = self.match(MySQLParser.PRIMARY_SYMBOL)
                        self.state = 6927
                        self.match(MySQLParser.KEY_SYMBOL)
                        pass
                    elif token in [MySQLParser.UNIQUE_SYMBOL]:
                        self.state = 6928
                        localctx.type_expression = self.match(MySQLParser.UNIQUE_SYMBOL)
                        self.state = 6930
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,876,self._ctx)
                        if la_ == 1:
                            self.state = 6929
                            self.keyOrIndex()


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6935
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
                    if la_ == 1:
                        self.state = 6934
                        self.indexNameAndType()


                    self.state = 6937
                    self.keyListVariants()
                    self.state = 6941
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,879,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 6938
                            self.indexOption() 
                        self.state = 6943
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,879,self._ctx)

                    pass
                elif token in [MySQLParser.FOREIGN_SYMBOL]:
                    self.state = 6944
                    localctx.type_expression = self.match(MySQLParser.FOREIGN_SYMBOL)
                    self.state = 6945
                    self.match(MySQLParser.KEY_SYMBOL)
                    self.state = 6947
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,880,self._ctx)
                    if la_ == 1:
                        self.state = 6946
                        self.indexName()


                    self.state = 6949
                    self.keyList()
                    self.state = 6950
                    self.references()
                    pass
                elif token in [MySQLParser.CHECK_SYMBOL]:
                    self.state = 6952
                    self.checkConstraint()
                    self.state = 6955
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,881,self._ctx)
                    if la_ == 1:
                        self.state = 6953
                        if not serverVersion >= 80017:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion >= 80017")
                        self.state = 6954
                        self.constraintEnforcement()


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_constraintName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintName" ):
                listener.enterConstraintName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintName" ):
                listener.exitConstraintName(self)




    def constraintName(self):

        localctx = MySQLParser.ConstraintNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_constraintName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6961
            self.match(MySQLParser.CONSTRAINT_SYMBOL)
            self.state = 6963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,884,self._ctx)
            if la_ == 1:
                self.state = 6962
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(MySQLParser.DataTypeContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def columnAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ColumnAttributeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ColumnAttributeContext,i)


        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def GENERATED_SYMBOL(self):
            return self.getToken(MySQLParser.GENERATED_SYMBOL, 0)

        def ALWAYS_SYMBOL(self):
            return self.getToken(MySQLParser.ALWAYS_SYMBOL, 0)

        def VIRTUAL_SYMBOL(self):
            return self.getToken(MySQLParser.VIRTUAL_SYMBOL, 0)

        def STORED_SYMBOL(self):
            return self.getToken(MySQLParser.STORED_SYMBOL, 0)

        def gcolAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.GcolAttributeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.GcolAttributeContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_fieldDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDefinition" ):
                listener.enterFieldDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDefinition" ):
                listener.exitFieldDefinition(self)




    def fieldDefinition(self):

        localctx = MySQLParser.FieldDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_fieldDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6965
            self.dataType()
            self.state = 7001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,892,self._ctx)
            if la_ == 1:
                self.state = 6969
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,885,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6966
                        self.columnAttribute() 
                    self.state = 6971
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,885,self._ctx)

                pass

            elif la_ == 2:
                self.state = 6972
                if not serverVersion >= 50707:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50707")
                self.state = 6974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.COLLATE_SYMBOL:
                    self.state = 6973
                    self.collate()


                self.state = 6978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.GENERATED_SYMBOL:
                    self.state = 6976
                    self.match(MySQLParser.GENERATED_SYMBOL)
                    self.state = 6977
                    self.match(MySQLParser.ALWAYS_SYMBOL)


                self.state = 6980
                self.match(MySQLParser.AS_SYMBOL)
                self.state = 6981
                self.exprWithParentheses()
                self.state = 6983
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,888,self._ctx)
                if la_ == 1:
                    self.state = 6982
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.STORED_SYMBOL or _la==MySQLParser.VIRTUAL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,891,self._ctx)
                if la_ == 1:
                    self.state = 6985
                    if not serverVersion < 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 80000")
                    self.state = 6989
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,889,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 6986
                            self.gcolAttribute() 
                        self.state = 6991
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,889,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 6992
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 6996
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,890,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 6993
                            self.columnAttribute() 
                        self.state = 6998
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,890,self._ctx)

                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def nullLiteral(self):
            return self.getTypedRuleContext(MySQLParser.NullLiteralContext,0)


        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def SECONDARY_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def signedLiteral(self):
            return self.getTypedRuleContext(MySQLParser.SignedLiteralContext,0)


        def NOW_SYMBOL(self):
            return self.getToken(MySQLParser.NOW_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def timeFunctionParameters(self):
            return self.getTypedRuleContext(MySQLParser.TimeFunctionParametersContext,0)


        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.VALUE_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SERIAL_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def UNIQUE_SYMBOL(self):
            return self.getToken(MySQLParser.UNIQUE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def columnFormat(self):
            return self.getTypedRuleContext(MySQLParser.ColumnFormatContext,0)


        def COLUMN_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0)

        def storageMedia(self):
            return self.getTypedRuleContext(MySQLParser.StorageMediaContext,0)


        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def SRID_SYMBOL(self):
            return self.getToken(MySQLParser.SRID_SYMBOL, 0)

        def checkConstraint(self):
            return self.getTypedRuleContext(MySQLParser.CheckConstraintContext,0)


        def constraintName(self):
            return self.getTypedRuleContext(MySQLParser.ConstraintNameContext,0)


        def constraintEnforcement(self):
            return self.getTypedRuleContext(MySQLParser.ConstraintEnforcementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_columnAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAttribute" ):
                listener.enterColumnAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAttribute" ):
                listener.exitColumnAttribute(self)




    def columnAttribute(self):

        localctx = MySQLParser.ColumnAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_columnAttribute)
        self._la = 0 # Token type
        try:
            self.state = 7055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,900,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NOT_SYMBOL:
                    self.state = 7003
                    self.match(MySQLParser.NOT_SYMBOL)


                self.state = 7006
                self.nullLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7007
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 7008
                self.match(MySQLParser.NOT_SYMBOL)
                self.state = 7009
                self.match(MySQLParser.SECONDARY_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7010
                localctx.value = self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 7018
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,895,self._ctx)
                if la_ == 1:
                    self.state = 7011
                    self.signedLiteral()
                    pass

                elif la_ == 2:
                    self.state = 7012
                    self.match(MySQLParser.NOW_SYMBOL)
                    self.state = 7014
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,894,self._ctx)
                    if la_ == 1:
                        self.state = 7013
                        self.timeFunctionParameters()


                    pass

                elif la_ == 3:
                    self.state = 7016
                    if not serverVersion >= 80013:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80013")
                    self.state = 7017
                    self.exprWithParentheses()
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7020
                localctx.value = self.match(MySQLParser.ON_SYMBOL)
                self.state = 7021
                self.match(MySQLParser.UPDATE_SYMBOL)
                self.state = 7022
                self.match(MySQLParser.NOW_SYMBOL)
                self.state = 7024
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,896,self._ctx)
                if la_ == 1:
                    self.state = 7023
                    self.timeFunctionParameters()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7026
                localctx.value = self.match(MySQLParser.AUTO_INCREMENT_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7027
                localctx.value = self.match(MySQLParser.SERIAL_SYMBOL)
                self.state = 7028
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 7029
                self.match(MySQLParser.VALUE_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.PRIMARY_SYMBOL:
                    self.state = 7030
                    self.match(MySQLParser.PRIMARY_SYMBOL)


                self.state = 7033
                localctx.value = self.match(MySQLParser.KEY_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7034
                localctx.value = self.match(MySQLParser.UNIQUE_SYMBOL)
                self.state = 7036
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,898,self._ctx)
                if la_ == 1:
                    self.state = 7035
                    self.match(MySQLParser.KEY_SYMBOL)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7038
                localctx.value = self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 7039
                self.textLiteral()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7040
                self.collate()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7041
                localctx.value = self.match(MySQLParser.COLUMN_FORMAT_SYMBOL)
                self.state = 7042
                self.columnFormat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7043
                localctx.value = self.match(MySQLParser.STORAGE_SYMBOL)
                self.state = 7044
                self.storageMedia()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7045
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 7046
                localctx.value = self.match(MySQLParser.SRID_SYMBOL)
                self.state = 7047
                self.real_ulonglong_number()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7048
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 7050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.CONSTRAINT_SYMBOL:
                    self.state = 7049
                    self.constraintName()


                self.state = 7052
                self.checkConstraint()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7053
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 7054
                self.constraintEnforcement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIXED_SYMBOL(self):
            return self.getToken(MySQLParser.FIXED_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(MySQLParser.DYNAMIC_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_columnFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnFormat" ):
                listener.enterColumnFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnFormat" ):
                listener.exitColumnFormat(self)




    def columnFormat(self):

        localctx = MySQLParser.ColumnFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_columnFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7057
            _la = self._input.LA(1)
            if not(_la==MySQLParser.DEFAULT_SYMBOL or _la==MySQLParser.DYNAMIC_SYMBOL or _la==MySQLParser.FIXED_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageMediaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISK_SYMBOL(self):
            return self.getToken(MySQLParser.DISK_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(MySQLParser.MEMORY_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_storageMedia

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageMedia" ):
                listener.enterStorageMedia(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageMedia" ):
                listener.exitStorageMedia(self)




    def storageMedia(self):

        localctx = MySQLParser.StorageMediaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_storageMedia)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7059
            _la = self._input.LA(1)
            if not(_la==MySQLParser.DEFAULT_SYMBOL or _la==MySQLParser.DISK_SYMBOL or _la==MySQLParser.MEMORY_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GcolAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNIQUE_SYMBOL(self):
            return self.getToken(MySQLParser.UNIQUE_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_gcolAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGcolAttribute" ):
                listener.enterGcolAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGcolAttribute" ):
                listener.exitGcolAttribute(self)




    def gcolAttribute(self):

        localctx = MySQLParser.GcolAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_gcolAttribute)
        self._la = 0 # Token type
        try:
            self.state = 7075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.UNIQUE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7061
                self.match(MySQLParser.UNIQUE_SYMBOL)
                self.state = 7063
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,901,self._ctx)
                if la_ == 1:
                    self.state = 7062
                    self.match(MySQLParser.KEY_SYMBOL)


                pass
            elif token in [MySQLParser.COMMENT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7065
                self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 7066
                self.textString()
                pass
            elif token in [MySQLParser.NOT_SYMBOL, MySQLParser.NULL_SYMBOL, MySQLParser.NOT2_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NOT_SYMBOL or _la==MySQLParser.NOT2_SYMBOL:
                    self.state = 7067
                    self.notRule()


                self.state = 7070
                self.match(MySQLParser.NULL_SYMBOL)
                pass
            elif token in [MySQLParser.KEY_SYMBOL, MySQLParser.PRIMARY_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.PRIMARY_SYMBOL:
                    self.state = 7071
                    self.match(MySQLParser.PRIMARY_SYMBOL)


                self.state = 7074
                self.match(MySQLParser.KEY_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferencesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.match = None # Token
            self.option = None # Token

        def REFERENCES_SYMBOL(self):
            return self.getToken(MySQLParser.REFERENCES_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListWithParenthesesContext,0)


        def MATCH_SYMBOL(self):
            return self.getToken(MySQLParser.MATCH_SYMBOL, 0)

        def ON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ON_SYMBOL)
            else:
                return self.getToken(MySQLParser.ON_SYMBOL, i)

        def deleteOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DeleteOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DeleteOptionContext,i)


        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MySQLParser.DELETE_SYMBOL, 0)

        def FULL_SYMBOL(self):
            return self.getToken(MySQLParser.FULL_SYMBOL, 0)

        def PARTIAL_SYMBOL(self):
            return self.getToken(MySQLParser.PARTIAL_SYMBOL, 0)

        def SIMPLE_SYMBOL(self):
            return self.getToken(MySQLParser.SIMPLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferences" ):
                listener.enterReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferences" ):
                listener.exitReferences(self)




    def references(self):

        localctx = MySQLParser.ReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7077
            self.match(MySQLParser.REFERENCES_SYMBOL)
            self.state = 7078
            self.tableRef()
            self.state = 7080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OPEN_PAR_SYMBOL:
                self.state = 7079
                self.identifierListWithParentheses()


            self.state = 7084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.MATCH_SYMBOL:
                self.state = 7082
                self.match(MySQLParser.MATCH_SYMBOL)
                self.state = 7083
                localctx.match = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.FULL_SYMBOL or _la==MySQLParser.PARTIAL_SYMBOL or _la==MySQLParser.SIMPLE_SYMBOL):
                    localctx.match = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,909,self._ctx)
            if la_ == 1:
                self.state = 7086
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 7087
                localctx.option = self.match(MySQLParser.UPDATE_SYMBOL)
                self.state = 7088
                self.deleteOption()
                self.state = 7092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ON_SYMBOL:
                    self.state = 7089
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 7090
                    self.match(MySQLParser.DELETE_SYMBOL)
                    self.state = 7091
                    self.deleteOption()



            elif la_ == 2:
                self.state = 7094
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 7095
                localctx.option = self.match(MySQLParser.DELETE_SYMBOL)
                self.state = 7096
                self.deleteOption()
                self.state = 7100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ON_SYMBOL:
                    self.state = 7097
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 7098
                    self.match(MySQLParser.UPDATE_SYMBOL)
                    self.state = 7099
                    self.deleteOption()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT_SYMBOL(self):
            return self.getToken(MySQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADE_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def nullLiteral(self):
            return self.getTypedRuleContext(MySQLParser.NullLiteralContext,0)


        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def ACTION_SYMBOL(self):
            return self.getToken(MySQLParser.ACTION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_deleteOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteOption" ):
                listener.enterDeleteOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteOption" ):
                listener.exitDeleteOption(self)




    def deleteOption(self):

        localctx = MySQLParser.DeleteOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_deleteOption)
        self._la = 0 # Token type
        try:
            self.state = 7109
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.CASCADE_SYMBOL, MySQLParser.RESTRICT_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7104
                _la = self._input.LA(1)
                if not(_la==MySQLParser.CASCADE_SYMBOL or _la==MySQLParser.RESTRICT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySQLParser.SET_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7105
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 7106
                self.nullLiteral()
                pass
            elif token in [MySQLParser.NO_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7107
                self.match(MySQLParser.NO_SYMBOL)
                self.state = 7108
                self.match(MySQLParser.ACTION_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def keyPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.KeyPartContext)
            else:
                return self.getTypedRuleContext(MySQLParser.KeyPartContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyList" ):
                listener.enterKeyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyList" ):
                listener.exitKeyList(self)




    def keyList(self):

        localctx = MySQLParser.KeyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_keyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7111
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7112
            self.keyPart()
            self.state = 7117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 7113
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 7114
                self.keyPart()
                self.state = 7119
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7120
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def fieldLength(self):
            return self.getTypedRuleContext(MySQLParser.FieldLengthContext,0)


        def direction(self):
            return self.getTypedRuleContext(MySQLParser.DirectionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_keyPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyPart" ):
                listener.enterKeyPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyPart" ):
                listener.exitKeyPart(self)




    def keyPart(self):

        localctx = MySQLParser.KeyPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_keyPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7122
            self.identifier()
            self.state = 7124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OPEN_PAR_SYMBOL:
                self.state = 7123
                self.fieldLength()


            self.state = 7127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ASC_SYMBOL or _la==MySQLParser.DESC_SYMBOL:
                self.state = 7126
                self.direction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyListWithExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def keyPartOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.KeyPartOrExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.KeyPartOrExpressionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyListWithExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyListWithExpression" ):
                listener.enterKeyListWithExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyListWithExpression" ):
                listener.exitKeyListWithExpression(self)




    def keyListWithExpression(self):

        localctx = MySQLParser.KeyListWithExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_keyListWithExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7129
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7130
            self.keyPartOrExpression()
            self.state = 7135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 7131
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 7132
                self.keyPartOrExpression()
                self.state = 7137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7138
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyPartOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyPart(self):
            return self.getTypedRuleContext(MySQLParser.KeyPartContext,0)


        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def direction(self):
            return self.getTypedRuleContext(MySQLParser.DirectionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_keyPartOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyPartOrExpression" ):
                listener.enterKeyPartOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyPartOrExpression" ):
                listener.exitKeyPartOrExpression(self)




    def keyPartOrExpression(self):

        localctx = MySQLParser.KeyPartOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_keyPartOrExpression)
        self._la = 0 # Token type
        try:
            self.state = 7145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,916,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7140
                self.keyPart()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7141
                self.exprWithParentheses()
                self.state = 7143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ASC_SYMBOL or _la==MySQLParser.DESC_SYMBOL:
                    self.state = 7142
                    self.direction()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyListVariantsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyListWithExpression(self):
            return self.getTypedRuleContext(MySQLParser.KeyListWithExpressionContext,0)


        def keyList(self):
            return self.getTypedRuleContext(MySQLParser.KeyListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_keyListVariants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyListVariants" ):
                listener.enterKeyListVariants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyListVariants" ):
                listener.exitKeyListVariants(self)




    def keyListVariants(self):

        localctx = MySQLParser.KeyListVariantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_keyListVariants)
        try:
            self.state = 7151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,917,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7147
                if not serverVersion >= 80013:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80013")
                self.state = 7148
                self.keyListWithExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7149
                if not serverVersion < 80013:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80013")
                self.state = 7150
                self.keyList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algorithm = None # Token

        def BTREE_SYMBOL(self):
            return self.getToken(MySQLParser.BTREE_SYMBOL, 0)

        def RTREE_SYMBOL(self):
            return self.getToken(MySQLParser.RTREE_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(MySQLParser.HASH_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)




    def indexType(self):

        localctx = MySQLParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7153
            localctx.algorithm = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySQLParser.BTREE_SYMBOL or _la==MySQLParser.HASH_SYMBOL or _la==MySQLParser.RTREE_SYMBOL):
                localctx.algorithm = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonIndexOption(self):
            return self.getTypedRuleContext(MySQLParser.CommonIndexOptionContext,0)


        def indexTypeClause(self):
            return self.getTypedRuleContext(MySQLParser.IndexTypeClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_indexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOption" ):
                listener.enterIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOption" ):
                listener.exitIndexOption(self)




    def indexOption(self):

        localctx = MySQLParser.IndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_indexOption)
        try:
            self.state = 7157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,918,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7155
                self.commonIndexOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7156
                self.indexTypeClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonIndexOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def visibility(self):
            return self.getTypedRuleContext(MySQLParser.VisibilityContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_commonIndexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonIndexOption" ):
                listener.enterCommonIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonIndexOption" ):
                listener.exitCommonIndexOption(self)




    def commonIndexOption(self):

        localctx = MySQLParser.CommonIndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_commonIndexOption)
        self._la = 0 # Token type
        try:
            self.state = 7168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,920,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7159
                self.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL)
                self.state = 7161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7160
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7163
                self.ulong_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7164
                self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 7165
                self.textLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7166
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 7167
                self.visibility()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.VISIBLE_SYMBOL, 0)

        def INVISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.INVISIBLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = MySQLParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7170
            _la = self._input.LA(1)
            if not(_la==MySQLParser.INVISIBLE_SYMBOL or _la==MySQLParser.VISIBLE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexType(self):
            return self.getTypedRuleContext(MySQLParser.IndexTypeContext,0)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MySQLParser.TYPE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexTypeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexTypeClause" ):
                listener.enterIndexTypeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexTypeClause" ):
                listener.exitIndexTypeClause(self)




    def indexTypeClause(self):

        localctx = MySQLParser.IndexTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_indexTypeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7172
            _la = self._input.LA(1)
            if not(_la==MySQLParser.TYPE_SYMBOL or _la==MySQLParser.USING_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7173
            self.indexType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FulltextIndexOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonIndexOption(self):
            return self.getTypedRuleContext(MySQLParser.CommonIndexOptionContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def PARSER_SYMBOL(self):
            return self.getToken(MySQLParser.PARSER_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_fulltextIndexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFulltextIndexOption" ):
                listener.enterFulltextIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFulltextIndexOption" ):
                listener.exitFulltextIndexOption(self)




    def fulltextIndexOption(self):

        localctx = MySQLParser.FulltextIndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_fulltextIndexOption)
        try:
            self.state = 7179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7175
                self.commonIndexOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7176
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 7177
                self.match(MySQLParser.PARSER_SYMBOL)
                self.state = 7178
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpatialIndexOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonIndexOption(self):
            return self.getTypedRuleContext(MySQLParser.CommonIndexOptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_spatialIndexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpatialIndexOption" ):
                listener.enterSpatialIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpatialIndexOption" ):
                listener.exitSpatialIndexOption(self)




    def spatialIndexOption(self):

        localctx = MySQLParser.SpatialIndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_spatialIndexOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7181
            self.commonIndexOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(MySQLParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(MySQLParser.EOF, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dataTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeDefinition" ):
                listener.enterDataTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeDefinition" ):
                listener.exitDataTypeDefinition(self)




    def dataTypeDefinition(self):

        localctx = MySQLParser.DataTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_dataTypeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7183
            self.dataType()
            self.state = 7184
            self.match(MySQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def INT_SYMBOL(self):
            return self.getToken(MySQLParser.INT_SYMBOL, 0)

        def TINYINT_SYMBOL(self):
            return self.getToken(MySQLParser.TINYINT_SYMBOL, 0)

        def SMALLINT_SYMBOL(self):
            return self.getToken(MySQLParser.SMALLINT_SYMBOL, 0)

        def MEDIUMINT_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUMINT_SYMBOL, 0)

        def BIGINT_SYMBOL(self):
            return self.getToken(MySQLParser.BIGINT_SYMBOL, 0)

        def fieldLength(self):
            return self.getTypedRuleContext(MySQLParser.FieldLengthContext,0)


        def fieldOptions(self):
            return self.getTypedRuleContext(MySQLParser.FieldOptionsContext,0)


        def REAL_SYMBOL(self):
            return self.getToken(MySQLParser.REAL_SYMBOL, 0)

        def DOUBLE_SYMBOL(self):
            return self.getToken(MySQLParser.DOUBLE_SYMBOL, 0)

        def precision(self):
            return self.getTypedRuleContext(MySQLParser.PrecisionContext,0)


        def PRECISION_SYMBOL(self):
            return self.getToken(MySQLParser.PRECISION_SYMBOL, 0)

        def FLOAT_SYMBOL(self):
            return self.getToken(MySQLParser.FLOAT_SYMBOL, 0)

        def DECIMAL_SYMBOL(self):
            return self.getToken(MySQLParser.DECIMAL_SYMBOL, 0)

        def NUMERIC_SYMBOL(self):
            return self.getToken(MySQLParser.NUMERIC_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(MySQLParser.FIXED_SYMBOL, 0)

        def floatOptions(self):
            return self.getTypedRuleContext(MySQLParser.FloatOptionsContext,0)


        def BIT_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_SYMBOL, 0)

        def BOOL_SYMBOL(self):
            return self.getToken(MySQLParser.BOOL_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(MySQLParser.BOOLEAN_SYMBOL, 0)

        def CHAR_SYMBOL(self):
            return self.getToken(MySQLParser.CHAR_SYMBOL, 0)

        def charsetWithOptBinary(self):
            return self.getTypedRuleContext(MySQLParser.CharsetWithOptBinaryContext,0)


        def nchar(self):
            return self.getTypedRuleContext(MySQLParser.NcharContext,0)


        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def VARYING_SYMBOL(self):
            return self.getToken(MySQLParser.VARYING_SYMBOL, 0)

        def VARCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.VARCHAR_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATIONAL_SYMBOL, 0)

        def NVARCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NVARCHAR_SYMBOL, 0)

        def NCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NCHAR_SYMBOL, 0)

        def VARBINARY_SYMBOL(self):
            return self.getToken(MySQLParser.VARBINARY_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def typeDatetimePrecision(self):
            return self.getTypedRuleContext(MySQLParser.TypeDatetimePrecisionContext,0)


        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(MySQLParser.DATETIME_SYMBOL, 0)

        def TINYBLOB_SYMBOL(self):
            return self.getToken(MySQLParser.TINYBLOB_SYMBOL, 0)

        def BLOB_SYMBOL(self):
            return self.getToken(MySQLParser.BLOB_SYMBOL, 0)

        def MEDIUMBLOB_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0)

        def LONGBLOB_SYMBOL(self):
            return self.getToken(MySQLParser.LONGBLOB_SYMBOL, 0)

        def LONG_SYMBOL(self):
            return self.getToken(MySQLParser.LONG_SYMBOL, 0)

        def TINYTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.TINYTEXT_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.TEXT_SYMBOL, 0)

        def MEDIUMTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0)

        def LONGTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.LONGTEXT_SYMBOL, 0)

        def stringList(self):
            return self.getTypedRuleContext(MySQLParser.StringListContext,0)


        def ENUM_SYMBOL(self):
            return self.getToken(MySQLParser.ENUM_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SERIAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_SYMBOL, 0)

        def GEOMETRY_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRY_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(MySQLParser.POINT_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0)

        def LINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.LINESTRING_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.POLYGON_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)




    def dataType(self):

        localctx = MySQLParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 7333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,955,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7186
                localctx.type_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.BIGINT_SYMBOL or _la==MySQLParser.INT_SYMBOL or _la==MySQLParser.MEDIUMINT_SYMBOL or _la==MySQLParser.SMALLINT_SYMBOL or _la==MySQLParser.TINYINT_SYMBOL):
                    localctx.type_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7188
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,922,self._ctx)
                if la_ == 1:
                    self.state = 7187
                    self.fieldLength()


                self.state = 7191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,923,self._ctx)
                if la_ == 1:
                    self.state = 7190
                    self.fieldOptions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7198
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.REAL_SYMBOL]:
                    self.state = 7193
                    localctx.type_expression = self.match(MySQLParser.REAL_SYMBOL)
                    pass
                elif token in [MySQLParser.DOUBLE_SYMBOL]:
                    self.state = 7194
                    localctx.type_expression = self.match(MySQLParser.DOUBLE_SYMBOL)
                    self.state = 7196
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,924,self._ctx)
                    if la_ == 1:
                        self.state = 7195
                        self.match(MySQLParser.PRECISION_SYMBOL)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,926,self._ctx)
                if la_ == 1:
                    self.state = 7200
                    self.precision()


                self.state = 7204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,927,self._ctx)
                if la_ == 1:
                    self.state = 7203
                    self.fieldOptions()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7206
                localctx.type_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.DECIMAL_SYMBOL or _la==MySQLParser.FIXED_SYMBOL or _la==MySQLParser.FLOAT_SYMBOL or _la==MySQLParser.NUMERIC_SYMBOL):
                    localctx.type_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7208
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,928,self._ctx)
                if la_ == 1:
                    self.state = 7207
                    self.floatOptions()


                self.state = 7211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,929,self._ctx)
                if la_ == 1:
                    self.state = 7210
                    self.fieldOptions()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7213
                localctx.type_expression = self.match(MySQLParser.BIT_SYMBOL)
                self.state = 7215
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,930,self._ctx)
                if la_ == 1:
                    self.state = 7214
                    self.fieldLength()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7217
                localctx.type_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.BOOLEAN_SYMBOL or _la==MySQLParser.BOOL_SYMBOL):
                    localctx.type_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7218
                localctx.type_expression = self.match(MySQLParser.CHAR_SYMBOL)
                self.state = 7220
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,931,self._ctx)
                if la_ == 1:
                    self.state = 7219
                    self.fieldLength()


                self.state = 7223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,932,self._ctx)
                if la_ == 1:
                    self.state = 7222
                    self.charsetWithOptBinary()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7225
                self.nchar()
                self.state = 7227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,933,self._ctx)
                if la_ == 1:
                    self.state = 7226
                    self.fieldLength()


                self.state = 7230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,934,self._ctx)
                if la_ == 1:
                    self.state = 7229
                    self.match(MySQLParser.BINARY_SYMBOL)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7232
                localctx.type_expression = self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 7234
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,935,self._ctx)
                if la_ == 1:
                    self.state = 7233
                    self.fieldLength()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7239
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.CHAR_SYMBOL]:
                    self.state = 7236
                    localctx.type_expression = self.match(MySQLParser.CHAR_SYMBOL)
                    self.state = 7237
                    self.match(MySQLParser.VARYING_SYMBOL)
                    pass
                elif token in [MySQLParser.VARCHAR_SYMBOL]:
                    self.state = 7238
                    localctx.type_expression = self.match(MySQLParser.VARCHAR_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7241
                self.fieldLength()
                self.state = 7243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,937,self._ctx)
                if la_ == 1:
                    self.state = 7242
                    self.charsetWithOptBinary()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,938,self._ctx)
                if la_ == 1:
                    self.state = 7245
                    localctx.type_expression = self.match(MySQLParser.NATIONAL_SYMBOL)
                    self.state = 7246
                    self.match(MySQLParser.VARCHAR_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 7247
                    localctx.type_expression = self.match(MySQLParser.NVARCHAR_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 7248
                    localctx.type_expression = self.match(MySQLParser.NCHAR_SYMBOL)
                    self.state = 7249
                    self.match(MySQLParser.VARCHAR_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 7250
                    localctx.type_expression = self.match(MySQLParser.NATIONAL_SYMBOL)
                    self.state = 7251
                    self.match(MySQLParser.CHAR_SYMBOL)
                    self.state = 7252
                    self.match(MySQLParser.VARYING_SYMBOL)
                    pass

                elif la_ == 5:
                    self.state = 7253
                    localctx.type_expression = self.match(MySQLParser.NCHAR_SYMBOL)
                    self.state = 7254
                    self.match(MySQLParser.VARYING_SYMBOL)
                    pass


                self.state = 7257
                self.fieldLength()
                self.state = 7259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,939,self._ctx)
                if la_ == 1:
                    self.state = 7258
                    self.match(MySQLParser.BINARY_SYMBOL)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7261
                localctx.type_expression = self.match(MySQLParser.VARBINARY_SYMBOL)
                self.state = 7262
                self.fieldLength()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7263
                localctx.type_expression = self.match(MySQLParser.YEAR_SYMBOL)
                self.state = 7265
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,940,self._ctx)
                if la_ == 1:
                    self.state = 7264
                    self.fieldLength()


                self.state = 7268
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,941,self._ctx)
                if la_ == 1:
                    self.state = 7267
                    self.fieldOptions()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7270
                localctx.type_expression = self.match(MySQLParser.DATE_SYMBOL)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7271
                localctx.type_expression = self.match(MySQLParser.TIME_SYMBOL)
                self.state = 7273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,942,self._ctx)
                if la_ == 1:
                    self.state = 7272
                    self.typeDatetimePrecision()


                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7275
                localctx.type_expression = self.match(MySQLParser.TIMESTAMP_SYMBOL)
                self.state = 7277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,943,self._ctx)
                if la_ == 1:
                    self.state = 7276
                    self.typeDatetimePrecision()


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 7279
                localctx.type_expression = self.match(MySQLParser.DATETIME_SYMBOL)
                self.state = 7281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,944,self._ctx)
                if la_ == 1:
                    self.state = 7280
                    self.typeDatetimePrecision()


                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 7283
                localctx.type_expression = self.match(MySQLParser.TINYBLOB_SYMBOL)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 7284
                localctx.type_expression = self.match(MySQLParser.BLOB_SYMBOL)
                self.state = 7286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,945,self._ctx)
                if la_ == 1:
                    self.state = 7285
                    self.fieldLength()


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 7288
                localctx.type_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.LONGBLOB_SYMBOL or _la==MySQLParser.MEDIUMBLOB_SYMBOL):
                    localctx.type_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 7289
                localctx.type_expression = self.match(MySQLParser.LONG_SYMBOL)
                self.state = 7290
                self.match(MySQLParser.VARBINARY_SYMBOL)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7291
                localctx.type_expression = self.match(MySQLParser.LONG_SYMBOL)
                self.state = 7295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,946,self._ctx)
                if la_ == 1:
                    self.state = 7292
                    self.match(MySQLParser.CHAR_SYMBOL)
                    self.state = 7293
                    self.match(MySQLParser.VARYING_SYMBOL)

                elif la_ == 2:
                    self.state = 7294
                    self.match(MySQLParser.VARCHAR_SYMBOL)


                self.state = 7298
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,947,self._ctx)
                if la_ == 1:
                    self.state = 7297
                    self.charsetWithOptBinary()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7300
                localctx.type_expression = self.match(MySQLParser.TINYTEXT_SYMBOL)
                self.state = 7302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,948,self._ctx)
                if la_ == 1:
                    self.state = 7301
                    self.charsetWithOptBinary()


                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7304
                localctx.type_expression = self.match(MySQLParser.TEXT_SYMBOL)
                self.state = 7306
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,949,self._ctx)
                if la_ == 1:
                    self.state = 7305
                    self.fieldLength()


                self.state = 7309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,950,self._ctx)
                if la_ == 1:
                    self.state = 7308
                    self.charsetWithOptBinary()


                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7311
                localctx.type_expression = self.match(MySQLParser.MEDIUMTEXT_SYMBOL)
                self.state = 7313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,951,self._ctx)
                if la_ == 1:
                    self.state = 7312
                    self.charsetWithOptBinary()


                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 7315
                localctx.type_expression = self.match(MySQLParser.LONGTEXT_SYMBOL)
                self.state = 7317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,952,self._ctx)
                if la_ == 1:
                    self.state = 7316
                    self.charsetWithOptBinary()


                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 7319
                localctx.type_expression = self.match(MySQLParser.ENUM_SYMBOL)
                self.state = 7320
                self.stringList()
                self.state = 7322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,953,self._ctx)
                if la_ == 1:
                    self.state = 7321
                    self.charsetWithOptBinary()


                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 7324
                localctx.type_expression = self.match(MySQLParser.SET_SYMBOL)
                self.state = 7325
                self.stringList()
                self.state = 7327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,954,self._ctx)
                if la_ == 1:
                    self.state = 7326
                    self.charsetWithOptBinary()


                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 7329
                localctx.type_expression = self.match(MySQLParser.SERIAL_SYMBOL)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 7330
                if not serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50708")
                self.state = 7331
                localctx.type_expression = self.match(MySQLParser.JSON_SYMBOL)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 7332
                localctx.type_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.GEOMETRYCOLLECTION_SYMBOL or _la==MySQLParser.GEOMETRY_SYMBOL or _la==MySQLParser.LINESTRING_SYMBOL or ((((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & ((1 << (MySQLParser.MULTILINESTRING_SYMBOL - 351)) | (1 << (MySQLParser.MULTIPOINT_SYMBOL - 351)) | (1 << (MySQLParser.MULTIPOLYGON_SYMBOL - 351)) | (1 << (MySQLParser.POINT_SYMBOL - 351)) | (1 << (MySQLParser.POLYGON_SYMBOL - 351)))) != 0)):
                    localctx.type_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NcharContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def NCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NCHAR_SYMBOL, 0)

        def CHAR_SYMBOL(self):
            return self.getToken(MySQLParser.CHAR_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATIONAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_nchar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNchar" ):
                listener.enterNchar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNchar" ):
                listener.exitNchar(self)




    def nchar(self):

        localctx = MySQLParser.NcharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_nchar)
        try:
            self.state = 7338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.NCHAR_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7335
                localctx.type_expression = self.match(MySQLParser.NCHAR_SYMBOL)
                pass
            elif token in [MySQLParser.NATIONAL_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7336
                localctx.type_expression = self.match(MySQLParser.NATIONAL_SYMBOL)
                self.state = 7337
                self.match(MySQLParser.CHAR_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RealTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def REAL_SYMBOL(self):
            return self.getToken(MySQLParser.REAL_SYMBOL, 0)

        def DOUBLE_SYMBOL(self):
            return self.getToken(MySQLParser.DOUBLE_SYMBOL, 0)

        def PRECISION_SYMBOL(self):
            return self.getToken(MySQLParser.PRECISION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_realType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealType" ):
                listener.enterRealType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealType" ):
                listener.exitRealType(self)




    def realType(self):

        localctx = MySQLParser.RealTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_realType)
        try:
            self.state = 7345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.REAL_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7340
                localctx.type_expression = self.match(MySQLParser.REAL_SYMBOL)
                pass
            elif token in [MySQLParser.DOUBLE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7341
                localctx.type_expression = self.match(MySQLParser.DOUBLE_SYMBOL)
                self.state = 7343
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,957,self._ctx)
                if la_ == 1:
                    self.state = 7342
                    self.match(MySQLParser.PRECISION_SYMBOL)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldLengthContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def DECIMAL_NUMBER(self):
            return self.getToken(MySQLParser.DECIMAL_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_fieldLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldLength" ):
                listener.enterFieldLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldLength" ):
                listener.exitFieldLength(self)




    def fieldLength(self):

        localctx = MySQLParser.FieldLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_fieldLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7347
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,959,self._ctx)
            if la_ == 1:
                self.state = 7348
                self.real_ulonglong_number()
                pass

            elif la_ == 2:
                self.state = 7349
                self.match(MySQLParser.DECIMAL_NUMBER)
                pass


            self.state = 7352
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNED_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.SIGNED_SYMBOL)
            else:
                return self.getToken(MySQLParser.SIGNED_SYMBOL, i)

        def UNSIGNED_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.UNSIGNED_SYMBOL)
            else:
                return self.getToken(MySQLParser.UNSIGNED_SYMBOL, i)

        def ZEROFILL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ZEROFILL_SYMBOL)
            else:
                return self.getToken(MySQLParser.ZEROFILL_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_fieldOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldOptions" ):
                listener.enterFieldOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldOptions" ):
                listener.exitFieldOptions(self)




    def fieldOptions(self):

        localctx = MySQLParser.FieldOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_fieldOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7355 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7354
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.SIGNED_SYMBOL or _la==MySQLParser.UNSIGNED_SYMBOL or _la==MySQLParser.ZEROFILL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 7357 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,960,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetWithOptBinaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ascii(self):
            return self.getTypedRuleContext(MySQLParser.AsciiContext,0)


        def unicode_data(self):
            return self.getTypedRuleContext(MySQLParser.Unicode_dataContext,0)


        def BYTE_SYMBOL(self):
            return self.getToken(MySQLParser.BYTE_SYMBOL, 0)

        def charset(self):
            return self.getTypedRuleContext(MySQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_charsetWithOptBinary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetWithOptBinary" ):
                listener.enterCharsetWithOptBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetWithOptBinary" ):
                listener.exitCharsetWithOptBinary(self)




    def charsetWithOptBinary(self):

        localctx = MySQLParser.CharsetWithOptBinaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_charsetWithOptBinary)
        try:
            self.state = 7373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,963,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7359
                self.ascii()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7360
                self.unicode_data()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7361
                self.match(MySQLParser.BYTE_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7362
                self.charset()
                self.state = 7363
                self.charsetName()
                self.state = 7365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,961,self._ctx)
                if la_ == 1:
                    self.state = 7364
                    self.match(MySQLParser.BINARY_SYMBOL)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7367
                self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 7371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,962,self._ctx)
                if la_ == 1:
                    self.state = 7368
                    self.charset()
                    self.state = 7369
                    self.charsetName()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsciiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYMBOL(self):
            return self.getToken(MySQLParser.ASCII_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ascii

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAscii" ):
                listener.enterAscii(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAscii" ):
                listener.exitAscii(self)




    def ascii(self):

        localctx = MySQLParser.AsciiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_ascii)
        try:
            self.state = 7381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.ASCII_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7375
                self.match(MySQLParser.ASCII_SYMBOL)
                self.state = 7377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,964,self._ctx)
                if la_ == 1:
                    self.state = 7376
                    self.match(MySQLParser.BINARY_SYMBOL)


                pass
            elif token in [MySQLParser.BINARY_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7379
                self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 7380
                self.match(MySQLParser.ASCII_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unicode_dataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNICODE_SYMBOL(self):
            return self.getToken(MySQLParser.UNICODE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_unicode_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicode_data" ):
                listener.enterUnicode_data(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicode_data" ):
                listener.exitUnicode_data(self)




    def unicode_data(self):

        localctx = MySQLParser.Unicode_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_unicode_data)
        try:
            self.state = 7389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.UNICODE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7383
                self.match(MySQLParser.UNICODE_SYMBOL)
                self.state = 7385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,966,self._ctx)
                if la_ == 1:
                    self.state = 7384
                    self.match(MySQLParser.BINARY_SYMBOL)


                pass
            elif token in [MySQLParser.BINARY_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7387
                self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 7388
                self.match(MySQLParser.UNICODE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsNumCodepointsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_wsNumCodepoints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsNumCodepoints" ):
                listener.enterWsNumCodepoints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsNumCodepoints" ):
                listener.exitWsNumCodepoints(self)




    def wsNumCodepoints(self):

        localctx = MySQLParser.WsNumCodepointsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_wsNumCodepoints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7391
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7392
            self.real_ulong_number()
            self.state = 7393
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDatetimePrecisionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_typeDatetimePrecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDatetimePrecision" ):
                listener.enterTypeDatetimePrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDatetimePrecision" ):
                listener.exitTypeDatetimePrecision(self)




    def typeDatetimePrecision(self):

        localctx = MySQLParser.TypeDatetimePrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_typeDatetimePrecision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7395
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7396
            self.match(MySQLParser.INT_NUMBER)
            self.state = 7397
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_charsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetName" ):
                listener.enterCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetName" ):
                listener.exitCharsetName(self)




    def charsetName(self):

        localctx = MySQLParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_charsetName)
        try:
            self.state = 7403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,968,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7399
                self.textOrIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7400
                self.match(MySQLParser.BINARY_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7401
                if not serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80011")
                self.state = 7402
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollationNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_collationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollationName" ):
                listener.enterCollationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollationName" ):
                listener.exitCollationName(self)




    def collationName(self):

        localctx = MySQLParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_collationName)
        try:
            self.state = 7410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,969,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7405
                self.textOrIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7406
                if not serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80011")
                self.state = 7407
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7408
                if not serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80018")
                self.state = 7409
                self.match(MySQLParser.BINARY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateTableOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateTableOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_createTableOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableOptions" ):
                listener.enterCreateTableOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableOptions" ):
                listener.exitCreateTableOptions(self)




    def createTableOptions(self):

        localctx = MySQLParser.CreateTableOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_createTableOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7412
            self.createTableOption()
            self.state = 7419
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,971,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7414
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,970,self._ctx)
                    if la_ == 1:
                        self.state = 7413
                        self.match(MySQLParser.COMMA_SYMBOL)


                    self.state = 7416
                    self.createTableOption() 
                self.state = 7421
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,971,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableOptionsSpaceSeparatedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateTableOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateTableOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_createTableOptionsSpaceSeparated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableOptionsSpaceSeparated" ):
                listener.enterCreateTableOptionsSpaceSeparated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableOptionsSpaceSeparated" ):
                listener.exitCreateTableOptionsSpaceSeparated(self)




    def createTableOptionsSpaceSeparated(self):

        localctx = MySQLParser.CreateTableOptionsSpaceSeparatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_createTableOptionsSpaceSeparated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7423 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7422
                    self.createTableOption()

                else:
                    raise NoViableAltException(self)
                self.state = 7425 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,972,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token
            self.format_expression = None # Token
            self.method = None # Token

        def engineRef(self):
            return self.getTypedRuleContext(MySQLParser.EngineRefContext,0)


        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def SECONDARY_ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def MAX_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def AVG_ROW_LENGTH_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def COMPRESSION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSION_SYMBOL, 0)

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def ternaryOption(self):
            return self.getTypedRuleContext(MySQLParser.TernaryOptionContext,0)


        def PACK_KEYS_SYMBOL(self):
            return self.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0)

        def STATS_AUTO_RECALC_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0)

        def STATS_PERSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0)

        def STATS_SAMPLE_PAGES_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0)

        def CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.CHECKSUM_SYMBOL, 0)

        def TABLE_CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0)

        def DELAY_KEY_WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0)

        def ROW_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(MySQLParser.DYNAMIC_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(MySQLParser.FIXED_SYMBOL, 0)

        def COMPRESSED_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSED_SYMBOL, 0)

        def REDUNDANT_SYMBOL(self):
            return self.getToken(MySQLParser.REDUNDANT_SYMBOL, 0)

        def COMPACT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPACT_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def tableRefList(self):
            return self.getTypedRuleContext(MySQLParser.TableRefListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def UNION_SYMBOL(self):
            return self.getToken(MySQLParser.UNION_SYMBOL, 0)

        def defaultCharset(self):
            return self.getTypedRuleContext(MySQLParser.DefaultCharsetContext,0)


        def defaultCollation(self):
            return self.getTypedRuleContext(MySQLParser.DefaultCollationContext,0)


        def INSERT_METHOD_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def DISK_SYMBOL(self):
            return self.getToken(MySQLParser.DISK_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(MySQLParser.MEMORY_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(MySQLParser.CONNECTION_SYMBOL, 0)

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_createTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableOption" ):
                listener.enterCreateTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableOption" ):
                listener.exitCreateTableOption(self)




    def createTableOption(self):

        localctx = MySQLParser.CreateTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_createTableOption)
        self._la = 0 # Token type
        try:
            self.state = 7556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,997,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7427
                localctx.option = self.match(MySQLParser.ENGINE_SYMBOL)
                self.state = 7429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,973,self._ctx)
                if la_ == 1:
                    self.state = 7428
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7431
                self.engineRef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7432
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 7433
                localctx.option = self.match(MySQLParser.SECONDARY_ENGINE_SYMBOL)
                self.state = 7435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
                if la_ == 1:
                    self.state = 7434
                    self.equal()


                self.state = 7439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,975,self._ctx)
                if la_ == 1:
                    self.state = 7437
                    self.match(MySQLParser.NULL_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 7438
                    self.textOrIdentifier()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7441
                localctx.option = self.match(MySQLParser.MAX_ROWS_SYMBOL)
                self.state = 7443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7442
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7445
                self.ulonglong_number()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7446
                localctx.option = self.match(MySQLParser.MIN_ROWS_SYMBOL)
                self.state = 7448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7447
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7450
                self.ulonglong_number()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7451
                localctx.option = self.match(MySQLParser.AVG_ROW_LENGTH_SYMBOL)
                self.state = 7453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7452
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7455
                self.ulong_number()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7456
                localctx.option = self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 7458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,979,self._ctx)
                if la_ == 1:
                    self.state = 7457
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7460
                self.textStringLiteral()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7461
                localctx.option = self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 7463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,980,self._ctx)
                if la_ == 1:
                    self.state = 7462
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7465
                self.textStringLiteral()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7466
                if not serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50708")
                self.state = 7467
                localctx.option = self.match(MySQLParser.COMPRESSION_SYMBOL)
                self.state = 7469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,981,self._ctx)
                if la_ == 1:
                    self.state = 7468
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7471
                self.textString()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7472
                if not serverVersion >= 50711:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50711")
                self.state = 7473
                localctx.option = self.match(MySQLParser.ENCRYPTION_SYMBOL)
                self.state = 7475
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,982,self._ctx)
                if la_ == 1:
                    self.state = 7474
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7477
                self.textString()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7478
                localctx.option = self.match(MySQLParser.AUTO_INCREMENT_SYMBOL)
                self.state = 7480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7479
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7482
                self.ulonglong_number()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7483
                localctx.option = self.match(MySQLParser.PACK_KEYS_SYMBOL)
                self.state = 7485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7484
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7487
                self.ternaryOption()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7488
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 544)) & ~0x3f) == 0 and ((1 << (_la - 544)) & ((1 << (MySQLParser.STATS_AUTO_RECALC_SYMBOL - 544)) | (1 << (MySQLParser.STATS_PERSISTENT_SYMBOL - 544)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 544)))) != 0)):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7489
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7492
                self.ternaryOption()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7493
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.CHECKSUM_SYMBOL or _la==MySQLParser.TABLE_CHECKSUM_SYMBOL):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7494
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7497
                self.ulong_number()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7498
                localctx.option = self.match(MySQLParser.DELAY_KEY_WRITE_SYMBOL)
                self.state = 7500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7499
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7502
                self.ulong_number()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7503
                localctx.option = self.match(MySQLParser.ROW_FORMAT_SYMBOL)
                self.state = 7505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7504
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7507
                localctx.format_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (MySQLParser.COMPACT_SYMBOL - 78)) | (1 << (MySQLParser.COMPRESSED_SYMBOL - 78)) | (1 << (MySQLParser.DEFAULT_SYMBOL - 78)))) != 0) or _la==MySQLParser.DYNAMIC_SYMBOL or _la==MySQLParser.FIXED_SYMBOL or _la==MySQLParser.REDUNDANT_SYMBOL):
                    localctx.format_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 7508
                localctx.option = self.match(MySQLParser.UNION_SYMBOL)
                self.state = 7510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7509
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7512
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7513
                self.tableRefList()
                self.state = 7514
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 7516
                self.defaultCharset()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 7517
                self.defaultCollation()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 7518
                localctx.option = self.match(MySQLParser.INSERT_METHOD_SYMBOL)
                self.state = 7520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7519
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7522
                localctx.method = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.FIRST_SYMBOL or _la==MySQLParser.LAST_SYMBOL or _la==MySQLParser.NO_SYMBOL):
                    localctx.method = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 7523
                localctx.option = self.match(MySQLParser.DATA_SYMBOL)
                self.state = 7524
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 7526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,991,self._ctx)
                if la_ == 1:
                    self.state = 7525
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7528
                self.textString()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7529
                localctx.option = self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 7530
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 7532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,992,self._ctx)
                if la_ == 1:
                    self.state = 7531
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7534
                self.textString()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7535
                localctx.option = self.match(MySQLParser.TABLESPACE_SYMBOL)
                self.state = 7541
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,994,self._ctx)
                if la_ == 1:
                    self.state = 7536
                    if not serverVersion >= 50707:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 50707")
                    self.state = 7538
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,993,self._ctx)
                    if la_ == 1:
                        self.state = 7537
                        self.match(MySQLParser.EQUAL_OPERATOR)


                    pass

                elif la_ == 2:
                    pass


                self.state = 7543
                self.identifier()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7544
                localctx.option = self.match(MySQLParser.STORAGE_SYMBOL)
                self.state = 7545
                _la = self._input.LA(1)
                if not(_la==MySQLParser.DISK_SYMBOL or _la==MySQLParser.MEMORY_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7546
                localctx.option = self.match(MySQLParser.CONNECTION_SYMBOL)
                self.state = 7548
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,995,self._ctx)
                if la_ == 1:
                    self.state = 7547
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7550
                self.textString()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 7551
                localctx.option = self.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL)
                self.state = 7553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7552
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7555
                self.ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TernaryOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ternaryOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryOption" ):
                listener.enterTernaryOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryOption" ):
                listener.exitTernaryOption(self)




    def ternaryOption(self):

        localctx = MySQLParser.TernaryOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_ternaryOption)
        try:
            self.state = 7560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.INT_NUMBER, MySQLParser.LONG_NUMBER, MySQLParser.ULONGLONG_NUMBER, MySQLParser.HEX_NUMBER, MySQLParser.DECIMAL_NUMBER, MySQLParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7558
                self.ulong_number()
                pass
            elif token in [MySQLParser.DEFAULT_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7559
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultCollationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATE_SYMBOL, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySQLParser.CollationNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_defaultCollation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultCollation" ):
                listener.enterDefaultCollation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultCollation" ):
                listener.exitDefaultCollation(self)




    def defaultCollation(self):

        localctx = MySQLParser.DefaultCollationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_defaultCollation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DEFAULT_SYMBOL:
                self.state = 7562
                self.match(MySQLParser.DEFAULT_SYMBOL)


            self.state = 7565
            self.match(MySQLParser.COLLATE_SYMBOL)
            self.state = 7567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1000,self._ctx)
            if la_ == 1:
                self.state = 7566
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 7569
            self.collationName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultEncryptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_defaultEncryption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultEncryption" ):
                listener.enterDefaultEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultEncryption" ):
                listener.exitDefaultEncryption(self)




    def defaultEncryption(self):

        localctx = MySQLParser.DefaultEncryptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_defaultEncryption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DEFAULT_SYMBOL:
                self.state = 7571
                self.match(MySQLParser.DEFAULT_SYMBOL)


            self.state = 7574
            self.match(MySQLParser.ENCRYPTION_SYMBOL)
            self.state = 7576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1002,self._ctx)
            if la_ == 1:
                self.state = 7575
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 7578
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultCharsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charset(self):
            return self.getTypedRuleContext(MySQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_defaultCharset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultCharset" ):
                listener.enterDefaultCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultCharset" ):
                listener.exitDefaultCharset(self)




    def defaultCharset(self):

        localctx = MySQLParser.DefaultCharsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_defaultCharset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.DEFAULT_SYMBOL:
                self.state = 7580
                self.match(MySQLParser.DEFAULT_SYMBOL)


            self.state = 7583
            self.charset()
            self.state = 7585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1004,self._ctx)
            if la_ == 1:
                self.state = 7584
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 7587
            self.charsetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def partitionTypeDef(self):
            return self.getTypedRuleContext(MySQLParser.PartitionTypeDefContext,0)


        def PARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def subPartitions(self):
            return self.getTypedRuleContext(MySQLParser.SubPartitionsContext,0)


        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySQLParser.PartitionDefinitionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_partitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionClause" ):
                listener.enterPartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionClause" ):
                listener.exitPartitionClause(self)




    def partitionClause(self):

        localctx = MySQLParser.PartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_partitionClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7589
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 7590
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 7591
            self.partitionTypeDef()
            self.state = 7594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1005,self._ctx)
            if la_ == 1:
                self.state = 7592
                self.match(MySQLParser.PARTITIONS_SYMBOL)
                self.state = 7593
                self.real_ulong_number()


            self.state = 7597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1006,self._ctx)
            if la_ == 1:
                self.state = 7596
                self.subPartitions()


            self.state = 7600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1007,self._ctx)
            if la_ == 1:
                self.state = 7599
                self.partitionDefinitions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionTypeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySQLParser.RULE_partitionTypeDef

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionDefRangeListContext(PartitionTypeDefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PartitionTypeDefContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RANGE_SYMBOL(self):
            return self.getToken(MySQLParser.RANGE_SYMBOL, 0)
        def LIST_SYMBOL(self):
            return self.getToken(MySQLParser.LIST_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)
        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefRangeList" ):
                listener.enterPartitionDefRangeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefRangeList" ):
                listener.exitPartitionDefRangeList(self)


    class PartitionDefKeyContext(PartitionTypeDefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PartitionTypeDefContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def LINEAR_SYMBOL(self):
            return self.getToken(MySQLParser.LINEAR_SYMBOL, 0)
        def partitionKeyAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.PartitionKeyAlgorithmContext,0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefKey" ):
                listener.enterPartitionDefKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefKey" ):
                listener.exitPartitionDefKey(self)


    class PartitionDefHashContext(PartitionTypeDefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PartitionTypeDefContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH_SYMBOL(self):
            return self.getToken(MySQLParser.HASH_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def LINEAR_SYMBOL(self):
            return self.getToken(MySQLParser.LINEAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefHash" ):
                listener.enterPartitionDefHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefHash" ):
                listener.exitPartitionDefHash(self)



    def partitionTypeDef(self):

        localctx = MySQLParser.PartitionTypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_partitionTypeDef)
        self._la = 0 # Token type
        try:
            self.state = 7635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1014,self._ctx)
            if la_ == 1:
                localctx = MySQLParser.PartitionDefKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 7603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LINEAR_SYMBOL:
                    self.state = 7602
                    self.match(MySQLParser.LINEAR_SYMBOL)


                self.state = 7605
                self.match(MySQLParser.KEY_SYMBOL)
                self.state = 7607
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1009,self._ctx)
                if la_ == 1:
                    self.state = 7606
                    self.partitionKeyAlgorithm()


                self.state = 7609
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1010,self._ctx)
                if la_ == 1:
                    self.state = 7610
                    self.identifierList()


                self.state = 7613
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                localctx = MySQLParser.PartitionDefHashContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 7615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.LINEAR_SYMBOL:
                    self.state = 7614
                    self.match(MySQLParser.LINEAR_SYMBOL)


                self.state = 7617
                self.match(MySQLParser.HASH_SYMBOL)
                self.state = 7618
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7619
                self.bitExpr(0)
                self.state = 7620
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 3:
                localctx = MySQLParser.PartitionDefRangeListContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 7622
                _la = self._input.LA(1)
                if not(_la==MySQLParser.LIST_SYMBOL or _la==MySQLParser.RANGE_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7633
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.OPEN_PAR_SYMBOL]:
                    self.state = 7623
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 7624
                    self.bitExpr(0)
                    self.state = 7625
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass
                elif token in [MySQLParser.COLUMNS_SYMBOL]:
                    self.state = 7627
                    self.match(MySQLParser.COLUMNS_SYMBOL)
                    self.state = 7628
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 7630
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1012,self._ctx)
                    if la_ == 1:
                        self.state = 7629
                        self.identifierList()


                    self.state = 7632
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubPartitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(MySQLParser.HASH_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListWithParenthesesContext,0)


        def LINEAR_SYMBOL(self):
            return self.getToken(MySQLParser.LINEAR_SYMBOL, 0)

        def SUBPARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def partitionKeyAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.PartitionKeyAlgorithmContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_subPartitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitions" ):
                listener.enterSubPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitions" ):
                listener.exitSubPartitions(self)




    def subPartitions(self):

        localctx = MySQLParser.SubPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_subPartitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7637
            self.match(MySQLParser.SUBPARTITION_SYMBOL)
            self.state = 7638
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 7640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.LINEAR_SYMBOL:
                self.state = 7639
                self.match(MySQLParser.LINEAR_SYMBOL)


            self.state = 7652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.HASH_SYMBOL]:
                self.state = 7642
                self.match(MySQLParser.HASH_SYMBOL)
                self.state = 7643
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7644
                self.bitExpr(0)
                self.state = 7645
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [MySQLParser.KEY_SYMBOL]:
                self.state = 7647
                self.match(MySQLParser.KEY_SYMBOL)
                self.state = 7649
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1016,self._ctx)
                if la_ == 1:
                    self.state = 7648
                    self.partitionKeyAlgorithm()


                self.state = 7651
                self.identifierListWithParentheses()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1018,self._ctx)
            if la_ == 1:
                self.state = 7654
                self.match(MySQLParser.SUBPARTITIONS_SYMBOL)
                self.state = 7655
                self.real_ulong_number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionKeyAlgorithmContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_partitionKeyAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionKeyAlgorithm" ):
                listener.enterPartitionKeyAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionKeyAlgorithm" ):
                listener.exitPartitionKeyAlgorithm(self)




    def partitionKeyAlgorithm(self):

        localctx = MySQLParser.PartitionKeyAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_partitionKeyAlgorithm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7658
            if not serverVersion >= 50700:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50700")
            self.state = 7659
            self.match(MySQLParser.ALGORITHM_SYMBOL)
            self.state = 7660
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 7661
            self.real_ulong_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PartitionDefinitionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinitions" ):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinitions" ):
                listener.exitPartitionDefinitions(self)




    def partitionDefinitions(self):

        localctx = MySQLParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7663
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7664
            self.partitionDefinition()
            self.state = 7669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 7665
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 7666
                self.partitionDefinition()
                self.state = 7671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7672
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def VALUES_SYMBOL(self):
            return self.getToken(MySQLParser.VALUES_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySQLParser.LESS_SYMBOL, 0)

        def THAN_SYMBOL(self):
            return self.getToken(MySQLParser.THAN_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def partitionValuesIn(self):
            return self.getTypedRuleContext(MySQLParser.PartitionValuesInContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PartitionOptionContext,i)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SubpartitionDefinitionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def partitionValueItemListParen(self):
            return self.getTypedRuleContext(MySQLParser.PartitionValueItemListParenContext,0)


        def MAXVALUE_SYMBOL(self):
            return self.getToken(MySQLParser.MAXVALUE_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinition" ):
                listener.enterPartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinition" ):
                listener.exitPartitionDefinition(self)




    def partitionDefinition(self):

        localctx = MySQLParser.PartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_partitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7674
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 7675
            self.identifier()
            self.state = 7686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1021,self._ctx)
            if la_ == 1:
                self.state = 7676
                self.match(MySQLParser.VALUES_SYMBOL)
                self.state = 7677
                self.match(MySQLParser.LESS_SYMBOL)
                self.state = 7678
                self.match(MySQLParser.THAN_SYMBOL)
                self.state = 7681
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.OPEN_PAR_SYMBOL]:
                    self.state = 7679
                    self.partitionValueItemListParen()
                    pass
                elif token in [MySQLParser.MAXVALUE_SYMBOL]:
                    self.state = 7680
                    self.match(MySQLParser.MAXVALUE_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)


            elif la_ == 2:
                self.state = 7683
                self.match(MySQLParser.VALUES_SYMBOL)
                self.state = 7684
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 7685
                self.partitionValuesIn()


            self.state = 7691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMENT_SYMBOL or _la==MySQLParser.DATA_SYMBOL or _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.INDEX_SYMBOL or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (MySQLParser.MAX_ROWS_SYMBOL - 323)) | (1 << (MySQLParser.MIN_ROWS_SYMBOL - 323)) | (1 << (MySQLParser.NODEGROUP_SYMBOL - 323)))) != 0) or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.TABLESPACE_SYMBOL:
                self.state = 7688
                self.partitionOption()
                self.state = 7693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.OPEN_PAR_SYMBOL:
                self.state = 7694
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7695
                self.subpartitionDefinition()
                self.state = 7700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 7696
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7697
                    self.subpartitionDefinition()
                    self.state = 7702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7703
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValuesInContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionValueItemListParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PartitionValueItemListParenContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PartitionValueItemListParenContext,i)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionValuesIn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionValuesIn" ):
                listener.enterPartitionValuesIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionValuesIn" ):
                listener.exitPartitionValuesIn(self)




    def partitionValuesIn(self):

        localctx = MySQLParser.PartitionValuesInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_partitionValuesIn)
        self._la = 0 # Token type
        try:
            self.state = 7719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1026,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7707
                self.partitionValueItemListParen()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7708
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7709
                self.partitionValueItemListParen()
                self.state = 7714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA_SYMBOL:
                    self.state = 7710
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7711
                    self.partitionValueItemListParen()
                    self.state = 7716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7717
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def engineRef(self):
            return self.getTypedRuleContext(MySQLParser.EngineRefContext,0)


        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def NODEGROUP_SYMBOL(self):
            return self.getToken(MySQLParser.NODEGROUP_SYMBOL, 0)

        def MAX_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOption" ):
                listener.enterPartitionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOption" ):
                listener.exitPartitionOption(self)




    def partitionOption(self):

        localctx = MySQLParser.PartitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_partitionOption)
        self._la = 0 # Token type
        try:
            self.state = 7755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.TABLESPACE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7721
                localctx.option = self.match(MySQLParser.TABLESPACE_SYMBOL)
                self.state = 7723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1027,self._ctx)
                if la_ == 1:
                    self.state = 7722
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7725
                self.identifier()
                pass
            elif token in [MySQLParser.ENGINE_SYMBOL, MySQLParser.STORAGE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.STORAGE_SYMBOL:
                    self.state = 7726
                    self.match(MySQLParser.STORAGE_SYMBOL)


                self.state = 7729
                localctx.option = self.match(MySQLParser.ENGINE_SYMBOL)
                self.state = 7731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1029,self._ctx)
                if la_ == 1:
                    self.state = 7730
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7733
                self.engineRef()
                pass
            elif token in [MySQLParser.NODEGROUP_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7734
                localctx.option = self.match(MySQLParser.NODEGROUP_SYMBOL)
                self.state = 7736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7735
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7738
                self.real_ulong_number()
                pass
            elif token in [MySQLParser.MAX_ROWS_SYMBOL, MySQLParser.MIN_ROWS_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7739
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.MAX_ROWS_SYMBOL or _la==MySQLParser.MIN_ROWS_SYMBOL):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.EQUAL_OPERATOR:
                    self.state = 7740
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7743
                self.real_ulong_number()
                pass
            elif token in [MySQLParser.DATA_SYMBOL, MySQLParser.INDEX_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7744
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.DATA_SYMBOL or _la==MySQLParser.INDEX_SYMBOL):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7745
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 7747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1032,self._ctx)
                if la_ == 1:
                    self.state = 7746
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7749
                self.textLiteral()
                pass
            elif token in [MySQLParser.COMMENT_SYMBOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7750
                localctx.option = self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 7752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1033,self._ctx)
                if la_ == 1:
                    self.state = 7751
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7754
                self.textLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PartitionOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_subpartitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartitionDefinition" ):
                listener.enterSubpartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartitionDefinition" ):
                listener.exitSubpartitionDefinition(self)




    def subpartitionDefinition(self):

        localctx = MySQLParser.SubpartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_subpartitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7757
            self.match(MySQLParser.SUBPARTITION_SYMBOL)
            self.state = 7758
            self.textOrIdentifier()
            self.state = 7762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMENT_SYMBOL or _la==MySQLParser.DATA_SYMBOL or _la==MySQLParser.ENGINE_SYMBOL or _la==MySQLParser.INDEX_SYMBOL or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (MySQLParser.MAX_ROWS_SYMBOL - 323)) | (1 << (MySQLParser.MIN_ROWS_SYMBOL - 323)) | (1 << (MySQLParser.NODEGROUP_SYMBOL - 323)))) != 0) or _la==MySQLParser.STORAGE_SYMBOL or _la==MySQLParser.TABLESPACE_SYMBOL:
                self.state = 7759
                self.partitionOption()
                self.state = 7764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValueItemListParenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def partitionValueItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PartitionValueItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PartitionValueItemContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionValueItemListParen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionValueItemListParen" ):
                listener.enterPartitionValueItemListParen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionValueItemListParen" ):
                listener.exitPartitionValueItemListParen(self)




    def partitionValueItemListParen(self):

        localctx = MySQLParser.PartitionValueItemListParenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_partitionValueItemListParen)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7765
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7766
            self.partitionValueItem()
            self.state = 7771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 7767
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 7768
                self.partitionValueItem()
                self.state = 7773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7774
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValueItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)


        def MAXVALUE_SYMBOL(self):
            return self.getToken(MySQLParser.MAXVALUE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionValueItem" ):
                listener.enterPartitionValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionValueItem" ):
                listener.exitPartitionValueItem(self)




    def partitionValueItem(self):

        localctx = MySQLParser.PartitionValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_partitionValueItem)
        try:
            self.state = 7778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1037,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7776
                self.bitExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7777
                self.match(MySQLParser.MAXVALUE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinerClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINER_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINER_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_definerClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinerClause" ):
                listener.enterDefinerClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinerClause" ):
                listener.exitDefinerClause(self)




    def definerClause(self):

        localctx = MySQLParser.DefinerClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_definerClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7780
            self.match(MySQLParser.DEFINER_SYMBOL)
            self.state = 7781
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 7782
            self.user()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_SYMBOL(self):
            return self.getToken(MySQLParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MySQLParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = MySQLParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7784
            self.match(MySQLParser.IF_SYMBOL)
            self.state = 7785
            self.match(MySQLParser.EXISTS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_SYMBOL(self):
            return self.getToken(MySQLParser.IF_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def EXISTS_SYMBOL(self):
            return self.getToken(MySQLParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = MySQLParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7787
            self.match(MySQLParser.IF_SYMBOL)
            self.state = 7788
            self.notRule()
            self.state = 7789
            self.match(MySQLParser.EXISTS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_expression = None # Token

        def functionParameter(self):
            return self.getTypedRuleContext(MySQLParser.FunctionParameterContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def OUT_SYMBOL(self):
            return self.getToken(MySQLParser.OUT_SYMBOL, 0)

        def INOUT_SYMBOL(self):
            return self.getToken(MySQLParser.INOUT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_procedureParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameter" ):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameter" ):
                listener.exitProcedureParameter(self)




    def procedureParameter(self):

        localctx = MySQLParser.ProcedureParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_procedureParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1038,self._ctx)
            if la_ == 1:
                self.state = 7791
                localctx.type_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySQLParser.INOUT_SYMBOL or _la==MySQLParser.IN_SYMBOL or _la==MySQLParser.OUT_SYMBOL):
                    localctx.type_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7794
            self.functionParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterName(self):
            return self.getTypedRuleContext(MySQLParser.ParameterNameContext,0)


        def typeWithOptCollate(self):
            return self.getTypedRuleContext(MySQLParser.TypeWithOptCollateContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)




    def functionParameter(self):

        localctx = MySQLParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_functionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7796
            self.parameterName()
            self.state = 7797
            self.typeWithOptCollate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATE_SYMBOL, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySQLParser.CollationNameContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_collate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollate" ):
                listener.enterCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollate" ):
                listener.exitCollate(self)




    def collate(self):

        localctx = MySQLParser.CollateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_collate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7799
            self.match(MySQLParser.COLLATE_SYMBOL)
            self.state = 7800
            self.collationName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWithOptCollateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(MySQLParser.DataTypeContext,0)


        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_typeWithOptCollate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWithOptCollate" ):
                listener.enterTypeWithOptCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWithOptCollate" ):
                listener.exitTypeWithOptCollate(self)




    def typeWithOptCollate(self):

        localctx = MySQLParser.TypeWithOptCollateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_typeWithOptCollate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7802
            self.dataType()
            self.state = 7804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1039,self._ctx)
            if la_ == 1:
                self.state = 7803
                self.collate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaIdentifierPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def schemaRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SchemaRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SchemaRefContext,i)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_schemaIdentifierPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaIdentifierPair" ):
                listener.enterSchemaIdentifierPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaIdentifierPair" ):
                listener.exitSchemaIdentifierPair(self)




    def schemaIdentifierPair(self):

        localctx = MySQLParser.SchemaIdentifierPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_schemaIdentifierPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7806
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7807
            self.schemaRef()
            self.state = 7808
            self.match(MySQLParser.COMMA_SYMBOL)
            self.state = 7809
            self.schemaRef()
            self.state = 7810
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRefListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def viewRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ViewRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ViewRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_viewRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRefList" ):
                listener.enterViewRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRefList" ):
                listener.exitViewRefList(self)




    def viewRefList(self):

        localctx = MySQLParser.ViewRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_viewRefList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7812
            self.viewRef()
            self.state = 7817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 7813
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 7814
                self.viewRef()
                self.state = 7819
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def updateElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UpdateElementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UpdateElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_updateList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateList" ):
                listener.enterUpdateList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateList" ):
                listener.exitUpdateList(self)




    def updateList(self):

        localctx = MySQLParser.UpdateListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_updateList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7820
            self.updateElement()
            self.state = 7825
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1041,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7821
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7822
                    self.updateElement() 
                self.state = 7827
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1041,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRef(self):
            return self.getTypedRuleContext(MySQLParser.ColumnRefContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_updateElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateElement" ):
                listener.enterUpdateElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateElement" ):
                listener.exitUpdateElement(self)




    def updateElement(self):

        localctx = MySQLParser.UpdateElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_updateElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7828
            self.columnRef()
            self.state = 7829
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 7832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1042,self._ctx)
            if la_ == 1:
                self.state = 7830
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 7831
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charset(self):
            return self.getTypedRuleContext(MySQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_charsetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetClause" ):
                listener.enterCharsetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetClause" ):
                listener.exitCharsetClause(self)




    def charsetClause(self):

        localctx = MySQLParser.CharsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_charsetClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7834
            self.charset()
            self.state = 7835
            self.charsetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldsClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)

        def fieldTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FieldTermContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FieldTermContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_fieldsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldsClause" ):
                listener.enterFieldsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldsClause" ):
                listener.exitFieldsClause(self)




    def fieldsClause(self):

        localctx = MySQLParser.FieldsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_fieldsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7837
            self.match(MySQLParser.COLUMNS_SYMBOL)
            self.state = 7839 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7838
                    self.fieldTerm()

                else:
                    raise NoViableAltException(self)
                self.state = 7841 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1043,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TERMINATED_SYMBOL(self):
            return self.getToken(MySQLParser.TERMINATED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def ENCLOSED_SYMBOL(self):
            return self.getToken(MySQLParser.ENCLOSED_SYMBOL, 0)

        def OPTIONALLY_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONALLY_SYMBOL, 0)

        def ESCAPED_SYMBOL(self):
            return self.getToken(MySQLParser.ESCAPED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_fieldTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldTerm" ):
                listener.enterFieldTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldTerm" ):
                listener.exitFieldTerm(self)




    def fieldTerm(self):

        localctx = MySQLParser.FieldTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_fieldTerm)
        self._la = 0 # Token type
        try:
            self.state = 7855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.TERMINATED_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7843
                self.match(MySQLParser.TERMINATED_SYMBOL)
                self.state = 7844
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 7845
                self.textString()
                pass
            elif token in [MySQLParser.ENCLOSED_SYMBOL, MySQLParser.OPTIONALLY_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.OPTIONALLY_SYMBOL:
                    self.state = 7846
                    self.match(MySQLParser.OPTIONALLY_SYMBOL)


                self.state = 7849
                self.match(MySQLParser.ENCLOSED_SYMBOL)
                self.state = 7850
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 7851
                self.textString()
                pass
            elif token in [MySQLParser.ESCAPED_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7852
                self.match(MySQLParser.ESCAPED_SYMBOL)
                self.state = 7853
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 7854
                self.textString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinesClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINES_SYMBOL(self):
            return self.getToken(MySQLParser.LINES_SYMBOL, 0)

        def lineTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.LineTermContext)
            else:
                return self.getTypedRuleContext(MySQLParser.LineTermContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_linesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinesClause" ):
                listener.enterLinesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinesClause" ):
                listener.exitLinesClause(self)




    def linesClause(self):

        localctx = MySQLParser.LinesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_linesClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7857
            self.match(MySQLParser.LINES_SYMBOL)
            self.state = 7859 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7858
                    self.lineTerm()

                else:
                    raise NoViableAltException(self)
                self.state = 7861 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1046,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def TERMINATED_SYMBOL(self):
            return self.getToken(MySQLParser.TERMINATED_SYMBOL, 0)

        def STARTING_SYMBOL(self):
            return self.getToken(MySQLParser.STARTING_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lineTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineTerm" ):
                listener.enterLineTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineTerm" ):
                listener.exitLineTerm(self)




    def lineTerm(self):

        localctx = MySQLParser.LineTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_lineTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7863
            _la = self._input.LA(1)
            if not(_la==MySQLParser.STARTING_SYMBOL or _la==MySQLParser.TERMINATED_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7864
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 7865
            self.textString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UserContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UserContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_userList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserList" ):
                listener.enterUserList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserList" ):
                listener.exitUserList(self)




    def userList(self):

        localctx = MySQLParser.UserListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_userList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7867
            self.user()
            self.state = 7872
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1047,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7868
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7869
                    self.user() 
                self.state = 7874
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1047,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createUserEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateUserEntryContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateUserEntryContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_createUserList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserList" ):
                listener.enterCreateUserList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserList" ):
                listener.exitCreateUserList(self)




    def createUserList(self):

        localctx = MySQLParser.CreateUserListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_createUserList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7875
            self.createUserEntry()
            self.state = 7880
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1048,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7876
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7877
                    self.createUserEntry() 
                self.state = 7882
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1048,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUserEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterUserEntryContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterUserEntryContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterUserList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserList" ):
                listener.enterAlterUserList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserList" ):
                listener.exitAlterUserList(self)




    def alterUserList(self):

        localctx = MySQLParser.AlterUserListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_alterUserList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7883
            self.alterUserEntry()
            self.state = 7888
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1049,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7884
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7885
                    self.alterUserEntry() 
                self.state = 7890
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1049,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserEntryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def RANDOM_SYMBOL(self):
            return self.getToken(MySQLParser.RANDOM_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def textStringHash(self):
            return self.getTypedRuleContext(MySQLParser.TextStringHashContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createUserEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserEntry" ):
                listener.enterCreateUserEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserEntry" ):
                listener.exitCreateUserEntry(self)




    def createUserEntry(self):

        localctx = MySQLParser.CreateUserEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_createUserEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7891
            self.user()
            self.state = 7918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1054,self._ctx)
            if la_ == 1:
                self.state = 7892
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 7916
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1053,self._ctx)
                if la_ == 1:
                    self.state = 7893
                    self.match(MySQLParser.BY_SYMBOL)
                    self.state = 7896
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1050,self._ctx)
                    if la_ == 1:
                        self.state = 7894
                        if not serverVersion < 80011:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion < 80011")
                        self.state = 7895
                        self.match(MySQLParser.PASSWORD_SYMBOL)


                    self.state = 7898
                    self.textString()
                    pass

                elif la_ == 2:
                    self.state = 7899
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 7900
                    self.textOrIdentifier()
                    self.state = 7906
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
                    if la_ == 1:
                        self.state = 7901
                        self.match(MySQLParser.AS_SYMBOL)
                        self.state = 7902
                        self.textStringHash()

                    elif la_ == 2:
                        self.state = 7903
                        if not serverVersion >= 50706:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion >= 50706")
                        self.state = 7904
                        self.match(MySQLParser.BY_SYMBOL)
                        self.state = 7905
                        self.textString()


                    pass

                elif la_ == 3:
                    self.state = 7908
                    if not serverVersion >= 80018:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80018")
                    self.state = 7911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.WITH_SYMBOL:
                        self.state = 7909
                        self.match(MySQLParser.WITH_SYMBOL)
                        self.state = 7910
                        self.textOrIdentifier()


                    self.state = 7913
                    self.match(MySQLParser.BY_SYMBOL)
                    self.state = 7914
                    self.match(MySQLParser.RANDOM_SYMBOL)
                    self.state = 7915
                    self.match(MySQLParser.PASSWORD_SYMBOL)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserEntryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringContext,i)


        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def discardOldPassword(self):
            return self.getTypedRuleContext(MySQLParser.DiscardOldPasswordContext,0)


        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def retainCurrentPassword(self):
            return self.getTypedRuleContext(MySQLParser.RetainCurrentPasswordContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def textStringHash(self):
            return self.getTypedRuleContext(MySQLParser.TextStringHashContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterUserEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserEntry" ):
                listener.enterAlterUserEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserEntry" ):
                listener.exitAlterUserEntry(self)




    def alterUserEntry(self):

        localctx = MySQLParser.AlterUserEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_alterUserEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7920
            self.user()
            self.state = 7949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1062,self._ctx)
            if la_ == 1:
                self.state = 7921
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 7944
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1060,self._ctx)
                if la_ == 1:
                    self.state = 7924
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.WITH_SYMBOL:
                        self.state = 7922
                        self.match(MySQLParser.WITH_SYMBOL)
                        self.state = 7923
                        self.textOrIdentifier()


                    self.state = 7926
                    self.match(MySQLParser.BY_SYMBOL)
                    self.state = 7927
                    self.textString()
                    self.state = 7930
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1056,self._ctx)
                    if la_ == 1:
                        self.state = 7928
                        self.match(MySQLParser.REPLACE_SYMBOL)
                        self.state = 7929
                        self.textString()


                    self.state = 7933
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1057,self._ctx)
                    if la_ == 1:
                        self.state = 7932
                        self.retainCurrentPassword()



                elif la_ == 2:
                    self.state = 7935
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 7936
                    self.textOrIdentifier()
                    self.state = 7942
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1059,self._ctx)
                    if la_ == 1:
                        self.state = 7937
                        self.match(MySQLParser.AS_SYMBOL)
                        self.state = 7938
                        self.textStringHash()
                        self.state = 7940
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1058,self._ctx)
                        if la_ == 1:
                            self.state = 7939
                            self.retainCurrentPassword()






                pass

            elif la_ == 2:
                self.state = 7947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1061,self._ctx)
                if la_ == 1:
                    self.state = 7946
                    self.discardOldPassword()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetainCurrentPasswordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETAIN_SYMBOL(self):
            return self.getToken(MySQLParser.RETAIN_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_retainCurrentPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetainCurrentPassword" ):
                listener.enterRetainCurrentPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetainCurrentPassword" ):
                listener.exitRetainCurrentPassword(self)




    def retainCurrentPassword(self):

        localctx = MySQLParser.RetainCurrentPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_retainCurrentPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7951
            self.match(MySQLParser.RETAIN_SYMBOL)
            self.state = 7952
            self.match(MySQLParser.CURRENT_SYMBOL)
            self.state = 7953
            self.match(MySQLParser.PASSWORD_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardOldPasswordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD_SYMBOL(self):
            return self.getToken(MySQLParser.DISCARD_SYMBOL, 0)

        def OLD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_discardOldPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardOldPassword" ):
                listener.enterDiscardOldPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardOldPassword" ):
                listener.exitDiscardOldPassword(self)




    def discardOldPassword(self):

        localctx = MySQLParser.DiscardOldPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_discardOldPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7955
            self.match(MySQLParser.DISCARD_SYMBOL)
            self.state = 7956
            self.match(MySQLParser.OLD_SYMBOL)
            self.state = 7957
            self.match(MySQLParser.PASSWORD_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplacePasswordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_replacePassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplacePassword" ):
                listener.enterReplacePassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplacePassword" ):
                listener.exitReplacePassword(self)




    def replacePassword(self):

        localctx = MySQLParser.ReplacePasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_replacePassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7959
            self.match(MySQLParser.REPLACE_SYMBOL)
            self.state = 7960
            self.textString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserIdentifierOrTextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextOrIdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,i)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SIGN_SYMBOL, 0)

        def AT_TEXT_SUFFIX(self):
            return self.getToken(MySQLParser.AT_TEXT_SUFFIX, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_userIdentifierOrText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserIdentifierOrText" ):
                listener.enterUserIdentifierOrText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserIdentifierOrText" ):
                listener.exitUserIdentifierOrText(self)




    def userIdentifierOrText(self):

        localctx = MySQLParser.UserIdentifierOrTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_userIdentifierOrText)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7962
            self.textOrIdentifier()
            self.state = 7966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1063,self._ctx)
            if la_ == 1:
                self.state = 7963
                self.match(MySQLParser.AT_SIGN_SYMBOL)
                self.state = 7964
                self.textOrIdentifier()

            elif la_ == 2:
                self.state = 7965
                self.match(MySQLParser.AT_TEXT_SUFFIX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userIdentifierOrText(self):
            return self.getTypedRuleContext(MySQLParser.UserIdentifierOrTextContext,0)


        def CURRENT_USER_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0)

        def parentheses(self):
            return self.getTypedRuleContext(MySQLParser.ParenthesesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser" ):
                listener.enterUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser" ):
                listener.exitUser(self)




    def user(self):

        localctx = MySQLParser.UserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_user)
        try:
            self.state = 7973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1065,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7968
                self.userIdentifierOrText()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7969
                self.match(MySQLParser.CURRENT_USER_SYMBOL)
                self.state = 7971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1064,self._ctx)
                if la_ == 1:
                    self.state = 7970
                    self.parentheses()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE_SYMBOL(self):
            return self.getToken(MySQLParser.LIKE_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_likeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeClause" ):
                listener.enterLikeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeClause" ):
                listener.exitLikeClause(self)




    def likeClause(self):

        localctx = MySQLParser.LikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_likeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7975
            self.match(MySQLParser.LIKE_SYMBOL)
            self.state = 7976
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeOrWhereContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def likeClause(self):
            return self.getTypedRuleContext(MySQLParser.LikeClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_likeOrWhere

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeOrWhere" ):
                listener.enterLikeOrWhere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeOrWhere" ):
                listener.exitLikeOrWhere(self)




    def likeOrWhere(self):

        localctx = MySQLParser.LikeOrWhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_likeOrWhere)
        try:
            self.state = 7980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.LIKE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7978
                self.likeClause()
                pass
            elif token in [MySQLParser.WHERE_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7979
                self.whereClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnlineOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE_SYMBOL(self):
            return self.getToken(MySQLParser.ONLINE_SYMBOL, 0)

        def OFFLINE_SYMBOL(self):
            return self.getToken(MySQLParser.OFFLINE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_onlineOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnlineOption" ):
                listener.enterOnlineOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnlineOption" ):
                listener.exitOnlineOption(self)




    def onlineOption(self):

        localctx = MySQLParser.OnlineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_onlineOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7982
            _la = self._input.LA(1)
            if not(_la==MySQLParser.OFFLINE_SYMBOL or _la==MySQLParser.ONLINE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoWriteToBinLogContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def NO_WRITE_TO_BINLOG_SYMBOL(self):
            return self.getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_noWriteToBinLog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoWriteToBinLog" ):
                listener.enterNoWriteToBinLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoWriteToBinLog" ):
                listener.exitNoWriteToBinLog(self)




    def noWriteToBinLog(self):

        localctx = MySQLParser.NoWriteToBinLogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_noWriteToBinLog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7984
            _la = self._input.LA(1)
            if not(_la==MySQLParser.LOCAL_SYMBOL or _la==MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsePartitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListWithParenthesesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_usePartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsePartition" ):
                listener.enterUsePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsePartition" ):
                listener.exitUsePartition(self)




    def usePartition(self):

        localctx = MySQLParser.UsePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_usePartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7986
            if not serverVersion >= 50602:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50602")
            self.state = 7987
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 7988
            self.identifierListWithParentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_fieldIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldIdentifier" ):
                listener.enterFieldIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldIdentifier" ):
                listener.exitFieldIdentifier(self)




    def fieldIdentifier(self):

        localctx = MySQLParser.FieldIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_fieldIdentifier)
        try:
            self.state = 7995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1068,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7990
                self.dotIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7991
                self.qualifiedIdentifier()
                self.state = 7993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1067,self._ctx)
                if la_ == 1:
                    self.state = 7992
                    self.dotIdentifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def fieldIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.FieldIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_columnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnName" ):
                listener.enterColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnName" ):
                listener.exitColumnName(self)




    def columnName(self):

        localctx = MySQLParser.ColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_columnName)
        try:
            self.state = 8001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1069,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7997
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 7998
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7999
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 8000
                self.fieldIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnInternalRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_columnInternalRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnInternalRef" ):
                listener.enterColumnInternalRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnInternalRef" ):
                listener.exitColumnInternalRef(self)




    def columnInternalRef(self):

        localctx = MySQLParser.ColumnInternalRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_columnInternalRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8003
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnInternalRefListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def columnInternalRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ColumnInternalRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ColumnInternalRefContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_columnInternalRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnInternalRefList" ):
                listener.enterColumnInternalRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnInternalRefList" ):
                listener.exitColumnInternalRefList(self)




    def columnInternalRefList(self):

        localctx = MySQLParser.ColumnInternalRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_columnInternalRefList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8005
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 8006
            self.columnInternalRef()
            self.state = 8011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 8007
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 8008
                self.columnInternalRef()
                self.state = 8013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8014
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.FieldIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_columnRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRef" ):
                listener.enterColumnRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRef" ):
                listener.exitColumnRef(self)




    def columnRef(self):

        localctx = MySQLParser.ColumnRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_columnRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8016
            self.fieldIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRef(self):
            return self.getTypedRuleContext(MySQLParser.ColumnRefContext,0)


        def tableWild(self):
            return self.getTypedRuleContext(MySQLParser.TableWildContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insertIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIdentifier" ):
                listener.enterInsertIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIdentifier" ):
                listener.exitInsertIdentifier(self)




    def insertIdentifier(self):

        localctx = MySQLParser.InsertIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_insertIdentifier)
        try:
            self.state = 8020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1071,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8018
                self.columnRef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8019
                self.tableWild()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_indexName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexName" ):
                listener.enterIndexName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexName" ):
                listener.exitIndexName(self)




    def indexName(self):

        localctx = MySQLParser.IndexNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_indexName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8022
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.FieldIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_indexRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexRef" ):
                listener.enterIndexRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexRef" ):
                listener.exitIndexRef(self)




    def indexRef(self):

        localctx = MySQLParser.IndexRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_indexRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8024
            self.fieldIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableWildContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IdentifierContext,i)


        def DOT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.DOT_SYMBOL)
            else:
                return self.getToken(MySQLParser.DOT_SYMBOL, i)

        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableWild

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableWild" ):
                listener.enterTableWild(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableWild" ):
                listener.exitTableWild(self)




    def tableWild(self):

        localctx = MySQLParser.TableWildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_tableWild)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8026
            self.identifier()
            self.state = 8027
            self.match(MySQLParser.DOT_SYMBOL)
            self.state = 8031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1072,self._ctx)
            if la_ == 1:
                self.state = 8028
                self.identifier()
                self.state = 8029
                self.match(MySQLParser.DOT_SYMBOL)


            self.state = 8033
            self.match(MySQLParser.MULT_OPERATOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MySQLParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8035
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_schemaRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRef" ):
                listener.enterSchemaRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRef" ):
                listener.exitSchemaRef(self)




    def schemaRef(self):

        localctx = MySQLParser.SchemaRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_schemaRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8037
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MySQLParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8039
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_procedureRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRef" ):
                listener.enterProcedureRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRef" ):
                listener.exitProcedureRef(self)




    def procedureRef(self):

        localctx = MySQLParser.ProcedureRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_procedureRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8041
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)




    def functionName(self):

        localctx = MySQLParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_functionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8043
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_functionRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionRef" ):
                listener.enterFunctionRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionRef" ):
                listener.exitFunctionRef(self)




    def functionRef(self):

        localctx = MySQLParser.FunctionRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_functionRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8045
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_triggerName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerName" ):
                listener.enterTriggerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerName" ):
                listener.exitTriggerName(self)




    def triggerName(self):

        localctx = MySQLParser.TriggerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_triggerName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8047
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_triggerRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerRef" ):
                listener.enterTriggerRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerRef" ):
                listener.exitTriggerRef(self)




    def triggerRef(self):

        localctx = MySQLParser.TriggerRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_triggerRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8049
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MySQLParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_viewName)
        try:
            self.state = 8053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1073,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8051
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8052
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_viewRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRef" ):
                listener.enterViewRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRef" ):
                listener.exitViewRef(self)




    def viewRef(self):

        localctx = MySQLParser.ViewRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_viewRef)
        try:
            self.state = 8057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1074,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8055
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8056
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tablespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceName" ):
                listener.enterTablespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceName" ):
                listener.exitTablespaceName(self)




    def tablespaceName(self):

        localctx = MySQLParser.TablespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_tablespaceName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8059
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tablespaceRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceRef" ):
                listener.enterTablespaceRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceRef" ):
                listener.exitTablespaceRef(self)




    def tablespaceRef(self):

        localctx = MySQLParser.TablespaceRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_tablespaceRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8061
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_logfileGroupName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupName" ):
                listener.enterLogfileGroupName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupName" ):
                listener.exitLogfileGroupName(self)




    def logfileGroupName(self):

        localctx = MySQLParser.LogfileGroupNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_logfileGroupName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8063
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_logfileGroupRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupRef" ):
                listener.enterLogfileGroupRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupRef" ):
                listener.exitLogfileGroupRef(self)




    def logfileGroupRef(self):

        localctx = MySQLParser.LogfileGroupRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_logfileGroupRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8065
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_eventName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventName" ):
                listener.enterEventName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventName" ):
                listener.exitEventName(self)




    def eventName(self):

        localctx = MySQLParser.EventNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_eventName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8067
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_eventRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventRef" ):
                listener.enterEventRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventRef" ):
                listener.exitEventRef(self)




    def eventRef(self):

        localctx = MySQLParser.EventRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_eventRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8069
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_udfName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfName" ):
                listener.enterUdfName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfName" ):
                listener.exitUdfName(self)




    def udfName(self):

        localctx = MySQLParser.UdfNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_udfName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8071
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_serverName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerName" ):
                listener.enterServerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerName" ):
                listener.exitServerName(self)




    def serverName(self):

        localctx = MySQLParser.ServerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_serverName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8073
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_serverRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerRef" ):
                listener.enterServerRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerRef" ):
                listener.exitServerRef(self)




    def serverRef(self):

        localctx = MySQLParser.ServerRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_serverRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8075
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_engineRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineRef" ):
                listener.enterEngineRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineRef" ):
                listener.exitEngineRef(self)




    def engineRef(self):

        localctx = MySQLParser.EngineRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_engineRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8077
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)




    def tableName(self):

        localctx = MySQLParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_tableName)
        try:
            self.state = 8081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1075,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8079
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8080
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterTableRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaRef(self):
            return self.getTypedRuleContext(MySQLParser.SchemaRefContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_filterTableRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterTableRef" ):
                listener.enterFilterTableRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterTableRef" ):
                listener.exitFilterTableRef(self)




    def filterTableRef(self):

        localctx = MySQLParser.FilterTableRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_filterTableRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8083
            self.schemaRef()
            self.state = 8084
            self.dotIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRefWithWildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def DOT_SYMBOL(self):
            return self.getToken(MySQLParser.DOT_SYMBOL, 0)

        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableRefWithWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefWithWildcard" ):
                listener.enterTableRefWithWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefWithWildcard" ):
                listener.exitTableRefWithWildcard(self)




    def tableRefWithWildcard(self):

        localctx = MySQLParser.TableRefWithWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_tableRefWithWildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8086
            self.identifier()
            self.state = 8094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1077,self._ctx)
            if la_ == 1:
                self.state = 8087
                self.match(MySQLParser.DOT_SYMBOL)
                self.state = 8088
                self.match(MySQLParser.MULT_OPERATOR)

            elif la_ == 2:
                self.state = 8089
                self.dotIdentifier()
                self.state = 8092
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1076,self._ctx)
                if la_ == 1:
                    self.state = 8090
                    self.match(MySQLParser.DOT_SYMBOL)
                    self.state = 8091
                    self.match(MySQLParser.MULT_OPERATOR)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRef" ):
                listener.enterTableRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRef" ):
                listener.exitTableRef(self)




    def tableRef(self):

        localctx = MySQLParser.TableRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_tableRef)
        try:
            self.state = 8098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1078,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8096
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8097
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRefListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TableRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TableRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefList" ):
                listener.enterTableRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefList" ):
                listener.exitTableRefList(self)




    def tableRefList(self):

        localctx = MySQLParser.TableRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_tableRefList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8100
            self.tableRef()
            self.state = 8105
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1079,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8101
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 8102
                    self.tableRef() 
                self.state = 8107
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1079,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasRefListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRefWithWildcard(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TableRefWithWildcardContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TableRefWithWildcardContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableAliasRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAliasRefList" ):
                listener.enterTableAliasRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAliasRefList" ):
                listener.exitTableAliasRefList(self)




    def tableAliasRefList(self):

        localctx = MySQLParser.TableAliasRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_tableAliasRefList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8108
            self.tableRefWithWildcard()
            self.state = 8113
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1080,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8109
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 8110
                    self.tableRefWithWildcard() 
                self.state = 8115
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1080,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_parameterName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterName" ):
                listener.enterParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterName" ):
                listener.exitParameterName(self)




    def parameterName(self):

        localctx = MySQLParser.ParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_parameterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8116
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def labelKeyword(self):
            return self.getTypedRuleContext(MySQLParser.LabelKeywordContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_labelIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelIdentifier" ):
                listener.enterLabelIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelIdentifier" ):
                listener.exitLabelIdentifier(self)




    def labelIdentifier(self):

        localctx = MySQLParser.LabelIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_labelIdentifier)
        try:
            self.state = 8120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1081,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8118
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8119
                self.labelKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.LabelIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_labelRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelRef" ):
                listener.enterLabelRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelRef" ):
                listener.exitLabelRef(self)




    def labelRef(self):

        localctx = MySQLParser.LabelRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_labelRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8122
            self.labelIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def roleKeyword(self):
            return self.getTypedRuleContext(MySQLParser.RoleKeywordContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_roleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleIdentifier" ):
                listener.enterRoleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleIdentifier" ):
                listener.exitRoleIdentifier(self)




    def roleIdentifier(self):

        localctx = MySQLParser.RoleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_roleIdentifier)
        try:
            self.state = 8126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1082,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8124
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8125
                self.roleKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.RoleIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_roleRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleRef" ):
                listener.enterRoleRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleRef" ):
                listener.exitRoleRef(self)




    def roleRef(self):

        localctx = MySQLParser.RoleRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_roleRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8128
            self.roleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PluginRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_pluginRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPluginRef" ):
                listener.enterPluginRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPluginRef" ):
                listener.exitPluginRef(self)




    def pluginRef(self):

        localctx = MySQLParser.PluginRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_pluginRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8130
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComponentRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_componentRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponentRef" ):
                listener.enterComponentRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponentRef" ):
                listener.exitComponentRef(self)




    def componentRef(self):

        localctx = MySQLParser.ComponentRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_componentRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8132
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_resourceGroupRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupRef" ):
                listener.enterResourceGroupRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupRef" ):
                listener.exitResourceGroupRef(self)




    def resourceGroupRef(self):

        localctx = MySQLParser.ResourceGroupRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_resourceGroupRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8134
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowName" ):
                listener.enterWindowName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowName" ):
                listener.exitWindowName(self)




    def windowName(self):

        localctx = MySQLParser.WindowNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_windowName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8136
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MySQLParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MySQLParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 8141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1083,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8138
                _la = self._input.LA(1)
                if not(_la==MySQLParser.IDENTIFIER or _la==MySQLParser.BACK_TICK_QUOTED_ID):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8139
                if not isSqlModeActive(AnsiQuotes):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "isSqlModeActive(AnsiQuotes)")
                self.state = 8140
                self.match(MySQLParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def identifierKeyword(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MySQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_identifier)
        try:
            self.state = 8145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1084,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8143
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8144
                self.identifierKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MySQLParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8147
            self.identifier()
            self.state = 8152
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1085,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8148
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 8149
                    self.identifier() 
                self.state = 8154
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1085,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MySQLParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8155
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 8156
            self.identifierList()
            self.state = 8157
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MySQLParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_qualifiedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8159
            self.identifier()
            self.state = 8161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1086,self._ctx)
            if la_ == 1:
                self.state = 8160
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MySQLParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 8174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1089,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8163
                self.identifier()
                self.state = 8168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.DOT_SYMBOL:
                    self.state = 8164
                    self.dotIdentifier()
                    self.state = 8166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.DOT_SYMBOL:
                        self.state = 8165
                        self.dotIdentifier()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8170
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 8171
                self.dotIdentifier()
                self.state = 8172
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MySQLParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MySQLParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8176
            self.match(MySQLParser.DOT_SYMBOL)
            self.state = 8177
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ulong_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def DECIMAL_NUMBER(self):
            return self.getToken(MySQLParser.DECIMAL_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MySQLParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ulong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUlong_number" ):
                listener.enterUlong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUlong_number" ):
                listener.exitUlong_number(self)




    def ulong_number(self):

        localctx = MySQLParser.Ulong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_ulong_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8179
            _la = self._input.LA(1)
            if not(((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (MySQLParser.INT_NUMBER - 747)) | (1 << (MySQLParser.LONG_NUMBER - 747)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 747)) | (1 << (MySQLParser.HEX_NUMBER - 747)) | (1 << (MySQLParser.DECIMAL_NUMBER - 747)) | (1 << (MySQLParser.FLOAT_NUMBER - 747)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_ulong_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_real_ulong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_ulong_number" ):
                listener.enterReal_ulong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_ulong_number" ):
                listener.exitReal_ulong_number(self)




    def real_ulong_number(self):

        localctx = MySQLParser.Real_ulong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_real_ulong_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8181
            _la = self._input.LA(1)
            if not(((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (MySQLParser.INT_NUMBER - 747)) | (1 << (MySQLParser.LONG_NUMBER - 747)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 747)) | (1 << (MySQLParser.HEX_NUMBER - 747)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ulonglong_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def DECIMAL_NUMBER(self):
            return self.getToken(MySQLParser.DECIMAL_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MySQLParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ulonglong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUlonglong_number" ):
                listener.enterUlonglong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUlonglong_number" ):
                listener.exitUlonglong_number(self)




    def ulonglong_number(self):

        localctx = MySQLParser.Ulonglong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_ulonglong_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8183
            _la = self._input.LA(1)
            if not(((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (MySQLParser.INT_NUMBER - 747)) | (1 << (MySQLParser.LONG_NUMBER - 747)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 747)) | (1 << (MySQLParser.DECIMAL_NUMBER - 747)) | (1 << (MySQLParser.FLOAT_NUMBER - 747)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_ulonglong_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_real_ulonglong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_ulonglong_number" ):
                listener.enterReal_ulonglong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_ulonglong_number" ):
                listener.exitReal_ulonglong_number(self)




    def real_ulonglong_number(self):

        localctx = MySQLParser.Real_ulonglong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_real_ulonglong_number)
        try:
            self.state = 8190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1090,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8185
                self.match(MySQLParser.INT_NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8186
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 8187
                self.match(MySQLParser.HEX_NUMBER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8188
                self.match(MySQLParser.ULONGLONG_NUMBER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8189
                self.match(MySQLParser.LONG_NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def numLiteral(self):
            return self.getTypedRuleContext(MySQLParser.NumLiteralContext,0)


        def temporalLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TemporalLiteralContext,0)


        def nullLiteral(self):
            return self.getTypedRuleContext(MySQLParser.NullLiteralContext,0)


        def boolLiteral(self):
            return self.getTypedRuleContext(MySQLParser.BoolLiteralContext,0)


        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def BIN_NUMBER(self):
            return self.getToken(MySQLParser.BIN_NUMBER, 0)

        def UNDERSCORE_CHARSET(self):
            return self.getToken(MySQLParser.UNDERSCORE_CHARSET, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = MySQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1148, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.state = 8201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1092,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8192
                self.textLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8193
                self.numLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8194
                self.temporalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8195
                self.nullLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8196
                self.boolLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.UNDERSCORE_CHARSET:
                    self.state = 8197
                    self.match(MySQLParser.UNDERSCORE_CHARSET)


                self.state = 8200
                _la = self._input.LA(1)
                if not(_la==MySQLParser.HEX_NUMBER or _la==MySQLParser.BIN_NUMBER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(MySQLParser.LiteralContext,0)


        def PLUS_OPERATOR(self):
            return self.getToken(MySQLParser.PLUS_OPERATOR, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def MINUS_OPERATOR(self):
            return self.getToken(MySQLParser.MINUS_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_signedLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedLiteral" ):
                listener.enterSignedLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedLiteral" ):
                listener.exitSignedLiteral(self)




    def signedLiteral(self):

        localctx = MySQLParser.SignedLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_signedLiteral)
        try:
            self.state = 8208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1093,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8203
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8204
                self.match(MySQLParser.PLUS_OPERATOR)
                self.state = 8205
                self.ulong_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8206
                self.match(MySQLParser.MINUS_OPERATOR)
                self.state = 8207
                self.ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_stringList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringList" ):
                listener.enterStringList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringList" ):
                listener.exitStringList(self)




    def stringList(self):

        localctx = MySQLParser.StringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_stringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8210
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 8211
            self.textString()
            self.state = 8216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 8212
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 8213
                self.textString()
                self.state = 8218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8219
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_textStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringLiteral" ):
                listener.enterTextStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringLiteral" ):
                listener.exitTextStringLiteral(self)




    def textStringLiteral(self):

        localctx = MySQLParser.TextStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_textStringLiteral)
        try:
            self.state = 8224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1095,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8221
                localctx.value = self.match(MySQLParser.SINGLE_QUOTED_TEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8222
                if not !isSqlModeActive(AnsiQuotes):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!isSqlModeActive(AnsiQuotes)")
                self.state = 8223
                localctx.value = self.match(MySQLParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def BIN_NUMBER(self):
            return self.getToken(MySQLParser.BIN_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_textString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextString" ):
                listener.enterTextString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextString" ):
                listener.exitTextString(self)




    def textString(self):

        localctx = MySQLParser.TextStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_textString)
        try:
            self.state = 8229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1096,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8226
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8227
                self.match(MySQLParser.HEX_NUMBER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8228
                self.match(MySQLParser.BIN_NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringHashContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_textStringHash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringHash" ):
                listener.enterTextStringHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringHash" ):
                listener.exitTextStringHash(self)




    def textStringHash(self):

        localctx = MySQLParser.TextStringHashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_textStringHash)
        try:
            self.state = 8234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1097,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8231
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8232
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 8233
                self.match(MySQLParser.HEX_NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringLiteralContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,i)


        def NCHAR_TEXT(self):
            return self.getToken(MySQLParser.NCHAR_TEXT, 0)

        def UNDERSCORE_CHARSET(self):
            return self.getToken(MySQLParser.UNDERSCORE_CHARSET, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_textLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextLiteral" ):
                listener.enterTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextLiteral" ):
                listener.exitTextLiteral(self)




    def textLiteral(self):

        localctx = MySQLParser.TextLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_textLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1099,self._ctx)
            if la_ == 1:
                self.state = 8237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1098,self._ctx)
                if la_ == 1:
                    self.state = 8236
                    self.match(MySQLParser.UNDERSCORE_CHARSET)


                self.state = 8239
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.state = 8240
                self.match(MySQLParser.NCHAR_TEXT)
                pass


            self.state = 8246
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8243
                    self.textStringLiteral() 
                self.state = 8248
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringNoLinebreakContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_textStringNoLinebreak

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringNoLinebreak" ):
                listener.enterTextStringNoLinebreak(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringNoLinebreak" ):
                listener.exitTextStringNoLinebreak(self)




    def textStringNoLinebreak(self):

        localctx = MySQLParser.TextStringNoLinebreakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_textStringNoLinebreak)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8249
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringLiteralListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringLiteralContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_textStringLiteralList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringLiteralList" ):
                listener.enterTextStringLiteralList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringLiteralList" ):
                listener.exitTextStringLiteralList(self)




    def textStringLiteralList(self):

        localctx = MySQLParser.TextStringLiteralListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_textStringLiteralList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8251
            self.textStringLiteral()
            self.state = 8256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA_SYMBOL:
                self.state = 8252
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 8253
                self.textStringLiteral()
                self.state = 8258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def DECIMAL_NUMBER(self):
            return self.getToken(MySQLParser.DECIMAL_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MySQLParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_numLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumLiteral" ):
                listener.enterNumLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumLiteral" ):
                listener.exitNumLiteral(self)




    def numLiteral(self):

        localctx = MySQLParser.NumLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_numLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8259
            _la = self._input.LA(1)
            if not(((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & ((1 << (MySQLParser.INT_NUMBER - 747)) | (1 << (MySQLParser.LONG_NUMBER - 747)) | (1 << (MySQLParser.ULONGLONG_NUMBER - 747)) | (1 << (MySQLParser.DECIMAL_NUMBER - 747)) | (1 << (MySQLParser.FLOAT_NUMBER - 747)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MySQLParser.FALSE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_boolLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolLiteral" ):
                listener.enterBoolLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolLiteral" ):
                listener.exitBoolLiteral(self)




    def boolLiteral(self):

        localctx = MySQLParser.BoolLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_boolLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8261
            _la = self._input.LA(1)
            if not(_la==MySQLParser.FALSE_SYMBOL or _la==MySQLParser.TRUE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def NULL2_SYMBOL(self):
            return self.getToken(MySQLParser.NULL2_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_nullLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)




    def nullLiteral(self):

        localctx = MySQLParser.NullLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_nullLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8263
            _la = self._input.LA(1)
            if not(_la==MySQLParser.NULL_SYMBOL or _la==MySQLParser.NULL2_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_temporalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalLiteral" ):
                listener.enterTemporalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalLiteral" ):
                listener.exitTemporalLiteral(self)




    def temporalLiteral(self):

        localctx = MySQLParser.TemporalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1172, self.RULE_temporalLiteral)
        try:
            self.state = 8271
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.DATE_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8265
                self.match(MySQLParser.DATE_SYMBOL)
                self.state = 8266
                self.match(MySQLParser.SINGLE_QUOTED_TEXT)
                pass
            elif token in [MySQLParser.TIME_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8267
                self.match(MySQLParser.TIME_SYMBOL)
                self.state = 8268
                self.match(MySQLParser.SINGLE_QUOTED_TEXT)
                pass
            elif token in [MySQLParser.TIMESTAMP_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8269
                self.match(MySQLParser.TIMESTAMP_SYMBOL)
                self.state = 8270
                self.match(MySQLParser.SINGLE_QUOTED_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldLength(self):
            return self.getTypedRuleContext(MySQLParser.FieldLengthContext,0)


        def precision(self):
            return self.getTypedRuleContext(MySQLParser.PrecisionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_floatOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatOptions" ):
                listener.enterFloatOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatOptions" ):
                listener.exitFloatOptions(self)




    def floatOptions(self):

        localctx = MySQLParser.FloatOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_floatOptions)
        try:
            self.state = 8275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8273
                self.fieldLength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8274
                self.precision()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandardFloatOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precision(self):
            return self.getTypedRuleContext(MySQLParser.PrecisionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_standardFloatOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardFloatOptions" ):
                listener.enterStandardFloatOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardFloatOptions" ):
                listener.exitStandardFloatOptions(self)




    def standardFloatOptions(self):

        localctx = MySQLParser.StandardFloatOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_standardFloatOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8277
            self.precision()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecisionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def INT_NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.INT_NUMBER)
            else:
                return self.getToken(MySQLParser.INT_NUMBER, i)

        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision" ):
                listener.enterPrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision" ):
                listener.exitPrecision(self)




    def precision(self):

        localctx = MySQLParser.PrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8279
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 8280
            self.match(MySQLParser.INT_NUMBER)
            self.state = 8281
            self.match(MySQLParser.COMMA_SYMBOL)
            self.state = 8282
            self.match(MySQLParser.INT_NUMBER)
            self.state = 8283
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextOrIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_textOrIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextOrIdentifier" ):
                listener.enterTextOrIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextOrIdentifier" ):
                listener.exitTextOrIdentifier(self)




    def textOrIdentifier(self):

        localctx = MySQLParser.TextOrIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_textOrIdentifier)
        try:
            self.state = 8287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8285
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8286
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LValueIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def lValueKeyword(self):
            return self.getTypedRuleContext(MySQLParser.LValueKeywordContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_lValueIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLValueIdentifier" ):
                listener.enterLValueIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLValueIdentifier" ):
                listener.exitLValueIdentifier(self)




    def lValueIdentifier(self):

        localctx = MySQLParser.LValueIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_lValueIdentifier)
        try:
            self.state = 8291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8289
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8290
                self.lValueKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleIdentifierOrTextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.RoleIdentifierContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_roleIdentifierOrText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleIdentifierOrText" ):
                listener.enterRoleIdentifierOrText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleIdentifierOrText" ):
                listener.exitRoleIdentifierOrText(self)




    def roleIdentifierOrText(self):

        localctx = MySQLParser.RoleIdentifierOrTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1184, self.RULE_roleIdentifierOrText)
        try:
            self.state = 8295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8293
                self.roleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8294
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_sizeNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeNumber" ):
                listener.enterSizeNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeNumber" ):
                listener.exitSizeNumber(self)




    def sizeNumber(self):

        localctx = MySQLParser.SizeNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1186, self.RULE_sizeNumber)
        try:
            self.state = 8299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8297
                self.real_ulonglong_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8298
                self.pureIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_parentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParentheses" ):
                listener.enterParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParentheses" ):
                listener.exitParentheses(self)




    def parentheses(self):

        localctx = MySQLParser.ParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_parentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8301
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 8302
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def ASSIGN_OPERATOR(self):
            return self.getToken(MySQLParser.ASSIGN_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqual" ):
                listener.enterEqual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqual" ):
                listener.exitEqual(self)




    def equal(self):

        localctx = MySQLParser.EqualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_equal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8304
            _la = self._input.LA(1)
            if not(_la==MySQLParser.EQUAL_OPERATOR or _la==MySQLParser.ASSIGN_OPERATOR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERSIST_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_SYMBOL, 0)

        def PERSIST_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0)

        def GLOBAL_SYMBOL(self):
            return self.getToken(MySQLParser.GLOBAL_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(MySQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_optionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionType" ):
                listener.enterOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionType" ):
                listener.exitOptionType(self)




    def optionType(self):

        localctx = MySQLParser.OptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1192, self.RULE_optionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8306
            _la = self._input.LA(1)
            if not(_la==MySQLParser.GLOBAL_SYMBOL or _la==MySQLParser.LOCAL_SYMBOL or _la==MySQLParser.SESSION_SYMBOL or _la==MySQLParser.PERSIST_SYMBOL or _la==MySQLParser.PERSIST_ONLY_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarIdentTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL_SYMBOL(self):
            return self.getToken(MySQLParser.GLOBAL_SYMBOL, 0)

        def DOT_SYMBOL(self):
            return self.getToken(MySQLParser.DOT_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(MySQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_varIdentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarIdentType" ):
                listener.enterVarIdentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarIdentType" ):
                listener.exitVarIdentType(self)




    def varIdentType(self):

        localctx = MySQLParser.VarIdentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1194, self.RULE_varIdentType)
        try:
            self.state = 8314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.GLOBAL_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8308
                self.match(MySQLParser.GLOBAL_SYMBOL)
                self.state = 8309
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [MySQLParser.LOCAL_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8310
                self.match(MySQLParser.LOCAL_SYMBOL)
                self.state = 8311
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [MySQLParser.SESSION_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8312
                self.match(MySQLParser.SESSION_SYMBOL)
                self.state = 8313
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetVarIdentTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERSIST_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_SYMBOL, 0)

        def DOT_SYMBOL(self):
            return self.getToken(MySQLParser.DOT_SYMBOL, 0)

        def PERSIST_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0)

        def GLOBAL_SYMBOL(self):
            return self.getToken(MySQLParser.GLOBAL_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(MySQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_setVarIdentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetVarIdentType" ):
                listener.enterSetVarIdentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetVarIdentType" ):
                listener.exitSetVarIdentType(self)




    def setVarIdentType(self):

        localctx = MySQLParser.SetVarIdentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1196, self.RULE_setVarIdentType)
        try:
            self.state = 8326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.PERSIST_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8316
                self.match(MySQLParser.PERSIST_SYMBOL)
                self.state = 8317
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [MySQLParser.PERSIST_ONLY_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8318
                self.match(MySQLParser.PERSIST_ONLY_SYMBOL)
                self.state = 8319
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [MySQLParser.GLOBAL_SYMBOL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8320
                self.match(MySQLParser.GLOBAL_SYMBOL)
                self.state = 8321
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [MySQLParser.LOCAL_SYMBOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8322
                self.match(MySQLParser.LOCAL_SYMBOL)
                self.state = 8323
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [MySQLParser.SESSION_SYMBOL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8324
                self.match(MySQLParser.SESSION_SYMBOL)
                self.state = 8325
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelKeyword(self):
            return self.getTypedRuleContext(MySQLParser.LabelKeywordContext,0)


        def roleOrIdentifierKeyword(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrIdentifierKeywordContext,0)


        def EXECUTE_SYMBOL(self):
            return self.getToken(MySQLParser.EXECUTE_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def RESTART_SYMBOL(self):
            return self.getToken(MySQLParser.RESTART_SYMBOL, 0)

        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous1RolesAndLabels(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext,0)


        def identifierKeywordsAmbiguous2Labels(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous2LabelsContext,0)


        def identifierKeywordsAmbiguous3Roles(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous3RolesContext,0)


        def identifierKeywordsAmbiguous4SystemVariables(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeyword" ):
                listener.enterIdentifierKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeyword" ):
                listener.exitIdentifierKeyword(self)




    def identifierKeyword(self):

        localctx = MySQLParser.IdentifierKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1198, self.RULE_identifierKeyword)
        try:
            self.state = 8345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8328
                if not serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80017")
                self.state = 8336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1110,self._ctx)
                if la_ == 1:
                    self.state = 8329
                    self.labelKeyword()
                    pass

                elif la_ == 2:
                    self.state = 8330
                    self.roleOrIdentifierKeyword()
                    pass

                elif la_ == 3:
                    self.state = 8331
                    self.match(MySQLParser.EXECUTE_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 8332
                    if not serverVersion >= 50709:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 50709")
                    self.state = 8333
                    self.match(MySQLParser.SHUTDOWN_SYMBOL)
                    pass

                elif la_ == 5:
                    self.state = 8334
                    if not serverVersion >= 80011:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80011")
                    self.state = 8335
                    self.match(MySQLParser.RESTART_SYMBOL)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8343
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1111,self._ctx)
                if la_ == 1:
                    self.state = 8338
                    self.identifierKeywordsUnambiguous()
                    pass

                elif la_ == 2:
                    self.state = 8339
                    self.identifierKeywordsAmbiguous1RolesAndLabels()
                    pass

                elif la_ == 3:
                    self.state = 8340
                    self.identifierKeywordsAmbiguous2Labels()
                    pass

                elif la_ == 4:
                    self.state = 8341
                    self.identifierKeywordsAmbiguous3Roles()
                    pass

                elif la_ == 5:
                    self.state = 8342
                    self.identifierKeywordsAmbiguous4SystemVariables()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE_SYMBOL(self):
            return self.getToken(MySQLParser.EXECUTE_SYMBOL, 0)

        def RESTART_SYMBOL(self):
            return self.getToken(MySQLParser.RESTART_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous1RolesAndLabels" ):
                listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous1RolesAndLabels" ):
                listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels(self)




    def identifierKeywordsAmbiguous1RolesAndLabels(self):

        localctx = MySQLParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1200, self.RULE_identifierKeywordsAmbiguous1RolesAndLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8347
            _la = self._input.LA(1)
            if not(_la==MySQLParser.EXECUTE_SYMBOL or _la==MySQLParser.SHUTDOWN_SYMBOL or _la==MySQLParser.RESTART_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYMBOL(self):
            return self.getToken(MySQLParser.ASCII_SYMBOL, 0)

        def BEGIN_SYMBOL(self):
            return self.getToken(MySQLParser.BEGIN_SYMBOL, 0)

        def BYTE_SYMBOL(self):
            return self.getToken(MySQLParser.BYTE_SYMBOL, 0)

        def CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.CACHE_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(MySQLParser.CHARSET_SYMBOL, 0)

        def CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.CHECKSUM_SYMBOL, 0)

        def CLONE_SYMBOL(self):
            return self.getToken(MySQLParser.CLONE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def COMMIT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMIT_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTAINS_SYMBOL, 0)

        def DEALLOCATE_SYMBOL(self):
            return self.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def FLUSH_SYMBOL(self):
            return self.getToken(MySQLParser.FLUSH_SYMBOL, 0)

        def FOLLOWS_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWS_SYMBOL, 0)

        def HANDLER_SYMBOL(self):
            return self.getToken(MySQLParser.HANDLER_SYMBOL, 0)

        def HELP_SYMBOL(self):
            return self.getToken(MySQLParser.HELP_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def INSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.INSTALL_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(MySQLParser.LANGUAGE_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def PRECEDES_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDES_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(MySQLParser.PREPARE_SYMBOL, 0)

        def REPAIR_SYMBOL(self):
            return self.getToken(MySQLParser.REPAIR_SYMBOL, 0)

        def RESET_SYMBOL(self):
            return self.getToken(MySQLParser.RESET_SYMBOL, 0)

        def ROLLBACK_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLBACK_SYMBOL, 0)

        def SAVEPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0)

        def SIGNED_SYMBOL(self):
            return self.getToken(MySQLParser.SIGNED_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def STOP_SYMBOL(self):
            return self.getToken(MySQLParser.STOP_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUNCATE_SYMBOL, 0)

        def UNICODE_SYMBOL(self):
            return self.getToken(MySQLParser.UNICODE_SYMBOL, 0)

        def UNINSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.UNINSTALL_SYMBOL, 0)

        def XA_SYMBOL(self):
            return self.getToken(MySQLParser.XA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeywordsAmbiguous2Labels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous2Labels" ):
                listener.enterIdentifierKeywordsAmbiguous2Labels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous2Labels" ):
                listener.exitIdentifierKeywordsAmbiguous2Labels(self)




    def identifierKeywordsAmbiguous2Labels(self):

        localctx = MySQLParser.IdentifierKeywordsAmbiguous2LabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1202, self.RULE_identifierKeywordsAmbiguous2Labels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8349
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySQLParser.ASCII_SYMBOL) | (1 << MySQLParser.BEGIN_SYMBOL) | (1 << MySQLParser.BYTE_SYMBOL) | (1 << MySQLParser.CACHE_SYMBOL) | (1 << MySQLParser.CHARSET_SYMBOL) | (1 << MySQLParser.CHECKSUM_SYMBOL))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (MySQLParser.COMMENT_SYMBOL - 75)) | (1 << (MySQLParser.COMMIT_SYMBOL - 75)) | (1 << (MySQLParser.CONTAINS_SYMBOL - 75)) | (1 << (MySQLParser.DEALLOCATE_SYMBOL - 75)))) != 0) or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (MySQLParser.DO_SYMBOL - 147)) | (1 << (MySQLParser.END_SYMBOL - 147)) | (1 << (MySQLParser.FLUSH_SYMBOL - 147)) | (1 << (MySQLParser.FOLLOWS_SYMBOL - 147)))) != 0) or ((((_la - 219)) & ~0x3f) == 0 and ((1 << (_la - 219)) & ((1 << (MySQLParser.HANDLER_SYMBOL - 219)) | (1 << (MySQLParser.HELP_SYMBOL - 219)) | (1 << (MySQLParser.IMPORT_SYMBOL - 219)) | (1 << (MySQLParser.INSTALL_SYMBOL - 219)) | (1 << (MySQLParser.LANGUAGE_SYMBOL - 219)))) != 0) or ((((_la - 373)) & ~0x3f) == 0 and ((1 << (_la - 373)) & ((1 << (MySQLParser.NO_SYMBOL - 373)) | (1 << (MySQLParser.PRECEDES_SYMBOL - 373)) | (1 << (MySQLParser.PREPARE_SYMBOL - 373)))) != 0) or ((((_la - 455)) & ~0x3f) == 0 and ((1 << (_la - 455)) & ((1 << (MySQLParser.REPAIR_SYMBOL - 455)) | (1 << (MySQLParser.RESET_SYMBOL - 455)) | (1 << (MySQLParser.ROLLBACK_SYMBOL - 455)) | (1 << (MySQLParser.SAVEPOINT_SYMBOL - 455)) | (1 << (MySQLParser.SIGNED_SYMBOL - 455)) | (1 << (MySQLParser.SLAVE_SYMBOL - 455)))) != 0) or ((((_la - 543)) & ~0x3f) == 0 and ((1 << (_la - 543)) & ((1 << (MySQLParser.START_SYMBOL - 543)) | (1 << (MySQLParser.STOP_SYMBOL - 543)) | (1 << (MySQLParser.TRUNCATE_SYMBOL - 543)) | (1 << (MySQLParser.UNICODE_SYMBOL - 543)))) != 0) or _la==MySQLParser.UNINSTALL_SYMBOL or _la==MySQLParser.XA_SYMBOL or _la==MySQLParser.CLONE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleOrLabelKeyword(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrLabelKeywordContext,0)


        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def PROCESS_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESS_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(MySQLParser.PROXY_SYMBOL, 0)

        def RELOAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELOAD_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATION_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(MySQLParser.SUPER_SYMBOL, 0)

        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous3Roles(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous3RolesContext,0)


        def identifierKeywordsAmbiguous4SystemVariables(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_labelKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelKeyword" ):
                listener.enterLabelKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelKeyword" ):
                listener.exitLabelKeyword(self)




    def labelKeyword(self):

        localctx = MySQLParser.LabelKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1204, self.RULE_labelKeyword)
        try:
            self.state = 8369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8351
                if not serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80017")
                self.state = 8362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1113,self._ctx)
                if la_ == 1:
                    self.state = 8352
                    self.roleOrLabelKeyword()
                    pass

                elif la_ == 2:
                    self.state = 8353
                    self.match(MySQLParser.EVENT_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 8354
                    self.match(MySQLParser.FILE_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 8355
                    self.match(MySQLParser.NONE_SYMBOL)
                    pass

                elif la_ == 5:
                    self.state = 8356
                    self.match(MySQLParser.PROCESS_SYMBOL)
                    pass

                elif la_ == 6:
                    self.state = 8357
                    self.match(MySQLParser.PROXY_SYMBOL)
                    pass

                elif la_ == 7:
                    self.state = 8358
                    self.match(MySQLParser.RELOAD_SYMBOL)
                    pass

                elif la_ == 8:
                    self.state = 8359
                    self.match(MySQLParser.REPLICATION_SYMBOL)
                    pass

                elif la_ == 9:
                    self.state = 8360
                    self.match(MySQLParser.RESOURCE_SYMBOL)
                    pass

                elif la_ == 10:
                    self.state = 8361
                    self.match(MySQLParser.SUPER_SYMBOL)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8367
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1114,self._ctx)
                if la_ == 1:
                    self.state = 8364
                    self.identifierKeywordsUnambiguous()
                    pass

                elif la_ == 2:
                    self.state = 8365
                    self.identifierKeywordsAmbiguous3Roles()
                    pass

                elif la_ == 3:
                    self.state = 8366
                    self.identifierKeywordsAmbiguous4SystemVariables()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def PROCESS_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESS_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(MySQLParser.PROXY_SYMBOL, 0)

        def RELOAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELOAD_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATION_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(MySQLParser.SUPER_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeywordsAmbiguous3Roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous3Roles" ):
                listener.enterIdentifierKeywordsAmbiguous3Roles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous3Roles" ):
                listener.exitIdentifierKeywordsAmbiguous3Roles(self)




    def identifierKeywordsAmbiguous3Roles(self):

        localctx = MySQLParser.IdentifierKeywordsAmbiguous3RolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1206, self.RULE_identifierKeywordsAmbiguous3Roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8371
            _la = self._input.LA(1)
            if not(_la==MySQLParser.EVENT_SYMBOL or _la==MySQLParser.FILE_SYMBOL or ((((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & ((1 << (MySQLParser.NONE_SYMBOL - 369)) | (1 << (MySQLParser.PROCESS_SYMBOL - 369)) | (1 << (MySQLParser.PROXY_SYMBOL - 369)))) != 0) or _la==MySQLParser.RELOAD_SYMBOL or _la==MySQLParser.REPLICATION_SYMBOL or _la==MySQLParser.SUPER_SYMBOL or _la==MySQLParser.RESOURCE_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsUnambiguousContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION_SYMBOL(self):
            return self.getToken(MySQLParser.ACTION_SYMBOL, 0)

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ACCOUNT_SYMBOL, 0)

        def ACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.ACTIVE_SYMBOL, 0)

        def ADDDATE_SYMBOL(self):
            return self.getToken(MySQLParser.ADDDATE_SYMBOL, 0)

        def ADMIN_SYMBOL(self):
            return self.getToken(MySQLParser.ADMIN_SYMBOL, 0)

        def AFTER_SYMBOL(self):
            return self.getToken(MySQLParser.AFTER_SYMBOL, 0)

        def AGAINST_SYMBOL(self):
            return self.getToken(MySQLParser.AGAINST_SYMBOL, 0)

        def AGGREGATE_SYMBOL(self):
            return self.getToken(MySQLParser.AGGREGATE_SYMBOL, 0)

        def ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)

        def ALWAYS_SYMBOL(self):
            return self.getToken(MySQLParser.ALWAYS_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MySQLParser.ANY_SYMBOL, 0)

        def AT_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SYMBOL, 0)

        def AUTOEXTEND_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def AVG_ROW_LENGTH_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0)

        def AVG_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_SYMBOL, 0)

        def BACKUP_SYMBOL(self):
            return self.getToken(MySQLParser.BACKUP_SYMBOL, 0)

        def BINLOG_SYMBOL(self):
            return self.getToken(MySQLParser.BINLOG_SYMBOL, 0)

        def BIT_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_SYMBOL, 0)

        def BLOCK_SYMBOL(self):
            return self.getToken(MySQLParser.BLOCK_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(MySQLParser.BOOLEAN_SYMBOL, 0)

        def BOOL_SYMBOL(self):
            return self.getToken(MySQLParser.BOOL_SYMBOL, 0)

        def BTREE_SYMBOL(self):
            return self.getToken(MySQLParser.BTREE_SYMBOL, 0)

        def BUCKETS_SYMBOL(self):
            return self.getToken(MySQLParser.BUCKETS_SYMBOL, 0)

        def CASCADED_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADED_SYMBOL, 0)

        def CATALOG_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(MySQLParser.CHAIN_SYMBOL, 0)

        def CHANGED_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGED_SYMBOL, 0)

        def CHANNEL_SYMBOL(self):
            return self.getToken(MySQLParser.CHANNEL_SYMBOL, 0)

        def CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.CIPHER_SYMBOL, 0)

        def CLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MySQLParser.CLIENT_SYMBOL, 0)

        def CLOSE_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_SYMBOL, 0)

        def COALESCE_SYMBOL(self):
            return self.getToken(MySQLParser.COALESCE_SYMBOL, 0)

        def CODE_SYMBOL(self):
            return self.getToken(MySQLParser.CODE_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATION_SYMBOL, 0)

        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)

        def COLUMN_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0)

        def COLUMN_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0)

        def COMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.COMMITTED_SYMBOL, 0)

        def COMPACT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPACT_SYMBOL, 0)

        def COMPLETION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPLETION_SYMBOL, 0)

        def COMPONENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPONENT_SYMBOL, 0)

        def COMPRESSED_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSED_SYMBOL, 0)

        def COMPRESSION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSION_SYMBOL, 0)

        def CONCURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONCURRENT_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(MySQLParser.CONNECTION_SYMBOL, 0)

        def CONSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONSISTENT_SYMBOL, 0)

        def CONSTRAINT_CATALOG_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0)

        def CONSTRAINT_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0)

        def CONSTRAINT_SCHEMA_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0)

        def CONTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.CONTEXT_SYMBOL, 0)

        def CPU_SYMBOL(self):
            return self.getToken(MySQLParser.CPU_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def CURSOR_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0)

        def DATAFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DATAFILE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(MySQLParser.DATETIME_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SYMBOL, 0)

        def DEFAULT_AUTH_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINER_SYMBOL, 0)

        def DEFINITION_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINITION_SYMBOL, 0)

        def DELAY_KEY_WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0)

        def DESCRIPTION_SYMBOL(self):
            return self.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0)

        def DIAGNOSTICS_SYMBOL(self):
            return self.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def DISCARD_SYMBOL(self):
            return self.getToken(MySQLParser.DISCARD_SYMBOL, 0)

        def DISK_SYMBOL(self):
            return self.getToken(MySQLParser.DISK_SYMBOL, 0)

        def DUMPFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DUMPFILE_SYMBOL, 0)

        def DUPLICATE_SYMBOL(self):
            return self.getToken(MySQLParser.DUPLICATE_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(MySQLParser.DYNAMIC_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)

        def ENDS_SYMBOL(self):
            return self.getToken(MySQLParser.ENDS_SYMBOL, 0)

        def ENFORCED_SYMBOL(self):
            return self.getToken(MySQLParser.ENFORCED_SYMBOL, 0)

        def ENGINES_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINES_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def ENUM_SYMBOL(self):
            return self.getToken(MySQLParser.ENUM_SYMBOL, 0)

        def ERRORS_SYMBOL(self):
            return self.getToken(MySQLParser.ERRORS_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(MySQLParser.ERROR_SYMBOL, 0)

        def ESCAPE_SYMBOL(self):
            return self.getToken(MySQLParser.ESCAPE_SYMBOL, 0)

        def EVENTS_SYMBOL(self):
            return self.getToken(MySQLParser.EVENTS_SYMBOL, 0)

        def EVERY_SYMBOL(self):
            return self.getToken(MySQLParser.EVERY_SYMBOL, 0)

        def EXCHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCHANGE_SYMBOL, 0)

        def EXCLUDE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCLUDE_SYMBOL, 0)

        def EXPANSION_SYMBOL(self):
            return self.getToken(MySQLParser.EXPANSION_SYMBOL, 0)

        def EXPIRE_SYMBOL(self):
            return self.getToken(MySQLParser.EXPIRE_SYMBOL, 0)

        def EXPORT_SYMBOL(self):
            return self.getToken(MySQLParser.EXPORT_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def EXTENT_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0)

        def FAST_SYMBOL(self):
            return self.getToken(MySQLParser.FAST_SYMBOL, 0)

        def FAULTS_SYMBOL(self):
            return self.getToken(MySQLParser.FAULTS_SYMBOL, 0)

        def FILE_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MySQLParser.FILTER_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(MySQLParser.FIXED_SYMBOL, 0)

        def FOLLOWING_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWING_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.FORMAT_SYMBOL, 0)

        def FOUND_SYMBOL(self):
            return self.getToken(MySQLParser.FOUND_SYMBOL, 0)

        def FULL_SYMBOL(self):
            return self.getToken(MySQLParser.FULL_SYMBOL, 0)

        def GENERAL_SYMBOL(self):
            return self.getToken(MySQLParser.GENERAL_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def GEOMETRY_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRY_SYMBOL, 0)

        def GET_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0)

        def GET_MASTER_PUBLIC_KEY_SYMBOL(self):
            return self.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MySQLParser.GRANTS_SYMBOL, 0)

        def GROUP_REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(MySQLParser.HASH_SYMBOL, 0)

        def HISTOGRAM_SYMBOL(self):
            return self.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0)

        def HISTORY_SYMBOL(self):
            return self.getToken(MySQLParser.HISTORY_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(MySQLParser.HOSTS_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(MySQLParser.HOST_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def IGNORE_SERVER_IDS_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0)

        def INACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.INACTIVE_SYMBOL, 0)

        def INDEXES_SYMBOL(self):
            return self.getToken(MySQLParser.INDEXES_SYMBOL, 0)

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0)

        def INSERT_METHOD_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0)

        def INSTANCE_SYMBOL(self):
            return self.getToken(MySQLParser.INSTANCE_SYMBOL, 0)

        def INVISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.INVISIBLE_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(MySQLParser.INVOKER_SYMBOL, 0)

        def IO_SYMBOL(self):
            return self.getToken(MySQLParser.IO_SYMBOL, 0)

        def IPC_SYMBOL(self):
            return self.getToken(MySQLParser.IPC_SYMBOL, 0)

        def ISOLATION_SYMBOL(self):
            return self.getToken(MySQLParser.ISOLATION_SYMBOL, 0)

        def ISSUER_SYMBOL(self):
            return self.getToken(MySQLParser.ISSUER_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_SYMBOL, 0)

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(MySQLParser.LEAVES_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySQLParser.LESS_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.LEVEL_SYMBOL, 0)

        def LINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.LINESTRING_SYMBOL, 0)

        def LIST_SYMBOL(self):
            return self.getToken(MySQLParser.LIST_SYMBOL, 0)

        def LOCKED_SYMBOL(self):
            return self.getToken(MySQLParser.LOCKED_SYMBOL, 0)

        def LOCKS_SYMBOL(self):
            return self.getToken(MySQLParser.LOCKS_SYMBOL, 0)

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(MySQLParser.LOGS_SYMBOL, 0)

        def MASTER_AUTO_POSITION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0)

        def MASTER_COMPRESSION_ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0)

        def MASTER_CONNECT_RETRY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0)

        def MASTER_DELAY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0)

        def MASTER_HEARTBEAT_PERIOD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0)

        def MASTER_HOST_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0)

        def NETWORK_NAMESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0)

        def MASTER_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0)

        def MASTER_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0)

        def MASTER_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0)

        def MASTER_PORT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0)

        def MASTER_PUBLIC_KEY_PATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0)

        def MASTER_RETRY_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0)

        def MASTER_SERVER_ID_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0)

        def MASTER_SSL_CAPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0)

        def MASTER_SSL_CA_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0)

        def MASTER_SSL_CERT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0)

        def MASTER_SSL_CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0)

        def MASTER_SSL_CRLPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0)

        def MASTER_SSL_CRL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0)

        def MASTER_SSL_KEY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0)

        def MASTER_SSL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def MASTER_TLS_CIPHERSUITES_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0)

        def MASTER_TLS_VERSION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0)

        def MASTER_USER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_USER_SYMBOL, 0)

        def MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0)

        def MAX_QUERIES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0)

        def MAX_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0)

        def MAX_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0)

        def MAX_UPDATES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0)

        def MAX_USER_CONNECTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0)

        def MEDIUM_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUM_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(MySQLParser.MEMORY_SYMBOL, 0)

        def MERGE_SYMBOL(self):
            return self.getToken(MySQLParser.MERGE_SYMBOL, 0)

        def MESSAGE_TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0)

        def MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MICROSECOND_SYMBOL, 0)

        def MIGRATE_SYMBOL(self):
            return self.getToken(MySQLParser.MIGRATE_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(MySQLParser.MODE_SYMBOL, 0)

        def MODIFY_SYMBOL(self):
            return self.getToken(MySQLParser.MODIFY_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(MySQLParser.MONTH_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0)

        def MUTEX_SYMBOL(self):
            return self.getToken(MySQLParser.MUTEX_SYMBOL, 0)

        def MYSQL_ERRNO_SYMBOL(self):
            return self.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0)

        def NAMES_SYMBOL(self):
            return self.getToken(MySQLParser.NAMES_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MySQLParser.NAME_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATIONAL_SYMBOL, 0)

        def NCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NCHAR_SYMBOL, 0)

        def NDBCLUSTER_SYMBOL(self):
            return self.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0)

        def NESTED_SYMBOL(self):
            return self.getToken(MySQLParser.NESTED_SYMBOL, 0)

        def NEVER_SYMBOL(self):
            return self.getToken(MySQLParser.NEVER_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MySQLParser.NEW_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(MySQLParser.NEXT_SYMBOL, 0)

        def NODEGROUP_SYMBOL(self):
            return self.getToken(MySQLParser.NODEGROUP_SYMBOL, 0)

        def NOWAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NOWAIT_SYMBOL, 0)

        def NO_WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NO_WAIT_SYMBOL, 0)

        def NULLS_SYMBOL(self):
            return self.getToken(MySQLParser.NULLS_SYMBOL, 0)

        def NUMBER_SYMBOL(self):
            return self.getToken(MySQLParser.NUMBER_SYMBOL, 0)

        def NVARCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NVARCHAR_SYMBOL, 0)

        def OFFSET_SYMBOL(self):
            return self.getToken(MySQLParser.OFFSET_SYMBOL, 0)

        def OJ_SYMBOL(self):
            return self.getToken(MySQLParser.OJ_SYMBOL, 0)

        def OLD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_SYMBOL, 0)

        def ONE_SYMBOL(self):
            return self.getToken(MySQLParser.ONE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.ONLY_SYMBOL, 0)

        def OPEN_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_SYMBOL, 0)

        def OPTIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONAL_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONS_SYMBOL, 0)

        def ORDINALITY_SYMBOL(self):
            return self.getToken(MySQLParser.ORDINALITY_SYMBOL, 0)

        def ORGANIZATION_SYMBOL(self):
            return self.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0)

        def OTHERS_SYMBOL(self):
            return self.getToken(MySQLParser.OTHERS_SYMBOL, 0)

        def OWNER_SYMBOL(self):
            return self.getToken(MySQLParser.OWNER_SYMBOL, 0)

        def PACK_KEYS_SYMBOL(self):
            return self.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MySQLParser.PAGE_SYMBOL, 0)

        def PARSER_SYMBOL(self):
            return self.getToken(MySQLParser.PARSER_SYMBOL, 0)

        def PARTIAL_SYMBOL(self):
            return self.getToken(MySQLParser.PARTIAL_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONING_SYMBOL, 0)

        def PARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONS_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MySQLParser.PATH_SYMBOL, 0)

        def PHASE_SYMBOL(self):
            return self.getToken(MySQLParser.PHASE_SYMBOL, 0)

        def PLUGINS_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGINS_SYMBOL, 0)

        def PLUGIN_DIR_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0)

        def PLUGIN_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(MySQLParser.POINT_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.POLYGON_SYMBOL, 0)

        def PORT_SYMBOL(self):
            return self.getToken(MySQLParser.PORT_SYMBOL, 0)

        def PRECEDING_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDING_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(MySQLParser.PRESERVE_SYMBOL, 0)

        def PREV_SYMBOL(self):
            return self.getToken(MySQLParser.PREV_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def PRIVILEGE_CHECKS_USER_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0)

        def PROCESSLIST_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0)

        def PROFILES_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILES_SYMBOL, 0)

        def PROFILE_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILE_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(MySQLParser.QUARTER_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def READ_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.READ_ONLY_SYMBOL, 0)

        def REBUILD_SYMBOL(self):
            return self.getToken(MySQLParser.REBUILD_SYMBOL, 0)

        def RECOVER_SYMBOL(self):
            return self.getToken(MySQLParser.RECOVER_SYMBOL, 0)

        def REDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0)

        def REDUNDANT_SYMBOL(self):
            return self.getToken(MySQLParser.REDUNDANT_SYMBOL, 0)

        def REFERENCE_SYMBOL(self):
            return self.getToken(MySQLParser.REFERENCE_SYMBOL, 0)

        def RELAY_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_SYMBOL, 0)

        def RELAYLOG_SYMBOL(self):
            return self.getToken(MySQLParser.RELAYLOG_SYMBOL, 0)

        def RELAY_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0)

        def RELAY_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0)

        def RELAY_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0)

        def REMOVE_SYMBOL(self):
            return self.getToken(MySQLParser.REMOVE_SYMBOL, 0)

        def REORGANIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REORGANIZE_SYMBOL, 0)

        def REPEATABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPEATABLE_SYMBOL, 0)

        def REPLICATE_DO_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0)

        def REPLICATE_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0)

        def REPLICATE_IGNORE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0)

        def REPLICATE_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_REWRITE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0)

        def REPLICATE_WILD_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0)

        def USER_RESOURCES_SYMBOL(self):
            return self.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0)

        def RESPECT_SYMBOL(self):
            return self.getToken(MySQLParser.RESPECT_SYMBOL, 0)

        def RESTORE_SYMBOL(self):
            return self.getToken(MySQLParser.RESTORE_SYMBOL, 0)

        def RESUME_SYMBOL(self):
            return self.getToken(MySQLParser.RESUME_SYMBOL, 0)

        def RETAIN_SYMBOL(self):
            return self.getToken(MySQLParser.RETAIN_SYMBOL, 0)

        def RETURNED_SQLSTATE_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0)

        def RETURNS_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNS_SYMBOL, 0)

        def REUSE_SYMBOL(self):
            return self.getToken(MySQLParser.REUSE_SYMBOL, 0)

        def REVERSE_SYMBOL(self):
            return self.getToken(MySQLParser.REVERSE_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def ROLLUP_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLUP_SYMBOL, 0)

        def ROTATE_SYMBOL(self):
            return self.getToken(MySQLParser.ROTATE_SYMBOL, 0)

        def ROUTINE_SYMBOL(self):
            return self.getToken(MySQLParser.ROUTINE_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0)

        def ROW_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0)

        def RTREE_SYMBOL(self):
            return self.getToken(MySQLParser.RTREE_SYMBOL, 0)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEDULE_SYMBOL, 0)

        def SCHEMA_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0)

        def SECONDARY_ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0)

        def SECONDARY_LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0)

        def SECONDARY_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_SYMBOL, 0)

        def SECONDARY_UNLOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.SECOND_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(MySQLParser.SECURITY_SYMBOL, 0)

        def SERIALIZABLE_SYMBOL(self):
            return self.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SERIAL_SYMBOL, 0)

        def SERVER_SYMBOL(self):
            return self.getToken(MySQLParser.SERVER_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(MySQLParser.SHARE_SYMBOL, 0)

        def SIMPLE_SYMBOL(self):
            return self.getToken(MySQLParser.SIMPLE_SYMBOL, 0)

        def SKIP_SYMBOL(self):
            return self.getToken(MySQLParser.SKIP_SYMBOL, 0)

        def SLOW_SYMBOL(self):
            return self.getToken(MySQLParser.SLOW_SYMBOL, 0)

        def SNAPSHOT_SYMBOL(self):
            return self.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0)

        def SOCKET_SYMBOL(self):
            return self.getToken(MySQLParser.SOCKET_SYMBOL, 0)

        def SONAME_SYMBOL(self):
            return self.getToken(MySQLParser.SONAME_SYMBOL, 0)

        def SOUNDS_SYMBOL(self):
            return self.getToken(MySQLParser.SOUNDS_SYMBOL, 0)

        def SOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.SOURCE_SYMBOL, 0)

        def SQL_AFTER_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0)

        def SQL_AFTER_MTS_GAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0)

        def SQL_BEFORE_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0)

        def SQL_BUFFER_RESULT_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0)

        def SQL_NO_CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0)

        def SQL_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0)

        def SRID_SYMBOL(self):
            return self.getToken(MySQLParser.SRID_SYMBOL, 0)

        def STACKED_SYMBOL(self):
            return self.getToken(MySQLParser.STACKED_SYMBOL, 0)

        def STARTS_SYMBOL(self):
            return self.getToken(MySQLParser.STARTS_SYMBOL, 0)

        def STATS_AUTO_RECALC_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0)

        def STATS_PERSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0)

        def STATS_SAMPLE_PAGES_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MySQLParser.STATUS_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def STRING_SYMBOL(self):
            return self.getToken(MySQLParser.STRING_SYMBOL, 0)

        def SUBCLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0)

        def SUBDATE_SYMBOL(self):
            return self.getToken(MySQLParser.SUBDATE_SYMBOL, 0)

        def SUBJECT_SYMBOL(self):
            return self.getToken(MySQLParser.SUBJECT_SYMBOL, 0)

        def SUBPARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0)

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0)

        def SUSPEND_SYMBOL(self):
            return self.getToken(MySQLParser.SUSPEND_SYMBOL, 0)

        def SWAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SWAPS_SYMBOL, 0)

        def SWITCHES_SYMBOL(self):
            return self.getToken(MySQLParser.SWITCHES_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def TABLE_CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0)

        def TABLE_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPORARY_SYMBOL, 0)

        def TEMPTABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.TEXT_SYMBOL, 0)

        def THAN_SYMBOL(self):
            return self.getToken(MySQLParser.THAN_SYMBOL, 0)

        def THREAD_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0)

        def TIES_SYMBOL(self):
            return self.getToken(MySQLParser.TIES_SYMBOL, 0)

        def TIMESTAMP_ADD_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0)

        def TIMESTAMP_DIFF_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def TRANSACTION_SYMBOL(self):
            return self.getToken(MySQLParser.TRANSACTION_SYMBOL, 0)

        def TRIGGERS_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGERS_SYMBOL, 0)

        def TYPES_SYMBOL(self):
            return self.getToken(MySQLParser.TYPES_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MySQLParser.TYPE_SYMBOL, 0)

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0)

        def UNCOMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0)

        def UNDEFINED_SYMBOL(self):
            return self.getToken(MySQLParser.UNDEFINED_SYMBOL, 0)

        def UNDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDOFILE_SYMBOL, 0)

        def UNDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0)

        def UNKNOWN_SYMBOL(self):
            return self.getToken(MySQLParser.UNKNOWN_SYMBOL, 0)

        def UNTIL_SYMBOL(self):
            return self.getToken(MySQLParser.UNTIL_SYMBOL, 0)

        def UPGRADE_SYMBOL(self):
            return self.getToken(MySQLParser.UPGRADE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def USE_FRM_SYMBOL(self):
            return self.getToken(MySQLParser.USE_FRM_SYMBOL, 0)

        def VALIDATION_SYMBOL(self):
            return self.getToken(MySQLParser.VALIDATION_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.VALUE_SYMBOL, 0)

        def VARIABLES_SYMBOL(self):
            return self.getToken(MySQLParser.VARIABLES_SYMBOL, 0)

        def VCPU_SYMBOL(self):
            return self.getToken(MySQLParser.VCPU_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def VISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.VISIBLE_SYMBOL, 0)

        def WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.WAIT_SYMBOL, 0)

        def WARNINGS_SYMBOL(self):
            return self.getToken(MySQLParser.WARNINGS_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(MySQLParser.WEEK_SYMBOL, 0)

        def WEIGHT_STRING_SYMBOL(self):
            return self.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0)

        def WITHOUT_SYMBOL(self):
            return self.getToken(MySQLParser.WITHOUT_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(MySQLParser.WORK_SYMBOL, 0)

        def WRAPPER_SYMBOL(self):
            return self.getToken(MySQLParser.WRAPPER_SYMBOL, 0)

        def X509_SYMBOL(self):
            return self.getToken(MySQLParser.X509_SYMBOL, 0)

        def XID_SYMBOL(self):
            return self.getToken(MySQLParser.XID_SYMBOL, 0)

        def XML_SYMBOL(self):
            return self.getToken(MySQLParser.XML_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_SYMBOL, 0)

        def ARRAY_SYMBOL(self):
            return self.getToken(MySQLParser.ARRAY_SYMBOL, 0)

        def FAILED_LOGIN_ATTEMPTS_SYMBOL(self):
            return self.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0)

        def MEMBER_SYMBOL(self):
            return self.getToken(MySQLParser.MEMBER_SYMBOL, 0)

        def OFF_SYMBOL(self):
            return self.getToken(MySQLParser.OFF_SYMBOL, 0)

        def PASSWORD_LOCK_TIME_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0)

        def RANDOM_SYMBOL(self):
            return self.getToken(MySQLParser.RANDOM_SYMBOL, 0)

        def REQUIRE_ROW_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0)

        def REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0)

        def STREAM_SYMBOL(self):
            return self.getToken(MySQLParser.STREAM_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeywordsUnambiguous

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsUnambiguous" ):
                listener.enterIdentifierKeywordsUnambiguous(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsUnambiguous" ):
                listener.exitIdentifierKeywordsUnambiguous(self)




    def identifierKeywordsUnambiguous(self):

        localctx = MySQLParser.IdentifierKeywordsUnambiguousContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1208, self.RULE_identifierKeywordsUnambiguous)
        self._la = 0 # Token type
        try:
            self.state = 8376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8373
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySQLParser.ACCOUNT_SYMBOL) | (1 << MySQLParser.ACTION_SYMBOL) | (1 << MySQLParser.ADDDATE_SYMBOL) | (1 << MySQLParser.AFTER_SYMBOL) | (1 << MySQLParser.AGAINST_SYMBOL) | (1 << MySQLParser.AGGREGATE_SYMBOL) | (1 << MySQLParser.ALGORITHM_SYMBOL) | (1 << MySQLParser.ALWAYS_SYMBOL) | (1 << MySQLParser.ANY_SYMBOL) | (1 << MySQLParser.AT_SYMBOL) | (1 << MySQLParser.AUTOEXTEND_SIZE_SYMBOL) | (1 << MySQLParser.AUTO_INCREMENT_SYMBOL) | (1 << MySQLParser.AVG_ROW_LENGTH_SYMBOL) | (1 << MySQLParser.AVG_SYMBOL) | (1 << MySQLParser.BACKUP_SYMBOL) | (1 << MySQLParser.BINLOG_SYMBOL) | (1 << MySQLParser.BIT_SYMBOL) | (1 << MySQLParser.BLOCK_SYMBOL) | (1 << MySQLParser.BOOLEAN_SYMBOL) | (1 << MySQLParser.BOOL_SYMBOL) | (1 << MySQLParser.BTREE_SYMBOL) | (1 << MySQLParser.CASCADED_SYMBOL) | (1 << MySQLParser.CATALOG_NAME_SYMBOL) | (1 << MySQLParser.CHAIN_SYMBOL) | (1 << MySQLParser.CHANGED_SYMBOL) | (1 << MySQLParser.CHANNEL_SYMBOL) | (1 << MySQLParser.CIPHER_SYMBOL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MySQLParser.CLASS_ORIGIN_SYMBOL - 64)) | (1 << (MySQLParser.CLIENT_SYMBOL - 64)) | (1 << (MySQLParser.CLOSE_SYMBOL - 64)) | (1 << (MySQLParser.COALESCE_SYMBOL - 64)) | (1 << (MySQLParser.CODE_SYMBOL - 64)) | (1 << (MySQLParser.COLLATION_SYMBOL - 64)) | (1 << (MySQLParser.COLUMNS_SYMBOL - 64)) | (1 << (MySQLParser.COLUMN_NAME_SYMBOL - 64)) | (1 << (MySQLParser.COLUMN_FORMAT_SYMBOL - 64)) | (1 << (MySQLParser.COMMITTED_SYMBOL - 64)) | (1 << (MySQLParser.COMPACT_SYMBOL - 64)) | (1 << (MySQLParser.COMPLETION_SYMBOL - 64)) | (1 << (MySQLParser.COMPRESSED_SYMBOL - 64)) | (1 << (MySQLParser.COMPRESSION_SYMBOL - 64)) | (1 << (MySQLParser.CONCURRENT_SYMBOL - 64)) | (1 << (MySQLParser.CONNECTION_SYMBOL - 64)) | (1 << (MySQLParser.CONSISTENT_SYMBOL - 64)) | (1 << (MySQLParser.CONSTRAINT_CATALOG_SYMBOL - 64)) | (1 << (MySQLParser.CONSTRAINT_NAME_SYMBOL - 64)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1 << (MySQLParser.CONTEXT_SYMBOL - 64)) | (1 << (MySQLParser.CPU_SYMBOL - 64)) | (1 << (MySQLParser.CURRENT_SYMBOL - 64)) | (1 << (MySQLParser.CURSOR_NAME_SYMBOL - 64)) | (1 << (MySQLParser.DATAFILE_SYMBOL - 64)) | (1 << (MySQLParser.DATA_SYMBOL - 64)) | (1 << (MySQLParser.DATETIME_SYMBOL - 64)) | (1 << (MySQLParser.DATE_SYMBOL - 64)) | (1 << (MySQLParser.DAY_SYMBOL - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (MySQLParser.DEFAULT_AUTH_SYMBOL - 129)) | (1 << (MySQLParser.DEFINER_SYMBOL - 129)) | (1 << (MySQLParser.DELAY_KEY_WRITE_SYMBOL - 129)) | (1 << (MySQLParser.DIAGNOSTICS_SYMBOL - 129)) | (1 << (MySQLParser.DIRECTORY_SYMBOL - 129)) | (1 << (MySQLParser.DISABLE_SYMBOL - 129)) | (1 << (MySQLParser.DISCARD_SYMBOL - 129)) | (1 << (MySQLParser.DISK_SYMBOL - 129)) | (1 << (MySQLParser.DUMPFILE_SYMBOL - 129)) | (1 << (MySQLParser.DUPLICATE_SYMBOL - 129)) | (1 << (MySQLParser.DYNAMIC_SYMBOL - 129)) | (1 << (MySQLParser.ENABLE_SYMBOL - 129)) | (1 << (MySQLParser.ENCRYPTION_SYMBOL - 129)) | (1 << (MySQLParser.ENDS_SYMBOL - 129)) | (1 << (MySQLParser.ENGINES_SYMBOL - 129)) | (1 << (MySQLParser.ENGINE_SYMBOL - 129)) | (1 << (MySQLParser.ENUM_SYMBOL - 129)) | (1 << (MySQLParser.ERROR_SYMBOL - 129)) | (1 << (MySQLParser.ERRORS_SYMBOL - 129)) | (1 << (MySQLParser.ESCAPE_SYMBOL - 129)) | (1 << (MySQLParser.EVENTS_SYMBOL - 129)) | (1 << (MySQLParser.EVERY_SYMBOL - 129)) | (1 << (MySQLParser.EXCHANGE_SYMBOL - 129)) | (1 << (MySQLParser.EXPANSION_SYMBOL - 129)) | (1 << (MySQLParser.EXPIRE_SYMBOL - 129)) | (1 << (MySQLParser.EXPORT_SYMBOL - 129)) | (1 << (MySQLParser.EXTENDED_SYMBOL - 129)) | (1 << (MySQLParser.EXTENT_SIZE_SYMBOL - 129)) | (1 << (MySQLParser.FAST_SYMBOL - 129)) | (1 << (MySQLParser.FAULTS_SYMBOL - 129)) | (1 << (MySQLParser.FILE_BLOCK_SIZE_SYMBOL - 129)) | (1 << (MySQLParser.FILTER_SYMBOL - 129)) | (1 << (MySQLParser.FIRST_SYMBOL - 129)) | (1 << (MySQLParser.FIXED_SYMBOL - 129)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (MySQLParser.FORMAT_SYMBOL - 201)) | (1 << (MySQLParser.FOUND_SYMBOL - 201)) | (1 << (MySQLParser.FULL_SYMBOL - 201)) | (1 << (MySQLParser.GENERAL_SYMBOL - 201)) | (1 << (MySQLParser.GROUP_REPLICATION_SYMBOL - 201)) | (1 << (MySQLParser.GEOMETRYCOLLECTION_SYMBOL - 201)) | (1 << (MySQLParser.GEOMETRY_SYMBOL - 201)) | (1 << (MySQLParser.GET_FORMAT_SYMBOL - 201)) | (1 << (MySQLParser.GRANTS_SYMBOL - 201)) | (1 << (MySQLParser.HASH_SYMBOL - 201)) | (1 << (MySQLParser.HOST_SYMBOL - 201)) | (1 << (MySQLParser.HOSTS_SYMBOL - 201)) | (1 << (MySQLParser.HOUR_SYMBOL - 201)) | (1 << (MySQLParser.IDENTIFIED_SYMBOL - 201)) | (1 << (MySQLParser.IGNORE_SERVER_IDS_SYMBOL - 201)) | (1 << (MySQLParser.INDEXES_SYMBOL - 201)) | (1 << (MySQLParser.INITIAL_SIZE_SYMBOL - 201)) | (1 << (MySQLParser.INSERT_METHOD_SYMBOL - 201)) | (1 << (MySQLParser.INSTANCE_SYMBOL - 201)) | (1 << (MySQLParser.INVOKER_SYMBOL - 201)) | (1 << (MySQLParser.IO_SYMBOL - 201)) | (1 << (MySQLParser.IPC_SYMBOL - 201)) | (1 << (MySQLParser.ISOLATION_SYMBOL - 201)) | (1 << (MySQLParser.ISSUER_SYMBOL - 201)) | (1 << (MySQLParser.JSON_SYMBOL - 201)) | (1 << (MySQLParser.KEY_BLOCK_SIZE_SYMBOL - 201)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (MySQLParser.LAST_SYMBOL - 268)) | (1 << (MySQLParser.LEAVES_SYMBOL - 268)) | (1 << (MySQLParser.LESS_SYMBOL - 268)) | (1 << (MySQLParser.LEVEL_SYMBOL - 268)) | (1 << (MySQLParser.LINESTRING_SYMBOL - 268)) | (1 << (MySQLParser.LIST_SYMBOL - 268)) | (1 << (MySQLParser.LOCKS_SYMBOL - 268)) | (1 << (MySQLParser.LOGFILE_SYMBOL - 268)) | (1 << (MySQLParser.LOGS_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_AUTO_POSITION_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_DELAY_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_HOST_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_LOG_FILE_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_LOG_POS_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_PASSWORD_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_PORT_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_RETRY_COUNT_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SERVER_ID_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CAPATH_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CA_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CERT_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CIPHER_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CRL_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_KEY_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_TLS_VERSION_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_USER_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL - 268)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 268)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 268)) | (1 << (MySQLParser.MAX_ROWS_SYMBOL - 268)) | (1 << (MySQLParser.MAX_SIZE_SYMBOL - 268)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 268)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 268)))) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & ((1 << (MySQLParser.MEDIUM_SYMBOL - 333)) | (1 << (MySQLParser.MEMORY_SYMBOL - 333)) | (1 << (MySQLParser.MERGE_SYMBOL - 333)) | (1 << (MySQLParser.MESSAGE_TEXT_SYMBOL - 333)) | (1 << (MySQLParser.MICROSECOND_SYMBOL - 333)) | (1 << (MySQLParser.MIGRATE_SYMBOL - 333)) | (1 << (MySQLParser.MINUTE_SYMBOL - 333)) | (1 << (MySQLParser.MIN_ROWS_SYMBOL - 333)) | (1 << (MySQLParser.MODE_SYMBOL - 333)) | (1 << (MySQLParser.MODIFY_SYMBOL - 333)) | (1 << (MySQLParser.MONTH_SYMBOL - 333)) | (1 << (MySQLParser.MULTILINESTRING_SYMBOL - 333)) | (1 << (MySQLParser.MULTIPOINT_SYMBOL - 333)) | (1 << (MySQLParser.MULTIPOLYGON_SYMBOL - 333)) | (1 << (MySQLParser.MUTEX_SYMBOL - 333)) | (1 << (MySQLParser.MYSQL_ERRNO_SYMBOL - 333)) | (1 << (MySQLParser.NAMES_SYMBOL - 333)) | (1 << (MySQLParser.NAME_SYMBOL - 333)) | (1 << (MySQLParser.NATIONAL_SYMBOL - 333)) | (1 << (MySQLParser.NCHAR_SYMBOL - 333)) | (1 << (MySQLParser.NDBCLUSTER_SYMBOL - 333)) | (1 << (MySQLParser.NEVER_SYMBOL - 333)) | (1 << (MySQLParser.NEW_SYMBOL - 333)) | (1 << (MySQLParser.NEXT_SYMBOL - 333)) | (1 << (MySQLParser.NODEGROUP_SYMBOL - 333)) | (1 << (MySQLParser.NO_WAIT_SYMBOL - 333)) | (1 << (MySQLParser.NUMBER_SYMBOL - 333)) | (1 << (MySQLParser.NVARCHAR_SYMBOL - 333)) | (1 << (MySQLParser.OFFSET_SYMBOL - 333)) | (1 << (MySQLParser.ONE_SYMBOL - 333)) | (1 << (MySQLParser.ONLY_SYMBOL - 333)) | (1 << (MySQLParser.OPEN_SYMBOL - 333)) | (1 << (MySQLParser.OPTIONS_SYMBOL - 333)))) != 0) or ((((_la - 398)) & ~0x3f) == 0 and ((1 << (_la - 398)) & ((1 << (MySQLParser.OWNER_SYMBOL - 398)) | (1 << (MySQLParser.PACK_KEYS_SYMBOL - 398)) | (1 << (MySQLParser.PAGE_SYMBOL - 398)) | (1 << (MySQLParser.PARSER_SYMBOL - 398)) | (1 << (MySQLParser.PARTIAL_SYMBOL - 398)) | (1 << (MySQLParser.PARTITIONING_SYMBOL - 398)) | (1 << (MySQLParser.PARTITIONS_SYMBOL - 398)) | (1 << (MySQLParser.PASSWORD_SYMBOL - 398)) | (1 << (MySQLParser.PHASE_SYMBOL - 398)) | (1 << (MySQLParser.PLUGINS_SYMBOL - 398)) | (1 << (MySQLParser.PLUGIN_DIR_SYMBOL - 398)) | (1 << (MySQLParser.PLUGIN_SYMBOL - 398)) | (1 << (MySQLParser.POINT_SYMBOL - 398)) | (1 << (MySQLParser.POLYGON_SYMBOL - 398)) | (1 << (MySQLParser.PORT_SYMBOL - 398)) | (1 << (MySQLParser.PRESERVE_SYMBOL - 398)) | (1 << (MySQLParser.PREV_SYMBOL - 398)) | (1 << (MySQLParser.PRIVILEGES_SYMBOL - 398)) | (1 << (MySQLParser.PROCESSLIST_SYMBOL - 398)) | (1 << (MySQLParser.PROFILE_SYMBOL - 398)) | (1 << (MySQLParser.PROFILES_SYMBOL - 398)) | (1 << (MySQLParser.QUARTER_SYMBOL - 398)) | (1 << (MySQLParser.QUERY_SYMBOL - 398)) | (1 << (MySQLParser.QUICK_SYMBOL - 398)) | (1 << (MySQLParser.READ_ONLY_SYMBOL - 398)) | (1 << (MySQLParser.REBUILD_SYMBOL - 398)) | (1 << (MySQLParser.RECOVER_SYMBOL - 398)) | (1 << (MySQLParser.REDO_BUFFER_SIZE_SYMBOL - 398)) | (1 << (MySQLParser.REDUNDANT_SYMBOL - 398)) | (1 << (MySQLParser.RELAY_SYMBOL - 398)) | (1 << (MySQLParser.RELAYLOG_SYMBOL - 398)) | (1 << (MySQLParser.RELAY_LOG_FILE_SYMBOL - 398)) | (1 << (MySQLParser.RELAY_LOG_POS_SYMBOL - 398)) | (1 << (MySQLParser.RELAY_THREAD_SYMBOL - 398)) | (1 << (MySQLParser.REMOVE_SYMBOL - 398)) | (1 << (MySQLParser.REORGANIZE_SYMBOL - 398)) | (1 << (MySQLParser.REPEATABLE_SYMBOL - 398)) | (1 << (MySQLParser.REPLICATE_DO_DB_SYMBOL - 398)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB_SYMBOL - 398)))) != 0) or ((((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & ((1 << (MySQLParser.REPLICATE_DO_TABLE_SYMBOL - 462)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL - 462)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL - 462)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 462)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB_SYMBOL - 462)) | (1 << (MySQLParser.RESTORE_SYMBOL - 462)) | (1 << (MySQLParser.RESUME_SYMBOL - 462)) | (1 << (MySQLParser.RETURNED_SQLSTATE_SYMBOL - 462)) | (1 << (MySQLParser.RETURNS_SYMBOL - 462)) | (1 << (MySQLParser.REVERSE_SYMBOL - 462)) | (1 << (MySQLParser.ROLLUP_SYMBOL - 462)) | (1 << (MySQLParser.ROTATE_SYMBOL - 462)) | (1 << (MySQLParser.ROUTINE_SYMBOL - 462)) | (1 << (MySQLParser.ROW_COUNT_SYMBOL - 462)) | (1 << (MySQLParser.ROW_FORMAT_SYMBOL - 462)) | (1 << (MySQLParser.RTREE_SYMBOL - 462)) | (1 << (MySQLParser.SCHEDULE_SYMBOL - 462)) | (1 << (MySQLParser.SCHEMA_NAME_SYMBOL - 462)) | (1 << (MySQLParser.SECOND_SYMBOL - 462)) | (1 << (MySQLParser.SECURITY_SYMBOL - 462)) | (1 << (MySQLParser.SERIALIZABLE_SYMBOL - 462)) | (1 << (MySQLParser.SERIAL_SYMBOL - 462)) | (1 << (MySQLParser.SERVER_SYMBOL - 462)) | (1 << (MySQLParser.SHARE_SYMBOL - 462)) | (1 << (MySQLParser.SIMPLE_SYMBOL - 462)) | (1 << (MySQLParser.SLOW_SYMBOL - 462)) | (1 << (MySQLParser.SNAPSHOT_SYMBOL - 462)) | (1 << (MySQLParser.SOCKET_SYMBOL - 462)) | (1 << (MySQLParser.SONAME_SYMBOL - 462)) | (1 << (MySQLParser.SOUNDS_SYMBOL - 462)) | (1 << (MySQLParser.SOURCE_SYMBOL - 462)))) != 0) or ((((_la - 528)) & ~0x3f) == 0 and ((1 << (_la - 528)) & ((1 << (MySQLParser.SQL_AFTER_GTIDS_SYMBOL - 528)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL - 528)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS_SYMBOL - 528)) | (1 << (MySQLParser.SQL_BUFFER_RESULT_SYMBOL - 528)) | (1 << (MySQLParser.SQL_NO_CACHE_SYMBOL - 528)) | (1 << (MySQLParser.SQL_THREAD_SYMBOL - 528)) | (1 << (MySQLParser.STACKED_SYMBOL - 528)) | (1 << (MySQLParser.STARTS_SYMBOL - 528)) | (1 << (MySQLParser.STATS_AUTO_RECALC_SYMBOL - 528)) | (1 << (MySQLParser.STATS_PERSISTENT_SYMBOL - 528)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 528)) | (1 << (MySQLParser.STATUS_SYMBOL - 528)) | (1 << (MySQLParser.STORAGE_SYMBOL - 528)) | (1 << (MySQLParser.STRING_SYMBOL - 528)) | (1 << (MySQLParser.SUBCLASS_ORIGIN_SYMBOL - 528)) | (1 << (MySQLParser.SUBDATE_SYMBOL - 528)) | (1 << (MySQLParser.SUBJECT_SYMBOL - 528)) | (1 << (MySQLParser.SUBPARTITIONS_SYMBOL - 528)) | (1 << (MySQLParser.SUBPARTITION_SYMBOL - 528)) | (1 << (MySQLParser.SUSPEND_SYMBOL - 528)) | (1 << (MySQLParser.SWAPS_SYMBOL - 528)) | (1 << (MySQLParser.SWITCHES_SYMBOL - 528)) | (1 << (MySQLParser.TABLES_SYMBOL - 528)) | (1 << (MySQLParser.TABLESPACE_SYMBOL - 528)) | (1 << (MySQLParser.TABLE_CHECKSUM_SYMBOL - 528)) | (1 << (MySQLParser.TABLE_NAME_SYMBOL - 528)) | (1 << (MySQLParser.TEMPORARY_SYMBOL - 528)) | (1 << (MySQLParser.TEMPTABLE_SYMBOL - 528)) | (1 << (MySQLParser.TEXT_SYMBOL - 528)) | (1 << (MySQLParser.THAN_SYMBOL - 528)) | (1 << (MySQLParser.TIMESTAMP_SYMBOL - 528)) | (1 << (MySQLParser.TIMESTAMP_ADD_SYMBOL - 528)) | (1 << (MySQLParser.TIMESTAMP_DIFF_SYMBOL - 528)) | (1 << (MySQLParser.TIME_SYMBOL - 528)))) != 0) or ((((_la - 592)) & ~0x3f) == 0 and ((1 << (_la - 592)) & ((1 << (MySQLParser.TRANSACTION_SYMBOL - 592)) | (1 << (MySQLParser.TRIGGERS_SYMBOL - 592)) | (1 << (MySQLParser.TYPES_SYMBOL - 592)) | (1 << (MySQLParser.TYPE_SYMBOL - 592)) | (1 << (MySQLParser.UNCOMMITTED_SYMBOL - 592)) | (1 << (MySQLParser.UNDEFINED_SYMBOL - 592)) | (1 << (MySQLParser.UNDOFILE_SYMBOL - 592)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE_SYMBOL - 592)) | (1 << (MySQLParser.UNKNOWN_SYMBOL - 592)) | (1 << (MySQLParser.UNTIL_SYMBOL - 592)) | (1 << (MySQLParser.UPGRADE_SYMBOL - 592)) | (1 << (MySQLParser.USER_RESOURCES_SYMBOL - 592)) | (1 << (MySQLParser.USER_SYMBOL - 592)) | (1 << (MySQLParser.USE_FRM_SYMBOL - 592)) | (1 << (MySQLParser.VALIDATION_SYMBOL - 592)) | (1 << (MySQLParser.VALUE_SYMBOL - 592)) | (1 << (MySQLParser.VARIABLES_SYMBOL - 592)) | (1 << (MySQLParser.VIEW_SYMBOL - 592)) | (1 << (MySQLParser.WAIT_SYMBOL - 592)) | (1 << (MySQLParser.WARNINGS_SYMBOL - 592)) | (1 << (MySQLParser.WEEK_SYMBOL - 592)) | (1 << (MySQLParser.WEIGHT_STRING_SYMBOL - 592)) | (1 << (MySQLParser.WITHOUT_SYMBOL - 592)) | (1 << (MySQLParser.WORK_SYMBOL - 592)) | (1 << (MySQLParser.WRAPPER_SYMBOL - 592)) | (1 << (MySQLParser.X509_SYMBOL - 592)) | (1 << (MySQLParser.XID_SYMBOL - 592)) | (1 << (MySQLParser.XML_SYMBOL - 592)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (MySQLParser.YEAR_SYMBOL - 656)) | (1 << (MySQLParser.ROLE_SYMBOL - 656)) | (1 << (MySQLParser.ADMIN_SYMBOL - 656)) | (1 << (MySQLParser.INVISIBLE_SYMBOL - 656)) | (1 << (MySQLParser.VISIBLE_SYMBOL - 656)) | (1 << (MySQLParser.COMPONENT_SYMBOL - 656)) | (1 << (MySQLParser.SKIP_SYMBOL - 656)) | (1 << (MySQLParser.LOCKED_SYMBOL - 656)) | (1 << (MySQLParser.NOWAIT_SYMBOL - 656)) | (1 << (MySQLParser.HISTOGRAM_SYMBOL - 656)) | (1 << (MySQLParser.BUCKETS_SYMBOL - 656)) | (1 << (MySQLParser.EXCLUDE_SYMBOL - 656)) | (1 << (MySQLParser.FOLLOWING_SYMBOL - 656)) | (1 << (MySQLParser.NULLS_SYMBOL - 656)) | (1 << (MySQLParser.OTHERS_SYMBOL - 656)) | (1 << (MySQLParser.PRECEDING_SYMBOL - 656)) | (1 << (MySQLParser.RESPECT_SYMBOL - 656)) | (1 << (MySQLParser.TIES_SYMBOL - 656)) | (1 << (MySQLParser.UNBOUNDED_SYMBOL - 656)) | (1 << (MySQLParser.NESTED_SYMBOL - 656)) | (1 << (MySQLParser.ORDINALITY_SYMBOL - 656)) | (1 << (MySQLParser.PATH_SYMBOL - 656)) | (1 << (MySQLParser.HISTORY_SYMBOL - 656)) | (1 << (MySQLParser.REUSE_SYMBOL - 656)) | (1 << (MySQLParser.SRID_SYMBOL - 656)) | (1 << (MySQLParser.THREAD_PRIORITY_SYMBOL - 656)) | (1 << (MySQLParser.VCPU_SYMBOL - 656)) | (1 << (MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL - 656)) | (1 << (MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL - 656)) | (1 << (MySQLParser.DEFINITION_SYMBOL - 656)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 656)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 656)) | (1 << (MySQLParser.REFERENCE_SYMBOL - 656)) | (1 << (MySQLParser.OPTIONAL_SYMBOL - 656)))) != 0) or ((((_la - 720)) & ~0x3f) == 0 and ((1 << (_la - 720)) & ((1 << (MySQLParser.SECONDARY_SYMBOL - 720)) | (1 << (MySQLParser.SECONDARY_ENGINE_SYMBOL - 720)) | (1 << (MySQLParser.SECONDARY_LOAD_SYMBOL - 720)) | (1 << (MySQLParser.SECONDARY_UNLOAD_SYMBOL - 720)) | (1 << (MySQLParser.ACTIVE_SYMBOL - 720)) | (1 << (MySQLParser.INACTIVE_SYMBOL - 720)) | (1 << (MySQLParser.RETAIN_SYMBOL - 720)) | (1 << (MySQLParser.OLD_SYMBOL - 720)) | (1 << (MySQLParser.NETWORK_NAMESPACE_SYMBOL - 720)) | (1 << (MySQLParser.ENFORCED_SYMBOL - 720)) | (1 << (MySQLParser.OJ_SYMBOL - 720)) | (1 << (MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL - 720)) | (1 << (MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 720)) | (1 << (MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL - 720)) | (1 << (MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL - 720)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8374
                if not serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80019")
                self.state = 8375
                _la = self._input.LA(1)
                if not(_la==MySQLParser.TIMESTAMP_SYMBOL or _la==MySQLParser.TIME_SYMBOL or ((((_la - 731)) & ~0x3f) == 0 and ((1 << (_la - 731)) & ((1 << (MySQLParser.ARRAY_SYMBOL - 731)) | (1 << (MySQLParser.MEMBER_SYMBOL - 731)) | (1 << (MySQLParser.RANDOM_SYMBOL - 731)) | (1 << (MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL - 731)) | (1 << (MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 731)) | (1 << (MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL - 731)) | (1 << (MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL - 731)) | (1 << (MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL - 731)) | (1 << (MySQLParser.PASSWORD_LOCK_TIME_SYMBOL - 731)) | (1 << (MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL - 731)) | (1 << (MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL - 731)) | (1 << (MySQLParser.STREAM_SYMBOL - 731)) | (1 << (MySQLParser.OFF_SYMBOL - 731)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleOrLabelKeyword(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrLabelKeywordContext,0)


        def roleOrIdentifierKeyword(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrIdentifierKeywordContext,0)


        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous2Labels(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous2LabelsContext,0)


        def identifierKeywordsAmbiguous4SystemVariables(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_roleKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleKeyword" ):
                listener.enterRoleKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleKeyword" ):
                listener.exitRoleKeyword(self)




    def roleKeyword(self):

        localctx = MySQLParser.RoleKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1210, self.RULE_roleKeyword)
        try:
            self.state = 8388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8378
                if not serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80017")
                self.state = 8381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1117,self._ctx)
                if la_ == 1:
                    self.state = 8379
                    self.roleOrLabelKeyword()
                    pass

                elif la_ == 2:
                    self.state = 8380
                    self.roleOrIdentifierKeyword()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8386
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1118,self._ctx)
                if la_ == 1:
                    self.state = 8383
                    self.identifierKeywordsUnambiguous()
                    pass

                elif la_ == 2:
                    self.state = 8384
                    self.identifierKeywordsAmbiguous2Labels()
                    pass

                elif la_ == 3:
                    self.state = 8385
                    self.identifierKeywordsAmbiguous4SystemVariables()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LValueKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous1RolesAndLabels(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext,0)


        def identifierKeywordsAmbiguous2Labels(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous2LabelsContext,0)


        def identifierKeywordsAmbiguous3Roles(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous3RolesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_lValueKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLValueKeyword" ):
                listener.enterLValueKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLValueKeyword" ):
                listener.exitLValueKeyword(self)




    def lValueKeyword(self):

        localctx = MySQLParser.LValueKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1212, self.RULE_lValueKeyword)
        try:
            self.state = 8394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8390
                self.identifierKeywordsUnambiguous()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8391
                self.identifierKeywordsAmbiguous1RolesAndLabels()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8392
                self.identifierKeywordsAmbiguous2Labels()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8393
                self.identifierKeywordsAmbiguous3Roles()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL_SYMBOL(self):
            return self.getToken(MySQLParser.GLOBAL_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def PERSIST_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_SYMBOL, 0)

        def PERSIST_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(MySQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous4SystemVariables" ):
                listener.enterIdentifierKeywordsAmbiguous4SystemVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous4SystemVariables" ):
                listener.exitIdentifierKeywordsAmbiguous4SystemVariables(self)




    def identifierKeywordsAmbiguous4SystemVariables(self):

        localctx = MySQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1214, self.RULE_identifierKeywordsAmbiguous4SystemVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8396
            _la = self._input.LA(1)
            if not(_la==MySQLParser.GLOBAL_SYMBOL or _la==MySQLParser.LOCAL_SYMBOL or _la==MySQLParser.SESSION_SYMBOL or _la==MySQLParser.PERSIST_SYMBOL or _la==MySQLParser.PERSIST_ONLY_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrIdentifierKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ACCOUNT_SYMBOL, 0)

        def ASCII_SYMBOL(self):
            return self.getToken(MySQLParser.ASCII_SYMBOL, 0)

        def ALWAYS_SYMBOL(self):
            return self.getToken(MySQLParser.ALWAYS_SYMBOL, 0)

        def BACKUP_SYMBOL(self):
            return self.getToken(MySQLParser.BACKUP_SYMBOL, 0)

        def BEGIN_SYMBOL(self):
            return self.getToken(MySQLParser.BEGIN_SYMBOL, 0)

        def BYTE_SYMBOL(self):
            return self.getToken(MySQLParser.BYTE_SYMBOL, 0)

        def CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.CACHE_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(MySQLParser.CHARSET_SYMBOL, 0)

        def CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.CHECKSUM_SYMBOL, 0)

        def CLONE_SYMBOL(self):
            return self.getToken(MySQLParser.CLONE_SYMBOL, 0)

        def CLOSE_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def COMMIT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMIT_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTAINS_SYMBOL, 0)

        def DEALLOCATE_SYMBOL(self):
            return self.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def FLUSH_SYMBOL(self):
            return self.getToken(MySQLParser.FLUSH_SYMBOL, 0)

        def FOLLOWS_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWS_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.FORMAT_SYMBOL, 0)

        def GROUP_REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0)

        def HANDLER_SYMBOL(self):
            return self.getToken(MySQLParser.HANDLER_SYMBOL, 0)

        def HELP_SYMBOL(self):
            return self.getToken(MySQLParser.HELP_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(MySQLParser.HOST_SYMBOL, 0)

        def INSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.INSTALL_SYMBOL, 0)

        def INVISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.INVISIBLE_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(MySQLParser.LANGUAGE_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def OPEN_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONS_SYMBOL, 0)

        def OWNER_SYMBOL(self):
            return self.getToken(MySQLParser.OWNER_SYMBOL, 0)

        def PARSER_SYMBOL(self):
            return self.getToken(MySQLParser.PARSER_SYMBOL, 0)

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def PORT_SYMBOL(self):
            return self.getToken(MySQLParser.PORT_SYMBOL, 0)

        def PRECEDES_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDES_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(MySQLParser.PREPARE_SYMBOL, 0)

        def REMOVE_SYMBOL(self):
            return self.getToken(MySQLParser.REMOVE_SYMBOL, 0)

        def REPAIR_SYMBOL(self):
            return self.getToken(MySQLParser.REPAIR_SYMBOL, 0)

        def RESET_SYMBOL(self):
            return self.getToken(MySQLParser.RESET_SYMBOL, 0)

        def RESTORE_SYMBOL(self):
            return self.getToken(MySQLParser.RESTORE_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def ROLLBACK_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLBACK_SYMBOL, 0)

        def SAVEPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0)

        def SECONDARY_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_SYMBOL, 0)

        def SECONDARY_ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0)

        def SECONDARY_LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0)

        def SECONDARY_UNLOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(MySQLParser.SECURITY_SYMBOL, 0)

        def SERVER_SYMBOL(self):
            return self.getToken(MySQLParser.SERVER_SYMBOL, 0)

        def SIGNED_SYMBOL(self):
            return self.getToken(MySQLParser.SIGNED_SYMBOL, 0)

        def SOCKET_SYMBOL(self):
            return self.getToken(MySQLParser.SOCKET_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def SONAME_SYMBOL(self):
            return self.getToken(MySQLParser.SONAME_SYMBOL, 0)

        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def STOP_SYMBOL(self):
            return self.getToken(MySQLParser.STOP_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUNCATE_SYMBOL, 0)

        def UNICODE_SYMBOL(self):
            return self.getToken(MySQLParser.UNICODE_SYMBOL, 0)

        def UNINSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.UNINSTALL_SYMBOL, 0)

        def UPGRADE_SYMBOL(self):
            return self.getToken(MySQLParser.UPGRADE_SYMBOL, 0)

        def VISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.VISIBLE_SYMBOL, 0)

        def WRAPPER_SYMBOL(self):
            return self.getToken(MySQLParser.WRAPPER_SYMBOL, 0)

        def XA_SYMBOL(self):
            return self.getToken(MySQLParser.XA_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_roleOrIdentifierKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrIdentifierKeyword" ):
                listener.enterRoleOrIdentifierKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrIdentifierKeyword" ):
                listener.exitRoleOrIdentifierKeyword(self)




    def roleOrIdentifierKeyword(self):

        localctx = MySQLParser.RoleOrIdentifierKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1216, self.RULE_roleOrIdentifierKeyword)
        self._la = 0 # Token type
        try:
            self.state = 8403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8398
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySQLParser.ACCOUNT_SYMBOL) | (1 << MySQLParser.ALWAYS_SYMBOL) | (1 << MySQLParser.ASCII_SYMBOL) | (1 << MySQLParser.BACKUP_SYMBOL) | (1 << MySQLParser.BEGIN_SYMBOL) | (1 << MySQLParser.BYTE_SYMBOL) | (1 << MySQLParser.CACHE_SYMBOL) | (1 << MySQLParser.CHARSET_SYMBOL) | (1 << MySQLParser.CHECKSUM_SYMBOL))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (MySQLParser.CLOSE_SYMBOL - 66)) | (1 << (MySQLParser.COMMENT_SYMBOL - 66)) | (1 << (MySQLParser.COMMIT_SYMBOL - 66)) | (1 << (MySQLParser.CONTAINS_SYMBOL - 66)) | (1 << (MySQLParser.DEALLOCATE_SYMBOL - 66)))) != 0) or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (MySQLParser.DO_SYMBOL - 147)) | (1 << (MySQLParser.END_SYMBOL - 147)) | (1 << (MySQLParser.FLUSH_SYMBOL - 147)) | (1 << (MySQLParser.FOLLOWS_SYMBOL - 147)) | (1 << (MySQLParser.FORMAT_SYMBOL - 147)) | (1 << (MySQLParser.GROUP_REPLICATION_SYMBOL - 147)))) != 0) or ((((_la - 219)) & ~0x3f) == 0 and ((1 << (_la - 219)) & ((1 << (MySQLParser.HANDLER_SYMBOL - 219)) | (1 << (MySQLParser.HELP_SYMBOL - 219)) | (1 << (MySQLParser.HOST_SYMBOL - 219)) | (1 << (MySQLParser.INSTALL_SYMBOL - 219)) | (1 << (MySQLParser.LANGUAGE_SYMBOL - 219)))) != 0) or ((((_la - 373)) & ~0x3f) == 0 and ((1 << (_la - 373)) & ((1 << (MySQLParser.NO_SYMBOL - 373)) | (1 << (MySQLParser.OPEN_SYMBOL - 373)) | (1 << (MySQLParser.OPTIONS_SYMBOL - 373)) | (1 << (MySQLParser.OWNER_SYMBOL - 373)) | (1 << (MySQLParser.PARSER_SYMBOL - 373)) | (1 << (MySQLParser.PARTITION_SYMBOL - 373)) | (1 << (MySQLParser.PORT_SYMBOL - 373)) | (1 << (MySQLParser.PRECEDES_SYMBOL - 373)) | (1 << (MySQLParser.PREPARE_SYMBOL - 373)))) != 0) or ((((_la - 452)) & ~0x3f) == 0 and ((1 << (_la - 452)) & ((1 << (MySQLParser.REMOVE_SYMBOL - 452)) | (1 << (MySQLParser.REPAIR_SYMBOL - 452)) | (1 << (MySQLParser.RESET_SYMBOL - 452)) | (1 << (MySQLParser.RESTORE_SYMBOL - 452)) | (1 << (MySQLParser.ROLLBACK_SYMBOL - 452)) | (1 << (MySQLParser.SAVEPOINT_SYMBOL - 452)) | (1 << (MySQLParser.SECURITY_SYMBOL - 452)) | (1 << (MySQLParser.SERVER_SYMBOL - 452)) | (1 << (MySQLParser.SIGNED_SYMBOL - 452)) | (1 << (MySQLParser.SLAVE_SYMBOL - 452)))) != 0) or ((((_la - 519)) & ~0x3f) == 0 and ((1 << (_la - 519)) & ((1 << (MySQLParser.SOCKET_SYMBOL - 519)) | (1 << (MySQLParser.SONAME_SYMBOL - 519)) | (1 << (MySQLParser.START_SYMBOL - 519)) | (1 << (MySQLParser.STOP_SYMBOL - 519)))) != 0) or ((((_la - 597)) & ~0x3f) == 0 and ((1 << (_la - 597)) & ((1 << (MySQLParser.TRUNCATE_SYMBOL - 597)) | (1 << (MySQLParser.UNICODE_SYMBOL - 597)) | (1 << (MySQLParser.UNINSTALL_SYMBOL - 597)) | (1 << (MySQLParser.UPGRADE_SYMBOL - 597)) | (1 << (MySQLParser.WRAPPER_SYMBOL - 597)) | (1 << (MySQLParser.XA_SYMBOL - 597)) | (1 << (MySQLParser.ROLE_SYMBOL - 597)))) != 0) or ((((_la - 661)) & ~0x3f) == 0 and ((1 << (_la - 661)) & ((1 << (MySQLParser.INVISIBLE_SYMBOL - 661)) | (1 << (MySQLParser.VISIBLE_SYMBOL - 661)) | (1 << (MySQLParser.CLONE_SYMBOL - 661)) | (1 << (MySQLParser.SECONDARY_SYMBOL - 661)) | (1 << (MySQLParser.SECONDARY_ENGINE_SYMBOL - 661)) | (1 << (MySQLParser.SECONDARY_LOAD_SYMBOL - 661)) | (1 << (MySQLParser.SECONDARY_UNLOAD_SYMBOL - 661)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8399
                if not serverVersion >= 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50709")
                self.state = 8400
                self.match(MySQLParser.SHUTDOWN_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8401
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 8402
                self.match(MySQLParser.IMPORT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrLabelKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION_SYMBOL(self):
            return self.getToken(MySQLParser.ACTION_SYMBOL, 0)

        def ACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.ACTIVE_SYMBOL, 0)

        def ADDDATE_SYMBOL(self):
            return self.getToken(MySQLParser.ADDDATE_SYMBOL, 0)

        def AFTER_SYMBOL(self):
            return self.getToken(MySQLParser.AFTER_SYMBOL, 0)

        def AGAINST_SYMBOL(self):
            return self.getToken(MySQLParser.AGAINST_SYMBOL, 0)

        def AGGREGATE_SYMBOL(self):
            return self.getToken(MySQLParser.AGGREGATE_SYMBOL, 0)

        def ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)

        def ANALYSE_SYMBOL(self):
            return self.getToken(MySQLParser.ANALYSE_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MySQLParser.ANY_SYMBOL, 0)

        def AT_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SYMBOL, 0)

        def AUTHORS_SYMBOL(self):
            return self.getToken(MySQLParser.AUTHORS_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def AUTOEXTEND_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0)

        def AVG_ROW_LENGTH_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0)

        def AVG_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_SYMBOL, 0)

        def BINLOG_SYMBOL(self):
            return self.getToken(MySQLParser.BINLOG_SYMBOL, 0)

        def BIT_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_SYMBOL, 0)

        def BLOCK_SYMBOL(self):
            return self.getToken(MySQLParser.BLOCK_SYMBOL, 0)

        def BOOL_SYMBOL(self):
            return self.getToken(MySQLParser.BOOL_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(MySQLParser.BOOLEAN_SYMBOL, 0)

        def BTREE_SYMBOL(self):
            return self.getToken(MySQLParser.BTREE_SYMBOL, 0)

        def BUCKETS_SYMBOL(self):
            return self.getToken(MySQLParser.BUCKETS_SYMBOL, 0)

        def CASCADED_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADED_SYMBOL, 0)

        def CATALOG_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(MySQLParser.CHAIN_SYMBOL, 0)

        def CHANGED_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGED_SYMBOL, 0)

        def CHANNEL_SYMBOL(self):
            return self.getToken(MySQLParser.CHANNEL_SYMBOL, 0)

        def CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.CIPHER_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MySQLParser.CLIENT_SYMBOL, 0)

        def CLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0)

        def COALESCE_SYMBOL(self):
            return self.getToken(MySQLParser.COALESCE_SYMBOL, 0)

        def CODE_SYMBOL(self):
            return self.getToken(MySQLParser.CODE_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATION_SYMBOL, 0)

        def COLUMN_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0)

        def COLUMN_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0)

        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)

        def COMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.COMMITTED_SYMBOL, 0)

        def COMPACT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPACT_SYMBOL, 0)

        def COMPLETION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPLETION_SYMBOL, 0)

        def COMPONENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPONENT_SYMBOL, 0)

        def COMPRESSED_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSED_SYMBOL, 0)

        def COMPRESSION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSION_SYMBOL, 0)

        def CONCURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONCURRENT_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(MySQLParser.CONNECTION_SYMBOL, 0)

        def CONSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONSISTENT_SYMBOL, 0)

        def CONSTRAINT_CATALOG_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0)

        def CONSTRAINT_SCHEMA_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0)

        def CONSTRAINT_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0)

        def CONTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.CONTEXT_SYMBOL, 0)

        def CONTRIBUTORS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0)

        def CPU_SYMBOL(self):
            return self.getToken(MySQLParser.CPU_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def CURSOR_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def DATAFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DATAFILE_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(MySQLParser.DATETIME_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SYMBOL, 0)

        def DEFAULT_AUTH_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINER_SYMBOL, 0)

        def DELAY_KEY_WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0)

        def DES_KEY_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0)

        def DESCRIPTION_SYMBOL(self):
            return self.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0)

        def DIAGNOSTICS_SYMBOL(self):
            return self.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def DISCARD_SYMBOL(self):
            return self.getToken(MySQLParser.DISCARD_SYMBOL, 0)

        def DISK_SYMBOL(self):
            return self.getToken(MySQLParser.DISK_SYMBOL, 0)

        def DUMPFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DUMPFILE_SYMBOL, 0)

        def DUPLICATE_SYMBOL(self):
            return self.getToken(MySQLParser.DUPLICATE_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(MySQLParser.DYNAMIC_SYMBOL, 0)

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)

        def ENDS_SYMBOL(self):
            return self.getToken(MySQLParser.ENDS_SYMBOL, 0)

        def ENUM_SYMBOL(self):
            return self.getToken(MySQLParser.ENUM_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def ENGINES_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINES_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(MySQLParser.ERROR_SYMBOL, 0)

        def ERRORS_SYMBOL(self):
            return self.getToken(MySQLParser.ERRORS_SYMBOL, 0)

        def ESCAPE_SYMBOL(self):
            return self.getToken(MySQLParser.ESCAPE_SYMBOL, 0)

        def EVENTS_SYMBOL(self):
            return self.getToken(MySQLParser.EVENTS_SYMBOL, 0)

        def EVERY_SYMBOL(self):
            return self.getToken(MySQLParser.EVERY_SYMBOL, 0)

        def EXCLUDE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCLUDE_SYMBOL, 0)

        def EXPANSION_SYMBOL(self):
            return self.getToken(MySQLParser.EXPANSION_SYMBOL, 0)

        def EXPORT_SYMBOL(self):
            return self.getToken(MySQLParser.EXPORT_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def EXTENT_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0)

        def FAULTS_SYMBOL(self):
            return self.getToken(MySQLParser.FAULTS_SYMBOL, 0)

        def FAST_SYMBOL(self):
            return self.getToken(MySQLParser.FAST_SYMBOL, 0)

        def FOLLOWING_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWING_SYMBOL, 0)

        def FOUND_SYMBOL(self):
            return self.getToken(MySQLParser.FOUND_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def FULL_SYMBOL(self):
            return self.getToken(MySQLParser.FULL_SYMBOL, 0)

        def FILE_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MySQLParser.FILTER_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(MySQLParser.FIXED_SYMBOL, 0)

        def GENERAL_SYMBOL(self):
            return self.getToken(MySQLParser.GENERAL_SYMBOL, 0)

        def GEOMETRY_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRY_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def GET_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MySQLParser.GRANTS_SYMBOL, 0)

        def GLOBAL_SYMBOL(self):
            return self.getToken(MySQLParser.GLOBAL_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(MySQLParser.HASH_SYMBOL, 0)

        def HISTOGRAM_SYMBOL(self):
            return self.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0)

        def HISTORY_SYMBOL(self):
            return self.getToken(MySQLParser.HISTORY_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(MySQLParser.HOSTS_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def IGNORE_SERVER_IDS_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(MySQLParser.INVOKER_SYMBOL, 0)

        def INDEXES_SYMBOL(self):
            return self.getToken(MySQLParser.INDEXES_SYMBOL, 0)

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0)

        def INSTANCE_SYMBOL(self):
            return self.getToken(MySQLParser.INSTANCE_SYMBOL, 0)

        def INACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.INACTIVE_SYMBOL, 0)

        def IO_SYMBOL(self):
            return self.getToken(MySQLParser.IO_SYMBOL, 0)

        def IPC_SYMBOL(self):
            return self.getToken(MySQLParser.IPC_SYMBOL, 0)

        def ISOLATION_SYMBOL(self):
            return self.getToken(MySQLParser.ISOLATION_SYMBOL, 0)

        def ISSUER_SYMBOL(self):
            return self.getToken(MySQLParser.ISSUER_SYMBOL, 0)

        def INSERT_METHOD_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_SYMBOL, 0)

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(MySQLParser.LEAVES_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySQLParser.LESS_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.LEVEL_SYMBOL, 0)

        def LINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.LINESTRING_SYMBOL, 0)

        def LIST_SYMBOL(self):
            return self.getToken(MySQLParser.LIST_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def LOCKED_SYMBOL(self):
            return self.getToken(MySQLParser.LOCKED_SYMBOL, 0)

        def LOCKS_SYMBOL(self):
            return self.getToken(MySQLParser.LOCKS_SYMBOL, 0)

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(MySQLParser.LOGS_SYMBOL, 0)

        def MAX_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def MASTER_HEARTBEAT_PERIOD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0)

        def MASTER_HOST_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0)

        def MASTER_PORT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0)

        def MASTER_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0)

        def MASTER_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0)

        def MASTER_USER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_USER_SYMBOL, 0)

        def MASTER_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0)

        def MASTER_PUBLIC_KEY_PATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0)

        def MASTER_SERVER_ID_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0)

        def MASTER_CONNECT_RETRY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0)

        def MASTER_RETRY_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0)

        def MASTER_DELAY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0)

        def MASTER_SSL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0)

        def MASTER_SSL_CA_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0)

        def MASTER_SSL_CAPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0)

        def MASTER_TLS_VERSION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0)

        def MASTER_SSL_CERT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0)

        def MASTER_SSL_CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0)

        def MASTER_SSL_CRL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0)

        def MASTER_SSL_CRLPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0)

        def MASTER_SSL_KEY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0)

        def MASTER_AUTO_POSITION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0)

        def MAX_QUERIES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0)

        def MAX_STATEMENT_TIME_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0)

        def MAX_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0)

        def MAX_UPDATES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0)

        def MAX_USER_CONNECTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0)

        def MEDIUM_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUM_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(MySQLParser.MEMORY_SYMBOL, 0)

        def MERGE_SYMBOL(self):
            return self.getToken(MySQLParser.MERGE_SYMBOL, 0)

        def MESSAGE_TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0)

        def MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MICROSECOND_SYMBOL, 0)

        def MIGRATE_SYMBOL(self):
            return self.getToken(MySQLParser.MIGRATE_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0)

        def MODIFY_SYMBOL(self):
            return self.getToken(MySQLParser.MODIFY_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(MySQLParser.MODE_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(MySQLParser.MONTH_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0)

        def MUTEX_SYMBOL(self):
            return self.getToken(MySQLParser.MUTEX_SYMBOL, 0)

        def MYSQL_ERRNO_SYMBOL(self):
            return self.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MySQLParser.NAME_SYMBOL, 0)

        def NAMES_SYMBOL(self):
            return self.getToken(MySQLParser.NAMES_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATIONAL_SYMBOL, 0)

        def NCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NCHAR_SYMBOL, 0)

        def NDBCLUSTER_SYMBOL(self):
            return self.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0)

        def NESTED_SYMBOL(self):
            return self.getToken(MySQLParser.NESTED_SYMBOL, 0)

        def NEVER_SYMBOL(self):
            return self.getToken(MySQLParser.NEVER_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(MySQLParser.NEXT_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MySQLParser.NEW_SYMBOL, 0)

        def NO_WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NO_WAIT_SYMBOL, 0)

        def NODEGROUP_SYMBOL(self):
            return self.getToken(MySQLParser.NODEGROUP_SYMBOL, 0)

        def NULLS_SYMBOL(self):
            return self.getToken(MySQLParser.NULLS_SYMBOL, 0)

        def NOWAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NOWAIT_SYMBOL, 0)

        def NUMBER_SYMBOL(self):
            return self.getToken(MySQLParser.NUMBER_SYMBOL, 0)

        def NVARCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NVARCHAR_SYMBOL, 0)

        def OFFSET_SYMBOL(self):
            return self.getToken(MySQLParser.OFFSET_SYMBOL, 0)

        def OLD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_SYMBOL, 0)

        def OLD_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0)

        def ONE_SYMBOL(self):
            return self.getToken(MySQLParser.ONE_SYMBOL, 0)

        def OPTIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONAL_SYMBOL, 0)

        def ORDINALITY_SYMBOL(self):
            return self.getToken(MySQLParser.ORDINALITY_SYMBOL, 0)

        def ORGANIZATION_SYMBOL(self):
            return self.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0)

        def OTHERS_SYMBOL(self):
            return self.getToken(MySQLParser.OTHERS_SYMBOL, 0)

        def PACK_KEYS_SYMBOL(self):
            return self.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MySQLParser.PAGE_SYMBOL, 0)

        def PARTIAL_SYMBOL(self):
            return self.getToken(MySQLParser.PARTIAL_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONING_SYMBOL, 0)

        def PARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONS_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MySQLParser.PATH_SYMBOL, 0)

        def PHASE_SYMBOL(self):
            return self.getToken(MySQLParser.PHASE_SYMBOL, 0)

        def PLUGIN_DIR_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0)

        def PLUGIN_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_SYMBOL, 0)

        def PLUGINS_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGINS_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(MySQLParser.POINT_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.POLYGON_SYMBOL, 0)

        def PRECEDING_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDING_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(MySQLParser.PRESERVE_SYMBOL, 0)

        def PREV_SYMBOL(self):
            return self.getToken(MySQLParser.PREV_SYMBOL, 0)

        def THREAD_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def PROCESSLIST_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0)

        def PROFILE_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILE_SYMBOL, 0)

        def PROFILES_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILES_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(MySQLParser.QUARTER_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def READ_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.READ_ONLY_SYMBOL, 0)

        def REBUILD_SYMBOL(self):
            return self.getToken(MySQLParser.REBUILD_SYMBOL, 0)

        def RECOVER_SYMBOL(self):
            return self.getToken(MySQLParser.RECOVER_SYMBOL, 0)

        def REDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0)

        def REDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.REDOFILE_SYMBOL, 0)

        def REDUNDANT_SYMBOL(self):
            return self.getToken(MySQLParser.REDUNDANT_SYMBOL, 0)

        def RELAY_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_SYMBOL, 0)

        def RELAYLOG_SYMBOL(self):
            return self.getToken(MySQLParser.RELAYLOG_SYMBOL, 0)

        def RELAY_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0)

        def RELAY_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0)

        def RELAY_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0)

        def REMOTE_SYMBOL(self):
            return self.getToken(MySQLParser.REMOTE_SYMBOL, 0)

        def REORGANIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REORGANIZE_SYMBOL, 0)

        def REPEATABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPEATABLE_SYMBOL, 0)

        def REPLICATE_DO_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0)

        def REPLICATE_IGNORE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0)

        def REPLICATE_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0)

        def REPLICATE_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_REWRITE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0)

        def USER_RESOURCES_SYMBOL(self):
            return self.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0)

        def RESPECT_SYMBOL(self):
            return self.getToken(MySQLParser.RESPECT_SYMBOL, 0)

        def RESUME_SYMBOL(self):
            return self.getToken(MySQLParser.RESUME_SYMBOL, 0)

        def RETAIN_SYMBOL(self):
            return self.getToken(MySQLParser.RETAIN_SYMBOL, 0)

        def RETURNED_SQLSTATE_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0)

        def RETURNS_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNS_SYMBOL, 0)

        def REUSE_SYMBOL(self):
            return self.getToken(MySQLParser.REUSE_SYMBOL, 0)

        def REVERSE_SYMBOL(self):
            return self.getToken(MySQLParser.REVERSE_SYMBOL, 0)

        def ROLLUP_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLUP_SYMBOL, 0)

        def ROTATE_SYMBOL(self):
            return self.getToken(MySQLParser.ROTATE_SYMBOL, 0)

        def ROUTINE_SYMBOL(self):
            return self.getToken(MySQLParser.ROUTINE_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0)

        def ROW_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0)

        def RTREE_SYMBOL(self):
            return self.getToken(MySQLParser.RTREE_SYMBOL, 0)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEDULE_SYMBOL, 0)

        def SCHEMA_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.SECOND_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SERIAL_SYMBOL, 0)

        def SERIALIZABLE_SYMBOL(self):
            return self.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(MySQLParser.SESSION_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(MySQLParser.SHARE_SYMBOL, 0)

        def SIMPLE_SYMBOL(self):
            return self.getToken(MySQLParser.SIMPLE_SYMBOL, 0)

        def SKIP_SYMBOL(self):
            return self.getToken(MySQLParser.SKIP_SYMBOL, 0)

        def SLOW_SYMBOL(self):
            return self.getToken(MySQLParser.SLOW_SYMBOL, 0)

        def SNAPSHOT_SYMBOL(self):
            return self.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0)

        def SOUNDS_SYMBOL(self):
            return self.getToken(MySQLParser.SOUNDS_SYMBOL, 0)

        def SOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.SOURCE_SYMBOL, 0)

        def SQL_AFTER_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0)

        def SQL_AFTER_MTS_GAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0)

        def SQL_BEFORE_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0)

        def SQL_CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_CACHE_SYMBOL, 0)

        def SQL_BUFFER_RESULT_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0)

        def SQL_NO_CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0)

        def SQL_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0)

        def SRID_SYMBOL(self):
            return self.getToken(MySQLParser.SRID_SYMBOL, 0)

        def STACKED_SYMBOL(self):
            return self.getToken(MySQLParser.STACKED_SYMBOL, 0)

        def STARTS_SYMBOL(self):
            return self.getToken(MySQLParser.STARTS_SYMBOL, 0)

        def STATS_AUTO_RECALC_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0)

        def STATS_PERSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0)

        def STATS_SAMPLE_PAGES_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MySQLParser.STATUS_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def STRING_SYMBOL(self):
            return self.getToken(MySQLParser.STRING_SYMBOL, 0)

        def SUBCLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0)

        def SUBDATE_SYMBOL(self):
            return self.getToken(MySQLParser.SUBDATE_SYMBOL, 0)

        def SUBJECT_SYMBOL(self):
            return self.getToken(MySQLParser.SUBJECT_SYMBOL, 0)

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0)

        def SUBPARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(MySQLParser.SUPER_SYMBOL, 0)

        def SUSPEND_SYMBOL(self):
            return self.getToken(MySQLParser.SUSPEND_SYMBOL, 0)

        def SWAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SWAPS_SYMBOL, 0)

        def SWITCHES_SYMBOL(self):
            return self.getToken(MySQLParser.SWITCHES_SYMBOL, 0)

        def TABLE_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def TABLE_CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPORARY_SYMBOL, 0)

        def TEMPTABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.TEXT_SYMBOL, 0)

        def THAN_SYMBOL(self):
            return self.getToken(MySQLParser.THAN_SYMBOL, 0)

        def TIES_SYMBOL(self):
            return self.getToken(MySQLParser.TIES_SYMBOL, 0)

        def TRANSACTION_SYMBOL(self):
            return self.getToken(MySQLParser.TRANSACTION_SYMBOL, 0)

        def TRIGGERS_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGERS_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def TIMESTAMP_ADD_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0)

        def TIMESTAMP_DIFF_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def TYPES_SYMBOL(self):
            return self.getToken(MySQLParser.TYPES_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MySQLParser.TYPE_SYMBOL, 0)

        def UDF_RETURNS_SYMBOL(self):
            return self.getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0)

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0)

        def UNCOMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0)

        def UNDEFINED_SYMBOL(self):
            return self.getToken(MySQLParser.UNDEFINED_SYMBOL, 0)

        def UNDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0)

        def UNDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDOFILE_SYMBOL, 0)

        def UNKNOWN_SYMBOL(self):
            return self.getToken(MySQLParser.UNKNOWN_SYMBOL, 0)

        def UNTIL_SYMBOL(self):
            return self.getToken(MySQLParser.UNTIL_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def USE_FRM_SYMBOL(self):
            return self.getToken(MySQLParser.USE_FRM_SYMBOL, 0)

        def VARIABLES_SYMBOL(self):
            return self.getToken(MySQLParser.VARIABLES_SYMBOL, 0)

        def VCPU_SYMBOL(self):
            return self.getToken(MySQLParser.VCPU_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.VALUE_SYMBOL, 0)

        def WARNINGS_SYMBOL(self):
            return self.getToken(MySQLParser.WARNINGS_SYMBOL, 0)

        def WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.WAIT_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(MySQLParser.WEEK_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(MySQLParser.WORK_SYMBOL, 0)

        def WEIGHT_STRING_SYMBOL(self):
            return self.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0)

        def X509_SYMBOL(self):
            return self.getToken(MySQLParser.X509_SYMBOL, 0)

        def XID_SYMBOL(self):
            return self.getToken(MySQLParser.XID_SYMBOL, 0)

        def XML_SYMBOL(self):
            return self.getToken(MySQLParser.XML_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def CUBE_SYMBOL(self):
            return self.getToken(MySQLParser.CUBE_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.ROWS_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def EXCHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCHANGE_SYMBOL, 0)

        def EXPIRE_SYMBOL(self):
            return self.getToken(MySQLParser.EXPIRE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.ONLY_SYMBOL, 0)

        def VALIDATION_SYMBOL(self):
            return self.getToken(MySQLParser.VALIDATION_SYMBOL, 0)

        def WITHOUT_SYMBOL(self):
            return self.getToken(MySQLParser.WITHOUT_SYMBOL, 0)

        def ADMIN_SYMBOL(self):
            return self.getToken(MySQLParser.ADMIN_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_roleOrLabelKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrLabelKeyword" ):
                listener.enterRoleOrLabelKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrLabelKeyword" ):
                listener.exitRoleOrLabelKeyword(self)




    def roleOrLabelKeyword(self):

        localctx = MySQLParser.RoleOrLabelKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1218, self.RULE_roleOrLabelKeyword)
        self._la = 0 # Token type
        try:
            self.state = 8414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8405
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySQLParser.ACTION_SYMBOL) | (1 << MySQLParser.ADDDATE_SYMBOL) | (1 << MySQLParser.AFTER_SYMBOL) | (1 << MySQLParser.AGAINST_SYMBOL) | (1 << MySQLParser.AGGREGATE_SYMBOL) | (1 << MySQLParser.ALGORITHM_SYMBOL) | (1 << MySQLParser.ANALYSE_SYMBOL) | (1 << MySQLParser.ANY_SYMBOL) | (1 << MySQLParser.AT_SYMBOL) | (1 << MySQLParser.AUTHORS_SYMBOL) | (1 << MySQLParser.AUTOEXTEND_SIZE_SYMBOL) | (1 << MySQLParser.AUTO_INCREMENT_SYMBOL) | (1 << MySQLParser.AVG_ROW_LENGTH_SYMBOL) | (1 << MySQLParser.AVG_SYMBOL) | (1 << MySQLParser.BINLOG_SYMBOL) | (1 << MySQLParser.BIT_SYMBOL) | (1 << MySQLParser.BLOCK_SYMBOL) | (1 << MySQLParser.BOOLEAN_SYMBOL) | (1 << MySQLParser.BOOL_SYMBOL) | (1 << MySQLParser.BTREE_SYMBOL) | (1 << MySQLParser.CASCADED_SYMBOL) | (1 << MySQLParser.CATALOG_NAME_SYMBOL) | (1 << MySQLParser.CHAIN_SYMBOL) | (1 << MySQLParser.CHANGED_SYMBOL) | (1 << MySQLParser.CHANNEL_SYMBOL) | (1 << MySQLParser.CIPHER_SYMBOL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MySQLParser.CLASS_ORIGIN_SYMBOL - 64)) | (1 << (MySQLParser.CLIENT_SYMBOL - 64)) | (1 << (MySQLParser.COALESCE_SYMBOL - 64)) | (1 << (MySQLParser.CODE_SYMBOL - 64)) | (1 << (MySQLParser.COLLATION_SYMBOL - 64)) | (1 << (MySQLParser.COLUMNS_SYMBOL - 64)) | (1 << (MySQLParser.COLUMN_NAME_SYMBOL - 64)) | (1 << (MySQLParser.COLUMN_FORMAT_SYMBOL - 64)) | (1 << (MySQLParser.COMMITTED_SYMBOL - 64)) | (1 << (MySQLParser.COMPACT_SYMBOL - 64)) | (1 << (MySQLParser.COMPLETION_SYMBOL - 64)) | (1 << (MySQLParser.COMPRESSED_SYMBOL - 64)) | (1 << (MySQLParser.COMPRESSION_SYMBOL - 64)) | (1 << (MySQLParser.CONCURRENT_SYMBOL - 64)) | (1 << (MySQLParser.CONNECTION_SYMBOL - 64)) | (1 << (MySQLParser.CONSISTENT_SYMBOL - 64)) | (1 << (MySQLParser.CONSTRAINT_CATALOG_SYMBOL - 64)) | (1 << (MySQLParser.CONSTRAINT_NAME_SYMBOL - 64)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1 << (MySQLParser.CONTEXT_SYMBOL - 64)) | (1 << (MySQLParser.CONTRIBUTORS_SYMBOL - 64)) | (1 << (MySQLParser.CPU_SYMBOL - 64)) | (1 << (MySQLParser.CURRENT_SYMBOL - 64)) | (1 << (MySQLParser.CURSOR_NAME_SYMBOL - 64)) | (1 << (MySQLParser.DATAFILE_SYMBOL - 64)) | (1 << (MySQLParser.DATA_SYMBOL - 64)) | (1 << (MySQLParser.DATETIME_SYMBOL - 64)) | (1 << (MySQLParser.DATE_SYMBOL - 64)) | (1 << (MySQLParser.DAY_SYMBOL - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (MySQLParser.DEFAULT_AUTH_SYMBOL - 129)) | (1 << (MySQLParser.DEFINER_SYMBOL - 129)) | (1 << (MySQLParser.DELAY_KEY_WRITE_SYMBOL - 129)) | (1 << (MySQLParser.DES_KEY_FILE_SYMBOL - 129)) | (1 << (MySQLParser.DIAGNOSTICS_SYMBOL - 129)) | (1 << (MySQLParser.DIRECTORY_SYMBOL - 129)) | (1 << (MySQLParser.DISABLE_SYMBOL - 129)) | (1 << (MySQLParser.DISCARD_SYMBOL - 129)) | (1 << (MySQLParser.DISK_SYMBOL - 129)) | (1 << (MySQLParser.DUMPFILE_SYMBOL - 129)) | (1 << (MySQLParser.DUPLICATE_SYMBOL - 129)) | (1 << (MySQLParser.DYNAMIC_SYMBOL - 129)) | (1 << (MySQLParser.ENABLE_SYMBOL - 129)) | (1 << (MySQLParser.ENCRYPTION_SYMBOL - 129)) | (1 << (MySQLParser.ENDS_SYMBOL - 129)) | (1 << (MySQLParser.ENGINES_SYMBOL - 129)) | (1 << (MySQLParser.ENGINE_SYMBOL - 129)) | (1 << (MySQLParser.ENUM_SYMBOL - 129)) | (1 << (MySQLParser.ERROR_SYMBOL - 129)) | (1 << (MySQLParser.ERRORS_SYMBOL - 129)) | (1 << (MySQLParser.ESCAPE_SYMBOL - 129)) | (1 << (MySQLParser.EVENTS_SYMBOL - 129)) | (1 << (MySQLParser.EVERY_SYMBOL - 129)) | (1 << (MySQLParser.EXPANSION_SYMBOL - 129)) | (1 << (MySQLParser.EXPORT_SYMBOL - 129)) | (1 << (MySQLParser.EXTENDED_SYMBOL - 129)) | (1 << (MySQLParser.EXTENT_SIZE_SYMBOL - 129)) | (1 << (MySQLParser.FAST_SYMBOL - 129)) | (1 << (MySQLParser.FAULTS_SYMBOL - 129)) | (1 << (MySQLParser.FILE_BLOCK_SIZE_SYMBOL - 129)) | (1 << (MySQLParser.FILTER_SYMBOL - 129)) | (1 << (MySQLParser.FIRST_SYMBOL - 129)) | (1 << (MySQLParser.FIXED_SYMBOL - 129)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySQLParser.FOUND_SYMBOL - 202)) | (1 << (MySQLParser.FULL_SYMBOL - 202)) | (1 << (MySQLParser.GENERAL_SYMBOL - 202)) | (1 << (MySQLParser.GEOMETRYCOLLECTION_SYMBOL - 202)) | (1 << (MySQLParser.GEOMETRY_SYMBOL - 202)) | (1 << (MySQLParser.GET_FORMAT_SYMBOL - 202)) | (1 << (MySQLParser.GLOBAL_SYMBOL - 202)) | (1 << (MySQLParser.GRANTS_SYMBOL - 202)) | (1 << (MySQLParser.HASH_SYMBOL - 202)) | (1 << (MySQLParser.HOSTS_SYMBOL - 202)) | (1 << (MySQLParser.HOUR_SYMBOL - 202)) | (1 << (MySQLParser.IDENTIFIED_SYMBOL - 202)) | (1 << (MySQLParser.IGNORE_SERVER_IDS_SYMBOL - 202)) | (1 << (MySQLParser.INDEXES_SYMBOL - 202)) | (1 << (MySQLParser.INITIAL_SIZE_SYMBOL - 202)) | (1 << (MySQLParser.INSERT_METHOD_SYMBOL - 202)) | (1 << (MySQLParser.INSTANCE_SYMBOL - 202)) | (1 << (MySQLParser.INVOKER_SYMBOL - 202)) | (1 << (MySQLParser.IO_SYMBOL - 202)) | (1 << (MySQLParser.IPC_SYMBOL - 202)) | (1 << (MySQLParser.ISOLATION_SYMBOL - 202)) | (1 << (MySQLParser.ISSUER_SYMBOL - 202)) | (1 << (MySQLParser.JSON_SYMBOL - 202)) | (1 << (MySQLParser.KEY_BLOCK_SIZE_SYMBOL - 202)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (MySQLParser.LAST_SYMBOL - 268)) | (1 << (MySQLParser.LEAVES_SYMBOL - 268)) | (1 << (MySQLParser.LESS_SYMBOL - 268)) | (1 << (MySQLParser.LEVEL_SYMBOL - 268)) | (1 << (MySQLParser.LINESTRING_SYMBOL - 268)) | (1 << (MySQLParser.LIST_SYMBOL - 268)) | (1 << (MySQLParser.LOCAL_SYMBOL - 268)) | (1 << (MySQLParser.LOCKS_SYMBOL - 268)) | (1 << (MySQLParser.LOGFILE_SYMBOL - 268)) | (1 << (MySQLParser.LOGS_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_AUTO_POSITION_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_DELAY_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_HOST_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_LOG_FILE_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_LOG_POS_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_PASSWORD_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_PORT_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_RETRY_COUNT_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SERVER_ID_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CAPATH_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CA_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CERT_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CIPHER_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CRL_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_KEY_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SSL_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_TLS_VERSION_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_USER_SYMBOL - 268)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL - 268)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL - 268)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL - 268)) | (1 << (MySQLParser.MAX_ROWS_SYMBOL - 268)) | (1 << (MySQLParser.MAX_SIZE_SYMBOL - 268)) | (1 << (MySQLParser.MAX_STATEMENT_TIME_SYMBOL - 268)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL - 268)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYMBOL - 268)))) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & ((1 << (MySQLParser.MEDIUM_SYMBOL - 333)) | (1 << (MySQLParser.MEMORY_SYMBOL - 333)) | (1 << (MySQLParser.MERGE_SYMBOL - 333)) | (1 << (MySQLParser.MESSAGE_TEXT_SYMBOL - 333)) | (1 << (MySQLParser.MICROSECOND_SYMBOL - 333)) | (1 << (MySQLParser.MIGRATE_SYMBOL - 333)) | (1 << (MySQLParser.MINUTE_SYMBOL - 333)) | (1 << (MySQLParser.MIN_ROWS_SYMBOL - 333)) | (1 << (MySQLParser.MODE_SYMBOL - 333)) | (1 << (MySQLParser.MODIFY_SYMBOL - 333)) | (1 << (MySQLParser.MONTH_SYMBOL - 333)) | (1 << (MySQLParser.MULTILINESTRING_SYMBOL - 333)) | (1 << (MySQLParser.MULTIPOINT_SYMBOL - 333)) | (1 << (MySQLParser.MULTIPOLYGON_SYMBOL - 333)) | (1 << (MySQLParser.MUTEX_SYMBOL - 333)) | (1 << (MySQLParser.MYSQL_ERRNO_SYMBOL - 333)) | (1 << (MySQLParser.NAMES_SYMBOL - 333)) | (1 << (MySQLParser.NAME_SYMBOL - 333)) | (1 << (MySQLParser.NATIONAL_SYMBOL - 333)) | (1 << (MySQLParser.NCHAR_SYMBOL - 333)) | (1 << (MySQLParser.NDBCLUSTER_SYMBOL - 333)) | (1 << (MySQLParser.NEVER_SYMBOL - 333)) | (1 << (MySQLParser.NEW_SYMBOL - 333)) | (1 << (MySQLParser.NEXT_SYMBOL - 333)) | (1 << (MySQLParser.NODEGROUP_SYMBOL - 333)) | (1 << (MySQLParser.NO_WAIT_SYMBOL - 333)) | (1 << (MySQLParser.NUMBER_SYMBOL - 333)) | (1 << (MySQLParser.NVARCHAR_SYMBOL - 333)) | (1 << (MySQLParser.OFFSET_SYMBOL - 333)) | (1 << (MySQLParser.OLD_PASSWORD_SYMBOL - 333)) | (1 << (MySQLParser.ONE_SYMBOL - 333)))) != 0) or ((((_la - 399)) & ~0x3f) == 0 and ((1 << (_la - 399)) & ((1 << (MySQLParser.PACK_KEYS_SYMBOL - 399)) | (1 << (MySQLParser.PAGE_SYMBOL - 399)) | (1 << (MySQLParser.PARTIAL_SYMBOL - 399)) | (1 << (MySQLParser.PARTITIONING_SYMBOL - 399)) | (1 << (MySQLParser.PARTITIONS_SYMBOL - 399)) | (1 << (MySQLParser.PASSWORD_SYMBOL - 399)) | (1 << (MySQLParser.PHASE_SYMBOL - 399)) | (1 << (MySQLParser.PLUGINS_SYMBOL - 399)) | (1 << (MySQLParser.PLUGIN_DIR_SYMBOL - 399)) | (1 << (MySQLParser.PLUGIN_SYMBOL - 399)) | (1 << (MySQLParser.POINT_SYMBOL - 399)) | (1 << (MySQLParser.POLYGON_SYMBOL - 399)) | (1 << (MySQLParser.PRESERVE_SYMBOL - 399)) | (1 << (MySQLParser.PREV_SYMBOL - 399)) | (1 << (MySQLParser.PRIVILEGES_SYMBOL - 399)) | (1 << (MySQLParser.PROCESSLIST_SYMBOL - 399)) | (1 << (MySQLParser.PROFILE_SYMBOL - 399)) | (1 << (MySQLParser.PROFILES_SYMBOL - 399)) | (1 << (MySQLParser.QUARTER_SYMBOL - 399)) | (1 << (MySQLParser.QUERY_SYMBOL - 399)) | (1 << (MySQLParser.QUICK_SYMBOL - 399)) | (1 << (MySQLParser.READ_ONLY_SYMBOL - 399)) | (1 << (MySQLParser.REBUILD_SYMBOL - 399)) | (1 << (MySQLParser.RECOVER_SYMBOL - 399)) | (1 << (MySQLParser.REDOFILE_SYMBOL - 399)) | (1 << (MySQLParser.REDO_BUFFER_SIZE_SYMBOL - 399)) | (1 << (MySQLParser.REDUNDANT_SYMBOL - 399)) | (1 << (MySQLParser.RELAY_SYMBOL - 399)) | (1 << (MySQLParser.RELAYLOG_SYMBOL - 399)) | (1 << (MySQLParser.RELAY_LOG_FILE_SYMBOL - 399)) | (1 << (MySQLParser.RELAY_LOG_POS_SYMBOL - 399)) | (1 << (MySQLParser.RELAY_THREAD_SYMBOL - 399)) | (1 << (MySQLParser.REORGANIZE_SYMBOL - 399)) | (1 << (MySQLParser.REPEATABLE_SYMBOL - 399)) | (1 << (MySQLParser.REPLICATE_DO_DB_SYMBOL - 399)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB_SYMBOL - 399)) | (1 << (MySQLParser.REPLICATE_DO_TABLE_SYMBOL - 399)))) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & ((1 << (MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL - 463)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL - 463)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 463)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB_SYMBOL - 463)) | (1 << (MySQLParser.RESUME_SYMBOL - 463)) | (1 << (MySQLParser.RETURNED_SQLSTATE_SYMBOL - 463)) | (1 << (MySQLParser.RETURNS_SYMBOL - 463)) | (1 << (MySQLParser.REVERSE_SYMBOL - 463)) | (1 << (MySQLParser.ROLLUP_SYMBOL - 463)) | (1 << (MySQLParser.ROTATE_SYMBOL - 463)) | (1 << (MySQLParser.ROUTINE_SYMBOL - 463)) | (1 << (MySQLParser.ROW_COUNT_SYMBOL - 463)) | (1 << (MySQLParser.ROW_FORMAT_SYMBOL - 463)) | (1 << (MySQLParser.RTREE_SYMBOL - 463)) | (1 << (MySQLParser.SCHEDULE_SYMBOL - 463)) | (1 << (MySQLParser.SCHEMA_NAME_SYMBOL - 463)) | (1 << (MySQLParser.SECOND_SYMBOL - 463)) | (1 << (MySQLParser.SERIALIZABLE_SYMBOL - 463)) | (1 << (MySQLParser.SERIAL_SYMBOL - 463)) | (1 << (MySQLParser.SESSION_SYMBOL - 463)) | (1 << (MySQLParser.SHARE_SYMBOL - 463)) | (1 << (MySQLParser.SIMPLE_SYMBOL - 463)) | (1 << (MySQLParser.SLOW_SYMBOL - 463)) | (1 << (MySQLParser.SNAPSHOT_SYMBOL - 463)) | (1 << (MySQLParser.SOUNDS_SYMBOL - 463)) | (1 << (MySQLParser.SOURCE_SYMBOL - 463)))) != 0) or ((((_la - 528)) & ~0x3f) == 0 and ((1 << (_la - 528)) & ((1 << (MySQLParser.SQL_AFTER_GTIDS_SYMBOL - 528)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL - 528)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS_SYMBOL - 528)) | (1 << (MySQLParser.SQL_BUFFER_RESULT_SYMBOL - 528)) | (1 << (MySQLParser.SQL_CACHE_SYMBOL - 528)) | (1 << (MySQLParser.SQL_NO_CACHE_SYMBOL - 528)) | (1 << (MySQLParser.SQL_THREAD_SYMBOL - 528)) | (1 << (MySQLParser.STACKED_SYMBOL - 528)) | (1 << (MySQLParser.STARTS_SYMBOL - 528)) | (1 << (MySQLParser.STATS_AUTO_RECALC_SYMBOL - 528)) | (1 << (MySQLParser.STATS_PERSISTENT_SYMBOL - 528)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES_SYMBOL - 528)) | (1 << (MySQLParser.STATUS_SYMBOL - 528)) | (1 << (MySQLParser.STORAGE_SYMBOL - 528)) | (1 << (MySQLParser.STRING_SYMBOL - 528)) | (1 << (MySQLParser.SUBCLASS_ORIGIN_SYMBOL - 528)) | (1 << (MySQLParser.SUBDATE_SYMBOL - 528)) | (1 << (MySQLParser.SUBJECT_SYMBOL - 528)) | (1 << (MySQLParser.SUBPARTITIONS_SYMBOL - 528)) | (1 << (MySQLParser.SUBPARTITION_SYMBOL - 528)) | (1 << (MySQLParser.SUPER_SYMBOL - 528)) | (1 << (MySQLParser.SUSPEND_SYMBOL - 528)) | (1 << (MySQLParser.SWAPS_SYMBOL - 528)) | (1 << (MySQLParser.SWITCHES_SYMBOL - 528)) | (1 << (MySQLParser.TABLES_SYMBOL - 528)) | (1 << (MySQLParser.TABLESPACE_SYMBOL - 528)) | (1 << (MySQLParser.TABLE_CHECKSUM_SYMBOL - 528)) | (1 << (MySQLParser.TABLE_NAME_SYMBOL - 528)) | (1 << (MySQLParser.TEMPORARY_SYMBOL - 528)) | (1 << (MySQLParser.TEMPTABLE_SYMBOL - 528)) | (1 << (MySQLParser.TEXT_SYMBOL - 528)) | (1 << (MySQLParser.THAN_SYMBOL - 528)) | (1 << (MySQLParser.TIMESTAMP_SYMBOL - 528)) | (1 << (MySQLParser.TIMESTAMP_ADD_SYMBOL - 528)) | (1 << (MySQLParser.TIMESTAMP_DIFF_SYMBOL - 528)) | (1 << (MySQLParser.TIME_SYMBOL - 528)))) != 0) or ((((_la - 592)) & ~0x3f) == 0 and ((1 << (_la - 592)) & ((1 << (MySQLParser.TRANSACTION_SYMBOL - 592)) | (1 << (MySQLParser.TRIGGERS_SYMBOL - 592)) | (1 << (MySQLParser.TYPES_SYMBOL - 592)) | (1 << (MySQLParser.TYPE_SYMBOL - 592)) | (1 << (MySQLParser.UDF_RETURNS_SYMBOL - 592)) | (1 << (MySQLParser.UNCOMMITTED_SYMBOL - 592)) | (1 << (MySQLParser.UNDEFINED_SYMBOL - 592)) | (1 << (MySQLParser.UNDOFILE_SYMBOL - 592)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE_SYMBOL - 592)) | (1 << (MySQLParser.UNKNOWN_SYMBOL - 592)) | (1 << (MySQLParser.UNTIL_SYMBOL - 592)) | (1 << (MySQLParser.USER_RESOURCES_SYMBOL - 592)) | (1 << (MySQLParser.USER_SYMBOL - 592)) | (1 << (MySQLParser.USE_FRM_SYMBOL - 592)) | (1 << (MySQLParser.VALUE_SYMBOL - 592)) | (1 << (MySQLParser.VARIABLES_SYMBOL - 592)) | (1 << (MySQLParser.VIEW_SYMBOL - 592)) | (1 << (MySQLParser.WAIT_SYMBOL - 592)) | (1 << (MySQLParser.WARNINGS_SYMBOL - 592)) | (1 << (MySQLParser.WEEK_SYMBOL - 592)) | (1 << (MySQLParser.WEIGHT_STRING_SYMBOL - 592)) | (1 << (MySQLParser.WORK_SYMBOL - 592)) | (1 << (MySQLParser.X509_SYMBOL - 592)) | (1 << (MySQLParser.XID_SYMBOL - 592)) | (1 << (MySQLParser.XML_SYMBOL - 592)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (MySQLParser.YEAR_SYMBOL - 656)) | (1 << (MySQLParser.COMPONENT_SYMBOL - 656)) | (1 << (MySQLParser.SKIP_SYMBOL - 656)) | (1 << (MySQLParser.LOCKED_SYMBOL - 656)) | (1 << (MySQLParser.NOWAIT_SYMBOL - 656)) | (1 << (MySQLParser.HISTOGRAM_SYMBOL - 656)) | (1 << (MySQLParser.BUCKETS_SYMBOL - 656)) | (1 << (MySQLParser.REMOTE_SYMBOL - 656)) | (1 << (MySQLParser.EXCLUDE_SYMBOL - 656)) | (1 << (MySQLParser.FOLLOWING_SYMBOL - 656)) | (1 << (MySQLParser.NULLS_SYMBOL - 656)) | (1 << (MySQLParser.OTHERS_SYMBOL - 656)) | (1 << (MySQLParser.PRECEDING_SYMBOL - 656)) | (1 << (MySQLParser.RESPECT_SYMBOL - 656)) | (1 << (MySQLParser.TIES_SYMBOL - 656)) | (1 << (MySQLParser.UNBOUNDED_SYMBOL - 656)) | (1 << (MySQLParser.NESTED_SYMBOL - 656)) | (1 << (MySQLParser.ORDINALITY_SYMBOL - 656)) | (1 << (MySQLParser.PATH_SYMBOL - 656)) | (1 << (MySQLParser.HISTORY_SYMBOL - 656)) | (1 << (MySQLParser.REUSE_SYMBOL - 656)) | (1 << (MySQLParser.SRID_SYMBOL - 656)) | (1 << (MySQLParser.THREAD_PRIORITY_SYMBOL - 656)) | (1 << (MySQLParser.VCPU_SYMBOL - 656)) | (1 << (MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL - 656)) | (1 << (MySQLParser.DESCRIPTION_SYMBOL - 656)) | (1 << (MySQLParser.ORGANIZATION_SYMBOL - 656)) | (1 << (MySQLParser.OPTIONAL_SYMBOL - 656)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySQLParser.ACTIVE_SYMBOL - 724)) | (1 << (MySQLParser.INACTIVE_SYMBOL - 724)) | (1 << (MySQLParser.RETAIN_SYMBOL - 724)) | (1 << (MySQLParser.OLD_SYMBOL - 724)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8406
                if not serverVersion < 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50709")
                self.state = 8407
                self.match(MySQLParser.SHUTDOWN_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8408
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 8409
                _la = self._input.LA(1)
                if not(_la==MySQLParser.CUBE_SYMBOL or _la==MySQLParser.FUNCTION_SYMBOL or _la==MySQLParser.IMPORT_SYMBOL or _la==MySQLParser.ROWS_SYMBOL or _la==MySQLParser.ROW_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8410
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 8411
                _la = self._input.LA(1)
                if not(_la==MySQLParser.EXCHANGE_SYMBOL or _la==MySQLParser.EXPIRE_SYMBOL or _la==MySQLParser.ONLY_SYMBOL or _la==MySQLParser.SUPER_SYMBOL or _la==MySQLParser.VALIDATION_SYMBOL or _la==MySQLParser.WITHOUT_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8412
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 8413
                self.match(MySQLParser.ADMIN_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[1] = self.simpleStatement_sempred
        self._predicates[2] = self.alterStatement_sempred
        self._predicates[3] = self.alterDatabase_sempred
        self._predicates[9] = self.alterTable_sempred
        self._predicates[13] = self.standaloneAlterCommands_sempred
        self._predicates[14] = self.alterPartition_sempred
        self._predicates[17] = self.alterListItem_sempred
        self._predicates[24] = self.withValidation_sempred
        self._predicates[27] = self.alterTablespace_sempred
        self._predicates[38] = self.createStatement_sempred
        self._predicates[40] = self.createDatabaseOption_sempred
        self._predicates[53] = self.createIndex_sempred
        self._predicates[64] = self.tsDataFileName_sempred
        self._predicates[67] = self.tablespaceOption_sempred
        self._predicates[84] = self.triggerFollowsPrecedesClause_sempred
        self._predicates[89] = self.dropStatement_sempred
        self._predicates[110] = self.deleteStatement_sempred
        self._predicates[111] = self.partitionDelete_sempred
        self._predicates[113] = self.doStatement_sempred
        self._predicates[116] = self.insertStatement_sempred
        self._predicates[135] = self.queryExpression_sempred
        self._predicates[138] = self.queryPrimary_sempred
        self._predicates[139] = self.querySpecification_sempred
        self._predicates[163] = self.olapOption_sempred
        self._predicates[171] = self.selectOption_sempred
        self._predicates[173] = self.lockingClause_sempred
        self._predicates[174] = self.lockStrengh_sempred
        self._predicates[180] = self.tableReference_sempred
        self._predicates[186] = self.tableFactor_sempred
        self._predicates[189] = self.derivedTable_sempred
        self._predicates[193] = self.jtColumn_sempred
        self._predicates[199] = self.tableAlias_sempred
        self._predicates[208] = self.updateStatement_sempred
        self._predicates[212] = self.transactionCharacteristic_sempred
        self._predicates[214] = self.lockStatement_sempred
        self._predicates[218] = self.xaConvert_sempred
        self._predicates[220] = self.replicationStatement_sempred
        self._predicates[221] = self.resetOption_sempred
        self._predicates[222] = self.masterResetOptions_sempred
        self._predicates[232] = self.changeReplication_sempred
        self._predicates[240] = self.slaveUntilOptions_sempred
        self._predicates[241] = self.slaveConnectionOptions_sempred
        self._predicates[248] = self.cloneStatement_sempred
        self._predicates[251] = self.accountManagementStatement_sempred
        self._predicates[252] = self.alterUser_sempred
        self._predicates[253] = self.alterUserTail_sempred
        self._predicates[255] = self.createUser_sempred
        self._predicates[256] = self.createUserTail_sempred
        self._predicates[257] = self.defaultRoleClause_sempred
        self._predicates[260] = self.accountLockPasswordExpireOptions_sempred
        self._predicates[261] = self.dropUser_sempred
        self._predicates[262] = self.grant_sempred
        self._predicates[263] = self.grantTargetList_sempred
        self._predicates[264] = self.grantOptions_sempred
        self._predicates[268] = self.versionedRequireClause_sempred
        self._predicates[270] = self.revoke_sempred
        self._predicates[271] = self.onTypeTo_sempred
        self._predicates[274] = self.roleOrPrivilege_sempred
        self._predicates[275] = self.grantIdentifier_sempred
        self._predicates[282] = self.tableAdministrationStatement_sempred
        self._predicates[288] = self.startOptionValueList_sempred
        self._predicates[293] = self.optionValueNoOptionType_sempred
        self._predicates[298] = self.setExprOrDefault_sempred
        self._predicates[299] = self.showStatement_sempred
        self._predicates[300] = self.showCommandType_sempred
        self._predicates[301] = self.nonBlocking_sempred
        self._predicates[305] = self.otherAdministrativeStatement_sempred
        self._predicates[313] = self.flushOption_sempred
        self._predicates[316] = self.flushTablesOptions_sempred
        self._predicates[331] = self.utilityStatement_sempred
        self._predicates[333] = self.explainStatement_sempred
        self._predicates[334] = self.explainableStatement_sempred
        self._predicates[338] = self.expr_sempred
        self._predicates[339] = self.boolPri_sempred
        self._predicates[341] = self.predicate_sempred
        self._predicates[343] = self.bitExpr_sempred
        self._predicates[344] = self.simpleExpr_sempred
        self._predicates[345] = self.arrayCast_sempred
        self._predicates[346] = self.jsonOperator_sempred
        self._predicates[347] = self.sumExpr_sempred
        self._predicates[358] = self.runtimeFunctionCall_sempred
        self._predicates[359] = self.geometryFunction_sempred
        self._predicates[361] = self.fractionalPrecision_sempred
        self._predicates[373] = self.internalVariableName_sempred
        self._predicates[377] = self.castType_sempred
        self._predicates[391] = self.channel_sempred
        self._predicates[420] = self.getDiagnostics_sempred
        self._predicates[433] = self.checkOrReferences_sempred
        self._predicates[436] = self.tableConstraintDef_sempred
        self._predicates[438] = self.fieldDefinition_sempred
        self._predicates[439] = self.columnAttribute_sempred
        self._predicates[449] = self.keyListVariants_sempred
        self._predicates[452] = self.commonIndexOption_sempred
        self._predicates[458] = self.dataType_sempred
        self._predicates[468] = self.charsetName_sempred
        self._predicates[469] = self.collationName_sempred
        self._predicates[472] = self.createTableOption_sempred
        self._predicates[480] = self.partitionKeyAlgorithm_sempred
        self._predicates[507] = self.createUserEntry_sempred
        self._predicates[518] = self.usePartition_sempred
        self._predicates[520] = self.columnName_sempred
        self._predicates[563] = self.pureIdentifier_sempred
        self._predicates[568] = self.simpleIdentifier_sempred
        self._predicates[573] = self.real_ulonglong_number_sempred
        self._predicates[577] = self.textStringLiteral_sempred
        self._predicates[579] = self.textStringHash_sempred
        self._predicates[599] = self.identifierKeyword_sempred
        self._predicates[602] = self.labelKeyword_sempred
        self._predicates[604] = self.identifierKeywordsUnambiguous_sempred
        self._predicates[605] = self.roleKeyword_sempred
        self._predicates[608] = self.roleOrIdentifierKeyword_sempred
        self._predicates[609] = self.roleOrLabelKeyword_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def simpleStatement_sempred(self, localctx:SimpleStatementContext, predIndex:int):
            if predIndex == 0:
                return serverVersion >= 80000
         

            if predIndex == 1:
                return serverVersion >= 80000
         

            if predIndex == 2:
                return serverVersion >= 80000
         

            if predIndex == 3:
                return serverVersion >= 50604
         

    def alterStatement_sempred(self, localctx:AlterStatementContext, predIndex:int):
            if predIndex == 4:
                return serverVersion >= 80014
         

            if predIndex == 5:
                return serverVersion >= 50713
         

    def alterDatabase_sempred(self, localctx:AlterDatabaseContext, predIndex:int):
            if predIndex == 6:
                return serverVersion < 80000
         

    def alterTable_sempred(self, localctx:AlterTableContext, predIndex:int):
            if predIndex == 7:
                return serverVersion < 50700
         

    def standaloneAlterCommands_sempred(self, localctx:StandaloneAlterCommandsContext, predIndex:int):
            if predIndex == 8:
                return serverVersion >= 80014
         

    def alterPartition_sempred(self, localctx:AlterPartitionContext, predIndex:int):
            if predIndex == 9:
                return serverVersion >= 50704
         

            if predIndex == 10:
                return serverVersion >= 50704
         

    def alterListItem_sempred(self, localctx:AlterListItemContext, predIndex:int):
            if predIndex == 11:
                return serverVersion >= 50700
         

            if predIndex == 12:
                return serverVersion < 50700
         

            if predIndex == 13:
                return serverVersion >= 80017
         

            if predIndex == 14:
                return serverVersion >= 80019
         

            if predIndex == 15:
                return serverVersion >= 80014
         

            if predIndex == 16:
                return serverVersion >= 80000
         

            if predIndex == 17:
                return serverVersion >= 80017
         

            if predIndex == 18:
                return serverVersion >= 80019
         

            if predIndex == 19:
                return serverVersion >= 80000
         

            if predIndex == 20:
                return serverVersion >= 50700
         

            if predIndex == 21:
                return serverVersion >= 80014
         

            if predIndex == 22:
                return serverVersion >= 50708 && serverVersion < 80000
         

    def withValidation_sempred(self, localctx:WithValidationContext, predIndex:int):
            if predIndex == 23:
                return serverVersion >= 50706
         

    def alterTablespace_sempred(self, localctx:AlterTablespaceContext, predIndex:int):
            if predIndex == 24:
                return serverVersion < 80000
         

            if predIndex == 25:
                return serverVersion >= 80014
         

    def createStatement_sempred(self, localctx:CreateStatementContext, predIndex:int):
            if predIndex == 26:
                return serverVersion >= 80000
         

            if predIndex == 27:
                return serverVersion >= 80011
         

            if predIndex == 28:
                return serverVersion >= 80014
         

    def createDatabaseOption_sempred(self, localctx:CreateDatabaseOptionContext, predIndex:int):
            if predIndex == 29:
                return serverVersion >= 80016
         

    def createIndex_sempred(self, localctx:CreateIndexContext, predIndex:int):
            if predIndex == 30:
                return serverVersion >= 80014
         

    def tsDataFileName_sempred(self, localctx:TsDataFileNameContext, predIndex:int):
            if predIndex == 31:
                return serverVersion >= 80014
         

    def tablespaceOption_sempred(self, localctx:TablespaceOptionContext, predIndex:int):
            if predIndex == 32:
                return serverVersion >= 50707
         

            if predIndex == 33:
                return serverVersion >= 80014
         

    def triggerFollowsPrecedesClause_sempred(self, localctx:TriggerFollowsPrecedesClauseContext, predIndex:int):
            if predIndex == 34:
                return serverVersion >= 50700
         

    def dropStatement_sempred(self, localctx:DropStatementContext, predIndex:int):
            if predIndex == 35:
                return serverVersion >= 80000
         

            if predIndex == 36:
                return serverVersion >= 80011
         

            if predIndex == 37:
                return serverVersion >= 80014
         

    def deleteStatement_sempred(self, localctx:DeleteStatementContext, predIndex:int):
            if predIndex == 38:
                return serverVersion >= 80000
         

            if predIndex == 39:
                return serverVersion >= 80017
         

    def partitionDelete_sempred(self, localctx:PartitionDeleteContext, predIndex:int):
            if predIndex == 40:
                return serverVersion >= 50602
         

    def doStatement_sempred(self, localctx:DoStatementContext, predIndex:int):
            if predIndex == 41:
                return serverVersion < 50709
         

            if predIndex == 42:
                return serverVersion >= 50709
         

    def insertStatement_sempred(self, localctx:InsertStatementContext, predIndex:int):
            if predIndex == 43:
                return  serverVersion >= 80018
         

            if predIndex == 44:
                return  serverVersion >= 80018
         

    def queryExpression_sempred(self, localctx:QueryExpressionContext, predIndex:int):
            if predIndex == 45:
                return serverVersion >= 80000
         

            if predIndex == 46:
                return serverVersion < 80000
         

    def queryPrimary_sempred(self, localctx:QueryPrimaryContext, predIndex:int):
            if predIndex == 47:
                return serverVersion >= 80019
         

            if predIndex == 48:
                return serverVersion >= 80019
         

    def querySpecification_sempred(self, localctx:QuerySpecificationContext, predIndex:int):
            if predIndex == 49:
                return serverVersion >= 80000
         

    def olapOption_sempred(self, localctx:OlapOptionContext, predIndex:int):
            if predIndex == 50:
                return serverVersion < 80000
         

    def selectOption_sempred(self, localctx:SelectOptionContext, predIndex:int):
            if predIndex == 51:
                return serverVersion < 80000
         

            if predIndex == 52:
                return serverVersion >= 50704 && serverVersion < 50708
         

    def lockingClause_sempred(self, localctx:LockingClauseContext, predIndex:int):
            if predIndex == 53:
                return serverVersion >= 80000
         

            if predIndex == 54:
                return serverVersion >= 80000
         

    def lockStrengh_sempred(self, localctx:LockStrenghContext, predIndex:int):
            if predIndex == 55:
                return serverVersion >= 80000
         

    def tableReference_sempred(self, localctx:TableReferenceContext, predIndex:int):
            if predIndex == 56:
                return serverVersion < 80017
         

    def tableFactor_sempred(self, localctx:TableFactorContext, predIndex:int):
            if predIndex == 57:
                return serverVersion >= 80004
         

    def derivedTable_sempred(self, localctx:DerivedTableContext, predIndex:int):
            if predIndex == 58:
                return serverVersion >= 80000
         

            if predIndex == 59:
                return serverVersion >= 80014
         

    def jtColumn_sempred(self, localctx:JtColumnContext, predIndex:int):
            if predIndex == 60:
                return serverVersion >= 80014
         

    def tableAlias_sempred(self, localctx:TableAliasContext, predIndex:int):
            if predIndex == 61:
                return serverVersion < 80017
         

    def updateStatement_sempred(self, localctx:UpdateStatementContext, predIndex:int):
            if predIndex == 62:
                return serverVersion >= 80000
         

    def transactionCharacteristic_sempred(self, localctx:TransactionCharacteristicContext, predIndex:int):
            if predIndex == 63:
                return serverVersion >= 50605
         

    def lockStatement_sempred(self, localctx:LockStatementContext, predIndex:int):
            if predIndex == 64:
                return serverVersion >= 80000
         

            if predIndex == 65:
                return serverVersion >= 80000
         

    def xaConvert_sempred(self, localctx:XaConvertContext, predIndex:int):
            if predIndex == 66:
                return serverVersion >= 50704
         

    def replicationStatement_sempred(self, localctx:ReplicationStatementContext, predIndex:int):
            if predIndex == 67:
                return serverVersion > 80000
         

            if predIndex == 68:
                return serverVersion >= 50700
         

            if predIndex == 69:
                return serverVersion > 50706
         

    def resetOption_sempred(self, localctx:ResetOptionContext, predIndex:int):
            if predIndex == 70:
                return serverVersion < 80000
         

    def masterResetOptions_sempred(self, localctx:MasterResetOptionsContext, predIndex:int):
            if predIndex == 71:
                return serverVersion >= 80000
         

            if predIndex == 72:
                return serverVersion < 80017
         

            if predIndex == 73:
                return serverVersion >= 80017
         

    def changeReplication_sempred(self, localctx:ChangeReplicationContext, predIndex:int):
            if predIndex == 74:
                return serverVersion >= 80000
         

    def slaveUntilOptions_sempred(self, localctx:SlaveUntilOptionsContext, predIndex:int):
            if predIndex == 75:
                return serverVersion >= 50606
         

            if predIndex == 76:
                return serverVersion >= 50606
         

    def slaveConnectionOptions_sempred(self, localctx:SlaveConnectionOptionsContext, predIndex:int):
            if predIndex == 77:
                return serverVersion >= 50604
         

    def cloneStatement_sempred(self, localctx:CloneStatementContext, predIndex:int):
            if predIndex == 78:
                return serverVersion >= 80014
         

    def accountManagementStatement_sempred(self, localctx:AccountManagementStatementContext, predIndex:int):
            if predIndex == 79:
                return serverVersion >= 50606
         

            if predIndex == 80:
                return serverVersion >= 80000
         

    def alterUser_sempred(self, localctx:AlterUserContext, predIndex:int):
            if predIndex == 81:
                return serverVersion >= 50706
         

    def alterUserTail_sempred(self, localctx:AlterUserTailContext, predIndex:int):
            if predIndex == 82:
                return serverVersion < 80014
         

            if predIndex == 83:
                return serverVersion >= 80014
         

            if predIndex == 84:
                return serverVersion >= 50706
         

            if predIndex == 85:
                return serverVersion >= 80014
         

            if predIndex == 86:
                return serverVersion >= 80014
         

            if predIndex == 87:
                return serverVersion >= 80014
         

            if predIndex == 88:
                return serverVersion >= 80000
         

            if predIndex == 89:
                return serverVersion >= 80018
         

    def createUser_sempred(self, localctx:CreateUserContext, predIndex:int):
            if predIndex == 90:
                return serverVersion >= 50706
         

    def createUserTail_sempred(self, localctx:CreateUserTailContext, predIndex:int):
            if predIndex == 91:
                return serverVersion >= 50706
         

    def defaultRoleClause_sempred(self, localctx:DefaultRoleClauseContext, predIndex:int):
            if predIndex == 92:
                return serverVersion >= 80000
         

    def accountLockPasswordExpireOptions_sempred(self, localctx:AccountLockPasswordExpireOptionsContext, predIndex:int):
            if predIndex == 93:
                return serverVersion >= 80014
         

    def dropUser_sempred(self, localctx:DropUserContext, predIndex:int):
            if predIndex == 94:
                return serverVersion >= 50706
         

    def grant_sempred(self, localctx:GrantContext, predIndex:int):
            if predIndex == 95:
                return serverVersion >= 80000
         

    def grantTargetList_sempred(self, localctx:GrantTargetListContext, predIndex:int):
            if predIndex == 96:
                return serverVersion < 80011
         

            if predIndex == 97:
                return serverVersion >= 80011
         

    def grantOptions_sempred(self, localctx:GrantOptionsContext, predIndex:int):
            if predIndex == 98:
                return serverVersion < 80011
         

            if predIndex == 99:
                return serverVersion >= 80011
         

    def versionedRequireClause_sempred(self, localctx:VersionedRequireClauseContext, predIndex:int):
            if predIndex == 100:
                return serverVersion < 80011
         

    def revoke_sempred(self, localctx:RevokeContext, predIndex:int):
            if predIndex == 101:
                return serverVersion >= 80000
         

            if predIndex == 102:
                return serverVersion >= 80000
         

    def onTypeTo_sempred(self, localctx:OnTypeToContext, predIndex:int):
            if predIndex == 103:
                return serverVersion < 80000
         

            if predIndex == 104:
                return serverVersion >= 80000
         

    def roleOrPrivilege_sempred(self, localctx:RoleOrPrivilegeContext, predIndex:int):
            if predIndex == 105:
                return serverVersion > 80000
         

            if predIndex == 106:
                return serverVersion > 80000
         

    def grantIdentifier_sempred(self, localctx:GrantIdentifierContext, predIndex:int):
            if predIndex == 107:
                return serverVersion >= 80017
         

    def tableAdministrationStatement_sempred(self, localctx:TableAdministrationStatementContext, predIndex:int):
            if predIndex == 108:
                return serverVersion >= 80000
         

    def startOptionValueList_sempred(self, localctx:StartOptionValueListContext, predIndex:int):
            if predIndex == 109:
                return serverVersion < 50706
         

            if predIndex == 110:
                return serverVersion < 80014
         

            if predIndex == 111:
                return serverVersion >= 80018
         

    def optionValueNoOptionType_sempred(self, localctx:OptionValueNoOptionTypeContext, predIndex:int):
            if predIndex == 112:
                return serverVersion >= 80011
         

    def setExprOrDefault_sempred(self, localctx:SetExprOrDefaultContext, predIndex:int):
            if predIndex == 113:
                return serverVersion >= 80000
         

    def showStatement_sempred(self, localctx:ShowStatementContext, predIndex:int):
            if predIndex == 114:
                return serverVersion < 50700
         

            if predIndex == 115:
                return serverVersion >= 80000
         

            if predIndex == 116:
                return serverVersion < 50700
         

            if predIndex == 117:
                return serverVersion >= 50704
         

    def showCommandType_sempred(self, localctx:ShowCommandTypeContext, predIndex:int):
            if predIndex == 118:
                return serverVersion >= 80000
         

    def nonBlocking_sempred(self, localctx:NonBlockingContext, predIndex:int):
            if predIndex == 119:
                return serverVersion >= 50700 && serverVersion < 50706
         

    def otherAdministrativeStatement_sempred(self, localctx:OtherAdministrativeStatementContext, predIndex:int):
            if predIndex == 120:
                return serverVersion >= 50709
         

    def flushOption_sempred(self, localctx:FlushOptionContext, predIndex:int):
            if predIndex == 121:
                return serverVersion < 80000
         

            if predIndex == 122:
                return serverVersion >= 50706
         

    def flushTablesOptions_sempred(self, localctx:FlushTablesOptionsContext, predIndex:int):
            if predIndex == 123:
                return serverVersion >= 50606
         

    def utilityStatement_sempred(self, localctx:UtilityStatementContext, predIndex:int):
            if predIndex == 124:
                return serverVersion >= 80011
         

    def explainStatement_sempred(self, localctx:ExplainStatementContext, predIndex:int):
            if predIndex == 125:
                return serverVersion < 80000
         

            if predIndex == 126:
                return serverVersion < 80000
         

            if predIndex == 127:
                return serverVersion >= 50605
         

            if predIndex == 128:
                return serverVersion >= 80018
         

            if predIndex == 129:
                return serverVersion >= 80019
         

    def explainableStatement_sempred(self, localctx:ExplainableStatementContext, predIndex:int):
            if predIndex == 130:
                return serverVersion >= 50603
         

            if predIndex == 131:
                return serverVersion >= 50700
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 132:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 133:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 134:
                return self.precpred(self._ctx, 1)
         

    def boolPri_sempred(self, localctx:BoolPriContext, predIndex:int):
            if predIndex == 135:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 136:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 137:
                return self.precpred(self._ctx, 1)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 138:
                return serverVersion >= 80017
         

    def bitExpr_sempred(self, localctx:BitExprContext, predIndex:int):
            if predIndex == 139:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 140:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 141:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 142:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 143:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 144:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 145:
                return self.precpred(self._ctx, 4)
         

    def simpleExpr_sempred(self, localctx:SimpleExprContext, predIndex:int):
            if predIndex == 146:
                return serverVersion >= 80000
         

            if predIndex == 147:
                return serverVersion >= 80000
         

            if predIndex == 148:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 149:
                return self.precpred(self._ctx, 21)
         

    def arrayCast_sempred(self, localctx:ArrayCastContext, predIndex:int):
            if predIndex == 150:
                return serverVersion >= 80017
         

    def jsonOperator_sempred(self, localctx:JsonOperatorContext, predIndex:int):
            if predIndex == 151:
                return serverVersion >= 50708
         

            if predIndex == 152:
                return serverVersion >= 50713
         

    def sumExpr_sempred(self, localctx:SumExprContext, predIndex:int):
            if predIndex == 153:
                return serverVersion >= 80000
         

            if predIndex == 154:
                return serverVersion >= 80000
         

            if predIndex == 155:
                return serverVersion >= 80000
         

            if predIndex == 156:
                return serverVersion >= 80000
         

            if predIndex == 157:
                return serverVersion >= 80000
         

            if predIndex == 158:
                return serverVersion >= 80000
         

            if predIndex == 159:
                return serverVersion >= 80000
         

            if predIndex == 160:
                return serverVersion >= 80000
         

            if predIndex == 161:
                return serverVersion >= 80000
         

            if predIndex == 162:
                return serverVersion >= 80000
         

            if predIndex == 163:
                return serverVersion >= 80000
         

            if predIndex == 164:
                return serverVersion >= 80000
         

            if predIndex == 165:
                return serverVersion >= 80000
         

    def runtimeFunctionCall_sempred(self, localctx:RuntimeFunctionCallContext, predIndex:int):
            if predIndex == 166:
                return serverVersion < 50607
         

            if predIndex == 167:
                return serverVersion < 80011
         

            if predIndex == 168:
                return serverVersion < 80000
         

    def geometryFunction_sempred(self, localctx:GeometryFunctionContext, predIndex:int):
            if predIndex == 169:
                return serverVersion < 50706
         

    def fractionalPrecision_sempred(self, localctx:FractionalPrecisionContext, predIndex:int):
            if predIndex == 170:
                return serverVersion >= 50604
         

    def internalVariableName_sempred(self, localctx:InternalVariableNameContext, predIndex:int):
            if predIndex == 171:
                return serverVersion < 80017
         

            if predIndex == 172:
                return serverVersion >= 80017
         

    def castType_sempred(self, localctx:CastTypeContext, predIndex:int):
            if predIndex == 173:
                return serverVersion >= 50708
         

            if predIndex == 174:
                return serverVersion >= 80017
         

            if predIndex == 175:
                return serverVersion >= 80017
         

    def channel_sempred(self, localctx:ChannelContext, predIndex:int):
            if predIndex == 176:
                return serverVersion >= 50706
         

    def getDiagnostics_sempred(self, localctx:GetDiagnosticsContext, predIndex:int):
            if predIndex == 177:
                return serverVersion >= 50700
         

    def checkOrReferences_sempred(self, localctx:CheckOrReferencesContext, predIndex:int):
            if predIndex == 178:
                return serverVersion < 80016
         

    def tableConstraintDef_sempred(self, localctx:TableConstraintDefContext, predIndex:int):
            if predIndex == 179:
                return serverVersion >= 80017
         

    def fieldDefinition_sempred(self, localctx:FieldDefinitionContext, predIndex:int):
            if predIndex == 180:
                return serverVersion >= 50707
         

            if predIndex == 181:
                return serverVersion < 80000
         

            if predIndex == 182:
                return serverVersion >= 80000
         

    def columnAttribute_sempred(self, localctx:ColumnAttributeContext, predIndex:int):
            if predIndex == 183:
                return serverVersion >= 80014
         

            if predIndex == 184:
                return serverVersion >= 80013
         

            if predIndex == 185:
                return serverVersion >= 80000
         

            if predIndex == 186:
                return serverVersion >= 80017
         

            if predIndex == 187:
                return serverVersion >= 80017
         

    def keyListVariants_sempred(self, localctx:KeyListVariantsContext, predIndex:int):
            if predIndex == 188:
                return serverVersion >= 80013
         

            if predIndex == 189:
                return serverVersion < 80013
         

    def commonIndexOption_sempred(self, localctx:CommonIndexOptionContext, predIndex:int):
            if predIndex == 190:
                return serverVersion >= 80000
         

    def dataType_sempred(self, localctx:DataTypeContext, predIndex:int):
            if predIndex == 191:
                return serverVersion >= 50708
         

    def charsetName_sempred(self, localctx:CharsetNameContext, predIndex:int):
            if predIndex == 192:
                return serverVersion < 80011
         

    def collationName_sempred(self, localctx:CollationNameContext, predIndex:int):
            if predIndex == 193:
                return serverVersion < 80011
         

            if predIndex == 194:
                return serverVersion >= 80018
         

    def createTableOption_sempred(self, localctx:CreateTableOptionContext, predIndex:int):
            if predIndex == 195:
                return serverVersion >= 80014
         

            if predIndex == 196:
                return serverVersion >= 50708
         

            if predIndex == 197:
                return serverVersion >= 50711
         

            if predIndex == 198:
                return serverVersion >= 50707
         

    def partitionKeyAlgorithm_sempred(self, localctx:PartitionKeyAlgorithmContext, predIndex:int):
            if predIndex == 199:
                return serverVersion >= 50700
         

    def createUserEntry_sempred(self, localctx:CreateUserEntryContext, predIndex:int):
            if predIndex == 200:
                return serverVersion < 80011
         

            if predIndex == 201:
                return serverVersion >= 50706
         

            if predIndex == 202:
                return serverVersion >= 80018
         

    def usePartition_sempred(self, localctx:UsePartitionContext, predIndex:int):
            if predIndex == 203:
                return serverVersion >= 50602
         

    def columnName_sempred(self, localctx:ColumnNameContext, predIndex:int):
            if predIndex == 204:
                return serverVersion >= 80000
         

            if predIndex == 205:
                return serverVersion < 80000
         

    def pureIdentifier_sempred(self, localctx:PureIdentifierContext, predIndex:int):
            if predIndex == 206:
                return isSqlModeActive(AnsiQuotes)
         

    def simpleIdentifier_sempred(self, localctx:SimpleIdentifierContext, predIndex:int):
            if predIndex == 207:
                return serverVersion < 80000
         

    def real_ulonglong_number_sempred(self, localctx:Real_ulonglong_numberContext, predIndex:int):
            if predIndex == 208:
                return serverVersion >= 80017
         

    def textStringLiteral_sempred(self, localctx:TextStringLiteralContext, predIndex:int):
            if predIndex == 209:
                return !isSqlModeActive(AnsiQuotes)
         

    def textStringHash_sempred(self, localctx:TextStringHashContext, predIndex:int):
            if predIndex == 210:
                return serverVersion >= 80017
         

    def identifierKeyword_sempred(self, localctx:IdentifierKeywordContext, predIndex:int):
            if predIndex == 211:
                return serverVersion < 80017
         

            if predIndex == 212:
                return serverVersion >= 50709
         

            if predIndex == 213:
                return serverVersion >= 80011
         

    def labelKeyword_sempred(self, localctx:LabelKeywordContext, predIndex:int):
            if predIndex == 214:
                return serverVersion < 80017
         

    def identifierKeywordsUnambiguous_sempred(self, localctx:IdentifierKeywordsUnambiguousContext, predIndex:int):
            if predIndex == 215:
                return serverVersion >= 80019
         

    def roleKeyword_sempred(self, localctx:RoleKeywordContext, predIndex:int):
            if predIndex == 216:
                return serverVersion < 80017
         

    def roleOrIdentifierKeyword_sempred(self, localctx:RoleOrIdentifierKeywordContext, predIndex:int):
            if predIndex == 217:
                return serverVersion >= 50709
         

            if predIndex == 218:
                return serverVersion >= 80000
         

    def roleOrLabelKeyword_sempred(self, localctx:RoleOrLabelKeywordContext, predIndex:int):
            if predIndex == 219:
                return serverVersion < 50709
         

            if predIndex == 220:
                return serverVersion < 80000
         

            if predIndex == 221:
                return serverVersion >= 80000
         

            if predIndex == 222:
                return serverVersion >= 80014
         




